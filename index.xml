<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Into the Unknown</title>
<link>https://stephen137.github.io/index.html</link>
<atom:link href="https://stephen137.github.io/index.xml" rel="self" type="application/rss+xml"/>
<description>A great sample blog</description>
<image>
<url>https://stephen137.github.io/Truth_or_Consequences.jpg</url>
<title>Into the Unknown</title>
<link>https://stephen137.github.io/index.html</link>
</image>
<generator>quarto-1.1</generator>
<lastBuildDate>Thu, 20 Apr 2023 22:00:00 GMT</lastBuildDate>
<item>
  <title>Data Engineering Zoomcamp - Final Project</title>
  <dc:creator>Stephen Barrie</dc:creator>
  <link>https://stephen137.github.io/posts/DE_Zoomcamp_Final_Project/de_zoomcamp_project.html</link>
  <description><![CDATA[ 




<section id="de-zoomcamp---final-project" class="level2">
<h2 class="anchored" data-anchor-id="de-zoomcamp---final-project">DE Zoomcamp - Final Project</h2>
<section id="spotify-1.2-million---project-overview" class="level3">
<h3 class="anchored" data-anchor-id="spotify-1.2-million---project-overview">Spotify 1.2 million - Project Overview</h3>
<p>It’s time to pull everything together I’ve learned during this course and complete an end to end data pipeline project. As a musician I decided to chose a dataset of personal interest to me :</p>
<ul>
<li>audio features of over 1.2 million songs obtained with the Spotify API</li>
</ul>
<p>Acknowledgements to <a href="https://github.com/RodolfoFigueroa">Rodolfo Figueroa</a> for curating the dataset. Kaggle assigned the dataset a solid Usability score of 8.24 which is a good starting point. Whilst this is primarily a data engineering project I will also be carrying out some data pre-processing.</p>
<p>Data logistics is no different from any other form of logistics, in that it will not be possible to move our data from source, in my case a <a href="https://www.kaggle.com/datasets/rodolfofigueroa/spotify-12m-songs">raw csv file held on Kaggle</a> to destination, in my case <a href="https://lookerstudio.google.com/overview">Looker Studio</a> without a few bumps along the way. But by carrying out some preliminary data exploration, and harnessing workflow orchestration tools, we can make the journey as smooth as possible.</p>
<p>So sit back and enjoy the ride ;)</p>
</section>
<section id="project-architecture-technologies" class="level3">
<h3 class="anchored" data-anchor-id="project-architecture-technologies">0. Project architecture &amp; technologies</h3>
<p>Outlined below is an overview of the architecture and technologies that I will be using to unveil some insights from the raw data.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Final_Project/de_zoomcamp_project_files/figure-html/87b214a2-f95c-48d8-a6ae-46e46714961f.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Architecture_Technologies.png</figcaption><p></p>
</figure>
</div>
</section>
<section id="set-up-configuration" class="level3">
<h3 class="anchored" data-anchor-id="set-up-configuration">1. Set up &amp; configuration</h3>
<p><code>Reproducability</code></p>
<p>I use <code>Unbuntu on Windows 20.04.5</code> and like to run things locally from the command line wherever possible, however this project does make use of cloud applications.</p>
<p>A pre-requisite for reproducability of this project is having a Google Cloud account. I set mine up at the beginning of this course. You can follow <a href="https://github.com/DataTalksClub/data-engineering-zoomcamp/blob/main/week_1_basics_n_setup/1_terraform_gcp/2_gcp_overview.md#setup-for-access">these instructions</a> to get up and running.</p>
<p>For the purposes of this specific project, I used <a href="(Infrastructure-as-Code)">Terraform (Infrastructure-as-Code)</a> to automate my cloud resources configuration. I had already set this up locally at the beginning of the course and so only required the following two files to configure my data bucket in Google Cloud Storage, and my Data Warehouse, BigQuery.</p>
<p><code>main.tf</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">terraform {</span>
<span id="cb1-2">  required_version <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"&gt;= 1.0"</span></span>
<span id="cb1-3">  backend <span class="st" style="color: #20794D;">"local"</span> {}  <span class="co" style="color: #5E5E5E;"># Can change from "local" to "gcs" (for google) or "s3" (for aws), if you would like to preserve your tf-state online</span></span>
<span id="cb1-4">  required_providers {</span>
<span id="cb1-5">    google <span class="op" style="color: #5E5E5E;">=</span> {</span>
<span id="cb1-6">      source  <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"hashicorp/google"</span></span>
<span id="cb1-7">    }</span>
<span id="cb1-8">  }</span>
<span id="cb1-9">}</span>
<span id="cb1-10"></span>
<span id="cb1-11">provider <span class="st" style="color: #20794D;">"google"</span> {</span>
<span id="cb1-12">  project <span class="op" style="color: #5E5E5E;">=</span> var.project</span>
<span id="cb1-13">  region <span class="op" style="color: #5E5E5E;">=</span> var.region</span>
<span id="cb1-14">  <span class="op" style="color: #5E5E5E;">//</span> credentials <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">file</span>(var.credentials)  <span class="co" style="color: #5E5E5E;"># Use this if you do not want to set env-var GOOGLE_APPLICATION_CREDENTIALS</span></span>
<span id="cb1-15">}</span>
<span id="cb1-16"></span>
<span id="cb1-17"><span class="co" style="color: #5E5E5E;"># Data Lake Bucket</span></span>
<span id="cb1-18"><span class="co" style="color: #5E5E5E;"># Ref: https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/storage_bucket</span></span>
<span id="cb1-19">resource <span class="st" style="color: #20794D;">"google_storage_bucket"</span> <span class="st" style="color: #20794D;">"data-lake-bucket"</span> {</span>
<span id="cb1-20">  name          <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"$</span><span class="sc" style="color: #5E5E5E;">{local.data_lake_bucket}</span><span class="st" style="color: #20794D;">_$</span><span class="sc" style="color: #5E5E5E;">{var.project}</span><span class="st" style="color: #20794D;">"</span> <span class="co" style="color: #5E5E5E;"># Concatenating DL bucket &amp; Project name for unique naming</span></span>
<span id="cb1-21">  location      <span class="op" style="color: #5E5E5E;">=</span> var.region</span>
<span id="cb1-22"></span>
<span id="cb1-23">  <span class="co" style="color: #5E5E5E;"># Optional, but recommended settings:</span></span>
<span id="cb1-24">  storage_class <span class="op" style="color: #5E5E5E;">=</span> var.storage_class</span>
<span id="cb1-25">  uniform_bucket_level_access <span class="op" style="color: #5E5E5E;">=</span> true</span>
<span id="cb1-26"></span>
<span id="cb1-27">  versioning {</span>
<span id="cb1-28">    enabled     <span class="op" style="color: #5E5E5E;">=</span> true</span>
<span id="cb1-29">  }</span>
<span id="cb1-30"></span>
<span id="cb1-31">  lifecycle_rule {</span>
<span id="cb1-32">    action {</span>
<span id="cb1-33">      <span class="bu" style="color: null;">type</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"Delete"</span></span>
<span id="cb1-34">    }</span>
<span id="cb1-35">    condition {</span>
<span id="cb1-36">      age <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">30</span>  <span class="op" style="color: #5E5E5E;">//</span> days</span>
<span id="cb1-37">    }</span>
<span id="cb1-38">  }</span>
<span id="cb1-39"></span>
<span id="cb1-40">  force_destroy <span class="op" style="color: #5E5E5E;">=</span> true</span>
<span id="cb1-41">}</span>
<span id="cb1-42"></span>
<span id="cb1-43"><span class="co" style="color: #5E5E5E;"># DWH</span></span>
<span id="cb1-44"><span class="co" style="color: #5E5E5E;"># Ref: https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/bigquery_dataset</span></span>
<span id="cb1-45">resource <span class="st" style="color: #20794D;">"google_bigquery_dataset"</span> <span class="st" style="color: #20794D;">"dataset"</span> {</span>
<span id="cb1-46">  dataset_id <span class="op" style="color: #5E5E5E;">=</span> var.BQ_DATASET</span>
<span id="cb1-47">  project    <span class="op" style="color: #5E5E5E;">=</span> var.project</span>
<span id="cb1-48">  location   <span class="op" style="color: #5E5E5E;">=</span> var.region</span>
<span id="cb1-49">}</span></code></pre></div>
</div>
<p><code>variables.tf</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="bu" style="color: null;">locals</span> {</span>
<span id="cb2-2">  data_lake_bucket <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"spotify"</span></span>
<span id="cb2-3">}</span>
<span id="cb2-4"></span>
<span id="cb2-5">variable <span class="st" style="color: #20794D;">"project"</span> {</span>
<span id="cb2-6">  description <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"de-zoomcamp-project137"</span></span>
<span id="cb2-7">}</span>
<span id="cb2-8"></span>
<span id="cb2-9">variable <span class="st" style="color: #20794D;">"region"</span> {</span>
<span id="cb2-10">  description <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"Region for GCP resources. Choose as per your location: https://cloud.google.com/about/locations"</span></span>
<span id="cb2-11">  default <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"europe-west6"</span></span>
<span id="cb2-12">  <span class="bu" style="color: null;">type</span> <span class="op" style="color: #5E5E5E;">=</span> string</span>
<span id="cb2-13">}</span>
<span id="cb2-14"></span>
<span id="cb2-15">variable <span class="st" style="color: #20794D;">"storage_class"</span> {</span>
<span id="cb2-16">  description <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"Storage class type for your bucket. Check official docs for more info."</span></span>
<span id="cb2-17">  default <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"STANDARD"</span></span>
<span id="cb2-18">}</span>
<span id="cb2-19"></span>
<span id="cb2-20">variable <span class="st" style="color: #20794D;">"BQ_DATASET"</span> {</span>
<span id="cb2-21">  description <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"BigQuery Dataset that raw data (from GCS) will be written to"</span></span>
<span id="cb2-22">  <span class="bu" style="color: null;">type</span> <span class="op" style="color: #5E5E5E;">=</span> string</span>
<span id="cb2-23">  default <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"spotify"</span></span>
<span id="cb2-24">}</span></code></pre></div>
</div>
<p>Once you have configured these files you can simply run the following prompts from the command line :</p>
<p>Refresh service-account’s auth-token for this session :</p>
<pre><code>gcloud auth application-default login</code></pre>
<p>Initialize state file :</p>
<pre><code>terraform init</code></pre>
<p>Check changes to new infra plan :</p>
<pre><code>terraform plan -var="project=&lt;your-gcp-project-id&gt;"</code></pre>
<p>Asks for approval to the proposed plan, and applies changes to cloud :</p>
<pre><code>terraform apply</code></pre>
<p>For further assistance refer to this <a href="https://github.com/DataTalksClub/data-engineering-zoomcamp/tree/main/week_1_basics_n_setup/1_terraform_gcp/terraform">detailed guide on Local Setup for Terraform and GCP</a>.</p>
</section>
<section id="data-pick-up-preproceesing" class="level3">
<h3 class="anchored" data-anchor-id="data-pick-up-preproceesing">2. Data-pick up &amp; preproceesing</h3>
<p>I was unable to download the file using the link address to the file on Kaggle :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Final_Project/de_zoomcamp_project_files/figure-html/392ee20a-44b7-448b-8d85-b2ad797dd96b.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">kaggle_download.PNG</figcaption><p></p>
</figure>
</div>
<p>As a workaround I resorted to clicking on the <code>Download</code> icon to save the file locally. We can access the file size (memory) and number of rows from the command line using the following commands :</p>
<pre><code>du -h &lt;file_name&gt;
wc -l &lt;file_name&gt;  </code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Final_Project/de_zoomcamp_project_files/figure-html/6af60789-c7d5-4f91-aed5-bc09adcbb956.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">spotify_csv.PNG</figcaption><p></p>
</figure>
</div>
<p>Let’s get to know our data :</p>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb8-2">df <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(<span class="st" style="color: #20794D;">'Prefect/data/spotify.csv'</span>)</span>
<span id="cb8-3">df.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>id</th>
      <th>name</th>
      <th>album</th>
      <th>album_id</th>
      <th>artists</th>
      <th>artist_ids</th>
      <th>track_number</th>
      <th>disc_number</th>
      <th>explicit</th>
      <th>danceability</th>
      <th>...</th>
      <th>speechiness</th>
      <th>acousticness</th>
      <th>instrumentalness</th>
      <th>liveness</th>
      <th>valence</th>
      <th>tempo</th>
      <th>duration_ms</th>
      <th>time_signature</th>
      <th>year</th>
      <th>release_date</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>7lmeHLHBe4nmXzuXc0HDjk</td>
      <td>Testify</td>
      <td>The Battle Of Los Angeles</td>
      <td>2eia0myWFgoHuttJytCxgX</td>
      <td>['Rage Against The Machine']</td>
      <td>['2d0hyoQ5ynDBnkvAbJKORj']</td>
      <td>1</td>
      <td>1</td>
      <td>False</td>
      <td>0.470</td>
      <td>...</td>
      <td>0.0727</td>
      <td>0.02610</td>
      <td>0.000011</td>
      <td>0.3560</td>
      <td>0.503</td>
      <td>117.906</td>
      <td>210133</td>
      <td>4.0</td>
      <td>1999</td>
      <td>1999-11-02</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1wsRitfRRtWyEapl0q22o8</td>
      <td>Guerrilla Radio</td>
      <td>The Battle Of Los Angeles</td>
      <td>2eia0myWFgoHuttJytCxgX</td>
      <td>['Rage Against The Machine']</td>
      <td>['2d0hyoQ5ynDBnkvAbJKORj']</td>
      <td>2</td>
      <td>1</td>
      <td>True</td>
      <td>0.599</td>
      <td>...</td>
      <td>0.1880</td>
      <td>0.01290</td>
      <td>0.000071</td>
      <td>0.1550</td>
      <td>0.489</td>
      <td>103.680</td>
      <td>206200</td>
      <td>4.0</td>
      <td>1999</td>
      <td>1999-11-02</td>
    </tr>
    <tr>
      <th>2</th>
      <td>1hR0fIFK2qRG3f3RF70pb7</td>
      <td>Calm Like a Bomb</td>
      <td>The Battle Of Los Angeles</td>
      <td>2eia0myWFgoHuttJytCxgX</td>
      <td>['Rage Against The Machine']</td>
      <td>['2d0hyoQ5ynDBnkvAbJKORj']</td>
      <td>3</td>
      <td>1</td>
      <td>False</td>
      <td>0.315</td>
      <td>...</td>
      <td>0.4830</td>
      <td>0.02340</td>
      <td>0.000002</td>
      <td>0.1220</td>
      <td>0.370</td>
      <td>149.749</td>
      <td>298893</td>
      <td>4.0</td>
      <td>1999</td>
      <td>1999-11-02</td>
    </tr>
    <tr>
      <th>3</th>
      <td>2lbASgTSoDO7MTuLAXlTW0</td>
      <td>Mic Check</td>
      <td>The Battle Of Los Angeles</td>
      <td>2eia0myWFgoHuttJytCxgX</td>
      <td>['Rage Against The Machine']</td>
      <td>['2d0hyoQ5ynDBnkvAbJKORj']</td>
      <td>4</td>
      <td>1</td>
      <td>True</td>
      <td>0.440</td>
      <td>...</td>
      <td>0.2370</td>
      <td>0.16300</td>
      <td>0.000004</td>
      <td>0.1210</td>
      <td>0.574</td>
      <td>96.752</td>
      <td>213640</td>
      <td>4.0</td>
      <td>1999</td>
      <td>1999-11-02</td>
    </tr>
    <tr>
      <th>4</th>
      <td>1MQTmpYOZ6fcMQc56Hdo7T</td>
      <td>Sleep Now In the Fire</td>
      <td>The Battle Of Los Angeles</td>
      <td>2eia0myWFgoHuttJytCxgX</td>
      <td>['Rage Against The Machine']</td>
      <td>['2d0hyoQ5ynDBnkvAbJKORj']</td>
      <td>5</td>
      <td>1</td>
      <td>False</td>
      <td>0.426</td>
      <td>...</td>
      <td>0.0701</td>
      <td>0.00162</td>
      <td>0.105000</td>
      <td>0.0789</td>
      <td>0.539</td>
      <td>127.059</td>
      <td>205600</td>
      <td>4.0</td>
      <td>1999</td>
      <td>1999-11-02</td>
    </tr>
  </tbody>
</table>
<p>5 rows × 24 columns</p>
</div>
</div>
</div>
<p>On first look the dataset appears to be fairly clean - the <code>artists</code> name are wrapped in <code>[' ']</code> and some of the values for track features are taken to a large number of decimal places. We’ll include these clean up as a <code>flow</code> as part of a data ingestion script using <code>Prefect</code> which will read the csv, convert to parquet format, and upload to Google Cloud Storage.</p>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">df.info()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;class 'pandas.core.frame.DataFrame'&gt;
RangeIndex: 1204025 entries, 0 to 1204024
Data columns (total 24 columns):
 #   Column            Non-Null Count    Dtype  
---  ------            --------------    -----  
 0   id                1204025 non-null  object 
 1   name              1204025 non-null  object 
 2   album             1204025 non-null  object 
 3   album_id          1204025 non-null  object 
 4   artists           1204025 non-null  object 
 5   artist_ids        1204025 non-null  object 
 6   track_number      1204025 non-null  int64  
 7   disc_number       1204025 non-null  int64  
 8   explicit          1204025 non-null  bool   
 9   danceability      1204025 non-null  float64
 10  energy            1204025 non-null  float64
 11  key               1204025 non-null  int64  
 12  loudness          1204025 non-null  float64
 13  mode              1204025 non-null  int64  
 14  speechiness       1204025 non-null  float64
 15  acousticness      1204025 non-null  float64
 16  instrumentalness  1204025 non-null  float64
 17  liveness          1204025 non-null  float64
 18  valence           1204025 non-null  float64
 19  tempo             1204025 non-null  float64
 20  duration_ms       1204025 non-null  int64  
 21  time_signature    1204025 non-null  float64
 22  year              1204025 non-null  int64  
 23  release_date      1204025 non-null  object 
dtypes: bool(1), float64(10), int64(6), object(7)
memory usage: 212.4+ MB</code></pre>
</div>
</div>
<p><code>df.info</code> gives us the number of entries, in our case <code>1,204,025</code>, columns <code>24</code>, number of non-null entries for each column (in our case same as number of entries, so no NULL values), and the datatype for each column.</p>
<p>It is vital to ensure that the data is in the correct format for our analytics project. Off the bat, I can see that the <code>year</code> and <code>release_date</code> datatypes will need to be converted to a date type.</p>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">df.describe()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>track_number</th>
      <th>disc_number</th>
      <th>danceability</th>
      <th>energy</th>
      <th>key</th>
      <th>loudness</th>
      <th>mode</th>
      <th>speechiness</th>
      <th>acousticness</th>
      <th>instrumentalness</th>
      <th>liveness</th>
      <th>valence</th>
      <th>tempo</th>
      <th>duration_ms</th>
      <th>time_signature</th>
      <th>year</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>count</th>
      <td>1.204025e+06</td>
      <td>1.204025e+06</td>
      <td>1.204025e+06</td>
      <td>1.204025e+06</td>
      <td>1.204025e+06</td>
      <td>1.204025e+06</td>
      <td>1.204025e+06</td>
      <td>1.204025e+06</td>
      <td>1.204025e+06</td>
      <td>1.204025e+06</td>
      <td>1.204025e+06</td>
      <td>1.204025e+06</td>
      <td>1.204025e+06</td>
      <td>1.204025e+06</td>
      <td>1.204025e+06</td>
      <td>1.204025e+06</td>
    </tr>
    <tr>
      <th>mean</th>
      <td>7.656352e+00</td>
      <td>1.055906e+00</td>
      <td>4.930565e-01</td>
      <td>5.095363e-01</td>
      <td>5.194151e+00</td>
      <td>-1.180870e+01</td>
      <td>6.714595e-01</td>
      <td>8.438219e-02</td>
      <td>4.467511e-01</td>
      <td>2.828605e-01</td>
      <td>2.015994e-01</td>
      <td>4.279866e-01</td>
      <td>1.176344e+02</td>
      <td>2.488399e+05</td>
      <td>3.832494e+00</td>
      <td>2.007328e+03</td>
    </tr>
    <tr>
      <th>std</th>
      <td>5.994977e+00</td>
      <td>2.953752e-01</td>
      <td>1.896694e-01</td>
      <td>2.946839e-01</td>
      <td>3.536731e+00</td>
      <td>6.982132e+00</td>
      <td>4.696827e-01</td>
      <td>1.159914e-01</td>
      <td>3.852014e-01</td>
      <td>3.762844e-01</td>
      <td>1.804591e-01</td>
      <td>2.704846e-01</td>
      <td>3.093705e+01</td>
      <td>1.622104e+05</td>
      <td>5.611826e-01</td>
      <td>1.210117e+01</td>
    </tr>
    <tr>
      <th>min</th>
      <td>1.000000e+00</td>
      <td>1.000000e+00</td>
      <td>0.000000e+00</td>
      <td>0.000000e+00</td>
      <td>0.000000e+00</td>
      <td>-6.000000e+01</td>
      <td>0.000000e+00</td>
      <td>0.000000e+00</td>
      <td>0.000000e+00</td>
      <td>0.000000e+00</td>
      <td>0.000000e+00</td>
      <td>0.000000e+00</td>
      <td>0.000000e+00</td>
      <td>1.000000e+03</td>
      <td>0.000000e+00</td>
      <td>0.000000e+00</td>
    </tr>
    <tr>
      <th>25%</th>
      <td>3.000000e+00</td>
      <td>1.000000e+00</td>
      <td>3.560000e-01</td>
      <td>2.520000e-01</td>
      <td>2.000000e+00</td>
      <td>-1.525400e+01</td>
      <td>0.000000e+00</td>
      <td>3.510000e-02</td>
      <td>3.760000e-02</td>
      <td>7.600000e-06</td>
      <td>9.680000e-02</td>
      <td>1.910000e-01</td>
      <td>9.405400e+01</td>
      <td>1.740900e+05</td>
      <td>4.000000e+00</td>
      <td>2.002000e+03</td>
    </tr>
    <tr>
      <th>50%</th>
      <td>7.000000e+00</td>
      <td>1.000000e+00</td>
      <td>5.010000e-01</td>
      <td>5.240000e-01</td>
      <td>5.000000e+00</td>
      <td>-9.791000e+00</td>
      <td>1.000000e+00</td>
      <td>4.460000e-02</td>
      <td>3.890000e-01</td>
      <td>8.080000e-03</td>
      <td>1.250000e-01</td>
      <td>4.030000e-01</td>
      <td>1.167260e+02</td>
      <td>2.243390e+05</td>
      <td>4.000000e+00</td>
      <td>2.009000e+03</td>
    </tr>
    <tr>
      <th>75%</th>
      <td>1.000000e+01</td>
      <td>1.000000e+00</td>
      <td>6.330000e-01</td>
      <td>7.660000e-01</td>
      <td>8.000000e+00</td>
      <td>-6.717000e+00</td>
      <td>1.000000e+00</td>
      <td>7.230000e-02</td>
      <td>8.610000e-01</td>
      <td>7.190000e-01</td>
      <td>2.450000e-01</td>
      <td>6.440000e-01</td>
      <td>1.370460e+02</td>
      <td>2.858400e+05</td>
      <td>4.000000e+00</td>
      <td>2.015000e+03</td>
    </tr>
    <tr>
      <th>max</th>
      <td>5.000000e+01</td>
      <td>1.300000e+01</td>
      <td>1.000000e+00</td>
      <td>1.000000e+00</td>
      <td>1.100000e+01</td>
      <td>7.234000e+00</td>
      <td>1.000000e+00</td>
      <td>9.690000e-01</td>
      <td>9.960000e-01</td>
      <td>1.000000e+00</td>
      <td>1.000000e+00</td>
      <td>1.000000e+00</td>
      <td>2.489340e+02</td>
      <td>6.061090e+06</td>
      <td>5.000000e+00</td>
      <td>2.020000e+03</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>This gives us a very useful overview of our dataset and can highlight anomalies worthy of further investigation. <code>min</code> and <code>max</code> in particular allow us to make a very quick sense check of the range of the data, and might unveil potential outliers.</p>
<p>Take a look at our <code>year</code> column - the range of values are <code>0 to 2020</code>. So, it looks like imputed values have been used where information was not available. This may cause problems later when we attempt to convert the datatype for <code>year</code> which is currently <code>int64</code>.</p>
<p>We can use <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.iloc.html">.iloc</a> to <em>access</em> a group of rows and columns by index or <a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.loc.html">.loc</a> to <em>access</em> a group of rows and columns by name :</p>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">df.loc[df[<span class="st" style="color: #20794D;">'year'</span>] <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span> ]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>id</th>
      <th>name</th>
      <th>album</th>
      <th>album_id</th>
      <th>artists</th>
      <th>artist_ids</th>
      <th>track_number</th>
      <th>disc_number</th>
      <th>explicit</th>
      <th>danceability</th>
      <th>...</th>
      <th>speechiness</th>
      <th>acousticness</th>
      <th>instrumentalness</th>
      <th>liveness</th>
      <th>valence</th>
      <th>tempo</th>
      <th>duration_ms</th>
      <th>time_signature</th>
      <th>year</th>
      <th>release_date</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>815351</th>
      <td>035h5flqzwF6I5CTfsdHPA</td>
      <td>Jimmy Neutron</td>
      <td>Optimism 2</td>
      <td>211vSdhxt58A943r9QWRKo</td>
      <td>['iCizzle']</td>
      <td>['7arv4matK2uKJrdtPSxU4i']</td>
      <td>1</td>
      <td>1</td>
      <td>False</td>
      <td>0.795</td>
      <td>...</td>
      <td>0.0519</td>
      <td>0.01560</td>
      <td>0.439</td>
      <td>0.0860</td>
      <td>0.389</td>
      <td>109.985</td>
      <td>183000</td>
      <td>4.0</td>
      <td>0</td>
      <td>0000</td>
    </tr>
    <tr>
      <th>815352</th>
      <td>49x05fLGDKCsCUA7CG0VpY</td>
      <td>I Luv You</td>
      <td>Optimism 2</td>
      <td>211vSdhxt58A943r9QWRKo</td>
      <td>['iCizzle']</td>
      <td>['7arv4matK2uKJrdtPSxU4i']</td>
      <td>2</td>
      <td>1</td>
      <td>False</td>
      <td>0.762</td>
      <td>...</td>
      <td>0.0950</td>
      <td>0.88700</td>
      <td>0.909</td>
      <td>0.1060</td>
      <td>0.728</td>
      <td>92.962</td>
      <td>145161</td>
      <td>4.0</td>
      <td>0</td>
      <td>0000</td>
    </tr>
    <tr>
      <th>815353</th>
      <td>4mNLlSoZOqoPauBAF3bIpx</td>
      <td>My Heart</td>
      <td>Optimism 2</td>
      <td>211vSdhxt58A943r9QWRKo</td>
      <td>['iCizzle']</td>
      <td>['7arv4matK2uKJrdtPSxU4i']</td>
      <td>3</td>
      <td>1</td>
      <td>False</td>
      <td>0.671</td>
      <td>...</td>
      <td>0.0662</td>
      <td>0.00956</td>
      <td>0.902</td>
      <td>0.0455</td>
      <td>0.893</td>
      <td>97.865</td>
      <td>176561</td>
      <td>4.0</td>
      <td>0</td>
      <td>0000</td>
    </tr>
    <tr>
      <th>815354</th>
      <td>7w5iwI0wnIiopbCFNe1Txo</td>
      <td>I Am (Invincible)</td>
      <td>Optimism 2</td>
      <td>211vSdhxt58A943r9QWRKo</td>
      <td>['iCizzle']</td>
      <td>['7arv4matK2uKJrdtPSxU4i']</td>
      <td>4</td>
      <td>1</td>
      <td>False</td>
      <td>0.759</td>
      <td>...</td>
      <td>0.1280</td>
      <td>0.00544</td>
      <td>0.895</td>
      <td>0.0538</td>
      <td>0.537</td>
      <td>89.989</td>
      <td>192000</td>
      <td>4.0</td>
      <td>0</td>
      <td>0000</td>
    </tr>
    <tr>
      <th>815355</th>
      <td>2Tfy2R2uiWVwxHQUT6oGNp</td>
      <td>Flower Power</td>
      <td>Optimism 2</td>
      <td>211vSdhxt58A943r9QWRKo</td>
      <td>['iCizzle']</td>
      <td>['7arv4matK2uKJrdtPSxU4i']</td>
      <td>5</td>
      <td>1</td>
      <td>False</td>
      <td>0.657</td>
      <td>...</td>
      <td>0.2810</td>
      <td>0.01800</td>
      <td>0.245</td>
      <td>0.2410</td>
      <td>0.964</td>
      <td>179.904</td>
      <td>138666</td>
      <td>4.0</td>
      <td>0</td>
      <td>0000</td>
    </tr>
    <tr>
      <th>815356</th>
      <td>05cTbSPQyha6z7opYwH67O</td>
      <td>Heard It Low</td>
      <td>Optimism 2</td>
      <td>211vSdhxt58A943r9QWRKo</td>
      <td>['iCizzle']</td>
      <td>['7arv4matK2uKJrdtPSxU4i']</td>
      <td>6</td>
      <td>1</td>
      <td>False</td>
      <td>0.728</td>
      <td>...</td>
      <td>0.0673</td>
      <td>0.00785</td>
      <td>0.275</td>
      <td>0.0865</td>
      <td>0.662</td>
      <td>90.010</td>
      <td>138667</td>
      <td>4.0</td>
      <td>0</td>
      <td>0000</td>
    </tr>
    <tr>
      <th>815357</th>
      <td>1fYK5xB8csOXVEqApkzzm0</td>
      <td>Hangin On</td>
      <td>Optimism 2</td>
      <td>211vSdhxt58A943r9QWRKo</td>
      <td>['iCizzle']</td>
      <td>['7arv4matK2uKJrdtPSxU4i']</td>
      <td>7</td>
      <td>1</td>
      <td>False</td>
      <td>0.822</td>
      <td>...</td>
      <td>0.0758</td>
      <td>0.11500</td>
      <td>0.881</td>
      <td>0.1210</td>
      <td>0.766</td>
      <td>119.998</td>
      <td>142620</td>
      <td>4.0</td>
      <td>0</td>
      <td>0000</td>
    </tr>
    <tr>
      <th>815358</th>
      <td>4G51c7cWzB6CLaRq9sYj2w</td>
      <td>God Loves You</td>
      <td>Optimism 2</td>
      <td>211vSdhxt58A943r9QWRKo</td>
      <td>['iCizzle']</td>
      <td>['7arv4matK2uKJrdtPSxU4i']</td>
      <td>8</td>
      <td>1</td>
      <td>False</td>
      <td>0.845</td>
      <td>...</td>
      <td>0.0662</td>
      <td>0.00274</td>
      <td>0.548</td>
      <td>0.0393</td>
      <td>0.472</td>
      <td>120.090</td>
      <td>161000</td>
      <td>4.0</td>
      <td>0</td>
      <td>0000</td>
    </tr>
    <tr>
      <th>815359</th>
      <td>45fcUAjXlzDxTwSzoUaO6l</td>
      <td>You In My Life</td>
      <td>Optimism 2</td>
      <td>211vSdhxt58A943r9QWRKo</td>
      <td>['iCizzle']</td>
      <td>['7arv4matK2uKJrdtPSxU4i']</td>
      <td>9</td>
      <td>1</td>
      <td>False</td>
      <td>0.957</td>
      <td>...</td>
      <td>0.0623</td>
      <td>0.13300</td>
      <td>0.857</td>
      <td>0.0968</td>
      <td>0.258</td>
      <td>112.987</td>
      <td>214867</td>
      <td>4.0</td>
      <td>0</td>
      <td>0000</td>
    </tr>
    <tr>
      <th>815360</th>
      <td>35TcKSN5hsGcZLrFPkUvIv</td>
      <td>I Wonder</td>
      <td>Optimism 2</td>
      <td>211vSdhxt58A943r9QWRKo</td>
      <td>['iCizzle']</td>
      <td>['7arv4matK2uKJrdtPSxU4i']</td>
      <td>10</td>
      <td>1</td>
      <td>False</td>
      <td>0.659</td>
      <td>...</td>
      <td>0.0581</td>
      <td>0.00196</td>
      <td>0.854</td>
      <td>0.3710</td>
      <td>0.877</td>
      <td>146.020</td>
      <td>180822</td>
      <td>4.0</td>
      <td>0</td>
      <td>0000</td>
    </tr>
  </tbody>
</table>
<p>10 rows × 24 columns</p>
</div>
</div>
</div>
<p>So, the tracks from the album <code>Optimism 2</code> by the artist <code>iCizzle</code> have been given a <code>year</code> value of <code>0</code>. A quick <a href="https://www.google.com/search?q=Icizzle+Optimism+2&amp;stick=H4sIAAAAAAAAAONgFuLSz9U3KDeoSLfMVuLVT9c3NEwzMzYpKDS31BLyLS3OTHYsKsksLgnJd8xJKs1dxCrkmZxZVZWTquBfUJKZm1mcq2AEAKUBcIxGAAAA&amp;sa=X&amp;ved=2ahUKEwjY8uCX07b-AhUO_ioKHZarBwQQri56BAgkEBU&amp;biw=1920&amp;bih=973&amp;dpr=1">internet search</a> and we can see the year should be <code>2018</code>. Now that we have located our anomalies, we can update these values using <a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.loc.html">.loc</a> :</p>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">df.loc[<span class="dv" style="color: #AD0000;">815351</span>:<span class="dv" style="color: #AD0000;">815360</span>,<span class="st" style="color: #20794D;">'year'</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">2018</span></span></code></pre></div>
</div>
<p>Let’s check that worked :</p>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">df.loc[<span class="dv" style="color: #AD0000;">815351</span>:<span class="dv" style="color: #AD0000;">815360</span>] </span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>id</th>
      <th>name</th>
      <th>album</th>
      <th>album_id</th>
      <th>artists</th>
      <th>artist_ids</th>
      <th>track_number</th>
      <th>disc_number</th>
      <th>explicit</th>
      <th>danceability</th>
      <th>...</th>
      <th>speechiness</th>
      <th>acousticness</th>
      <th>instrumentalness</th>
      <th>liveness</th>
      <th>valence</th>
      <th>tempo</th>
      <th>duration_ms</th>
      <th>time_signature</th>
      <th>year</th>
      <th>release_date</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>815351</th>
      <td>035h5flqzwF6I5CTfsdHPA</td>
      <td>Jimmy Neutron</td>
      <td>Optimism 2</td>
      <td>211vSdhxt58A943r9QWRKo</td>
      <td>['iCizzle']</td>
      <td>['7arv4matK2uKJrdtPSxU4i']</td>
      <td>1</td>
      <td>1</td>
      <td>False</td>
      <td>0.795</td>
      <td>...</td>
      <td>0.0519</td>
      <td>0.01560</td>
      <td>0.439</td>
      <td>0.0860</td>
      <td>0.389</td>
      <td>109.985</td>
      <td>183000</td>
      <td>4.0</td>
      <td>2018</td>
      <td>0000</td>
    </tr>
    <tr>
      <th>815352</th>
      <td>49x05fLGDKCsCUA7CG0VpY</td>
      <td>I Luv You</td>
      <td>Optimism 2</td>
      <td>211vSdhxt58A943r9QWRKo</td>
      <td>['iCizzle']</td>
      <td>['7arv4matK2uKJrdtPSxU4i']</td>
      <td>2</td>
      <td>1</td>
      <td>False</td>
      <td>0.762</td>
      <td>...</td>
      <td>0.0950</td>
      <td>0.88700</td>
      <td>0.909</td>
      <td>0.1060</td>
      <td>0.728</td>
      <td>92.962</td>
      <td>145161</td>
      <td>4.0</td>
      <td>2018</td>
      <td>0000</td>
    </tr>
    <tr>
      <th>815353</th>
      <td>4mNLlSoZOqoPauBAF3bIpx</td>
      <td>My Heart</td>
      <td>Optimism 2</td>
      <td>211vSdhxt58A943r9QWRKo</td>
      <td>['iCizzle']</td>
      <td>['7arv4matK2uKJrdtPSxU4i']</td>
      <td>3</td>
      <td>1</td>
      <td>False</td>
      <td>0.671</td>
      <td>...</td>
      <td>0.0662</td>
      <td>0.00956</td>
      <td>0.902</td>
      <td>0.0455</td>
      <td>0.893</td>
      <td>97.865</td>
      <td>176561</td>
      <td>4.0</td>
      <td>2018</td>
      <td>0000</td>
    </tr>
    <tr>
      <th>815354</th>
      <td>7w5iwI0wnIiopbCFNe1Txo</td>
      <td>I Am (Invincible)</td>
      <td>Optimism 2</td>
      <td>211vSdhxt58A943r9QWRKo</td>
      <td>['iCizzle']</td>
      <td>['7arv4matK2uKJrdtPSxU4i']</td>
      <td>4</td>
      <td>1</td>
      <td>False</td>
      <td>0.759</td>
      <td>...</td>
      <td>0.1280</td>
      <td>0.00544</td>
      <td>0.895</td>
      <td>0.0538</td>
      <td>0.537</td>
      <td>89.989</td>
      <td>192000</td>
      <td>4.0</td>
      <td>2018</td>
      <td>0000</td>
    </tr>
    <tr>
      <th>815355</th>
      <td>2Tfy2R2uiWVwxHQUT6oGNp</td>
      <td>Flower Power</td>
      <td>Optimism 2</td>
      <td>211vSdhxt58A943r9QWRKo</td>
      <td>['iCizzle']</td>
      <td>['7arv4matK2uKJrdtPSxU4i']</td>
      <td>5</td>
      <td>1</td>
      <td>False</td>
      <td>0.657</td>
      <td>...</td>
      <td>0.2810</td>
      <td>0.01800</td>
      <td>0.245</td>
      <td>0.2410</td>
      <td>0.964</td>
      <td>179.904</td>
      <td>138666</td>
      <td>4.0</td>
      <td>2018</td>
      <td>0000</td>
    </tr>
    <tr>
      <th>815356</th>
      <td>05cTbSPQyha6z7opYwH67O</td>
      <td>Heard It Low</td>
      <td>Optimism 2</td>
      <td>211vSdhxt58A943r9QWRKo</td>
      <td>['iCizzle']</td>
      <td>['7arv4matK2uKJrdtPSxU4i']</td>
      <td>6</td>
      <td>1</td>
      <td>False</td>
      <td>0.728</td>
      <td>...</td>
      <td>0.0673</td>
      <td>0.00785</td>
      <td>0.275</td>
      <td>0.0865</td>
      <td>0.662</td>
      <td>90.010</td>
      <td>138667</td>
      <td>4.0</td>
      <td>2018</td>
      <td>0000</td>
    </tr>
    <tr>
      <th>815357</th>
      <td>1fYK5xB8csOXVEqApkzzm0</td>
      <td>Hangin On</td>
      <td>Optimism 2</td>
      <td>211vSdhxt58A943r9QWRKo</td>
      <td>['iCizzle']</td>
      <td>['7arv4matK2uKJrdtPSxU4i']</td>
      <td>7</td>
      <td>1</td>
      <td>False</td>
      <td>0.822</td>
      <td>...</td>
      <td>0.0758</td>
      <td>0.11500</td>
      <td>0.881</td>
      <td>0.1210</td>
      <td>0.766</td>
      <td>119.998</td>
      <td>142620</td>
      <td>4.0</td>
      <td>2018</td>
      <td>0000</td>
    </tr>
    <tr>
      <th>815358</th>
      <td>4G51c7cWzB6CLaRq9sYj2w</td>
      <td>God Loves You</td>
      <td>Optimism 2</td>
      <td>211vSdhxt58A943r9QWRKo</td>
      <td>['iCizzle']</td>
      <td>['7arv4matK2uKJrdtPSxU4i']</td>
      <td>8</td>
      <td>1</td>
      <td>False</td>
      <td>0.845</td>
      <td>...</td>
      <td>0.0662</td>
      <td>0.00274</td>
      <td>0.548</td>
      <td>0.0393</td>
      <td>0.472</td>
      <td>120.090</td>
      <td>161000</td>
      <td>4.0</td>
      <td>2018</td>
      <td>0000</td>
    </tr>
    <tr>
      <th>815359</th>
      <td>45fcUAjXlzDxTwSzoUaO6l</td>
      <td>You In My Life</td>
      <td>Optimism 2</td>
      <td>211vSdhxt58A943r9QWRKo</td>
      <td>['iCizzle']</td>
      <td>['7arv4matK2uKJrdtPSxU4i']</td>
      <td>9</td>
      <td>1</td>
      <td>False</td>
      <td>0.957</td>
      <td>...</td>
      <td>0.0623</td>
      <td>0.13300</td>
      <td>0.857</td>
      <td>0.0968</td>
      <td>0.258</td>
      <td>112.987</td>
      <td>214867</td>
      <td>4.0</td>
      <td>2018</td>
      <td>0000</td>
    </tr>
    <tr>
      <th>815360</th>
      <td>35TcKSN5hsGcZLrFPkUvIv</td>
      <td>I Wonder</td>
      <td>Optimism 2</td>
      <td>211vSdhxt58A943r9QWRKo</td>
      <td>['iCizzle']</td>
      <td>['7arv4matK2uKJrdtPSxU4i']</td>
      <td>10</td>
      <td>1</td>
      <td>False</td>
      <td>0.659</td>
      <td>...</td>
      <td>0.0581</td>
      <td>0.00196</td>
      <td>0.854</td>
      <td>0.3710</td>
      <td>0.877</td>
      <td>146.020</td>
      <td>180822</td>
      <td>4.0</td>
      <td>2018</td>
      <td>0000</td>
    </tr>
  </tbody>
</table>
<p>10 rows × 24 columns</p>
</div>
</div>
</div>
<p>We have successfully updated the release year to <code>2018</code>. Let’s check the range of dates once more :</p>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">df.year.describe()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>count    1.204025e+06
mean     2.007345e+03
std      1.062889e+01
min      1.900000e+03
25%      2.002000e+03
50%      2.009000e+03
75%      2.015000e+03
max      2.020000e+03
Name: year, dtype: float64</code></pre>
</div>
</div>
<p>So, the minimum year is now 1900. Again, this seems like it might be another imputed value. Let’s check :</p>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">df.loc[df[<span class="st" style="color: #20794D;">'year'</span>] <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">1900</span> ]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>id</th>
      <th>name</th>
      <th>album</th>
      <th>album_id</th>
      <th>artists</th>
      <th>artist_ids</th>
      <th>track_number</th>
      <th>disc_number</th>
      <th>explicit</th>
      <th>danceability</th>
      <th>...</th>
      <th>speechiness</th>
      <th>acousticness</th>
      <th>instrumentalness</th>
      <th>liveness</th>
      <th>valence</th>
      <th>tempo</th>
      <th>duration_ms</th>
      <th>time_signature</th>
      <th>year</th>
      <th>release_date</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>450071</th>
      <td>3xPatAieFSuGIuQfHMDvSw</td>
      <td>Arabian Waltz</td>
      <td>Arabian Waltz</td>
      <td>1ggHQJ48NFfYhGu6VznK8K</td>
      <td>['Rabih Abou-Khalil']</td>
      <td>['7cM9Y2LNnnmmqivaEuH8vT']</td>
      <td>1</td>
      <td>1</td>
      <td>False</td>
      <td>0.533</td>
      <td>...</td>
      <td>0.0576</td>
      <td>0.875</td>
      <td>0.859</td>
      <td>0.0887</td>
      <td>0.8350</td>
      <td>115.746</td>
      <td>493867</td>
      <td>3.0</td>
      <td>1900</td>
      <td>1900-01-01</td>
    </tr>
    <tr>
      <th>450072</th>
      <td>5vpx0WtYVtKOFu4V65NkUi</td>
      <td>Dreams Of A Dying City</td>
      <td>Arabian Waltz</td>
      <td>1ggHQJ48NFfYhGu6VznK8K</td>
      <td>['Rabih Abou-Khalil']</td>
      <td>['7cM9Y2LNnnmmqivaEuH8vT']</td>
      <td>2</td>
      <td>1</td>
      <td>False</td>
      <td>0.476</td>
      <td>...</td>
      <td>0.0334</td>
      <td>0.843</td>
      <td>0.893</td>
      <td>0.1060</td>
      <td>0.5710</td>
      <td>92.340</td>
      <td>730667</td>
      <td>1.0</td>
      <td>1900</td>
      <td>1900-01-01</td>
    </tr>
    <tr>
      <th>450073</th>
      <td>0G7vBbeWCcRISsHwcivFgl</td>
      <td>Ornette Never Sleeps</td>
      <td>Arabian Waltz</td>
      <td>1ggHQJ48NFfYhGu6VznK8K</td>
      <td>['Rabih Abou-Khalil']</td>
      <td>['7cM9Y2LNnnmmqivaEuH8vT']</td>
      <td>3</td>
      <td>1</td>
      <td>False</td>
      <td>0.605</td>
      <td>...</td>
      <td>0.0457</td>
      <td>0.912</td>
      <td>0.693</td>
      <td>0.1170</td>
      <td>0.7250</td>
      <td>139.820</td>
      <td>421760</td>
      <td>4.0</td>
      <td>1900</td>
      <td>1900-01-01</td>
    </tr>
    <tr>
      <th>450074</th>
      <td>6YjrfDT2TPp6pflsCSBHPH</td>
      <td>Georgina</td>
      <td>Arabian Waltz</td>
      <td>1ggHQJ48NFfYhGu6VznK8K</td>
      <td>['Rabih Abou-Khalil']</td>
      <td>['7cM9Y2LNnnmmqivaEuH8vT']</td>
      <td>4</td>
      <td>1</td>
      <td>False</td>
      <td>0.406</td>
      <td>...</td>
      <td>0.0433</td>
      <td>0.849</td>
      <td>0.866</td>
      <td>0.1020</td>
      <td>0.6200</td>
      <td>93.729</td>
      <td>672707</td>
      <td>4.0</td>
      <td>1900</td>
      <td>1900-01-01</td>
    </tr>
    <tr>
      <th>450075</th>
      <td>2Nq317w5G1gmuhilTCiiqR</td>
      <td>No Visa</td>
      <td>Arabian Waltz</td>
      <td>1ggHQJ48NFfYhGu6VznK8K</td>
      <td>['Rabih Abou-Khalil']</td>
      <td>['7cM9Y2LNnnmmqivaEuH8vT']</td>
      <td>5</td>
      <td>1</td>
      <td>False</td>
      <td>0.577</td>
      <td>...</td>
      <td>0.0430</td>
      <td>0.936</td>
      <td>0.865</td>
      <td>0.0999</td>
      <td>0.5010</td>
      <td>96.415</td>
      <td>601027</td>
      <td>4.0</td>
      <td>1900</td>
      <td>1900-01-01</td>
    </tr>
    <tr>
      <th>450076</th>
      <td>6PzeE7vvynVguz04STK6RL</td>
      <td>The Pain After</td>
      <td>Arabian Waltz</td>
      <td>1ggHQJ48NFfYhGu6VznK8K</td>
      <td>['Rabih Abou-Khalil']</td>
      <td>['7cM9Y2LNnnmmqivaEuH8vT']</td>
      <td>6</td>
      <td>1</td>
      <td>False</td>
      <td>0.291</td>
      <td>...</td>
      <td>0.0477</td>
      <td>0.956</td>
      <td>0.939</td>
      <td>0.1460</td>
      <td>0.0959</td>
      <td>71.087</td>
      <td>566840</td>
      <td>3.0</td>
      <td>1900</td>
      <td>1900-01-01</td>
    </tr>
    <tr>
      <th>459980</th>
      <td>4DZ63H1bRMmiTcXiQhERxv</td>
      <td>Catania</td>
      <td>Al-Jadida</td>
      <td>2T6FKoeG7EXR0WAsFyXbSq</td>
      <td>['Rabih Abou-Khalil']</td>
      <td>['7cM9Y2LNnnmmqivaEuH8vT']</td>
      <td>1</td>
      <td>1</td>
      <td>False</td>
      <td>0.465</td>
      <td>...</td>
      <td>0.0742</td>
      <td>0.414</td>
      <td>0.089</td>
      <td>0.0936</td>
      <td>0.3790</td>
      <td>163.939</td>
      <td>465000</td>
      <td>5.0</td>
      <td>1900</td>
      <td>1900-01-01</td>
    </tr>
    <tr>
      <th>459981</th>
      <td>6QqZn286ICbbhTjNBPlgNY</td>
      <td>Nashwa</td>
      <td>Al-Jadida</td>
      <td>2T6FKoeG7EXR0WAsFyXbSq</td>
      <td>['Rabih Abou-Khalil']</td>
      <td>['7cM9Y2LNnnmmqivaEuH8vT']</td>
      <td>2</td>
      <td>1</td>
      <td>False</td>
      <td>0.436</td>
      <td>...</td>
      <td>0.0683</td>
      <td>0.802</td>
      <td>0.758</td>
      <td>0.1070</td>
      <td>0.1580</td>
      <td>171.006</td>
      <td>578000</td>
      <td>5.0</td>
      <td>1900</td>
      <td>1900-01-01</td>
    </tr>
    <tr>
      <th>459982</th>
      <td>5Mw5YkQkHuGqYQL5XMrUOI</td>
      <td>An Evening With Jerry</td>
      <td>Al-Jadida</td>
      <td>2T6FKoeG7EXR0WAsFyXbSq</td>
      <td>['Rabih Abou-Khalil']</td>
      <td>['7cM9Y2LNnnmmqivaEuH8vT']</td>
      <td>3</td>
      <td>1</td>
      <td>False</td>
      <td>0.511</td>
      <td>...</td>
      <td>0.0350</td>
      <td>0.211</td>
      <td>0.550</td>
      <td>0.1900</td>
      <td>0.2530</td>
      <td>144.884</td>
      <td>423000</td>
      <td>4.0</td>
      <td>1900</td>
      <td>1900-01-01</td>
    </tr>
    <tr>
      <th>459983</th>
      <td>4SNCi2xa3dkM0HPTQ1AFBP</td>
      <td>When The Lights Go Out</td>
      <td>Al-Jadida</td>
      <td>2T6FKoeG7EXR0WAsFyXbSq</td>
      <td>['Rabih Abou-Khalil']</td>
      <td>['7cM9Y2LNnnmmqivaEuH8vT']</td>
      <td>4</td>
      <td>1</td>
      <td>False</td>
      <td>0.414</td>
      <td>...</td>
      <td>0.0602</td>
      <td>0.826</td>
      <td>0.880</td>
      <td>0.1180</td>
      <td>0.0783</td>
      <td>154.842</td>
      <td>433960</td>
      <td>4.0</td>
      <td>1900</td>
      <td>1900-01-01</td>
    </tr>
    <tr>
      <th>459984</th>
      <td>1XEbjKZygiDllK5WpEB73O</td>
      <td>Story Teller</td>
      <td>Al-Jadida</td>
      <td>2T6FKoeG7EXR0WAsFyXbSq</td>
      <td>['Rabih Abou-Khalil']</td>
      <td>['7cM9Y2LNnnmmqivaEuH8vT']</td>
      <td>5</td>
      <td>1</td>
      <td>False</td>
      <td>0.595</td>
      <td>...</td>
      <td>0.0458</td>
      <td>0.537</td>
      <td>0.658</td>
      <td>0.3540</td>
      <td>0.3370</td>
      <td>109.885</td>
      <td>532173</td>
      <td>4.0</td>
      <td>1900</td>
      <td>1900-01-01</td>
    </tr>
    <tr>
      <th>459985</th>
      <td>5V4pmHLdq0fhEw5DjkaW2w</td>
      <td>Ornette Never Sleps</td>
      <td>Al-Jadida</td>
      <td>2T6FKoeG7EXR0WAsFyXbSq</td>
      <td>['Rabih Abou-Khalil']</td>
      <td>['7cM9Y2LNnnmmqivaEuH8vT']</td>
      <td>6</td>
      <td>1</td>
      <td>False</td>
      <td>0.470</td>
      <td>...</td>
      <td>0.0569</td>
      <td>0.593</td>
      <td>0.914</td>
      <td>0.1050</td>
      <td>0.8140</td>
      <td>158.412</td>
      <td>243867</td>
      <td>3.0</td>
      <td>1900</td>
      <td>1900-01-01</td>
    </tr>
    <tr>
      <th>459986</th>
      <td>6BeB08lGiB6zd8Fn7BBhb1</td>
      <td>Nadim</td>
      <td>Al-Jadida</td>
      <td>2T6FKoeG7EXR0WAsFyXbSq</td>
      <td>['Rabih Abou-Khalil']</td>
      <td>['7cM9Y2LNnnmmqivaEuH8vT']</td>
      <td>7</td>
      <td>1</td>
      <td>False</td>
      <td>0.474</td>
      <td>...</td>
      <td>0.0532</td>
      <td>0.401</td>
      <td>0.561</td>
      <td>0.0785</td>
      <td>0.3010</td>
      <td>162.807</td>
      <td>513000</td>
      <td>4.0</td>
      <td>1900</td>
      <td>1900-01-01</td>
    </tr>
    <tr>
      <th>459987</th>
      <td>1WRapjF1HuE2rXUVBGKXXt</td>
      <td>Wishing Well</td>
      <td>Al-Jadida</td>
      <td>2T6FKoeG7EXR0WAsFyXbSq</td>
      <td>['Rabih Abou-Khalil']</td>
      <td>['7cM9Y2LNnnmmqivaEuH8vT']</td>
      <td>8</td>
      <td>1</td>
      <td>False</td>
      <td>0.521</td>
      <td>...</td>
      <td>0.0594</td>
      <td>0.828</td>
      <td>0.792</td>
      <td>0.1040</td>
      <td>0.2420</td>
      <td>127.288</td>
      <td>325000</td>
      <td>4.0</td>
      <td>1900</td>
      <td>1900-01-01</td>
    </tr>
  </tbody>
</table>
<p>14 rows × 24 columns</p>
</div>
</div>
</div>
<p>So, the tracks with a <code>year</code> value of <code>1900</code> all relate to the artist <code>Rabih Abou-Khalil</code>. Another quick <a href="https://www.discogs.com/artist/504348-Rabih-Abou-Khalil">internet search</a> and we can see the actual year for the album <code>Al-Jadida</code> is <code>1991</code> and for the album <code>Arabian Waltz</code> is <code>1996</code>.</p>
<p>Let’s update these :</p>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">df.loc[<span class="dv" style="color: #AD0000;">450071</span>:<span class="dv" style="color: #AD0000;">450076</span>,<span class="st" style="color: #20794D;">'year'</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1996</span></span>
<span id="cb18-2">df.loc[<span class="dv" style="color: #AD0000;">459980</span>:<span class="dv" style="color: #AD0000;">459987</span>,<span class="st" style="color: #20794D;">'year'</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1991</span></span></code></pre></div>
</div>
<p>and check that’s worked :</p>
<div class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">df.loc[<span class="dv" style="color: #AD0000;">450071</span>:<span class="dv" style="color: #AD0000;">450076</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>id</th>
      <th>name</th>
      <th>album</th>
      <th>album_id</th>
      <th>artists</th>
      <th>artist_ids</th>
      <th>track_number</th>
      <th>disc_number</th>
      <th>explicit</th>
      <th>danceability</th>
      <th>...</th>
      <th>speechiness</th>
      <th>acousticness</th>
      <th>instrumentalness</th>
      <th>liveness</th>
      <th>valence</th>
      <th>tempo</th>
      <th>duration_ms</th>
      <th>time_signature</th>
      <th>year</th>
      <th>release_date</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>450071</th>
      <td>3xPatAieFSuGIuQfHMDvSw</td>
      <td>Arabian Waltz</td>
      <td>Arabian Waltz</td>
      <td>1ggHQJ48NFfYhGu6VznK8K</td>
      <td>['Rabih Abou-Khalil']</td>
      <td>['7cM9Y2LNnnmmqivaEuH8vT']</td>
      <td>1</td>
      <td>1</td>
      <td>False</td>
      <td>0.533</td>
      <td>...</td>
      <td>0.0576</td>
      <td>0.875</td>
      <td>0.859</td>
      <td>0.0887</td>
      <td>0.8350</td>
      <td>115.746</td>
      <td>493867</td>
      <td>3.0</td>
      <td>1996</td>
      <td>1900-01-01</td>
    </tr>
    <tr>
      <th>450072</th>
      <td>5vpx0WtYVtKOFu4V65NkUi</td>
      <td>Dreams Of A Dying City</td>
      <td>Arabian Waltz</td>
      <td>1ggHQJ48NFfYhGu6VznK8K</td>
      <td>['Rabih Abou-Khalil']</td>
      <td>['7cM9Y2LNnnmmqivaEuH8vT']</td>
      <td>2</td>
      <td>1</td>
      <td>False</td>
      <td>0.476</td>
      <td>...</td>
      <td>0.0334</td>
      <td>0.843</td>
      <td>0.893</td>
      <td>0.1060</td>
      <td>0.5710</td>
      <td>92.340</td>
      <td>730667</td>
      <td>1.0</td>
      <td>1996</td>
      <td>1900-01-01</td>
    </tr>
    <tr>
      <th>450073</th>
      <td>0G7vBbeWCcRISsHwcivFgl</td>
      <td>Ornette Never Sleeps</td>
      <td>Arabian Waltz</td>
      <td>1ggHQJ48NFfYhGu6VznK8K</td>
      <td>['Rabih Abou-Khalil']</td>
      <td>['7cM9Y2LNnnmmqivaEuH8vT']</td>
      <td>3</td>
      <td>1</td>
      <td>False</td>
      <td>0.605</td>
      <td>...</td>
      <td>0.0457</td>
      <td>0.912</td>
      <td>0.693</td>
      <td>0.1170</td>
      <td>0.7250</td>
      <td>139.820</td>
      <td>421760</td>
      <td>4.0</td>
      <td>1996</td>
      <td>1900-01-01</td>
    </tr>
    <tr>
      <th>450074</th>
      <td>6YjrfDT2TPp6pflsCSBHPH</td>
      <td>Georgina</td>
      <td>Arabian Waltz</td>
      <td>1ggHQJ48NFfYhGu6VznK8K</td>
      <td>['Rabih Abou-Khalil']</td>
      <td>['7cM9Y2LNnnmmqivaEuH8vT']</td>
      <td>4</td>
      <td>1</td>
      <td>False</td>
      <td>0.406</td>
      <td>...</td>
      <td>0.0433</td>
      <td>0.849</td>
      <td>0.866</td>
      <td>0.1020</td>
      <td>0.6200</td>
      <td>93.729</td>
      <td>672707</td>
      <td>4.0</td>
      <td>1996</td>
      <td>1900-01-01</td>
    </tr>
    <tr>
      <th>450075</th>
      <td>2Nq317w5G1gmuhilTCiiqR</td>
      <td>No Visa</td>
      <td>Arabian Waltz</td>
      <td>1ggHQJ48NFfYhGu6VznK8K</td>
      <td>['Rabih Abou-Khalil']</td>
      <td>['7cM9Y2LNnnmmqivaEuH8vT']</td>
      <td>5</td>
      <td>1</td>
      <td>False</td>
      <td>0.577</td>
      <td>...</td>
      <td>0.0430</td>
      <td>0.936</td>
      <td>0.865</td>
      <td>0.0999</td>
      <td>0.5010</td>
      <td>96.415</td>
      <td>601027</td>
      <td>4.0</td>
      <td>1996</td>
      <td>1900-01-01</td>
    </tr>
    <tr>
      <th>450076</th>
      <td>6PzeE7vvynVguz04STK6RL</td>
      <td>The Pain After</td>
      <td>Arabian Waltz</td>
      <td>1ggHQJ48NFfYhGu6VznK8K</td>
      <td>['Rabih Abou-Khalil']</td>
      <td>['7cM9Y2LNnnmmqivaEuH8vT']</td>
      <td>6</td>
      <td>1</td>
      <td>False</td>
      <td>0.291</td>
      <td>...</td>
      <td>0.0477</td>
      <td>0.956</td>
      <td>0.939</td>
      <td>0.1460</td>
      <td>0.0959</td>
      <td>71.087</td>
      <td>566840</td>
      <td>3.0</td>
      <td>1996</td>
      <td>1900-01-01</td>
    </tr>
  </tbody>
</table>
<p>6 rows × 24 columns</p>
</div>
</div>
</div>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">df.loc[<span class="dv" style="color: #AD0000;">459980</span>:<span class="dv" style="color: #AD0000;">459987</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>id</th>
      <th>name</th>
      <th>album</th>
      <th>album_id</th>
      <th>artists</th>
      <th>artist_ids</th>
      <th>track_number</th>
      <th>disc_number</th>
      <th>explicit</th>
      <th>danceability</th>
      <th>...</th>
      <th>speechiness</th>
      <th>acousticness</th>
      <th>instrumentalness</th>
      <th>liveness</th>
      <th>valence</th>
      <th>tempo</th>
      <th>duration_ms</th>
      <th>time_signature</th>
      <th>year</th>
      <th>release_date</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>459980</th>
      <td>4DZ63H1bRMmiTcXiQhERxv</td>
      <td>Catania</td>
      <td>Al-Jadida</td>
      <td>2T6FKoeG7EXR0WAsFyXbSq</td>
      <td>['Rabih Abou-Khalil']</td>
      <td>['7cM9Y2LNnnmmqivaEuH8vT']</td>
      <td>1</td>
      <td>1</td>
      <td>False</td>
      <td>0.465</td>
      <td>...</td>
      <td>0.0742</td>
      <td>0.414</td>
      <td>0.089</td>
      <td>0.0936</td>
      <td>0.3790</td>
      <td>163.939</td>
      <td>465000</td>
      <td>5.0</td>
      <td>1991</td>
      <td>1900-01-01</td>
    </tr>
    <tr>
      <th>459981</th>
      <td>6QqZn286ICbbhTjNBPlgNY</td>
      <td>Nashwa</td>
      <td>Al-Jadida</td>
      <td>2T6FKoeG7EXR0WAsFyXbSq</td>
      <td>['Rabih Abou-Khalil']</td>
      <td>['7cM9Y2LNnnmmqivaEuH8vT']</td>
      <td>2</td>
      <td>1</td>
      <td>False</td>
      <td>0.436</td>
      <td>...</td>
      <td>0.0683</td>
      <td>0.802</td>
      <td>0.758</td>
      <td>0.1070</td>
      <td>0.1580</td>
      <td>171.006</td>
      <td>578000</td>
      <td>5.0</td>
      <td>1991</td>
      <td>1900-01-01</td>
    </tr>
    <tr>
      <th>459982</th>
      <td>5Mw5YkQkHuGqYQL5XMrUOI</td>
      <td>An Evening With Jerry</td>
      <td>Al-Jadida</td>
      <td>2T6FKoeG7EXR0WAsFyXbSq</td>
      <td>['Rabih Abou-Khalil']</td>
      <td>['7cM9Y2LNnnmmqivaEuH8vT']</td>
      <td>3</td>
      <td>1</td>
      <td>False</td>
      <td>0.511</td>
      <td>...</td>
      <td>0.0350</td>
      <td>0.211</td>
      <td>0.550</td>
      <td>0.1900</td>
      <td>0.2530</td>
      <td>144.884</td>
      <td>423000</td>
      <td>4.0</td>
      <td>1991</td>
      <td>1900-01-01</td>
    </tr>
    <tr>
      <th>459983</th>
      <td>4SNCi2xa3dkM0HPTQ1AFBP</td>
      <td>When The Lights Go Out</td>
      <td>Al-Jadida</td>
      <td>2T6FKoeG7EXR0WAsFyXbSq</td>
      <td>['Rabih Abou-Khalil']</td>
      <td>['7cM9Y2LNnnmmqivaEuH8vT']</td>
      <td>4</td>
      <td>1</td>
      <td>False</td>
      <td>0.414</td>
      <td>...</td>
      <td>0.0602</td>
      <td>0.826</td>
      <td>0.880</td>
      <td>0.1180</td>
      <td>0.0783</td>
      <td>154.842</td>
      <td>433960</td>
      <td>4.0</td>
      <td>1991</td>
      <td>1900-01-01</td>
    </tr>
    <tr>
      <th>459984</th>
      <td>1XEbjKZygiDllK5WpEB73O</td>
      <td>Story Teller</td>
      <td>Al-Jadida</td>
      <td>2T6FKoeG7EXR0WAsFyXbSq</td>
      <td>['Rabih Abou-Khalil']</td>
      <td>['7cM9Y2LNnnmmqivaEuH8vT']</td>
      <td>5</td>
      <td>1</td>
      <td>False</td>
      <td>0.595</td>
      <td>...</td>
      <td>0.0458</td>
      <td>0.537</td>
      <td>0.658</td>
      <td>0.3540</td>
      <td>0.3370</td>
      <td>109.885</td>
      <td>532173</td>
      <td>4.0</td>
      <td>1991</td>
      <td>1900-01-01</td>
    </tr>
    <tr>
      <th>459985</th>
      <td>5V4pmHLdq0fhEw5DjkaW2w</td>
      <td>Ornette Never Sleps</td>
      <td>Al-Jadida</td>
      <td>2T6FKoeG7EXR0WAsFyXbSq</td>
      <td>['Rabih Abou-Khalil']</td>
      <td>['7cM9Y2LNnnmmqivaEuH8vT']</td>
      <td>6</td>
      <td>1</td>
      <td>False</td>
      <td>0.470</td>
      <td>...</td>
      <td>0.0569</td>
      <td>0.593</td>
      <td>0.914</td>
      <td>0.1050</td>
      <td>0.8140</td>
      <td>158.412</td>
      <td>243867</td>
      <td>3.0</td>
      <td>1991</td>
      <td>1900-01-01</td>
    </tr>
    <tr>
      <th>459986</th>
      <td>6BeB08lGiB6zd8Fn7BBhb1</td>
      <td>Nadim</td>
      <td>Al-Jadida</td>
      <td>2T6FKoeG7EXR0WAsFyXbSq</td>
      <td>['Rabih Abou-Khalil']</td>
      <td>['7cM9Y2LNnnmmqivaEuH8vT']</td>
      <td>7</td>
      <td>1</td>
      <td>False</td>
      <td>0.474</td>
      <td>...</td>
      <td>0.0532</td>
      <td>0.401</td>
      <td>0.561</td>
      <td>0.0785</td>
      <td>0.3010</td>
      <td>162.807</td>
      <td>513000</td>
      <td>4.0</td>
      <td>1991</td>
      <td>1900-01-01</td>
    </tr>
    <tr>
      <th>459987</th>
      <td>1WRapjF1HuE2rXUVBGKXXt</td>
      <td>Wishing Well</td>
      <td>Al-Jadida</td>
      <td>2T6FKoeG7EXR0WAsFyXbSq</td>
      <td>['Rabih Abou-Khalil']</td>
      <td>['7cM9Y2LNnnmmqivaEuH8vT']</td>
      <td>8</td>
      <td>1</td>
      <td>False</td>
      <td>0.521</td>
      <td>...</td>
      <td>0.0594</td>
      <td>0.828</td>
      <td>0.792</td>
      <td>0.1040</td>
      <td>0.2420</td>
      <td>127.288</td>
      <td>325000</td>
      <td>4.0</td>
      <td>1991</td>
      <td>1900-01-01</td>
    </tr>
  </tbody>
</table>
<p>8 rows × 24 columns</p>
</div>
</div>
</div>
<div class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">df.year.describe()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">
<pre><code>count    1.204025e+06
mean     2.007346e+03
std      1.062270e+01
min      1.908000e+03
25%      2.002000e+03
50%      2.009000e+03
75%      2.015000e+03
max      2.020000e+03
Name: year, dtype: float64</code></pre>
</div>
</div>
<p>The minimum year is now 1908 which seems plausible :</p>
<div class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">df.loc[df[<span class="st" style="color: #20794D;">'year'</span>] <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">1908</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="19">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>id</th>
      <th>name</th>
      <th>album</th>
      <th>album_id</th>
      <th>artists</th>
      <th>artist_ids</th>
      <th>track_number</th>
      <th>disc_number</th>
      <th>explicit</th>
      <th>danceability</th>
      <th>...</th>
      <th>speechiness</th>
      <th>acousticness</th>
      <th>instrumentalness</th>
      <th>liveness</th>
      <th>valence</th>
      <th>tempo</th>
      <th>duration_ms</th>
      <th>time_signature</th>
      <th>year</th>
      <th>release_date</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>358067</th>
      <td>2WXXkuoiDuZlyC4vAJUk4U</td>
      <td>Hard Times</td>
      <td>Living Chicago Blues, Vol. 3</td>
      <td>6l9iPFb3IBKZxrCwphkvH4</td>
      <td>['A.C. Reed']</td>
      <td>['1i31XKLddtEeOIr0nPcxdj']</td>
      <td>1</td>
      <td>1</td>
      <td>False</td>
      <td>0.708</td>
      <td>...</td>
      <td>0.0589</td>
      <td>0.6930</td>
      <td>0.000354</td>
      <td>0.0700</td>
      <td>0.774</td>
      <td>88.159</td>
      <td>198533</td>
      <td>4.0</td>
      <td>1908</td>
      <td>1908-08-01</td>
    </tr>
    <tr>
      <th>358068</th>
      <td>1GUvbwCftGCU9HTeg1DPAW</td>
      <td>She's Fine</td>
      <td>Living Chicago Blues, Vol. 3</td>
      <td>6l9iPFb3IBKZxrCwphkvH4</td>
      <td>['A.C. Reed']</td>
      <td>['1i31XKLddtEeOIr0nPcxdj']</td>
      <td>2</td>
      <td>1</td>
      <td>False</td>
      <td>0.501</td>
      <td>...</td>
      <td>0.0372</td>
      <td>0.2020</td>
      <td>0.001450</td>
      <td>0.1070</td>
      <td>0.868</td>
      <td>82.489</td>
      <td>258227</td>
      <td>4.0</td>
      <td>1908</td>
      <td>1908-08-01</td>
    </tr>
    <tr>
      <th>358069</th>
      <td>1Z3cZzxa2ulQSnqoPxp9oM</td>
      <td>Moving Out Of The Ghetto</td>
      <td>Living Chicago Blues, Vol. 3</td>
      <td>6l9iPFb3IBKZxrCwphkvH4</td>
      <td>['A.C. Reed']</td>
      <td>['1i31XKLddtEeOIr0nPcxdj']</td>
      <td>3</td>
      <td>1</td>
      <td>False</td>
      <td>0.755</td>
      <td>...</td>
      <td>0.0784</td>
      <td>0.4030</td>
      <td>0.001180</td>
      <td>0.1780</td>
      <td>0.869</td>
      <td>102.780</td>
      <td>233733</td>
      <td>4.0</td>
      <td>1908</td>
      <td>1908-08-01</td>
    </tr>
    <tr>
      <th>358070</th>
      <td>44Ag9ocysgC0TYZWQ8q2YD</td>
      <td>Going To New York</td>
      <td>Living Chicago Blues, Vol. 3</td>
      <td>6l9iPFb3IBKZxrCwphkvH4</td>
      <td>['A.C. Reed']</td>
      <td>['1i31XKLddtEeOIr0nPcxdj']</td>
      <td>4</td>
      <td>1</td>
      <td>False</td>
      <td>0.707</td>
      <td>...</td>
      <td>0.0471</td>
      <td>0.3480</td>
      <td>0.000081</td>
      <td>0.3100</td>
      <td>0.919</td>
      <td>110.260</td>
      <td>219173</td>
      <td>4.0</td>
      <td>1908</td>
      <td>1908-08-01</td>
    </tr>
    <tr>
      <th>358071</th>
      <td>3SDq5YWtxDUS05jNM1YDHk</td>
      <td>Big Leg Woman</td>
      <td>Living Chicago Blues, Vol. 3</td>
      <td>6l9iPFb3IBKZxrCwphkvH4</td>
      <td>['Scotty And The Rib Tips']</td>
      <td>['1P2BhUJ1N1bRIF52GZiJFS']</td>
      <td>5</td>
      <td>1</td>
      <td>False</td>
      <td>0.673</td>
      <td>...</td>
      <td>0.0637</td>
      <td>0.3690</td>
      <td>0.001570</td>
      <td>0.0359</td>
      <td>0.843</td>
      <td>94.547</td>
      <td>221400</td>
      <td>4.0</td>
      <td>1908</td>
      <td>1908-08-01</td>
    </tr>
    <tr>
      <th>358072</th>
      <td>0nJeoE8gNObc99KLYjcGSO</td>
      <td>Careless With Our Love</td>
      <td>Living Chicago Blues, Vol. 3</td>
      <td>6l9iPFb3IBKZxrCwphkvH4</td>
      <td>['Scotty And The Rib Tips']</td>
      <td>['1P2BhUJ1N1bRIF52GZiJFS']</td>
      <td>6</td>
      <td>1</td>
      <td>False</td>
      <td>0.505</td>
      <td>...</td>
      <td>0.0713</td>
      <td>0.1960</td>
      <td>0.000005</td>
      <td>0.0613</td>
      <td>0.456</td>
      <td>202.935</td>
      <td>182733</td>
      <td>3.0</td>
      <td>1908</td>
      <td>1908-08-01</td>
    </tr>
    <tr>
      <th>358073</th>
      <td>4iwPEc7B6Jdnm9yBCbRbHi</td>
      <td>Road Block</td>
      <td>Living Chicago Blues, Vol. 3</td>
      <td>6l9iPFb3IBKZxrCwphkvH4</td>
      <td>['Scotty And The Rib Tips']</td>
      <td>['1P2BhUJ1N1bRIF52GZiJFS']</td>
      <td>7</td>
      <td>1</td>
      <td>False</td>
      <td>0.716</td>
      <td>...</td>
      <td>0.0979</td>
      <td>0.4400</td>
      <td>0.002170</td>
      <td>0.3640</td>
      <td>0.764</td>
      <td>113.089</td>
      <td>169733</td>
      <td>4.0</td>
      <td>1908</td>
      <td>1908-08-01</td>
    </tr>
    <tr>
      <th>358074</th>
      <td>27gACliKLkeFZoYwrCzEM0</td>
      <td>Poison Ivy</td>
      <td>Living Chicago Blues, Vol. 3</td>
      <td>6l9iPFb3IBKZxrCwphkvH4</td>
      <td>['Scotty And The Rib Tips']</td>
      <td>['1P2BhUJ1N1bRIF52GZiJFS']</td>
      <td>8</td>
      <td>1</td>
      <td>False</td>
      <td>0.749</td>
      <td>...</td>
      <td>0.0589</td>
      <td>0.5290</td>
      <td>0.000372</td>
      <td>0.0603</td>
      <td>0.773</td>
      <td>105.896</td>
      <td>197467</td>
      <td>4.0</td>
      <td>1908</td>
      <td>1908-08-01</td>
    </tr>
    <tr>
      <th>358075</th>
      <td>2EpGTGT25A1o6p4q4dLOHN</td>
      <td>I Dare You</td>
      <td>Living Chicago Blues, Vol. 3</td>
      <td>6l9iPFb3IBKZxrCwphkvH4</td>
      <td>['Lovie Lee']</td>
      <td>['6cOz9TMiL8lfsFoWkxvqKM']</td>
      <td>9</td>
      <td>1</td>
      <td>False</td>
      <td>0.478</td>
      <td>...</td>
      <td>0.0656</td>
      <td>0.7300</td>
      <td>0.000020</td>
      <td>0.3310</td>
      <td>0.688</td>
      <td>155.212</td>
      <td>168200</td>
      <td>4.0</td>
      <td>1908</td>
      <td>1908-08-01</td>
    </tr>
    <tr>
      <th>358076</th>
      <td>1BHivexEpJ8inJqoBZyOQ0</td>
      <td>Nobody Knows My Troubles</td>
      <td>Living Chicago Blues, Vol. 3</td>
      <td>6l9iPFb3IBKZxrCwphkvH4</td>
      <td>['Lovie Lee']</td>
      <td>['6cOz9TMiL8lfsFoWkxvqKM']</td>
      <td>10</td>
      <td>1</td>
      <td>False</td>
      <td>0.433</td>
      <td>...</td>
      <td>0.0493</td>
      <td>0.7210</td>
      <td>0.000083</td>
      <td>0.0646</td>
      <td>0.366</td>
      <td>177.106</td>
      <td>318627</td>
      <td>3.0</td>
      <td>1908</td>
      <td>1908-08-01</td>
    </tr>
    <tr>
      <th>358077</th>
      <td>73c2SKi5JPvRf7Exzf3hvz</td>
      <td>Sweet Little Girl</td>
      <td>Living Chicago Blues, Vol. 3</td>
      <td>6l9iPFb3IBKZxrCwphkvH4</td>
      <td>['Lovie Lee']</td>
      <td>['6cOz9TMiL8lfsFoWkxvqKM']</td>
      <td>11</td>
      <td>1</td>
      <td>False</td>
      <td>0.568</td>
      <td>...</td>
      <td>0.0654</td>
      <td>0.6880</td>
      <td>0.000000</td>
      <td>0.1480</td>
      <td>0.857</td>
      <td>133.396</td>
      <td>193933</td>
      <td>4.0</td>
      <td>1908</td>
      <td>1908-08-01</td>
    </tr>
    <tr>
      <th>358078</th>
      <td>6XW31kg7cuN17LzgHj1pzM</td>
      <td>Naptown</td>
      <td>Living Chicago Blues, Vol. 3</td>
      <td>6l9iPFb3IBKZxrCwphkvH4</td>
      <td>['Lovie Lee']</td>
      <td>['6cOz9TMiL8lfsFoWkxvqKM']</td>
      <td>12</td>
      <td>1</td>
      <td>False</td>
      <td>0.574</td>
      <td>...</td>
      <td>0.0785</td>
      <td>0.5130</td>
      <td>0.000000</td>
      <td>0.0795</td>
      <td>0.891</td>
      <td>136.918</td>
      <td>185000</td>
      <td>4.0</td>
      <td>1908</td>
      <td>1908-08-01</td>
    </tr>
    <tr>
      <th>358079</th>
      <td>4bdbkXLaoccDNp6lLsZWRG</td>
      <td>Drown In My Own Tears</td>
      <td>Living Chicago Blues, Vol. 3</td>
      <td>6l9iPFb3IBKZxrCwphkvH4</td>
      <td>['Lacy Gibson']</td>
      <td>['54sySc5ynnkqxkG2dEMLQe']</td>
      <td>13</td>
      <td>1</td>
      <td>False</td>
      <td>0.639</td>
      <td>...</td>
      <td>0.0753</td>
      <td>0.4260</td>
      <td>0.000584</td>
      <td>0.1240</td>
      <td>0.488</td>
      <td>97.814</td>
      <td>280573</td>
      <td>1.0</td>
      <td>1908</td>
      <td>1908-08-01</td>
    </tr>
    <tr>
      <th>358080</th>
      <td>5YuV9oboI6FNhj45w15Bn2</td>
      <td>Crying For My Baby</td>
      <td>Living Chicago Blues, Vol. 3</td>
      <td>6l9iPFb3IBKZxrCwphkvH4</td>
      <td>['Lacy Gibson']</td>
      <td>['54sySc5ynnkqxkG2dEMLQe']</td>
      <td>14</td>
      <td>1</td>
      <td>False</td>
      <td>0.432</td>
      <td>...</td>
      <td>0.1030</td>
      <td>0.1080</td>
      <td>0.000752</td>
      <td>0.3420</td>
      <td>0.267</td>
      <td>173.133</td>
      <td>168893</td>
      <td>4.0</td>
      <td>1908</td>
      <td>1908-08-01</td>
    </tr>
    <tr>
      <th>358081</th>
      <td>0FwueIBJWE6EGlv2ipQGpv</td>
      <td>Feel So Bad</td>
      <td>Living Chicago Blues, Vol. 3</td>
      <td>6l9iPFb3IBKZxrCwphkvH4</td>
      <td>['Lacy Gibson']</td>
      <td>['54sySc5ynnkqxkG2dEMLQe']</td>
      <td>15</td>
      <td>1</td>
      <td>False</td>
      <td>0.507</td>
      <td>...</td>
      <td>0.0380</td>
      <td>0.0637</td>
      <td>0.014600</td>
      <td>0.5270</td>
      <td>0.795</td>
      <td>158.532</td>
      <td>234640</td>
      <td>4.0</td>
      <td>1908</td>
      <td>1908-08-01</td>
    </tr>
    <tr>
      <th>358082</th>
      <td>5zkdTRxprxh88V9nbNedlf</td>
      <td>Wish Me Well</td>
      <td>Living Chicago Blues, Vol. 3</td>
      <td>6l9iPFb3IBKZxrCwphkvH4</td>
      <td>['Lacy Gibson']</td>
      <td>['54sySc5ynnkqxkG2dEMLQe']</td>
      <td>16</td>
      <td>1</td>
      <td>False</td>
      <td>0.628</td>
      <td>...</td>
      <td>0.0745</td>
      <td>0.4820</td>
      <td>0.086400</td>
      <td>0.0704</td>
      <td>0.607</td>
      <td>137.612</td>
      <td>177627</td>
      <td>4.0</td>
      <td>1908</td>
      <td>1908-08-01</td>
    </tr>
    <tr>
      <th>358083</th>
      <td>4yS6s6PM2i9Q88Jo64gdQf</td>
      <td>Have You Ever Loved A Woman</td>
      <td>Living Chicago Blues, Vol. 3</td>
      <td>6l9iPFb3IBKZxrCwphkvH4</td>
      <td>['Sons of the Blues']</td>
      <td>['5of0zoRrZzeThokJuAPbgq']</td>
      <td>17</td>
      <td>1</td>
      <td>False</td>
      <td>0.513</td>
      <td>...</td>
      <td>0.0455</td>
      <td>0.3690</td>
      <td>0.013000</td>
      <td>0.5120</td>
      <td>0.268</td>
      <td>151.070</td>
      <td>370067</td>
      <td>3.0</td>
      <td>1908</td>
      <td>1908-08-01</td>
    </tr>
    <tr>
      <th>358084</th>
      <td>77CZxGGtBGywPx3Mlak3ji</td>
      <td>Berlin Wall</td>
      <td>Living Chicago Blues, Vol. 3</td>
      <td>6l9iPFb3IBKZxrCwphkvH4</td>
      <td>['Sons of the Blues']</td>
      <td>['5of0zoRrZzeThokJuAPbgq']</td>
      <td>18</td>
      <td>1</td>
      <td>False</td>
      <td>0.738</td>
      <td>...</td>
      <td>0.1990</td>
      <td>0.3180</td>
      <td>0.000289</td>
      <td>0.0868</td>
      <td>0.600</td>
      <td>123.120</td>
      <td>265640</td>
      <td>4.0</td>
      <td>1908</td>
      <td>1908-08-01</td>
    </tr>
    <tr>
      <th>358085</th>
      <td>7nPwFsty5ABGNCsZHuj3b0</td>
      <td>Prisoner Of The Blues</td>
      <td>Living Chicago Blues, Vol. 3</td>
      <td>6l9iPFb3IBKZxrCwphkvH4</td>
      <td>['Sons of the Blues']</td>
      <td>['5of0zoRrZzeThokJuAPbgq']</td>
      <td>19</td>
      <td>1</td>
      <td>False</td>
      <td>0.654</td>
      <td>...</td>
      <td>0.1440</td>
      <td>0.2090</td>
      <td>0.015400</td>
      <td>0.0862</td>
      <td>0.390</td>
      <td>160.127</td>
      <td>253667</td>
      <td>3.0</td>
      <td>1908</td>
      <td>1908-08-01</td>
    </tr>
  </tbody>
</table>
<p>19 rows × 24 columns</p>
</div>
</div>
</div>
<p>OK, well let’s perform some final tidy up before we bake the data wrangling into a Python script.</p>
<div class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">df <span class="op" style="color: #5E5E5E;">=</span> df.drop([<span class="st" style="color: #20794D;">'id'</span>, <span class="st" style="color: #20794D;">'album_id'</span>, <span class="st" style="color: #20794D;">'artist_ids'</span>, <span class="st" style="color: #20794D;">'track_number'</span>, <span class="st" style="color: #20794D;">'disc_number'</span>, <span class="st" style="color: #20794D;">'time_signature'</span>], axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb24-2">df[<span class="st" style="color: #20794D;">'artists'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'artists'</span>].<span class="bu" style="color: null;">str</span>.strip(<span class="st" style="color: #20794D;">"['']"</span>)</span>
<span id="cb24-3">df[<span class="st" style="color: #20794D;">'danceability'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'danceability'</span>].<span class="bu" style="color: null;">round</span>(<span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb24-4">df[<span class="st" style="color: #20794D;">'energy'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'energy'</span>].<span class="bu" style="color: null;">round</span>(<span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb24-5">df[<span class="st" style="color: #20794D;">'loudness'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'loudness'</span>].<span class="bu" style="color: null;">round</span>(<span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb24-6">df[<span class="st" style="color: #20794D;">'speechiness'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'speechiness'</span>].<span class="bu" style="color: null;">round</span>(<span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb24-7">df[<span class="st" style="color: #20794D;">'acousticness'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'acousticness'</span>].<span class="bu" style="color: null;">round</span>(<span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb24-8">df[<span class="st" style="color: #20794D;">'instrumentalness'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'instrumentalness'</span>].<span class="bu" style="color: null;">round</span>(<span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb24-9">df[<span class="st" style="color: #20794D;">'liveness'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'liveness'</span>].<span class="bu" style="color: null;">round</span>(<span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb24-10">df[<span class="st" style="color: #20794D;">'valence'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'valence'</span>].<span class="bu" style="color: null;">round</span>(<span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb24-11">df[<span class="st" style="color: #20794D;">"tempo"</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">"tempo"</span>].astype(<span class="bu" style="color: null;">int</span>)</span>
<span id="cb24-12">df[<span class="st" style="color: #20794D;">'year'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'year'</span>].astype(<span class="bu" style="color: null;">str</span>)</span>
<span id="cb24-13">df[<span class="st" style="color: #20794D;">"duration_s"</span>] <span class="op" style="color: #5E5E5E;">=</span> (df[<span class="st" style="color: #20794D;">"duration_ms"</span>] <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">1000</span>).astype(<span class="bu" style="color: null;">int</span>).<span class="bu" style="color: null;">round</span>(<span class="dv" style="color: #AD0000;">0</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">df.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="21">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>name</th>
      <th>album</th>
      <th>artists</th>
      <th>explicit</th>
      <th>danceability</th>
      <th>energy</th>
      <th>key</th>
      <th>loudness</th>
      <th>mode</th>
      <th>speechiness</th>
      <th>acousticness</th>
      <th>instrumentalness</th>
      <th>liveness</th>
      <th>valence</th>
      <th>tempo</th>
      <th>duration_ms</th>
      <th>year</th>
      <th>release_date</th>
      <th>duration_s</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>Testify</td>
      <td>The Battle Of Los Angeles</td>
      <td>Rage Against The Machine</td>
      <td>False</td>
      <td>0.47</td>
      <td>0.98</td>
      <td>7</td>
      <td>-5.40</td>
      <td>1</td>
      <td>0.07</td>
      <td>0.03</td>
      <td>0.0</td>
      <td>0.36</td>
      <td>0.50</td>
      <td>117</td>
      <td>210133</td>
      <td>1999</td>
      <td>1999-11-02</td>
      <td>210</td>
    </tr>
    <tr>
      <th>1</th>
      <td>Guerrilla Radio</td>
      <td>The Battle Of Los Angeles</td>
      <td>Rage Against The Machine</td>
      <td>True</td>
      <td>0.60</td>
      <td>0.96</td>
      <td>11</td>
      <td>-5.76</td>
      <td>1</td>
      <td>0.19</td>
      <td>0.01</td>
      <td>0.0</td>
      <td>0.16</td>
      <td>0.49</td>
      <td>103</td>
      <td>206200</td>
      <td>1999</td>
      <td>1999-11-02</td>
      <td>206</td>
    </tr>
    <tr>
      <th>2</th>
      <td>Calm Like a Bomb</td>
      <td>The Battle Of Los Angeles</td>
      <td>Rage Against The Machine</td>
      <td>False</td>
      <td>0.32</td>
      <td>0.97</td>
      <td>7</td>
      <td>-5.42</td>
      <td>1</td>
      <td>0.48</td>
      <td>0.02</td>
      <td>0.0</td>
      <td>0.12</td>
      <td>0.37</td>
      <td>149</td>
      <td>298893</td>
      <td>1999</td>
      <td>1999-11-02</td>
      <td>298</td>
    </tr>
    <tr>
      <th>3</th>
      <td>Mic Check</td>
      <td>The Battle Of Los Angeles</td>
      <td>Rage Against The Machine</td>
      <td>True</td>
      <td>0.44</td>
      <td>0.97</td>
      <td>11</td>
      <td>-5.83</td>
      <td>0</td>
      <td>0.24</td>
      <td>0.16</td>
      <td>0.0</td>
      <td>0.12</td>
      <td>0.57</td>
      <td>96</td>
      <td>213640</td>
      <td>1999</td>
      <td>1999-11-02</td>
      <td>213</td>
    </tr>
    <tr>
      <th>4</th>
      <td>Sleep Now In the Fire</td>
      <td>The Battle Of Los Angeles</td>
      <td>Rage Against The Machine</td>
      <td>False</td>
      <td>0.43</td>
      <td>0.93</td>
      <td>2</td>
      <td>-6.73</td>
      <td>1</td>
      <td>0.07</td>
      <td>0.00</td>
      <td>0.1</td>
      <td>0.08</td>
      <td>0.54</td>
      <td>127</td>
      <td>205600</td>
      <td>1999</td>
      <td>1999-11-02</td>
      <td>205</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">df.info()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;class 'pandas.core.frame.DataFrame'&gt;
RangeIndex: 1204025 entries, 0 to 1204024
Data columns (total 19 columns):
 #   Column            Non-Null Count    Dtype  
---  ------            --------------    -----  
 0   name              1204025 non-null  object 
 1   album             1204025 non-null  object 
 2   artists           1204025 non-null  object 
 3   explicit          1204025 non-null  bool   
 4   danceability      1204025 non-null  float64
 5   energy            1204025 non-null  float64
 6   key               1204025 non-null  int64  
 7   loudness          1204025 non-null  float64
 8   mode              1204025 non-null  int64  
 9   speechiness       1204025 non-null  float64
 10  acousticness      1204025 non-null  float64
 11  instrumentalness  1204025 non-null  float64
 12  liveness          1204025 non-null  float64
 13  valence           1204025 non-null  float64
 14  tempo             1204025 non-null  int64  
 15  duration_ms       1204025 non-null  int64  
 16  year              1204025 non-null  object 
 17  release_date      1204025 non-null  object 
 18  duration_s        1204025 non-null  int64  
dtypes: bool(1), float64(8), int64(5), object(5)
memory usage: 166.5+ MB</code></pre>
</div>
</div>
</section>
<section id="workflow-orchestration" class="level3">
<h3 class="anchored" data-anchor-id="workflow-orchestration">3. Workflow Orchestration</h3>
<p>I decided to use the <a href="https://www.prefect.io/">Prefect</a> work orchestration tool to streamline my data flows. Prefect is a modern open source dataflow automation platform that will allow us to add observability and orchestration by utilizing python to write tasks and flows decorators to build, run and monitor pipelines at scale. We can also make use of Prefect’s block connectors which allows communication with Google Cloud services.</p>
<p>Again, in terms of reproducability of this project, the asssumption is that you have already followed the inital Prefect set up. A brief overview of the process is included below :</p>
<p>Clone the <a href="https://github.com/discdiver/prefect-zoomcamp">Prefect repo</a> from the command line:</p>
<pre><code>git clone https://github.com/discdiver/prefect-zoomcamp.git</code></pre>
<p>Next, create a python environment :</p>
<pre><code>conda create -n zoomcamp python=3.9   </code></pre>
<p>Once created we need to activate it:</p>
<pre><code>conda activate zoomcamp</code></pre>
<p>To deactivate an environment use:</p>
<pre><code>conda deactivate  </code></pre>
<p>Note from the terminal that we are no longer running in <code>base</code> but our newly created <code>zoomcamp</code> environment. Then install all package dependencies with:</p>
<pre><code>pip install -r requirements.txt</code></pre>
<p>For more detailed coverage see <a href="https://github.com/discdiver/prefect-zoomcamp">attached</a>.</p>
<p>Note, that I had also configured my GCP Credentials and Google Cloud Storage <a href="https://www.prefect.io/guide/blog/blocks-connectors-for-code/0">Prefect connector blocks</a> during week 2 of the course :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Final_Project/de_zoomcamp_project_files/figure-html/5696ecf7-432e-4113-97aa-666f585738db.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">gcp_cred_block.PNG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Final_Project/de_zoomcamp_project_files/figure-html/7b2ef705-54ec-4b2a-8545-45c9ab2d1d03.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">gcs_bucket_block.PNG</figcaption><p></p>
</figure>
</div>
<p>The basic config template is included below for reference :</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="im" style="color: #00769E;">from</span> prefect_gcp <span class="im" style="color: #00769E;">import</span> GcpCredentials</span>
<span id="cb33-2"><span class="im" style="color: #00769E;">from</span> prefect_gcp.cloud_storage <span class="im" style="color: #00769E;">import</span> GcsBucket</span>
<span id="cb33-3"></span>
<span id="cb33-4"><span class="co" style="color: #5E5E5E;"># alternative to creating GCP blocks in the UI</span></span>
<span id="cb33-5"><span class="co" style="color: #5E5E5E;"># copy your own service_account_info dictionary from the json file you downloaded from google</span></span>
<span id="cb33-6"><span class="co" style="color: #5E5E5E;"># IMPORTANT - do not store credentials in a publicly available repository!</span></span>
<span id="cb33-7"></span>
<span id="cb33-8"></span>
<span id="cb33-9">credentials_block <span class="op" style="color: #5E5E5E;">=</span> GcpCredentials(</span>
<span id="cb33-10">    service_account_info<span class="op" style="color: #5E5E5E;">=</span>{}  <span class="co" style="color: #5E5E5E;"># enter your credentials from the json file</span></span>
<span id="cb33-11">)</span>
<span id="cb33-12">credentials_block.save(<span class="st" style="color: #20794D;">"zoom-gcp-creds"</span>, overwrite<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb33-13"></span>
<span id="cb33-14"></span>
<span id="cb33-15">bucket_block <span class="op" style="color: #5E5E5E;">=</span> GcsBucket(</span>
<span id="cb33-16">    gcp_credentials<span class="op" style="color: #5E5E5E;">=</span>GcpCredentials.load(<span class="st" style="color: #20794D;">"zoom-gcp-creds"</span>),</span>
<span id="cb33-17">    bucket<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"prefect-de-zoomcamp"</span>,  <span class="co" style="color: #5E5E5E;"># insert your  GCS bucket name</span></span>
<span id="cb33-18">)</span>
<span id="cb33-19"></span>
<span id="cb33-20">bucket_block.save(<span class="st" style="color: #20794D;">"zoom-gcs"</span>, overwrite<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
</div>
<p>Once you are ready to run your flows you can make use of the Prefect UI to visualise the flows by entering the following at the command line:</p>
<pre><code>prefect orion start</code></pre>
<p>and then navigating to the dashboard at http://127.0.0.1:4200</p>
<p>I created the following Python script to grab the local csv, clean up using pandas, convert to parquet, and upload to Google Cloud Storage. I ran the file from the command line using :</p>
<pre><code>python etl_web_to_gcs.py</code></pre>
<p><code>etl_web_to_gcs.py</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1"><span class="im" style="color: #00769E;">from</span> pathlib <span class="im" style="color: #00769E;">import</span> Path</span>
<span id="cb36-2"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb36-3"><span class="im" style="color: #00769E;">from</span> prefect <span class="im" style="color: #00769E;">import</span> flow, task</span>
<span id="cb36-4"><span class="im" style="color: #00769E;">from</span> prefect_gcp.cloud_storage <span class="im" style="color: #00769E;">import</span> GcsBucket</span>
<span id="cb36-5"><span class="im" style="color: #00769E;">import</span> pyarrow <span class="im" style="color: #00769E;">as</span> pa</span>
<span id="cb36-6"><span class="im" style="color: #00769E;">from</span> random <span class="im" style="color: #00769E;">import</span> randint</span>
<span id="cb36-7"></span>
<span id="cb36-8"></span>
<span id="cb36-9"><span class="at" style="color: #657422;">@task</span>(retries<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span>)</span>
<span id="cb36-10"><span class="kw" style="color: #003B4F;">def</span> fetch(dataset_url: <span class="bu" style="color: null;">str</span>) <span class="op" style="color: #5E5E5E;">-&gt;</span> pd.DataFrame:</span>
<span id="cb36-11">    <span class="co" style="color: #5E5E5E;">"""Read data into pandas DataFrame"""</span></span>
<span id="cb36-12">    df <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(dataset_url)</span>
<span id="cb36-13">    <span class="cf" style="color: #003B4F;">return</span> df</span>
<span id="cb36-14"></span>
<span id="cb36-15"></span>
<span id="cb36-16"><span class="at" style="color: #657422;">@task</span>(log_prints<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb36-17"><span class="kw" style="color: #003B4F;">def</span> clean(df: pd.DataFrame) <span class="op" style="color: #5E5E5E;">-&gt;</span> pd.DataFrame:</span>
<span id="cb36-18">   <span class="co" style="color: #5E5E5E;">"""Some pandas transforms and print basic info"""</span></span>
<span id="cb36-19">   df <span class="op" style="color: #5E5E5E;">=</span> df.drop([<span class="st" style="color: #20794D;">'id'</span>, <span class="st" style="color: #20794D;">'album_id'</span>, <span class="st" style="color: #20794D;">'artist_ids'</span>, <span class="st" style="color: #20794D;">'track_number'</span>, <span class="st" style="color: #20794D;">'disc_number'</span>, <span class="st" style="color: #20794D;">'time_signature'</span>], axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb36-20">   df.loc[<span class="dv" style="color: #AD0000;">815351</span>:<span class="dv" style="color: #AD0000;">815360</span>,<span class="st" style="color: #20794D;">'year'</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">2018</span></span>
<span id="cb36-21">   df.loc[<span class="dv" style="color: #AD0000;">450071</span>:<span class="dv" style="color: #AD0000;">450076</span>,<span class="st" style="color: #20794D;">'year'</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1996</span></span>
<span id="cb36-22">   df.loc[<span class="dv" style="color: #AD0000;">459980</span>:<span class="dv" style="color: #AD0000;">459987</span>,<span class="st" style="color: #20794D;">'year'</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1991</span></span>
<span id="cb36-23">   df[<span class="st" style="color: #20794D;">'artists'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'artists'</span>].<span class="bu" style="color: null;">str</span>.strip(<span class="st" style="color: #20794D;">"['']"</span>)</span>
<span id="cb36-24">   df[<span class="st" style="color: #20794D;">'danceability'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'danceability'</span>].<span class="bu" style="color: null;">round</span>(<span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb36-25">   df[<span class="st" style="color: #20794D;">'energy'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'energy'</span>].<span class="bu" style="color: null;">round</span>(<span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb36-26">   df[<span class="st" style="color: #20794D;">'loudness'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'loudness'</span>].<span class="bu" style="color: null;">round</span>(<span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb36-27">   df[<span class="st" style="color: #20794D;">'speechiness'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'speechiness'</span>].<span class="bu" style="color: null;">round</span>(<span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb36-28">   df[<span class="st" style="color: #20794D;">'acousticness'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'acousticness'</span>].<span class="bu" style="color: null;">round</span>(<span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb36-29">   df[<span class="st" style="color: #20794D;">'instrumentalness'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'instrumentalness'</span>].<span class="bu" style="color: null;">round</span>(<span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb36-30">   df[<span class="st" style="color: #20794D;">'liveness'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'liveness'</span>].<span class="bu" style="color: null;">round</span>(<span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb36-31">   df[<span class="st" style="color: #20794D;">'valence'</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">'valence'</span>].<span class="bu" style="color: null;">round</span>(<span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb36-32">   df[<span class="st" style="color: #20794D;">"tempo"</span>] <span class="op" style="color: #5E5E5E;">=</span> df[<span class="st" style="color: #20794D;">"tempo"</span>].astype(<span class="bu" style="color: null;">int</span>)</span>
<span id="cb36-33">   df[<span class="st" style="color: #20794D;">'year_date'</span>] <span class="op" style="color: #5E5E5E;">=</span> pd.to_datetime(df[<span class="st" style="color: #20794D;">'year'</span>], <span class="bu" style="color: null;">format</span><span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'%Y'</span>)</span>
<span id="cb36-34">   df[<span class="st" style="color: #20794D;">"duration_s"</span>] <span class="op" style="color: #5E5E5E;">=</span> (df[<span class="st" style="color: #20794D;">"duration_ms"</span>] <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">1000</span>).astype(<span class="bu" style="color: null;">int</span>).<span class="bu" style="color: null;">round</span>(<span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb36-35"></span>
<span id="cb36-36">   <span class="bu" style="color: null;">print</span>(df.head(<span class="dv" style="color: #AD0000;">2</span>))</span>
<span id="cb36-37">   <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"columns: </span><span class="sc" style="color: #5E5E5E;">{</span>df<span class="sc" style="color: #5E5E5E;">.</span>dtypes<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb36-38">   <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"rows: </span><span class="sc" style="color: #5E5E5E;">{</span><span class="bu" style="color: null;">len</span>(df)<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb36-39">   <span class="cf" style="color: #003B4F;">return</span> df</span>
<span id="cb36-40"></span>
<span id="cb36-41"></span>
<span id="cb36-42"><span class="at" style="color: #657422;">@task</span>()</span>
<span id="cb36-43"><span class="kw" style="color: #003B4F;">def</span> write_local(df: pd.DataFrame, dataset_file: <span class="bu" style="color: null;">str</span>) <span class="op" style="color: #5E5E5E;">-&gt;</span> Path:</span>
<span id="cb36-44">   <span class="co" style="color: #5E5E5E;">"""Write DataFrame out locally as parquet file"""</span></span>
<span id="cb36-45">   path <span class="op" style="color: #5E5E5E;">=</span> Path(<span class="ss" style="color: #20794D;">f"data/</span><span class="sc" style="color: #5E5E5E;">{</span>dataset_file<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">.parquet"</span>)</span>
<span id="cb36-46">   df.to_parquet(path, compression<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"gzip"</span>)</span>
<span id="cb36-47">   <span class="cf" style="color: #003B4F;">return</span> path</span>
<span id="cb36-48"></span>
<span id="cb36-49"></span>
<span id="cb36-50"><span class="at" style="color: #657422;">@task</span>()</span>
<span id="cb36-51"><span class="kw" style="color: #003B4F;">def</span> write_gcs(path: Path) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb36-52">    <span class="co" style="color: #5E5E5E;">"""Upload local parquet file to GCS"""</span></span>
<span id="cb36-53">    gcs_block <span class="op" style="color: #5E5E5E;">=</span> GcsBucket.load(<span class="st" style="color: #20794D;">"de-zoomcamp"</span>)</span>
<span id="cb36-54">    gcs_block.upload_from_path(from_path<span class="op" style="color: #5E5E5E;">=</span>path, to_path<span class="op" style="color: #5E5E5E;">=</span>path)</span>
<span id="cb36-55">    <span class="cf" style="color: #003B4F;">return</span></span>
<span id="cb36-56"></span>
<span id="cb36-57"></span>
<span id="cb36-58"><span class="at" style="color: #657422;">@flow</span>()</span>
<span id="cb36-59"><span class="kw" style="color: #003B4F;">def</span> etl_web_to_gcs() <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb36-60">    <span class="co" style="color: #5E5E5E;">"""The main ETL function"""</span></span>
<span id="cb36-61">    dataset_file <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"spotify"</span></span>
<span id="cb36-62">    dataset_url <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"data/spotify.csv"</span></span>
<span id="cb36-63">    df <span class="op" style="color: #5E5E5E;">=</span> fetch(dataset_url)</span>
<span id="cb36-64">    df_clean <span class="op" style="color: #5E5E5E;">=</span> clean(df)</span>
<span id="cb36-65">    path <span class="op" style="color: #5E5E5E;">=</span> write_local(df_clean,dataset_file)</span>
<span id="cb36-66">    write_gcs(path)</span>
<span id="cb36-67">    </span>
<span id="cb36-68"><span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">__name__</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"__main__"</span>:</span>
<span id="cb36-69">    etl_web_to_gcs()</span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Final_Project/de_zoomcamp_project_files/figure-html/7ad7c67f-ad97-46bb-b9ee-35234470a604.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">prefect_etl_web_to_gcs_1.PNG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Final_Project/de_zoomcamp_project_files/figure-html/12163578-de87-4fde-a7d3-97912bb79930.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">prefect_etl_web_to_gcs_2.PNG</figcaption><p></p>
</figure>
</div>
<p>That has completed successfully. The parquet file has been uploaded to our data lake :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Final_Project/de_zoomcamp_project_files/figure-html/874c4434-bcd0-41b8-a2bd-e91a92bf4a05.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">bucket.PNG</figcaption><p></p>
</figure>
</div>
<p>I created the following Python script to take the parquet file from Google Cloud Storage and write to BigQuery as a table, and ran the file from the command line using :</p>
<pre><code>python etl_web_to_gcs.py</code></pre>
<p><code>etl_gcs_to_bq.py</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1"><span class="im" style="color: #00769E;">from</span> pathlib <span class="im" style="color: #00769E;">import</span> Path</span>
<span id="cb38-2"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb38-3"><span class="im" style="color: #00769E;">from</span> prefect <span class="im" style="color: #00769E;">import</span> flow, task</span>
<span id="cb38-4"><span class="im" style="color: #00769E;">from</span> prefect_gcp.cloud_storage <span class="im" style="color: #00769E;">import</span> GcsBucket</span>
<span id="cb38-5"><span class="im" style="color: #00769E;">from</span> prefect_gcp <span class="im" style="color: #00769E;">import</span> GcpCredentials</span>
<span id="cb38-6"></span>
<span id="cb38-7"></span>
<span id="cb38-8"><span class="at" style="color: #657422;">@task</span>(retries<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span>)</span>
<span id="cb38-9"><span class="kw" style="color: #003B4F;">def</span> extract_from_gcs() <span class="op" style="color: #5E5E5E;">-&gt;</span> Path:</span>
<span id="cb38-10">    <span class="co" style="color: #5E5E5E;">"""Download data from GCS"""</span></span>
<span id="cb38-11">    gcs_path <span class="op" style="color: #5E5E5E;">=</span> Path(<span class="ss" style="color: #20794D;">f"data/spotify.parquet"</span>)</span>
<span id="cb38-12">    gcs_block <span class="op" style="color: #5E5E5E;">=</span> GcsBucket.load(<span class="st" style="color: #20794D;">"de-zoomcamp"</span>)</span>
<span id="cb38-13">    gcs_block.get_directory(from_path<span class="op" style="color: #5E5E5E;">=</span>gcs_path, local_path<span class="op" style="color: #5E5E5E;">=</span><span class="ss" style="color: #20794D;">f"./data/"</span>)</span>
<span id="cb38-14">    <span class="cf" style="color: #003B4F;">return</span> Path(<span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>gcs_path<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb38-15"></span>
<span id="cb38-16"><span class="at" style="color: #657422;">@task</span>()</span>
<span id="cb38-17"><span class="kw" style="color: #003B4F;">def</span> transform(path: Path) <span class="op" style="color: #5E5E5E;">-&gt;</span> pd.DataFrame:</span>
<span id="cb38-18">    <span class="co" style="color: #5E5E5E;">"""Print some basic info"""</span></span>
<span id="cb38-19">    df <span class="op" style="color: #5E5E5E;">=</span> pd.read_parquet(path)</span>
<span id="cb38-20">    <span class="bu" style="color: null;">print</span>(df.head(<span class="dv" style="color: #AD0000;">2</span>))</span>
<span id="cb38-21">    <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"columns: </span><span class="sc" style="color: #5E5E5E;">{</span>df<span class="sc" style="color: #5E5E5E;">.</span>dtypes<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb38-22">    <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"rows: </span><span class="sc" style="color: #5E5E5E;">{</span><span class="bu" style="color: null;">len</span>(df)<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb38-23">    <span class="cf" style="color: #003B4F;">return</span> df</span>
<span id="cb38-24"> </span>
<span id="cb38-25"></span>
<span id="cb38-26"><span class="at" style="color: #657422;">@task</span>()</span>
<span id="cb38-27"><span class="kw" style="color: #003B4F;">def</span> write_bq(df: pd.DataFrame) <span class="op" style="color: #5E5E5E;">-&gt;</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb38-28">    <span class="co" style="color: #5E5E5E;">"""Write DataFrame to BiqQuery"""</span></span>
<span id="cb38-29"></span>
<span id="cb38-30">    gcp_credentials_block <span class="op" style="color: #5E5E5E;">=</span> GcpCredentials.load(<span class="st" style="color: #20794D;">"de-gcp-creds"</span>)</span>
<span id="cb38-31"></span>
<span id="cb38-32">    df.to_gbq(</span>
<span id="cb38-33">        destination_table<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"spotify.spotify_one_point_two_million"</span>,</span>
<span id="cb38-34">        project_id<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"de-zoomcamp-project137"</span>,</span>
<span id="cb38-35">        credentials<span class="op" style="color: #5E5E5E;">=</span>gcp_credentials_block.get_credentials_from_service_account(),</span>
<span id="cb38-36">        chunksize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">500_000</span>,</span>
<span id="cb38-37">        if_exists<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"replace"</span>,</span>
<span id="cb38-38">    )</span>
<span id="cb38-39"></span>
<span id="cb38-40"></span>
<span id="cb38-41"><span class="at" style="color: #657422;">@flow</span>()</span>
<span id="cb38-42"><span class="kw" style="color: #003B4F;">def</span> etl_gcs_to_bq():</span>
<span id="cb38-43">    <span class="co" style="color: #5E5E5E;">"""Main ETL flow to load data into Big Query"""</span></span>
<span id="cb38-44">    path <span class="op" style="color: #5E5E5E;">=</span> extract_from_gcs()</span>
<span id="cb38-45">    df <span class="op" style="color: #5E5E5E;">=</span> transform(path)</span>
<span id="cb38-46">    write_bq(df)</span>
<span id="cb38-47"></span>
<span id="cb38-48"></span>
<span id="cb38-49"><span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">__name__</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"__main__"</span>:</span>
<span id="cb38-50">    etl_gcs_to_bq()</span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Final_Project/de_zoomcamp_project_files/figure-html/76f5cd10-cb55-4f03-9449-1642c8fe0c60.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">prefect_etl_gcs_to_bq.PNG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Final_Project/de_zoomcamp_project_files/figure-html/ebcd0e19-6416-4012-b985-cbd80987da89.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">prefect_etl_gcs_to_bq_1.PNG</figcaption><p></p>
</figure>
</div>
<p>That has also completed successfully. A table has been created in BigQuery from the data held in Google Cloud Storage :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Final_Project/de_zoomcamp_project_files/figure-html/74f1ea15-aeb9-42a3-a4c5-e2180f6006c2.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">big_query.PNG</figcaption><p></p>
</figure>
</div>
</section>
<section id="data-transformation" class="level3">
<h3 class="anchored" data-anchor-id="data-transformation">4. Data Transformation</h3>
<section id="set-up-dbt-cloud-within-bigquery" class="level4">
<h4 class="anchored" data-anchor-id="set-up-dbt-cloud-within-bigquery">Set up dbt cloud within BigQuery</h4>
<p>We need to create a dedicated service account within Big Query to enable communication with dbt cloud.</p>
<ol type="1">
<li>Open the <a href="https://console.cloud.google.com/apis/credentials/wizard">BigQuery credential wizard</a> to create a service account in your project :</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Final_Project/de_zoomcamp_project_files/figure-html/6aa42ad2-af4f-42f7-8fcc-f67f1c7a821f.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">big_query_dbt.PNG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Final_Project/de_zoomcamp_project_files/figure-html/6ccd2f96-c51c-4323-8402-7ccbdf4ba261.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">dbt_service_account.PNG</figcaption><p></p>
</figure>
</div>
<ol start="2" type="1">
<li>You can either grant the specific roles the account will need or simply use <code>BigQuery Admin</code>, as you’ll be the sole user of both accounts and data.</li>
</ol>
<p><em>Note: if you decide to use specific roles instead of BQ Admin, some users reported that they needed to add also viewer role to avoid encountering denied access errors.</em></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Final_Project/de_zoomcamp_project_files/figure-html/4a26d5f5-691b-4a1e-a330-c56690390076.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">dbt_service_account_grantaccess.PNG</figcaption><p></p>
</figure>
</div>
<ol start="3" type="1">
<li>Now that the service account has been created we need to add and download a JSON key, go to the keys section, select “create new key”. Select key type JSON and once you click on <code>CREATE</code> it will get inmediately downloaded for you to use.</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Final_Project/de_zoomcamp_project_files/figure-html/bfa9f000-9502-47ef-ac78-1a97bb35e180.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">dbt_service_account_key.PNG</figcaption><p></p>
</figure>
</div>
</section>
<section id="create-a-dbt-cloud-project" class="level4">
<h4 class="anchored" data-anchor-id="create-a-dbt-cloud-project">Create a dbt cloud project</h4>
<ol type="1">
<li>Create a dbt cloud account from <a href="https://www.getdbt.com/pricing/">their website</a> (free for freelance developers)</li>
<li>Once you have logged in you will be prompted to <code>Complete Project Setup</code></li>
<li>Naming your project - a default name <code>Analytics</code> is given</li>
<li>Choose BigQuery as your data warehouse:</li>
<li>Upload the key you downloaded from BigQuery. This will populate most fields related to the production credentials.</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Final_Project/de_zoomcamp_project_files/figure-html/11d0078d-9068-4fe2-8b82-71d92461960b.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">dbt_project_setup.PNG</figcaption><p></p>
</figure>
</div>
<p>Scroll down to the end of the page, set up your development credentials, and run the connection test and hit <code>Next</code>:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Final_Project/de_zoomcamp_project_files/figure-html/31205978-0fbd-426a-acd3-dc4d471e5c9d.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">dbt_development_credentials.PNG</figcaption><p></p>
</figure>
</div>
</section>
<section id="add-github-repository" class="level4">
<h4 class="anchored" data-anchor-id="add-github-repository">Add GitHub repository</h4>
<ol type="1">
<li>Select git clone and paste the SSH key from your repo. Then hit <code>Import</code></li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Final_Project/de_zoomcamp_project_files/figure-html/e223d392-aa63-43ae-a6ff-0f7504434eb9.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">project_github_repo.PNG</figcaption><p></p>
</figure>
</div>
<ol start="2" type="1">
<li>You will get a deploy key :</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Final_Project/de_zoomcamp_project_files/figure-html/feaebd52-825e-4b1c-aa5f-4f26ac12f161.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">image.png</figcaption><p></p>
</figure>
</div>
<ol start="3" type="1">
<li>Head to your GH repo and go to the settings tab. Under security you’ll find the menu <em>deploy keys</em>. Click on <code>Add deploy key</code> and paste the deploy key provided by dbt cloud. Make sure to tick on “write access”.</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Final_Project/de_zoomcamp_project_files/figure-html/7ec9600e-f758-4e00-8b4f-3f980f6f5988.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">add_dbt_deploy_key_to_github.PNG</figcaption><p></p>
</figure>
</div>
<p>For a detailed set up guide <a href="https://github.com/DataTalksClub/data-engineering-zoomcamp/blob/main/week_4_analytics_engineering/dbt_cloud_setup.md">see here</a>.</p>
<p><code>Initialize dbt project</code></p>
<p>This builds out your folder structure with example models.</p>
<p>Make your initial commit by clicking <code>Commit and sync</code>. Use the commit message “initial commit” and click <code>Commit</code>. Note that the files are read-only and you have to <code>Create branch</code> before you can edit or add new files :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Final_Project/de_zoomcamp_project_files/figure-html/21f02bab-a579-44a3-9fb8-0800d7dbf850.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">dbt_initial_commit.PNG</figcaption><p></p>
</figure>
</div>
<p>Once you have created a branch you can edit and add new files. Essentially we only need three files to build our model :</p>
<p><code>dbt.project.yml</code></p>
<p>The basic config below can be tailored to meet your own needs. The key fields are :</p>
<p><code>name</code> &lt;spotify_dbt&gt; This will be the name of the dataset created in BiqQuery on successful run of the transformation model</p>
<p><code>models</code>:<br>
&lt;spotify_dbt&gt; This should match the name specified above</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1"><span class="co" style="color: #5E5E5E;"># Name your project! Project names should contain only lowercase characters</span></span>
<span id="cb39-2"><span class="co" style="color: #5E5E5E;"># and underscores. A good package name should reflect your organization's</span></span>
<span id="cb39-3"><span class="co" style="color: #5E5E5E;"># name or the intended use of these models</span></span>
<span id="cb39-4"></span>
<span id="cb39-5">name: <span class="st" style="color: #20794D;">'spotify_dbt'</span> <span class="co" style="color: #5E5E5E;"># This will be the name of the dataset dbt will create in BigQuery</span></span>
<span id="cb39-6">version: <span class="st" style="color: #20794D;">'1.0.0'</span></span>
<span id="cb39-7">config<span class="op" style="color: #5E5E5E;">-</span>version: <span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb39-8"></span>
<span id="cb39-9"><span class="co" style="color: #5E5E5E;"># This setting configures which "profile" dbt uses for this project.</span></span>
<span id="cb39-10">profile: <span class="st" style="color: #20794D;">'default'</span></span>
<span id="cb39-11"></span>
<span id="cb39-12"><span class="co" style="color: #5E5E5E;"># These configurations specify where dbt should look for different types of files.</span></span>
<span id="cb39-13"><span class="co" style="color: #5E5E5E;"># The `source-paths` config, for example, states that models in this project can be</span></span>
<span id="cb39-14"><span class="co" style="color: #5E5E5E;"># found in the "models/" directory. You probably won't need to change these!</span></span>
<span id="cb39-15">model<span class="op" style="color: #5E5E5E;">-</span>paths: [<span class="st" style="color: #20794D;">"models"</span>]</span>
<span id="cb39-16">analysis<span class="op" style="color: #5E5E5E;">-</span>paths: [<span class="st" style="color: #20794D;">"analyses"</span>]</span>
<span id="cb39-17">test<span class="op" style="color: #5E5E5E;">-</span>paths: [<span class="st" style="color: #20794D;">"tests"</span>]</span>
<span id="cb39-18">seed<span class="op" style="color: #5E5E5E;">-</span>paths: [<span class="st" style="color: #20794D;">"seeds"</span>]</span>
<span id="cb39-19">macro<span class="op" style="color: #5E5E5E;">-</span>paths: [<span class="st" style="color: #20794D;">"macros"</span>]</span>
<span id="cb39-20">snapshot<span class="op" style="color: #5E5E5E;">-</span>paths: [<span class="st" style="color: #20794D;">"snapshots"</span>]</span>
<span id="cb39-21"></span>
<span id="cb39-22">target<span class="op" style="color: #5E5E5E;">-</span>path: <span class="st" style="color: #20794D;">"target"</span>  <span class="co" style="color: #5E5E5E;"># directory which will store compiled SQL files</span></span>
<span id="cb39-23">clean<span class="op" style="color: #5E5E5E;">-</span>targets:         <span class="co" style="color: #5E5E5E;"># directories to be removed by `dbt clean`</span></span>
<span id="cb39-24">  <span class="op" style="color: #5E5E5E;">-</span> <span class="st" style="color: #20794D;">"target"</span></span>
<span id="cb39-25">  <span class="op" style="color: #5E5E5E;">-</span> <span class="st" style="color: #20794D;">"dbt_packages"</span></span>
<span id="cb39-26"></span>
<span id="cb39-27"></span>
<span id="cb39-28"><span class="co" style="color: #5E5E5E;"># Configuring models</span></span>
<span id="cb39-29"><span class="co" style="color: #5E5E5E;"># Full documentation: https://docs.getdbt.com/docs/configuring-models</span></span>
<span id="cb39-30"></span>
<span id="cb39-31"><span class="co" style="color: #5E5E5E;"># In this example config, we tell dbt to build all models in the example/ directory</span></span>
<span id="cb39-32"><span class="co" style="color: #5E5E5E;"># as tables. These settings can be overridden in the individual model files</span></span>
<span id="cb39-33"><span class="co" style="color: #5E5E5E;"># using the `{{ config(...) }}` macro.</span></span>
<span id="cb39-34">models:</span>
<span id="cb39-35">  spotify_dbt:</span>
<span id="cb39-36">      <span class="co" style="color: #5E5E5E;"># Applies to all files under models/.../</span></span>
<span id="cb39-37">      staging:</span>
<span id="cb39-38">          materialized: view</span></code></pre></div>
</div>
<p><code>schema.yml</code></p>
<p>Note that this file also includes the <code>source</code> i.e.&nbsp;the location of the data that the transforms included in our model are to be performed on :</p>
<p><code>name</code> : &lt;spotify&gt; Choose a name for this <code>source</code> variable, This will be referenced in the model.sql file<br>
<code>database</code>: &lt;de-zoomcamp-project137&gt; BigQuery project reference</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1">version: <span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb40-2"></span>
<span id="cb40-3">sources:</span>
<span id="cb40-4">    <span class="op" style="color: #5E5E5E;">-</span> name: spotify <span class="co" style="color: #5E5E5E;"># Choose a name. This will be the 'source' referred to in the </span></span>
<span id="cb40-5">      database: de<span class="op" style="color: #5E5E5E;">-</span>zoomcamp<span class="op" style="color: #5E5E5E;">-</span>project137 <span class="co" style="color: #5E5E5E;"># BigQuery project reference</span></span>
<span id="cb40-6">      tables:</span>
<span id="cb40-7">        <span class="op" style="color: #5E5E5E;">-</span> name: spotify_one_point_two_million <span class="co" style="color: #5E5E5E;"># Choose a name for the table to be created in BigQuery</span></span>
<span id="cb40-8">       </span>
<span id="cb40-9">models:</span>
<span id="cb40-10">    <span class="op" style="color: #5E5E5E;">-</span> name: spotify_one_point_two_million</span>
<span id="cb40-11">      description: <span class="op" style="color: #5E5E5E;">&gt;</span></span>
<span id="cb40-12">        Curated by Rodolfo Gigueroa, over <span class="fl" style="color: #AD0000;">1.2</span> million songs downloaded <span class="im" style="color: #00769E;">from</span> the MusicBrainz catalog <span class="kw" style="color: #003B4F;">and</span> <span class="dv" style="color: #AD0000;">24</span> track features obtained using the Spotify</span>
<span id="cb40-13">        API. </span>
<span id="cb40-14">      columns:</span>
<span id="cb40-15">          <span class="op" style="color: #5E5E5E;">-</span> name: <span class="bu" style="color: null;">id</span></span>
<span id="cb40-16">            description: <span class="op" style="color: #5E5E5E;">&gt;</span></span>
<span id="cb40-17">              The base<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">62</span> identifier found at the end of the Spotify URI <span class="cf" style="color: #003B4F;">for</span> an artist, track, album, playlist, etc. Unlike a Spotify URI, a Spotify ID</span>
<span id="cb40-18">              does <span class="kw" style="color: #003B4F;">not</span> clearly identify the <span class="bu" style="color: null;">type</span> of resource<span class="op" style="color: #5E5E5E;">;</span> that information <span class="kw" style="color: #003B4F;">is</span> provided elsewhere <span class="kw" style="color: #003B4F;">in</span> the call. </span>
<span id="cb40-19">          <span class="op" style="color: #5E5E5E;">-</span> name: name </span>
<span id="cb40-20">            description: The name of the track                         </span>
<span id="cb40-21">          <span class="op" style="color: #5E5E5E;">-</span> name: album</span>
<span id="cb40-22">            description: The name of the album. In case of an album takedown, the value may be an empty string.</span>
<span id="cb40-23">          <span class="op" style="color: #5E5E5E;">-</span> name: album_id</span>
<span id="cb40-24">            description: The Spotify ID <span class="cf" style="color: #003B4F;">for</span> the album.</span>
<span id="cb40-25">          <span class="op" style="color: #5E5E5E;">-</span> name: artists</span>
<span id="cb40-26">            description: The name(s) of the artist(s).</span>
<span id="cb40-27">          <span class="op" style="color: #5E5E5E;">-</span> name: artist_ids</span>
<span id="cb40-28">            description: The Spotify ID <span class="cf" style="color: #003B4F;">for</span> the artist(s).</span>
<span id="cb40-29">          <span class="op" style="color: #5E5E5E;">-</span> name: track_number</span>
<span id="cb40-30">            description: The number of the track. If an album has several discs, the track number <span class="kw" style="color: #003B4F;">is</span> the number on the specified disc.</span>
<span id="cb40-31">          <span class="op" style="color: #5E5E5E;">-</span> name: disc_number</span>
<span id="cb40-32">            description: The disc number (usually <span class="dv" style="color: #AD0000;">1</span> unless the album consists of more than one disc).</span>
<span id="cb40-33">          <span class="op" style="color: #5E5E5E;">-</span> name: explicit</span>
<span id="cb40-34">            description: Whether <span class="kw" style="color: #003B4F;">or</span> <span class="kw" style="color: #003B4F;">not</span> the track has explicit lyrics ( true <span class="op" style="color: #5E5E5E;">=</span> yes it does<span class="op" style="color: #5E5E5E;">;</span> false <span class="op" style="color: #5E5E5E;">=</span> no it does <span class="kw" style="color: #003B4F;">not</span> OR unknown).</span>
<span id="cb40-35">          <span class="op" style="color: #5E5E5E;">-</span> name: danceability</span>
<span id="cb40-36">            description: <span class="op" style="color: #5E5E5E;">&gt;</span></span>
<span id="cb40-37">             Danceability describes how suitable a track <span class="kw" style="color: #003B4F;">is</span> <span class="cf" style="color: #003B4F;">for</span> dancing based on a combination of musical elements including tempo, rhythm stability, </span>
<span id="cb40-38">             beat strength, <span class="kw" style="color: #003B4F;">and</span> overall regularity. A value of <span class="fl" style="color: #AD0000;">0.0</span> <span class="kw" style="color: #003B4F;">is</span> least danceable <span class="kw" style="color: #003B4F;">and</span> <span class="fl" style="color: #AD0000;">1.0</span> <span class="kw" style="color: #003B4F;">is</span> most danceable.           </span>
<span id="cb40-39">          <span class="op" style="color: #5E5E5E;">-</span> name: energy </span>
<span id="cb40-40">            description: <span class="op" style="color: #5E5E5E;">&gt;</span></span>
<span id="cb40-41">             Energy <span class="kw" style="color: #003B4F;">is</span> a measure <span class="im" style="color: #00769E;">from</span> <span class="fl" style="color: #AD0000;">0.0</span> to <span class="fl" style="color: #AD0000;">1.0</span> <span class="kw" style="color: #003B4F;">and</span> represents a perceptual measure of intensity <span class="kw" style="color: #003B4F;">and</span> activity. Typically, energetic tracks feel fast,</span>
<span id="cb40-42">             loud, <span class="kw" style="color: #003B4F;">and</span> noisy. For example, death metal has high energy, <span class="cf" style="color: #003B4F;">while</span> a Bach prelude scores low on the scale. Perceptual features contributing</span>
<span id="cb40-43">             to this attribute include dynamic <span class="bu" style="color: null;">range</span>, perceived loudness, timbre, onset rate, <span class="kw" style="color: #003B4F;">and</span> general entropy.</span>
<span id="cb40-44">          <span class="op" style="color: #5E5E5E;">-</span> name: key</span>
<span id="cb40-45">            description: <span class="op" style="color: #5E5E5E;">&gt;</span></span>
<span id="cb40-46">             The key the track <span class="kw" style="color: #003B4F;">is</span> <span class="kw" style="color: #003B4F;">in</span>. Integers <span class="bu" style="color: null;">map</span> to pitches using standard Pitch Class notation. E.g. <span class="dv" style="color: #AD0000;">0</span> <span class="op" style="color: #5E5E5E;">=</span> C, <span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">=</span> C♯<span class="op" style="color: #5E5E5E;">/</span>D♭, <span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">=</span> D, <span class="kw" style="color: #003B4F;">and</span> so on. If no key </span>
<span id="cb40-47">             was detected, the value <span class="kw" style="color: #003B4F;">is</span> <span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">1.</span></span>
<span id="cb40-48">          <span class="op" style="color: #5E5E5E;">-</span> name: loudness</span>
<span id="cb40-49">            description: <span class="op" style="color: #5E5E5E;">&gt;</span></span>
<span id="cb40-50">             The overall loudness of a track <span class="kw" style="color: #003B4F;">in</span> decibels (dB). Loudness values are averaged across the entire track <span class="kw" style="color: #003B4F;">and</span> are useful <span class="cf" style="color: #003B4F;">for</span> comparing </span>
<span id="cb40-51">             relative loudness of tracks. Loudness <span class="kw" style="color: #003B4F;">is</span> the quality of a sound that <span class="kw" style="color: #003B4F;">is</span> the primary psychological correlate of physical strength </span>
<span id="cb40-52">             (amplitude). Values typically <span class="bu" style="color: null;">range</span> between <span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">60</span> <span class="kw" style="color: #003B4F;">and</span> <span class="dv" style="color: #AD0000;">0</span> db.</span>
<span id="cb40-53">          <span class="op" style="color: #5E5E5E;">-</span> name: mode</span>
<span id="cb40-54">            description: <span class="op" style="color: #5E5E5E;">&gt;</span></span>
<span id="cb40-55">              Mode indicates the modality (major <span class="kw" style="color: #003B4F;">or</span> minor) of a track, the <span class="bu" style="color: null;">type</span> of scale <span class="im" style="color: #00769E;">from</span> which its melodic content <span class="kw" style="color: #003B4F;">is</span> derived. Major <span class="kw" style="color: #003B4F;">is</span> represented</span>
<span id="cb40-56">              by <span class="dv" style="color: #AD0000;">1</span> <span class="kw" style="color: #003B4F;">and</span> minor <span class="kw" style="color: #003B4F;">is</span> <span class="fl" style="color: #AD0000;">0.</span></span>
<span id="cb40-57">          <span class="op" style="color: #5E5E5E;">-</span> name: speechiness</span>
<span id="cb40-58">            description: <span class="op" style="color: #5E5E5E;">&gt;</span></span>
<span id="cb40-59">              Speechiness detects the presence of spoken words <span class="kw" style="color: #003B4F;">in</span> a track. The more exclusively speech<span class="op" style="color: #5E5E5E;">-</span>like the recording (e.g. talk show, audio book, </span>
<span id="cb40-60">              poetry), the closer to <span class="fl" style="color: #AD0000;">1.0</span> the attribute value. Values above <span class="fl" style="color: #AD0000;">0.66</span> describe tracks that are probably made entirely of spoken words. Values </span>
<span id="cb40-61">              between <span class="fl" style="color: #AD0000;">0.33</span> <span class="kw" style="color: #003B4F;">and</span> <span class="fl" style="color: #AD0000;">0.66</span> describe tracks that may contain both music <span class="kw" style="color: #003B4F;">and</span> speech, either <span class="kw" style="color: #003B4F;">in</span> sections <span class="kw" style="color: #003B4F;">or</span> layered, including such cases <span class="im" style="color: #00769E;">as</span> rap </span>
<span id="cb40-62">              music. Values below <span class="fl" style="color: #AD0000;">0.33</span> most likely represent music <span class="kw" style="color: #003B4F;">and</span> other non<span class="op" style="color: #5E5E5E;">-</span>speech<span class="op" style="color: #5E5E5E;">-</span>like tracks.         </span>
<span id="cb40-63">          <span class="op" style="color: #5E5E5E;">-</span> name: acousticness</span>
<span id="cb40-64">            description: A confidence measure <span class="im" style="color: #00769E;">from</span> <span class="fl" style="color: #AD0000;">0.0</span> to <span class="fl" style="color: #AD0000;">1.0</span> of whether the track <span class="kw" style="color: #003B4F;">is</span> acoustic. <span class="fl" style="color: #AD0000;">1.0</span> represents high confidence the track <span class="kw" style="color: #003B4F;">is</span> acoustic.</span>
<span id="cb40-65">          <span class="op" style="color: #5E5E5E;">-</span> name: instrumentalness</span>
<span id="cb40-66">            description: <span class="op" style="color: #5E5E5E;">&gt;</span></span>
<span id="cb40-67">             Predicts whether a track contains no vocals. <span class="st" style="color: #20794D;">"Ooh"</span> <span class="kw" style="color: #003B4F;">and</span> <span class="st" style="color: #20794D;">"aah"</span> sounds are treated <span class="im" style="color: #00769E;">as</span> instrumental <span class="kw" style="color: #003B4F;">in</span> this context. Rap <span class="kw" style="color: #003B4F;">or</span> spoken word tracks </span>
<span id="cb40-68">             are clearly <span class="st" style="color: #20794D;">"vocal"</span>. The closer the instrumentalness value <span class="kw" style="color: #003B4F;">is</span> to <span class="fl" style="color: #AD0000;">1.0</span>, the greater likelihood the track contains no vocal content. Values above </span>
<span id="cb40-69">             <span class="fl" style="color: #AD0000;">0.5</span> are intended to represent instrumental tracks, but confidence <span class="kw" style="color: #003B4F;">is</span> higher <span class="im" style="color: #00769E;">as</span> the value approaches <span class="fl" style="color: #AD0000;">1.0</span>.</span>
<span id="cb40-70">          <span class="op" style="color: #5E5E5E;">-</span> name: liveness</span>
<span id="cb40-71">            description: <span class="op" style="color: #5E5E5E;">&gt;</span></span>
<span id="cb40-72">             Detects the presence of an audience <span class="kw" style="color: #003B4F;">in</span> the recording. Higher liveness values represent an increased probability that the track was performed </span>
<span id="cb40-73">             live. A value above <span class="fl" style="color: #AD0000;">0.8</span> provides strong likelihood that the track <span class="kw" style="color: #003B4F;">is</span> live.</span>
<span id="cb40-74">          <span class="op" style="color: #5E5E5E;">-</span> name: valence</span>
<span id="cb40-75">            description: A measure <span class="im" style="color: #00769E;">from</span> <span class="fl" style="color: #AD0000;">0.0</span> to <span class="fl" style="color: #AD0000;">1.0</span> describing the musical positiveness conveyed by a track. Tracks <span class="cf" style="color: #003B4F;">with</span> high valence sound more positive (e.g. happy, cheerful, euphoric), <span class="cf" style="color: #003B4F;">while</span> tracks <span class="cf" style="color: #003B4F;">with</span> low valence sound more negative (e.g. sad, depressed, angry).</span>
<span id="cb40-76">          <span class="op" style="color: #5E5E5E;">-</span> name: tempo</span>
<span id="cb40-77">            description: <span class="op" style="color: #5E5E5E;">&gt;</span></span>
<span id="cb40-78">             The overall estimated tempo of a track <span class="kw" style="color: #003B4F;">in</span> beats per minute (BPM). In musical terminology, tempo <span class="kw" style="color: #003B4F;">is</span> the speed <span class="kw" style="color: #003B4F;">or</span> pace of a given piece <span class="kw" style="color: #003B4F;">and</span> </span>
<span id="cb40-79">             derives directly <span class="im" style="color: #00769E;">from</span> the average beat duration.</span>
<span id="cb40-80">          <span class="op" style="color: #5E5E5E;">-</span> name: duration_ms</span>
<span id="cb40-81">            description: The duration of the track <span class="kw" style="color: #003B4F;">in</span> milliseconds.</span>
<span id="cb40-82">          <span class="op" style="color: #5E5E5E;">-</span> name: time_signature</span>
<span id="cb40-83">            description: <span class="op" style="color: #5E5E5E;">&gt;</span></span>
<span id="cb40-84">             An estimated time signature. The time signature (meter) <span class="kw" style="color: #003B4F;">is</span> a notational convention to specify how many beats are <span class="kw" style="color: #003B4F;">in</span> each bar (<span class="kw" style="color: #003B4F;">or</span> measure). </span>
<span id="cb40-85">             The time signature ranges <span class="im" style="color: #00769E;">from</span> <span class="dv" style="color: #AD0000;">3</span> to <span class="dv" style="color: #AD0000;">7</span> indicating time signatures of <span class="st" style="color: #20794D;">"3/4"</span>, to <span class="st" style="color: #20794D;">"7/4"</span>.</span>
<span id="cb40-86">          <span class="op" style="color: #5E5E5E;">-</span> name: year</span>
<span id="cb40-87">            description: The year <span class="kw" style="color: #003B4F;">in</span> which the track was released</span>
<span id="cb40-88">          <span class="op" style="color: #5E5E5E;">-</span> name: release_date</span>
<span id="cb40-89">            description: Release date of the track <span class="kw" style="color: #003B4F;">in</span> the <span class="bu" style="color: null;">format</span> <span class="dv" style="color: #AD0000;">2023</span><span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">0</span><span class="er" style="color: #AD0000;">4</span><span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">17</span></span></code></pre></div>
</div>
<p><code>spotify_one_point_two_million.sql</code></p>
<p>Although this is a <code>.sql</code> file this is actually our transformation <code>model</code>. Note the first line configuration overrides the <code>materialized</code> setting that I configured in my <code>dbt.project.yml</code> file.</p>
<p>Note also the following :</p>
<pre><code>FROM {{ source('spotify', 'spotify_one_point_two_million')}}</code></pre>
<p>This specifies that dbt will apply transformations on my dataset in BiqQuery named <code>spotify</code> and specifically, on the table named <code>spotify_one_point_two_million</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">{{ config(materialized<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'table'</span>) }}</span>
<span id="cb42-2"></span>
<span id="cb42-3">SELECT </span>
<span id="cb42-4">    <span class="op" style="color: #5E5E5E;">--</span> identifiers</span>
<span id="cb42-5">    name,</span>
<span id="cb42-6">    album,</span>
<span id="cb42-7">    artists,</span>
<span id="cb42-8">    explicit,</span>
<span id="cb42-9">    danceability,</span>
<span id="cb42-10">    energy,</span>
<span id="cb42-11">    {{ get_key_description(<span class="st" style="color: #20794D;">'key'</span>) }} AS key_description, </span>
<span id="cb42-12">    loudness,</span>
<span id="cb42-13">    {{ get_modality_description(<span class="st" style="color: #20794D;">'mode'</span>) }} AS modality_description, </span>
<span id="cb42-14">    speechiness,</span>
<span id="cb42-15">    acousticness,</span>
<span id="cb42-16">    instrumentalness,</span>
<span id="cb42-17">    liveness,</span>
<span id="cb42-18">    valence,</span>
<span id="cb42-19">    tempo,</span>
<span id="cb42-20">    duration_s,</span>
<span id="cb42-21">    year_date,</span>
<span id="cb42-22">     CASE</span>
<span id="cb42-23">        WHEN year_date BETWEEN <span class="st" style="color: #20794D;">'1900-01-01 00:00:00 UTC'</span> AND <span class="st" style="color: #20794D;">'1909-12-31 00:00:00 UTC'</span> THEN <span class="st" style="color: #20794D;">'Naughts'</span></span>
<span id="cb42-24">        WHEN year_date BETWEEN <span class="st" style="color: #20794D;">'1910-01-01 00:00:00 UTC'</span> AND <span class="st" style="color: #20794D;">'1919-12-31 00:00:00 UTC'</span> THEN <span class="st" style="color: #20794D;">'Tens'</span></span>
<span id="cb42-25">        WHEN year_date BETWEEN <span class="st" style="color: #20794D;">'1920-01-01 00:00:00 UTC'</span> AND <span class="st" style="color: #20794D;">'1929-12-31 00:00:00 UTC'</span> THEN <span class="st" style="color: #20794D;">'Roaring Twenties'</span></span>
<span id="cb42-26">        WHEN year_date BETWEEN <span class="st" style="color: #20794D;">'1930-01-01 00:00:00 UTC'</span> AND <span class="st" style="color: #20794D;">'1939-12-31 00:00:00 UTC'</span> THEN <span class="st" style="color: #20794D;">'Dirty Thirties'</span></span>
<span id="cb42-27">        WHEN year_date BETWEEN <span class="st" style="color: #20794D;">'1940-01-01 00:00:00 UTC'</span> AND <span class="st" style="color: #20794D;">'1949-12-31 00:00:00 UTC'</span> THEN <span class="st" style="color: #20794D;">'Forties'</span></span>
<span id="cb42-28">        WHEN year_date BETWEEN <span class="st" style="color: #20794D;">'1950-01-01 00:00:00 UTC'</span> AND <span class="st" style="color: #20794D;">'1959-12-31 00:00:00 UTC'</span> THEN <span class="st" style="color: #20794D;">'Fabulous Fifties'</span></span>
<span id="cb42-29">        WHEN year_date BETWEEN <span class="st" style="color: #20794D;">'1960-01-01 00:00:00 UTC'</span> AND <span class="st" style="color: #20794D;">'1969-12-31 00:00:00 UTC'</span> THEN <span class="st" style="color: #20794D;">'Swinging Sixties'</span></span>
<span id="cb42-30">        WHEN year_date BETWEEN <span class="st" style="color: #20794D;">'1970-01-01 00:00:00 UTC'</span> AND <span class="st" style="color: #20794D;">'1979-12-31 00:00:00 UTC'</span> THEN <span class="st" style="color: #20794D;">'Seventies'</span></span>
<span id="cb42-31">        WHEN year_date BETWEEN <span class="st" style="color: #20794D;">'1980-01-01 00:00:00 UTC'</span> AND <span class="st" style="color: #20794D;">'1989-12-31 00:00:00 UTC'</span> THEN <span class="st" style="color: #20794D;">'Eighties'</span></span>
<span id="cb42-32">        WHEN year_date BETWEEN <span class="st" style="color: #20794D;">'1990-01-01 00:00:00 UTC'</span> AND <span class="st" style="color: #20794D;">'1999-12-31 00:00:00 UTC'</span> THEN <span class="st" style="color: #20794D;">'Nineties'</span></span>
<span id="cb42-33">        WHEN year_date BETWEEN <span class="st" style="color: #20794D;">'2000-01-01 00:00:00 UTC'</span> AND <span class="st" style="color: #20794D;">'2009-12-31 00:00:00 UTC'</span> THEN <span class="st" style="color: #20794D;">'Noughties'</span></span>
<span id="cb42-34">        WHEN year_date BETWEEN <span class="st" style="color: #20794D;">'2010-01-01 00:00:00 UTC'</span> AND <span class="st" style="color: #20794D;">'2019-12-31 00:00:00 UTC'</span> THEN <span class="st" style="color: #20794D;">'Teens'</span></span>
<span id="cb42-35">        WHEN year_date <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'2020-01-01 00:00:00 UTC'</span> THEN <span class="st" style="color: #20794D;">'2020'</span></span>
<span id="cb42-36">    END AS Decade,</span>
<span id="cb42-37">    CASE</span>
<span id="cb42-38">        WHEN valence <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="fl" style="color: #AD0000;">0.5</span> THEN <span class="st" style="color: #20794D;">'Happy'</span></span>
<span id="cb42-39">        WHEN valence <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="fl" style="color: #AD0000;">0.5</span> THEN <span class="st" style="color: #20794D;">'Sad'</span></span>
<span id="cb42-40">        ELSE <span class="st" style="color: #20794D;">'Ambivalent'</span></span>
<span id="cb42-41">    END AS Happy_Sad</span>
<span id="cb42-42">        </span>
<span id="cb42-43">FROM {{ source(<span class="st" style="color: #20794D;">'spotify'</span>, <span class="st" style="color: #20794D;">'spotify_one_point_two_million'</span>)}}</span></code></pre></div>
</div>
<p>You might wonder what this syntax is :</p>
<pre><code>{{ get_key_description('key') }} AS key_description, </code></pre>
<p>Macros in <a href="https://docs.getdbt.com/docs/build/jinja-macros">Jinja</a> are pieces of code that can be reused multiple times – they are analogous to “functions” in other programming languages, and are extremely useful if you find yourself repeating code across multiple models. Macros are defined in <code>.sql</code> files :</p>
<p><code>get_key_description</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1"></span>
<span id="cb44-2"> {<span class="co" style="color: #5E5E5E;">#</span></span>
<span id="cb44-3">    This macro returns the description of the key</span>
<span id="cb44-4"><span class="co" style="color: #5E5E5E;">#}</span></span>
<span id="cb44-5"></span>
<span id="cb44-6">{<span class="op" style="color: #5E5E5E;">%</span> macro get_key_description(key) <span class="op" style="color: #5E5E5E;">-%</span>}</span>
<span id="cb44-7"></span>
<span id="cb44-8">    case {{ key }}</span>
<span id="cb44-9">        when <span class="dv" style="color: #AD0000;">0</span> then <span class="st" style="color: #20794D;">'C'</span></span>
<span id="cb44-10">        when <span class="dv" style="color: #AD0000;">1</span> then <span class="st" style="color: #20794D;">'C#'</span></span>
<span id="cb44-11">        when <span class="dv" style="color: #AD0000;">2</span> then <span class="st" style="color: #20794D;">'D'</span></span>
<span id="cb44-12">        when <span class="dv" style="color: #AD0000;">3</span> then <span class="st" style="color: #20794D;">'D#'</span></span>
<span id="cb44-13">        when <span class="dv" style="color: #AD0000;">4</span> then <span class="st" style="color: #20794D;">'E'</span></span>
<span id="cb44-14">        when <span class="dv" style="color: #AD0000;">5</span> then <span class="st" style="color: #20794D;">'F'</span></span>
<span id="cb44-15">        when <span class="dv" style="color: #AD0000;">6</span> then <span class="st" style="color: #20794D;">'F#'</span></span>
<span id="cb44-16">        when <span class="dv" style="color: #AD0000;">7</span> then <span class="st" style="color: #20794D;">'G'</span></span>
<span id="cb44-17">        when <span class="dv" style="color: #AD0000;">8</span> then <span class="st" style="color: #20794D;">'G#'</span></span>
<span id="cb44-18">        when <span class="dv" style="color: #AD0000;">9</span> then <span class="st" style="color: #20794D;">'A'</span></span>
<span id="cb44-19">        when <span class="dv" style="color: #AD0000;">10</span> then <span class="st" style="color: #20794D;">'A#'</span></span>
<span id="cb44-20">        when <span class="dv" style="color: #AD0000;">11</span> then <span class="st" style="color: #20794D;">'B'</span></span>
<span id="cb44-21"></span>
<span id="cb44-22">    end</span>
<span id="cb44-23"></span>
<span id="cb44-24">{<span class="op" style="color: #5E5E5E;">%-</span> endmacro <span class="op" style="color: #5E5E5E;">%</span>}</span></code></pre></div>
</div>
<p><code>get_modality_description</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1"> {<span class="co" style="color: #5E5E5E;">#</span></span>
<span id="cb45-2">    This macro returns the description of the modality</span>
<span id="cb45-3"><span class="co" style="color: #5E5E5E;">#}</span></span>
<span id="cb45-4"></span>
<span id="cb45-5">{<span class="op" style="color: #5E5E5E;">%</span> macro get_modality_description(mode) <span class="op" style="color: #5E5E5E;">-%</span>}</span>
<span id="cb45-6"></span>
<span id="cb45-7">    case {{ mode }}</span>
<span id="cb45-8">        when <span class="dv" style="color: #AD0000;">0</span> then <span class="st" style="color: #20794D;">'Minor'</span></span>
<span id="cb45-9">        when <span class="dv" style="color: #AD0000;">1</span> then <span class="st" style="color: #20794D;">'Major'</span></span>
<span id="cb45-10">       </span>
<span id="cb45-11">    end</span>
<span id="cb45-12"></span>
<span id="cb45-13">{<span class="op" style="color: #5E5E5E;">%-</span> endmacro <span class="op" style="color: #5E5E5E;">%</span>}</span></code></pre></div>
</div>
<p>Now that we have our files set up we are ready to run our model. We can see from the lineage that all the connections are complete :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Final_Project/de_zoomcamp_project_files/figure-html/cbf84737-541b-46f6-b121-46d8b06a5915.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">dbt_lineage.PNG</figcaption><p></p>
</figure>
</div>
<p>We can run the model from the dbt console using :</p>
<pre><code>dbt run -m &lt;model_name.sql&gt;</code></pre>
<p>And we can see from the system log that the run was successful :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Final_Project/de_zoomcamp_project_files/figure-html/61a5f60d-e700-4833-98b4-7baadd99894a.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">dbt_system_log.PNG</figcaption><p></p>
</figure>
</div>
<p>And we have our table created in Big Query with <code>1,204,025</code> rows as expected.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Final_Project/de_zoomcamp_project_files/figure-html/57eda9cc-3966-4b3f-a629-37338c2b2983.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">biq_query_table.PNG</figcaption><p></p>
</figure>
</div>
</section>
</section>
<section id="visualization" class="level3">
<h3 class="anchored" data-anchor-id="visualization">5. Visualization</h3>
<p>We’ve come a long way since downloading our raw csv file from Kaggle. Our journey is almost over. It’s time now to visualize our data and gather some insights. For this purpose I will be using <a href="https://cloud.google.com/looker-studio">Looker Studio</a>. This will allow us to connect to our newly created table in BigQuery and create a Dashboard.</p>
<p>The first thing we need to do is create a data source. There are 23 different <code>connectors</code> at the time of writing. We will be using <code>BigQuery</code> :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Final_Project/de_zoomcamp_project_files/figure-html/53d97ff7-13e5-4c7b-836c-a2f96d838752.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">looker_connectors.PNG</figcaption><p></p>
</figure>
</div>
<p>Our recent dataset and table are sitting there ready for connection :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Final_Project/de_zoomcamp_project_files/figure-html/bc55aa38-e69d-4e76-936d-aea8ffd51419.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">looker_dataset.PNG</figcaption><p></p>
</figure>
</div>
<p>Hit <code>CONNECT</code> and we see our fields or columns are there with default settings attached which can be modified if required. Finally hit <code>CREATE REPORT</code> and you are taken to a blank canvass dashboard where the magic begins :)</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Final_Project/de_zoomcamp_project_files/figure-html/54baf35c-551c-4957-8532-add6836d4491.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">blank_canvass.PNG</figcaption><p></p>
</figure>
</div>
<p>For a complete guide you can check out the <a href="https://cloud.google.com/looker#section-5">Looker Documentation</a>, but the console is very intuitive, and a few strokes of the brush (or clicks of the keyboard) and I was able to produce <a href="https://lookerstudio.google.com/s/rdqSyyDxtu4">this dashboard</a> (screenshot included below if you can’t access the link).</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Final_Project/de_zoomcamp_project_files/figure-html/493f3890-b94a-45f8-a985-9f1e2ae3cca8.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Looker.PNG</figcaption><p></p>
</figure>
</div>


</section>
</section>

 ]]></description>
  <category>Terraform</category>
  <category>Prefect</category>
  <category>GCS</category>
  <category>BigQuery</category>
  <category>dbt</category>
  <category>Looker</category>
  <category>DataTalksClub</category>
  <guid>https://stephen137.github.io/posts/DE_Zoomcamp_Final_Project/de_zoomcamp_project.html</guid>
  <pubDate>Thu, 20 Apr 2023 22:00:00 GMT</pubDate>
  <media:content url="https://stephen137.github.io/posts/DE_Zoomcamp_Final_Project/Looker.PNG" medium="image"/>
</item>
<item>
  <title>Data Engineering Zoomcamp - Week 5</title>
  <dc:creator>Stephen Barrie</dc:creator>
  <link>https://stephen137.github.io/posts/DE_Zoomcamp_Week_5/DE_Zoomcamp_Week_5.html</link>
  <description><![CDATA[ 




<p>Computerized batch processing is a method of running software programs called jobs in batches automatically. While users are required to submit the jobs, no other interaction by the user is required to process the batch. Batches may automatically be run at scheduled times as well as being run contingent on the availability of computer resources.</p>
<section id="what-well-be-covering-this-week" class="level3">
<h3 class="anchored" data-anchor-id="what-well-be-covering-this-week">5.0 What we’ll be covering this week</h3>
<p>This week we’ll cover:</p>
<ul>
<li>Spark, Spark DataFrames, and Spark SQL</li>
<li>Joins in Spark</li>
<li>Spark internals</li>
<li>Running Spark in the Cloud</li>
<li>Connecting Spark to a Data Warehouse, BigQuery</li>
</ul>
</section>
<section id="introduction-to-batch-processing" class="level3">
<h3 class="anchored" data-anchor-id="introduction-to-batch-processing">5.1 Introduction to Batch Processing</h3>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_5/DE_Zoomcamp_Week_5_files/figure-html/27e80a16-ccdc-4402-8ab1-483de6d99577.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">batch_processing.PNG</figcaption><p></p>
</figure>
</div>
<p>There are typically two different ways of processing data :</p>
<p><code>Batch processing</code></p>
<p>Batch systems process large volumes of data and requests in sequential order.</p>
<p><code>Streaming (week 6)</code></p>
<p>Stream processing monitors real-time data and continually passes it on in the network.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_5/DE_Zoomcamp_Week_5_files/figure-html/9882afbc-6183-459c-b7cc-fa8c9622af14.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">streaming.PNG</figcaption><p></p>
</figure>
</div>
<p>Given their complementary capabilities, some enterprises have implemented a hybrid system that includes batch processing and stream processing in their daily operations.</p>
<section id="what-is-batch-processing" class="level4">
<h4 class="anchored" data-anchor-id="what-is-batch-processing">What is Batch Processing ?</h4>
<p>Batch processing is the method computers use to periodically complete high-volume, repetitive data jobs. Certain data processing tasks, such as backups, filtering, and sorting, can be compute intensive and inefficient to run on individual data transactions. Instead, data systems process such tasks in batches, often in off-peak times when computing resources are more commonly available, such as at the end of the day or overnight. For example, consider an ecommerce system that receives orders throughout the day. Instead of processing every order as it occurs, the system might collect all orders at the end of each day and share them in one batch with the order fulfillment team.</p>
</section>
<section id="why-is-batch-processing-important" class="level4">
<h4 class="anchored" data-anchor-id="why-is-batch-processing-important">Why is batch processing important?</h4>
<p>Organizations use batch processing because it requires minimal human interaction and makes repetitive tasks more efficient to run. You can set up batches of jobs composed of millions of records to be worked through together when compute power is most readily available, putting less stress on your systems. Modern batch processing also requires minimal human supervision or management. If there is an issue, the system automatically notifies the concerned team to solve it. Managers take a hands-off approach, trusting their batch processing software to do its job. More benefits of batch processing follow.</p>
</section>
<section id="use-cases-of-batch-processing-systems" class="level4">
<h4 class="anchored" data-anchor-id="use-cases-of-batch-processing-systems">Use cases of batch processing systems</h4>
<p><code>Financial services</code></p>
<p>Financial services organizations, from agile financial technologies to legacy enterprises, have been using batch processing in areas such as high performance computing for risk management, end-of-day transaction processing, and fraud surveillance. They use batch processing to minimize human error, increase speed and accuracy, and reduce costs with automation.</p>
<p><code>Software as a service</code></p>
<p>Enterprises that deliver software as a service (SaaS) applications often run into issues when it comes to scalability. Using batch processing, you can scale customer demand while automating job scheduling. Creating containerized application environments to scale demand for high-volume processing is a project that can take months or even years to complete, but batch processing systems help you achieve the same result in a much shorter timeframe.</p>
<p><code>Medical research</code></p>
<p>Analysis of large amounts of data—or big data—is a common requirement in the field of research. You can apply batch processing in data analytics applications such as computational chemistry, clinical modeling, molecular dynamics, and genomic sequencing testing and analysis. For example, scientists use batch processing to capture better data to begin drug design and gain a deeper understanding of the role of a particular biochemical process.</p>
<p><code>Digital media</code></p>
<p>Media and entertainment enterprises require highly scalable batch processing systems to automatically process data—such as files, graphics, and visual effects—for high-resolution video content. You can use batch processing to accelerate content creation, dynamically scale media packaging, and automate media workload.</p>
</section>
<section id="orchestration" class="level4">
<h4 class="anchored" data-anchor-id="orchestration">Orchestration</h4>
<p>A batch job is a job (a unit of work) that will process data in batches.</p>
<p>Batch jobs may be scheduled in many ways:</p>
<ul>
<li>weekly</li>
<li>daily</li>
<li>hourly</li>
<li>three times per hour</li>
<li>every 5 minutes</li>
</ul>
<p>and are commonly orchestrated with tools such as <a href="https://www.getdbt.com/"><code>dbt</code></a> or <a href="https://airflow.apache.org/"><code>Airflow</code></a>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_5/DE_Zoomcamp_Week_5_files/figure-html/34bd93cf-8330-40b2-85d2-674c7896079d.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">batch_workflow.PNG</figcaption><p></p>
</figure>
</div>
</section>
<section id="pros-and-cons" class="level4">
<h4 class="anchored" data-anchor-id="pros-and-cons">Pros and cons</h4>
<p><code>Advantages</code></p>
<ul>
<li>makes repetitive tasks more efficient to run, with minimal human interaction</li>
<li>re-executable. Jobs can be parameterized and easily retried if they fail</li>
<li>as we are not working in real time, we can set up batches of jobs composed of millions of records to be worked through together when compute power is most readily available, which puts less stress on your systems</li>
<li>scalability. Scripts can be executed on higher spec machines; Spark can be run in bigger clusters, etc</li>
</ul>
<p><code>Drawbacks</code></p>
<ul>
<li>there is an inherent delay in obtaining the processes data. The example workflow in the earlier graphic shows a 20 minute workflow to process an hour of data, and so the initial data is almost one hour and a half out of date before we can get our hands on it.</li>
</ul>
</section>
</section>
<section id="introduction-to-spark" class="level3">
<h3 class="anchored" data-anchor-id="introduction-to-spark">5.1.2 Introduction to Spark</h3>
<p>Apache Spark is a unified analytics engine for large-scale data processing.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_5/DE_Zoomcamp_Week_5_files/figure-html/00f076ca-feac-41d4-b8a2-1d6ba17a57ff.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">apache_spark.PNG</figcaption><p></p>
</figure>
</div>
<p>It is a multi-language engine, which provides high-level APIs in Java, Scala, Python and R, and an optimized engine that supports general execution graphs. It also supports a rich set of higher-level tools including:</p>
<ul>
<li><a href="https://spark.apache.org/docs/latest/sql-programming-guide.html">Spark SQL for SQL</a> and structured data processing</li>
<li><a href="https://spark.apache.org/docs/latest/api/python/getting_started/quickstart_ps.html">pandas API on Spark</a> for pandas workloads</li>
<li><a href="https://spark.apache.org/docs/latest/ml-guide.html">MLlib for machine learning</a></li>
<li><a href="https://spark.apache.org/docs/latest/graphx-programming-guide.html">GraphX for graph processing</a></li>
<li><a href="https://spark.apache.org/docs/latest/structured-streaming-programming-guide.html">Structured Streaming</a> for incremental computation and stream processing</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_5/DE_Zoomcamp_Week_5_files/figure-html/50857d50-5504-4eee-aae6-171f0808b8f4.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">when_spark.PNG</figcaption><p></p>
</figure>
</div>
<p>A typical workflow might look something like this :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_5/DE_Zoomcamp_Week_5_files/figure-html/5944e3b4-0910-4ff4-8ade-46d2f7f1c19f.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">spark_workflow.PNG</figcaption><p></p>
</figure>
</div>
</section>
<section id="installing-spark---linux-ubuntu-20.04" class="level3">
<h3 class="anchored" data-anchor-id="installing-spark---linux-ubuntu-20.04">5.2 Installing Spark - Linux (Ubuntu 20.04)</h3>
<section id="install-java" class="level4">
<h4 class="anchored" data-anchor-id="install-java">Install Java</h4>
<p>Here we’ll see how to install Spark 3.3.2 for Linux. It should also work for other Linux distros.</p>
<p>Download and unpack <a href="https://jdk.java.net/archive/">OpenJDK 11</a> (it’s important that the version is 11 - spark requires 8 or 11) from the command line :</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">wget https:<span class="op" style="color: #5E5E5E;">//</span>download.java.net<span class="op" style="color: #5E5E5E;">/</span>java<span class="op" style="color: #5E5E5E;">/</span>GA<span class="op" style="color: #5E5E5E;">/</span>jdk11<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">9</span><span class="op" style="color: #5E5E5E;">/</span>GPL<span class="op" style="color: #5E5E5E;">/</span>openjdk<span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">11.0.2</span><span class="er" style="color: #AD0000;">_linux</span><span class="op" style="color: #5E5E5E;">-</span>x64_bin.tar.gz</span>
<span id="cb1-2">    </span>
<span id="cb1-3">tar xzfv openjdk<span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">11.0.2</span><span class="er" style="color: #AD0000;">_linux</span><span class="op" style="color: #5E5E5E;">-</span>x64_bin.tar.gz</span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_5/DE_Zoomcamp_Week_5_files/figure-html/7b8e5c06-814a-4ec9-9d7d-0d8ffd95b687.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">java.PNG</figcaption><p></p>
</figure>
</div>
<p>Alternatively we can download <a href="https://www.oracle.com/pl/java/technologies/javase/jdk11-archive-downloads.html">Oracle JDK 11</a>.</p>
<p>Define <code>JAVA_HOME</code> and add it to <code>PATH</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">export JAVA_HOME<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"$</span><span class="sc" style="color: #5E5E5E;">{HOME}</span><span class="st" style="color: #20794D;">/Spark/jdk-11.0.2"</span></span>
<span id="cb2-2">export PATH<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"$</span><span class="sc" style="color: #5E5E5E;">{JAVA_HOME}</span><span class="st" style="color: #20794D;">/bin:$</span><span class="sc" style="color: #5E5E5E;">{PATH}</span><span class="st" style="color: #20794D;">"</span></span></code></pre></div>
</div>
<p>Check that it works:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">java <span class="op" style="color: #5E5E5E;">--</span>version</span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_5/DE_Zoomcamp_Week_5_files/figure-html/81bef254-e8b5-46c4-92a2-eddd11587ad1.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">java_version.PNG</figcaption><p></p>
</figure>
</div>
<p>Remove the archive :</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">rm openjdk<span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">11.0.2</span><span class="er" style="color: #AD0000;">_linux</span><span class="op" style="color: #5E5E5E;">-</span>x64_bin.tar.gz</span></code></pre></div>
</div>
</section>
<section id="install-spark" class="level4">
<h4 class="anchored" data-anchor-id="install-spark">Install Spark</h4>
<p>Download and unpack Spark (version 3.3.2) from the command line:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">wget https:<span class="op" style="color: #5E5E5E;">//</span>dlcdn.apache.org<span class="op" style="color: #5E5E5E;">/</span>spark<span class="op" style="color: #5E5E5E;">/</span>spark<span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">3.3.2</span><span class="op" style="color: #5E5E5E;">/</span>spark<span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">3.3.2</span><span class="op" style="color: #5E5E5E;">-</span><span class="bu" style="color: null;">bin</span><span class="op" style="color: #5E5E5E;">-</span>hadoop3.tgz</span>
<span id="cb5-2"></span>
<span id="cb5-3">tar xzfv spark<span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">3.3.2</span><span class="op" style="color: #5E5E5E;">-</span><span class="bu" style="color: null;">bin</span><span class="op" style="color: #5E5E5E;">-</span>hadoop3.tgz</span></code></pre></div>
</div>
<p>Define <code>SPARK_HOME</code> and add it to <code>PATH</code> :</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">export SPARK_HOME<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"$</span><span class="sc" style="color: #5E5E5E;">{HOME}</span><span class="st" style="color: #20794D;">/Spark/spark-3.3.2-bin-hadoop3"</span></span>
<span id="cb6-2">export PATH<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"$</span><span class="sc" style="color: #5E5E5E;">{SPARK_HOME}</span><span class="st" style="color: #20794D;">/bin:$</span><span class="sc" style="color: #5E5E5E;">{PATH}</span><span class="st" style="color: #20794D;">"</span></span></code></pre></div>
</div>
<p>Check that it works by executing <code>spark-shell</code> and run the following :</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">val data <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span> to <span class="dv" style="color: #AD0000;">10000</span></span>
<span id="cb7-2">val distData <span class="op" style="color: #5E5E5E;">=</span> sc.parallelize(data)</span>
<span id="cb7-3">distData.<span class="bu" style="color: null;">filter</span>(_ <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">10</span>).collect():</span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_5/DE_Zoomcamp_Week_5_files/figure-html/865bdaf1-dd79-4610-a693-5df5fcfc1fc9.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">spark_test.PNG</figcaption><p></p>
</figure>
</div>
<p>Remove the archive :</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">rm spark<span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">3.3.2</span><span class="op" style="color: #5E5E5E;">-</span><span class="bu" style="color: null;">bin</span><span class="op" style="color: #5E5E5E;">-</span>hadoop3.tgz</span></code></pre></div>
</div>
<p>Add these lines to the bottom of the <code>.bashrc</code> file using <code>nano .bashrc</code> :</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">export JAVA_HOME<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"$</span><span class="sc" style="color: #5E5E5E;">{HOME}</span><span class="st" style="color: #20794D;">/Spark/jdk-11.0.2"</span></span>
<span id="cb9-2">export PATH<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"$</span><span class="sc" style="color: #5E5E5E;">{JAVA_HOME}</span><span class="st" style="color: #20794D;">/bin:$</span><span class="sc" style="color: #5E5E5E;">{PATH}</span><span class="st" style="color: #20794D;">"</span></span>
<span id="cb9-3">export SPARK_HOME<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"$</span><span class="sc" style="color: #5E5E5E;">{HOME}</span><span class="st" style="color: #20794D;">/Spark/spark-3.3.2-bin-hadoop3"</span></span>
<span id="cb9-4">export PATH<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"$</span><span class="sc" style="color: #5E5E5E;">{SPARK_HOME}</span><span class="st" style="color: #20794D;">/bin:$</span><span class="sc" style="color: #5E5E5E;">{PATH}</span><span class="st" style="color: #20794D;">"</span></span></code></pre></div>
</div>
<p>Press <code>CTRL + O</code> to save the file, type the file name, and hit ENTER. To exit nano, all you need to do is to press <code>CTRL + X</code></p>
</section>
</section>
<section id="running-pyspark-in-jupyter" class="level3">
<h3 class="anchored" data-anchor-id="running-pyspark-in-jupyter">5.2.1 Running PySpark in Jupyter</h3>
<p>This document assumes you already have python. To run PySpark, we first need to add it to <code>PYTHONPATH</code> and run this from the command line :</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">export PYTHONPATH<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"$</span><span class="sc" style="color: #5E5E5E;">{SPARK_HOME}</span><span class="st" style="color: #20794D;">/python/:$PYTHONPATH"</span></span>
<span id="cb10-2">export PYTHONPATH<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"$</span><span class="sc" style="color: #5E5E5E;">{SPARK_HOME}</span><span class="st" style="color: #20794D;">/python/lib/py4j-0.10.9-src.zip:$PYTHONPATH"</span></span></code></pre></div>
</div>
<p>Make sure that the version under <code>${SPARK_HOME}/python/lib/</code> matches the filename of py4j or you will encounter <code>ModuleNotFoundError: No module named 'py4j'</code> while executing <code>import pyspark</code>.</p>
<p>For example, if the file under <code>${SPARK_HOME}/python/lib/</code> is <code>py4j-0.10.9.3-src.zip</code>, then the <code>export PYTHONPATH</code> statement above should be changed to :</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">export PYTHONPATH<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"$</span><span class="sc" style="color: #5E5E5E;">{SPARK_HOME}</span><span class="st" style="color: #20794D;">/python/lib/py4j-0.10.9.3-src.zip:$PYTHONPATH"</span></span></code></pre></div>
</div>
<p>Now we can run Jupyter or IPython to test if things work. Go to some other directory, e.g.&nbsp;<code>~/tmp</code>. Download a CSV file that we’ll use for testing:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">wget https:<span class="op" style="color: #5E5E5E;">//</span>s3.amazonaws.com<span class="op" style="color: #5E5E5E;">/</span>nyc<span class="op" style="color: #5E5E5E;">-</span>tlc<span class="op" style="color: #5E5E5E;">/</span>misc<span class="op" style="color: #5E5E5E;">/</span>taxi<span class="op" style="color: #5E5E5E;">+</span>_zone_lookup.csv</span></code></pre></div>
</div>
<p>Now let’s run <code>ipython</code> or <code>jupyter notebook</code> and execute:</p>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="im" style="color: #00769E;">import</span> pyspark</span>
<span id="cb13-2"><span class="im" style="color: #00769E;">from</span> pyspark.sql <span class="im" style="color: #00769E;">import</span> SparkSession</span>
<span id="cb13-3"></span>
<span id="cb13-4">spark <span class="op" style="color: #5E5E5E;">=</span> SparkSession.builder <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb13-5">    .master(<span class="st" style="color: #20794D;">"local[*]"</span>) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb13-6">    .appName(<span class="st" style="color: #20794D;">'test'</span>) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb13-7">    .getOrCreate()</span>
<span id="cb13-8"></span>
<span id="cb13-9">df <span class="op" style="color: #5E5E5E;">=</span> spark.read <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb13-10">    .option(<span class="st" style="color: #20794D;">"header"</span>, <span class="st" style="color: #20794D;">"true"</span>) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb13-11">    .csv(<span class="st" style="color: #20794D;">'taxi+_zone_lookup.csv'</span>)</span>
<span id="cb13-12"></span>
<span id="cb13-13">df.show()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>23/03/29 11:36:13 WARN Utils: Your hostname, DESKTOP-1UDJOCI resolves to a loopback address: 127.0.1.1; using 172.24.9.22 instead (on interface eth0)
23/03/29 11:36:13 WARN Utils: Set SPARK_LOCAL_IP if you need to bind to another address</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>23/03/29 11:36:15 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
23/03/29 11:36:15 WARN Utils: Service 'SparkUI' could not bind on port 4040. Attempting port 4041.
+----------+-------------+--------------------+------------+
|LocationID|      Borough|                Zone|service_zone|
+----------+-------------+--------------------+------------+
|         1|          EWR|      Newark Airport|         EWR|
|         2|       Queens|         Jamaica Bay|   Boro Zone|
|         3|        Bronx|Allerton/Pelham G...|   Boro Zone|
|         4|    Manhattan|       Alphabet City| Yellow Zone|
|         5|Staten Island|       Arden Heights|   Boro Zone|
|         6|Staten Island|Arrochar/Fort Wad...|   Boro Zone|
|         7|       Queens|             Astoria|   Boro Zone|
|         8|       Queens|        Astoria Park|   Boro Zone|
|         9|       Queens|          Auburndale|   Boro Zone|
|        10|       Queens|        Baisley Park|   Boro Zone|
|        11|     Brooklyn|          Bath Beach|   Boro Zone|
|        12|    Manhattan|        Battery Park| Yellow Zone|
|        13|    Manhattan|   Battery Park City| Yellow Zone|
|        14|     Brooklyn|           Bay Ridge|   Boro Zone|
|        15|       Queens|Bay Terrace/Fort ...|   Boro Zone|
|        16|       Queens|             Bayside|   Boro Zone|
|        17|     Brooklyn|             Bedford|   Boro Zone|
|        18|        Bronx|        Bedford Park|   Boro Zone|
|        19|       Queens|           Bellerose|   Boro Zone|
|        20|        Bronx|             Belmont|   Boro Zone|
+----------+-------------+--------------------+------------+
only showing top 20 rows
</code></pre>
</div>
</div>
<p>Test that writing works as well:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">df.write.parquet(<span class="st" style="color: #20794D;">'zones'</span>)</span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_5/DE_Zoomcamp_Week_5_files/figure-html/3965f8fd-c955-4ffb-be66-9ab60bd14122.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">pyspark_test.PNG</figcaption><p></p>
</figure>
</div>
</section>
<section id="first-look-at-sparkpyspark" class="level3">
<h3 class="anchored" data-anchor-id="first-look-at-sparkpyspark">5.3.1 First Look at Spark/PySpark</h3>
<p>Let’s grab our required dataset which is in <code>csv.gz</code> format from <a href="https://github.com/DataTalksClub/nyc-tlc-data/releases/tag/fhvhv">here</a> and unzip by running the following from the command line:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">wget https:<span class="op" style="color: #5E5E5E;">//</span>github.com<span class="op" style="color: #5E5E5E;">/</span>DataTalksClub<span class="op" style="color: #5E5E5E;">/</span>nyc<span class="op" style="color: #5E5E5E;">-</span>tlc<span class="op" style="color: #5E5E5E;">-</span>data<span class="op" style="color: #5E5E5E;">/</span>releases<span class="op" style="color: #5E5E5E;">/</span>download<span class="op" style="color: #5E5E5E;">/</span>fhvhv<span class="op" style="color: #5E5E5E;">/</span>fhvhv_tripdata_2021<span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">01.</span><span class="er" style="color: #AD0000;">csv</span>.gz</span>
<span id="cb18-2">gzip <span class="op" style="color: #5E5E5E;">-</span>dk fhvhv_tripdata_2021<span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">01.</span><span class="er" style="color: #AD0000;">csv</span>.gz</span></code></pre></div>
</div>
<p>Let’s see how many rows our dataset has :</p>
<div class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="op" style="color: #5E5E5E;">!</span>wc <span class="op" style="color: #5E5E5E;">-</span>l Data<span class="op" style="color: #5E5E5E;">/</span>fhvhv_tripdata_2021<span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">01.</span><span class="er" style="color: #AD0000;">csv</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>11908469 Data/fhvhv_tripdata_2021-01.csv</code></pre>
</div>
</div>
<p>So, almost 12 million records - not insignificant. Let’s now take a look at Spark.</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="co" style="color: #5E5E5E;"># import required packages</span></span>
<span id="cb21-2"><span class="im" style="color: #00769E;">import</span> pyspark</span>
<span id="cb21-3"><span class="im" style="color: #00769E;">from</span> pyspark.sql <span class="im" style="color: #00769E;">import</span> SparkSession</span></code></pre></div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="co" style="color: #5E5E5E;"># Our entry point to Spark</span></span>
<span id="cb22-2">spark <span class="op" style="color: #5E5E5E;">=</span> SparkSession.builder.getOrCreate()</span>
<span id="cb22-3">spark</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>23/03/30 09:32:56 WARN Utils: Your hostname, DESKTOP-1UDJOCI resolves to a loopback address: 127.0.1.1; using 172.24.7.86 instead (on interface eth0)
23/03/30 09:32:56 WARN Utils: Set SPARK_LOCAL_IP if you need to bind to another address</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>23/03/30 09:32:58 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="2">

            <div>
                <p><b>SparkSession - in-memory</b></p>
                
        <div>
            <p><b>SparkContext</b></p>

            <p><a href="http://172.24.7.86:4040">Spark UI</a></p>

            <dl>
              <dt>Version</dt>
                <dd><code>v3.3.2</code></dd>
              <dt>Master</dt>
                <dd><code>local[*]</code></dd>
              <dt>AppName</dt>
                <dd><code>pyspark-shell</code></dd>
            </dl>
        </div>
        
            </div>
        
</div>
</div>
<p>We can access the Spark Web UI locally at <code>port :4040</code> from the link above :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_5/DE_Zoomcamp_Week_5_files/figure-html/3f6f5db2-8c5c-4f2a-b89b-4be58fd75f4b.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">spark_shell.PNG</figcaption><p></p>
</figure>
</div>
<p>Let’s read our data to Spark :</p>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">df <span class="op" style="color: #5E5E5E;">=</span> spark.read <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb26-2">    .option(<span class="st" style="color: #20794D;">"header"</span>, <span class="st" style="color: #20794D;">"true"</span>) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb26-3">    .csv(<span class="st" style="color: #20794D;">'Data/fhvhv_tripdata_2021-01.csv'</span>)   </span></code></pre></div>
</div>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">df.show()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>+-----------------+--------------------+-------------------+-------------------+------------+------------+-------+
|hvfhs_license_num|dispatching_base_num|    pickup_datetime|   dropoff_datetime|PULocationID|DOLocationID|SR_Flag|
+-----------------+--------------------+-------------------+-------------------+------------+------------+-------+
|           HV0003|              B02682|2021-01-01 00:33:44|2021-01-01 00:49:07|         230|         166|   null|
|           HV0003|              B02682|2021-01-01 00:55:19|2021-01-01 01:18:21|         152|         167|   null|
|           HV0003|              B02764|2021-01-01 00:23:56|2021-01-01 00:38:05|         233|         142|   null|
|           HV0003|              B02764|2021-01-01 00:42:51|2021-01-01 00:45:50|         142|         143|   null|
|           HV0003|              B02764|2021-01-01 00:48:14|2021-01-01 01:08:42|         143|          78|   null|
|           HV0005|              B02510|2021-01-01 00:06:59|2021-01-01 00:43:01|          88|          42|   null|
|           HV0005|              B02510|2021-01-01 00:50:00|2021-01-01 01:04:57|          42|         151|   null|
|           HV0003|              B02764|2021-01-01 00:14:30|2021-01-01 00:50:27|          71|         226|   null|
|           HV0003|              B02875|2021-01-01 00:22:54|2021-01-01 00:30:20|         112|         255|   null|
|           HV0003|              B02875|2021-01-01 00:40:12|2021-01-01 00:53:31|         255|         232|   null|
|           HV0003|              B02875|2021-01-01 00:56:45|2021-01-01 01:17:42|         232|         198|   null|
|           HV0003|              B02835|2021-01-01 00:29:04|2021-01-01 00:36:27|         113|          48|   null|
|           HV0003|              B02835|2021-01-01 00:48:56|2021-01-01 00:59:12|         239|          75|   null|
|           HV0004|              B02800|2021-01-01 00:15:24|2021-01-01 00:38:31|         181|         237|   null|
|           HV0004|              B02800|2021-01-01 00:45:00|2021-01-01 01:06:45|         236|          68|   null|
|           HV0003|              B02682|2021-01-01 00:11:53|2021-01-01 00:18:06|         256|         148|   null|
|           HV0003|              B02682|2021-01-01 00:28:31|2021-01-01 00:41:40|          79|          80|   null|
|           HV0003|              B02682|2021-01-01 00:50:49|2021-01-01 00:55:59|          17|         217|   null|
|           HV0005|              B02510|2021-01-01 00:08:40|2021-01-01 00:39:39|          62|          29|   null|
|           HV0003|              B02836|2021-01-01 00:53:48|2021-01-01 01:11:40|          22|          22|   null|
+-----------------+--------------------+-------------------+-------------------+------------+------------+-------+
only showing top 20 rows
</code></pre>
</div>
</div>
<p>Every time we execute something it is reflected in the Spark Web UI :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_5/DE_Zoomcamp_Week_5_files/figure-html/73ba77a8-6132-4681-8d9d-40cfab8bec2a.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">spark_web_ui.PNG</figcaption><p></p>
</figure>
</div>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="co" style="color: #5E5E5E;"># Let's look at the first 5 records</span></span>
<span id="cb29-2">df.head(<span class="dv" style="color: #AD0000;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>[Row(hvfhs_license_num='HV0003', dispatching_base_num='B02682', pickup_datetime='2021-01-01 00:33:44', dropoff_datetime='2021-01-01 00:49:07', PULocationID='230', DOLocationID='166', SR_Flag=None),
 Row(hvfhs_license_num='HV0003', dispatching_base_num='B02682', pickup_datetime='2021-01-01 00:55:19', dropoff_datetime='2021-01-01 01:18:21', PULocationID='152', DOLocationID='167', SR_Flag=None),
 Row(hvfhs_license_num='HV0003', dispatching_base_num='B02764', pickup_datetime='2021-01-01 00:23:56', dropoff_datetime='2021-01-01 00:38:05', PULocationID='233', DOLocationID='142', SR_Flag=None),
 Row(hvfhs_license_num='HV0003', dispatching_base_num='B02764', pickup_datetime='2021-01-01 00:42:51', dropoff_datetime='2021-01-01 00:45:50', PULocationID='142', DOLocationID='143', SR_Flag=None),
 Row(hvfhs_license_num='HV0003', dispatching_base_num='B02764', pickup_datetime='2021-01-01 00:48:14', dropoff_datetime='2021-01-01 01:08:42', PULocationID='143', DOLocationID='78', SR_Flag=None)]</code></pre>
</div>
</div>
<p>Note that Spark (unlike pandas) does not try to infer datatypes - instead everything is treated as a <code>string</code>. We can see this more explicitly by looking at the schema :</p>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">df.schema</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>StructType([StructField('hvfhs_license_num', StringType(), True), StructField('dispatching_base_num', StringType(), True), StructField('pickup_datetime', StringType(), True), StructField('dropoff_datetime', StringType(), True), StructField('PULocationID', StringType(), True), StructField('DOLocationID', StringType(), True), StructField('SR_Flag', StringType(), True)])</code></pre>
</div>
</div>
<p>Let’s now create a new csv file comprising of just 100 rows from our <code>fhvhv_tripdata_2021-01.csv</code> file by running the following from the command line :</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">head <span class="op" style="color: #5E5E5E;">-</span>n <span class="dv" style="color: #AD0000;">101</span> Data<span class="op" style="color: #5E5E5E;">/</span>fhvhv_tripdata_2021<span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">01.</span><span class="er" style="color: #AD0000;">csv</span> <span class="op" style="color: #5E5E5E;">&gt;</span> head.csv</span></code></pre></div>
</div>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span></code></pre></div>
</div>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">df_pandas <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(<span class="st" style="color: #20794D;">'Data/head.csv'</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">df_pandas.dtypes</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>hvfhs_license_num        object
dispatching_base_num     object
pickup_datetime          object
dropoff_datetime         object
PULocationID              int64
DOLocationID              int64
SR_Flag                 float64
dtype: object</code></pre>
</div>
</div>
<p>We can see that <code>pandas</code> does a better job at figuring out datatypes but <code>pickup_datetime</code> and <code>dropoff_datetime</code> still require to be converted to a timestamp. We can use Spark to create a Spark DataFrame from a pandas DataFrame :</p>
<div class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">spark.createDataFrame(df_pandas).schema</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="17">
<pre><code>StructType([StructField('hvfhs_license_num', StringType(), True), StructField('dispatching_base_num', StringType(), True), StructField('pickup_datetime', StringType(), True), StructField('dropoff_datetime', StringType(), True), StructField('PULocationID', LongType(), True), StructField('DOLocationID', LongType(), True), StructField('SR_Flag', DoubleType(), True)])</code></pre>
</div>
</div>
<p>The above <code>StructType</code> comes from <code>Scala</code> and we can see that the <code>PULocationID</code> and <code>DOLocationID</code> are <code>LongType</code> which is a less memory-efficient format (8 bytes) than integer (4 bytes). So let’s convert the datatypes using Python:</p>
<div class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1"><span class="im" style="color: #00769E;">from</span> pyspark.sql <span class="im" style="color: #00769E;">import</span> types</span></code></pre></div>
</div>
<div class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1"><span class="co" style="color: #5E5E5E;"># convert datatypes of our Spark DataFrame</span></span>
<span id="cb41-2">schema <span class="op" style="color: #5E5E5E;">=</span> types.StructType([</span>
<span id="cb41-3">    types.StructField(<span class="st" style="color: #20794D;">'hvfhs_license_num'</span>, types.StringType(), <span class="va" style="color: #111111;">True</span>), <span class="co" style="color: #5E5E5E;"># True argument means can be NULL</span></span>
<span id="cb41-4">    types.StructField(<span class="st" style="color: #20794D;">'dispatching_base_num'</span>, types.StringType(), <span class="va" style="color: #111111;">True</span>),</span>
<span id="cb41-5">    types.StructField(<span class="st" style="color: #20794D;">'pickup_datetime'</span>, types.TimestampType(), <span class="va" style="color: #111111;">True</span>),</span>
<span id="cb41-6">    types.StructField(<span class="st" style="color: #20794D;">'dropoff_datetime'</span>, types.TimestampType(), <span class="va" style="color: #111111;">True</span>),</span>
<span id="cb41-7">    types.StructField(<span class="st" style="color: #20794D;">'PULocationID'</span>, types.IntegerType(), <span class="va" style="color: #111111;">True</span>),</span>
<span id="cb41-8">    types.StructField(<span class="st" style="color: #20794D;">'DOLocationID'</span>, types.IntegerType(), <span class="va" style="color: #111111;">True</span>),</span>
<span id="cb41-9">    types.StructField(<span class="st" style="color: #20794D;">'SR_Flag'</span>, types.StringType(), <span class="va" style="color: #111111;">True</span>)</span>
<span id="cb41-10">])</span></code></pre></div>
</div>
<div class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1"><span class="co" style="color: #5E5E5E;"># Load our Spark DataFrame with converted datatypes from above</span></span>
<span id="cb42-2">df <span class="op" style="color: #5E5E5E;">=</span> spark.read <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb42-3">    .option(<span class="st" style="color: #20794D;">"header"</span>, <span class="st" style="color: #20794D;">"true"</span>) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb42-4">    .schema(schema) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb42-5">    .csv(<span class="st" style="color: #20794D;">'Data/fhvhv_tripdata_2021-01.csv'</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1">df.head(<span class="dv" style="color: #AD0000;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="29">
<pre><code>[Row(hvfhs_license_num='HV0003', dispatching_base_num='B02682', pickup_datetime=datetime.datetime(2021, 1, 1, 0, 33, 44), dropoff_datetime=datetime.datetime(2021, 1, 1, 0, 49, 7), PULocationID=230, DOLocationID=166, SR_Flag=None),
 Row(hvfhs_license_num='HV0003', dispatching_base_num='B02682', pickup_datetime=datetime.datetime(2021, 1, 1, 0, 55, 19), dropoff_datetime=datetime.datetime(2021, 1, 1, 1, 18, 21), PULocationID=152, DOLocationID=167, SR_Flag=None),
 Row(hvfhs_license_num='HV0003', dispatching_base_num='B02764', pickup_datetime=datetime.datetime(2021, 1, 1, 0, 23, 56), dropoff_datetime=datetime.datetime(2021, 1, 1, 0, 38, 5), PULocationID=233, DOLocationID=142, SR_Flag=None),
 Row(hvfhs_license_num='HV0003', dispatching_base_num='B02764', pickup_datetime=datetime.datetime(2021, 1, 1, 0, 42, 51), dropoff_datetime=datetime.datetime(2021, 1, 1, 0, 45, 50), PULocationID=142, DOLocationID=143, SR_Flag=None),
 Row(hvfhs_license_num='HV0003', dispatching_base_num='B02764', pickup_datetime=datetime.datetime(2021, 1, 1, 0, 48, 14), dropoff_datetime=datetime.datetime(2021, 1, 1, 1, 8, 42), PULocationID=143, DOLocationID=78, SR_Flag=None)]</code></pre>
</div>
</div>
<p>We can see that the our <code>pickup_datetime</code> and <code>dropoff_datetime</code> have been properly parsed.</p>
<p>At the moment we have one large csv file (718MB) :</p>
<div class="cell" data-execution_count="30">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1"><span class="op" style="color: #5E5E5E;">!</span>du <span class="op" style="color: #5E5E5E;">-</span>h Data<span class="op" style="color: #5E5E5E;">/</span>fhvhv_tripdata_2021<span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">01.</span><span class="er" style="color: #AD0000;">csv</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>718M    Data/fhvhv_tripdata_2021-01.csv</code></pre>
</div>
</div>
<p>That means that only one of our Spark cluster executors will be able to access the file - the remaining clusters will be idle :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_5/DE_Zoomcamp_Week_5_files/figure-html/6e141084-75dd-44db-9767-c7eabbb8df49.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">csv_internals.PNG</figcaption><p></p>
</figure>
</div>
<p>A more efficient way to store our data is a bunch of smaller files, known as <code>partitions</code> :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_5/DE_Zoomcamp_Week_5_files/figure-html/5bce1802-322b-4223-a5b8-0c99e4a5d4ab.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">partitiion_structure.PNG</figcaption><p></p>
</figure>
</div>
<p>We can achieve partitioning using <code>.repartition</code> :</p>
<div class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1"><span class="co" style="color: #5E5E5E;"># break down our csv into multiple partitions</span></span>
<span id="cb47-2">df <span class="op" style="color: #5E5E5E;">=</span> df.repartition(<span class="dv" style="color: #AD0000;">24</span>)</span></code></pre></div>
</div>
<p>Note that this is a <em>lazy</em> command - nothing has actually been executed yet. Only when we action something, for example write to parquet, will something happen :</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1">df.write.parquet(<span class="st" style="color: #20794D;">'Data/fhvhv/2021/01/'</span>)</span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_5/DE_Zoomcamp_Week_5_files/figure-html/a7da97a3-3c02-48c0-9fef-d048f18d06e9.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">parquet_DAG.PNG</figcaption><p></p>
</figure>
</div>
<p>Let’s check to see if we have our parquet files :</p>
<div class="cell" data-execution_count="33">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1"><span class="op" style="color: #5E5E5E;">!</span>ls <span class="op" style="color: #5E5E5E;">-</span>lh Data<span class="op" style="color: #5E5E5E;">/</span>fhvhv<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2021</span><span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">0</span><span class="er" style="color: #AD0000;">1</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>total 136M
-rw-r--r-- 1 stephen137 stephen137    0 Mar 30 10:13 _SUCCESS
-rw-r--r-- 1 stephen137 stephen137 8.5M Mar 30 10:13 part-00000-9e5b1ddb-b845-47c8-828f-c2733b793edb-c000.snappy.parquet
-rw-r--r-- 1 stephen137 stephen137 9.3M Mar 30 10:13 part-00001-9e5b1ddb-b845-47c8-828f-c2733b793edb-c000.snappy.parquet
-rw-r--r-- 1 stephen137 stephen137 8.8M Mar 30 10:13 part-00002-9e5b1ddb-b845-47c8-828f-c2733b793edb-c000.snappy.parquet
-rw-r--r-- 1 stephen137 stephen137 8.5M Mar 30 10:13 part-00003-9e5b1ddb-b845-47c8-828f-c2733b793edb-c000.snappy.parquet
-rw-r--r-- 1 stephen137 stephen137 8.4M Mar 30 10:13 part-00004-9e5b1ddb-b845-47c8-828f-c2733b793edb-c000.snappy.parquet
-rw-r--r-- 1 stephen137 stephen137 8.8M Mar 30 10:13 part-00005-9e5b1ddb-b845-47c8-828f-c2733b793edb-c000.snappy.parquet
-rw-r--r-- 1 stephen137 stephen137 8.6M Mar 30 10:13 part-00006-9e5b1ddb-b845-47c8-828f-c2733b793edb-c000.snappy.parquet
-rw-r--r-- 1 stephen137 stephen137 8.3M Mar 30 10:13 part-00007-9e5b1ddb-b845-47c8-828f-c2733b793edb-c000.snappy.parquet
-rw-r--r-- 1 stephen137 stephen137 8.8M Mar 30 10:13 part-00008-9e5b1ddb-b845-47c8-828f-c2733b793edb-c000.snappy.parquet
-rw-r--r-- 1 stephen137 stephen137 8.8M Mar 30 10:13 part-00009-9e5b1ddb-b845-47c8-828f-c2733b793edb-c000.snappy.parquet
-rw-r--r-- 1 stephen137 stephen137 8.6M Mar 30 10:13 part-00010-9e5b1ddb-b845-47c8-828f-c2733b793edb-c000.snappy.parquet
-rw-r--r-- 1 stephen137 stephen137 8.1M Mar 30 10:13 part-00011-9e5b1ddb-b845-47c8-828f-c2733b793edb-c000.snappy.parquet
-rw-r--r-- 1 stephen137 stephen137 8.7M Mar 30 10:13 part-00012-9e5b1ddb-b845-47c8-828f-c2733b793edb-c000.snappy.parquet
-rw-r--r-- 1 stephen137 stephen137 8.6M Mar 30 10:13 part-00013-9e5b1ddb-b845-47c8-828f-c2733b793edb-c000.snappy.parquet
-rw-r--r-- 1 stephen137 stephen137 7.9M Mar 30 10:13 part-00014-9e5b1ddb-b845-47c8-828f-c2733b793edb-c000.snappy.parquet
-rw-r--r-- 1 stephen137 stephen137 7.2M Mar 30 10:13 part-00015-9e5b1ddb-b845-47c8-828f-c2733b793edb-c000.snappy.parquet</code></pre>
</div>
</div>
<p>We can see that we have 16 parquet files (not sure why there aren’t 24 as specified in <code>.repartition</code>) and compression has been performed, reducing the size from 718MB to 136MB. This is more efficient and makes better use of our Spark clusters.</p>
</section>
<section id="spark-dataframes" class="level3">
<h3 class="anchored" data-anchor-id="spark-dataframes">5.3.2 Spark DataFrames</h3>
<p>Let’s now create a Spark DataFrame from our parquet file :</p>
<div class="cell" data-execution_count="54">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1">df <span class="op" style="color: #5E5E5E;">=</span> spark.read.parquet(<span class="st" style="color: #20794D;">'Data/fhvhv/2021/01/'</span>)</span></code></pre></div>
</div>
<p>Parquet files include the schema and so we don’t have to specify this :</p>
<div class="cell" data-execution_count="55">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1">df.printSchema()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>root
 |-- hvfhs_license_num: string (nullable = true)
 |-- dispatching_base_num: string (nullable = true)
 |-- pickup_datetime: timestamp (nullable = true)
 |-- dropoff_datetime: timestamp (nullable = true)
 |-- PULocationID: integer (nullable = true)
 |-- DOLocationID: integer (nullable = true)
 |-- SR_Flag: string (nullable = true)
</code></pre>
</div>
</div>
<p>We can do the usual stuff that we do with a <code>pandas</code> DataFrame, for example <code>.select</code> and <code>.filter</code> :</p>
<div class="cell" data-execution_count="58">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb54-1">df.select(<span class="st" style="color: #20794D;">'pickup_datetime'</span>, <span class="st" style="color: #20794D;">'dropoff_datetime'</span>, <span class="st" style="color: #20794D;">'PULocationID'</span>, <span class="st" style="color: #20794D;">'DOLocationID'</span>) </span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="58">
<pre><code>DataFrame[pickup_datetime: timestamp, dropoff_datetime: timestamp, PULocationID: int, DOLocationID: int]</code></pre>
</div>
</div>
<div class="cell" data-execution_count="61">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb56-1">df.select(<span class="st" style="color: #20794D;">'pickup_datetime'</span>, <span class="st" style="color: #20794D;">'dropoff_datetime'</span>, <span class="st" style="color: #20794D;">'PULocationID'</span>, <span class="st" style="color: #20794D;">'DOLocationID'</span>) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb56-2">.<span class="bu" style="color: null;">filter</span>(df.hvfhs_license_num <span class="op" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'HV0003'</span>) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb56-3">.show()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>+-------------------+-------------------+------------+------------+
|    pickup_datetime|   dropoff_datetime|PULocationID|DOLocationID|
+-------------------+-------------------+------------+------------+
|2021-01-03 00:29:29|2021-01-03 00:46:37|         197|          82|
|2021-01-03 00:50:22|2021-01-03 00:52:52|          56|          56|
|2021-01-03 00:05:27|2021-01-03 00:15:20|         243|         244|
|2021-01-03 00:24:41|2021-01-03 00:30:47|         243|         127|
|2021-01-03 00:48:14|2021-01-03 01:00:10|         235|          18|
|2021-01-03 00:19:02|2021-01-03 00:28:57|         151|         116|
|2021-01-03 00:09:51|2021-01-03 00:19:16|         121|          28|
|2021-01-03 00:30:20|2021-01-03 00:45:24|          28|         160|
|2021-01-03 00:47:31|2021-01-03 00:56:37|         160|         157|
|2021-01-03 00:26:17|2021-01-03 00:50:36|         236|         265|
|2021-01-03 00:10:04|2021-01-03 00:14:38|           3|          32|
|2021-01-03 00:41:48|2021-01-03 00:48:48|         169|         136|
|2021-01-03 00:54:32|2021-01-03 01:00:54|         235|         169|
|2021-01-03 00:14:38|2021-01-03 00:25:55|         229|         262|
|2021-01-03 00:13:02|2021-01-03 00:39:15|          82|         163|
|2021-01-03 00:48:54|2021-01-03 00:53:13|         164|         186|
|2021-01-03 00:00:50|2021-01-03 00:03:27|          21|          21|
|2021-01-03 00:53:06|2021-01-03 01:14:24|          50|         126|
|2021-01-03 00:17:07|2021-01-03 00:25:03|          89|          71|
|2021-01-03 00:43:17|2021-01-03 00:57:45|         188|          17|
+-------------------+-------------------+------------+------------+
only showing top 20 rows
</code></pre>
</div>
</div>
<section id="actions-vs-transformations" class="level4">
<h4 class="anchored" data-anchor-id="actions-vs-transformations">Actions vs Transformations</h4>
<p>In Spark there is a distinction between :</p>
<ul>
<li>things that are executed right away (Actions)</li>
<li>things that are NOT executed right away (Transformations)</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_5/DE_Zoomcamp_Week_5_files/figure-html/bf4b5739-85fd-42dd-b6ee-31128913a098.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">actions_vs_transforms.PNG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_5/DE_Zoomcamp_Week_5_files/figure-html/0f21704d-eac8-4f15-bab9-175d6f23291a.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">transformation_action.PNG</figcaption><p></p>
</figure>
</div>
</section>
<section id="user-defined-functions" class="level4">
<h4 class="anchored" data-anchor-id="user-defined-functions">User defined functions</h4>
<p>Spark like pandas already has a number of <a href="https://spark.apache.org/docs/latest/api/sql/index.html">in-built functions</a>. We can access these from within Jupyter Notebook by hitting <code>Tab</code> after <code>F.</code> :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_5/DE_Zoomcamp_Week_5_files/figure-html/377784c1-0aea-4395-bc3a-b86e1fb249c2.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">F.PNG</figcaption><p></p>
</figure>
</div>
<p>For example we can convert datetime datatype to date using :</p>
<div class="cell" data-execution_count="65">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb58-1">df <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb58-2">    .withColumn(<span class="st" style="color: #20794D;">'pickup_date'</span>, F.to_date(df.pickup_datetime)) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb58-3">    .withColumn(<span class="st" style="color: #20794D;">'dropoff_date'</span>, F.to_date(df.dropoff_datetime)) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb58-4">    .select(<span class="st" style="color: #20794D;">'pickup_date'</span>, <span class="st" style="color: #20794D;">'dropoff_date'</span>, <span class="st" style="color: #20794D;">'PULocationID'</span>, <span class="st" style="color: #20794D;">'DOLocationID'</span>) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb58-5">    .show()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>+-----------+------------+------------+------------+
|pickup_date|dropoff_date|PULocationID|DOLocationID|
+-----------+------------+------------+------------+
| 2021-01-03|  2021-01-03|         197|          82|
| 2021-01-03|  2021-01-03|          56|          56|
| 2021-01-03|  2021-01-03|          76|          51|
| 2021-01-03|  2021-01-03|         208|         208|
| 2021-01-03|  2021-01-03|         183|         208|
| 2021-01-03|  2021-01-03|         243|         244|
| 2021-01-03|  2021-01-03|         243|         127|
| 2021-01-03|  2021-01-03|         235|          18|
| 2021-01-03|  2021-01-03|          68|          49|
| 2021-01-03|  2021-01-03|         151|         116|
| 2021-01-03|  2021-01-03|         121|          28|
| 2021-01-03|  2021-01-03|          28|         160|
| 2021-01-03|  2021-01-03|         160|         157|
| 2021-01-03|  2021-01-03|         236|         265|
| 2021-01-03|  2021-01-03|          32|         169|
| 2021-01-03|  2021-01-03|           3|          32|
| 2021-01-03|  2021-01-03|         169|         136|
| 2021-01-03|  2021-01-03|         235|         169|
| 2021-01-03|  2021-01-03|         229|         262|
| 2021-01-03|  2021-01-03|          82|         163|
+-----------+------------+------------+------------+
only showing top 20 rows
</code></pre>
</div>
</div>
<p>However, Spark is more flexible than pandas as it allows us to create and store our own <code>user-defined-functions</code> as illustrated below :</p>
<div class="cell" data-execution_count="66">
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb60-1"><span class="im" style="color: #00769E;">from</span> pyspark.sql <span class="im" style="color: #00769E;">import</span> functions <span class="im" style="color: #00769E;">as</span> F</span></code></pre></div>
</div>
<div class="cell" data-execution_count="67">
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb61-1"><span class="kw" style="color: #003B4F;">def</span> crazy_stuff(base_num):</span>
<span id="cb61-2">    num <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">int</span>(base_num[<span class="dv" style="color: #AD0000;">1</span>:])</span>
<span id="cb61-3">    <span class="cf" style="color: #003B4F;">if</span> num <span class="op" style="color: #5E5E5E;">%</span> <span class="dv" style="color: #AD0000;">7</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>:</span>
<span id="cb61-4">        <span class="cf" style="color: #003B4F;">return</span> <span class="ss" style="color: #20794D;">f's/</span><span class="sc" style="color: #5E5E5E;">{</span>num<span class="sc" style="color: #5E5E5E;">:03x}</span><span class="ss" style="color: #20794D;">'</span></span>
<span id="cb61-5">    <span class="cf" style="color: #003B4F;">elif</span> num <span class="op" style="color: #5E5E5E;">%</span> <span class="dv" style="color: #AD0000;">3</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>:</span>
<span id="cb61-6">        <span class="cf" style="color: #003B4F;">return</span> <span class="ss" style="color: #20794D;">f'a/</span><span class="sc" style="color: #5E5E5E;">{</span>num<span class="sc" style="color: #5E5E5E;">:03x}</span><span class="ss" style="color: #20794D;">'</span></span>
<span id="cb61-7">    <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb61-8">        <span class="cf" style="color: #003B4F;">return</span> <span class="ss" style="color: #20794D;">f'e/</span><span class="sc" style="color: #5E5E5E;">{</span>num<span class="sc" style="color: #5E5E5E;">:03x}</span><span class="ss" style="color: #20794D;">'</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="68">
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb62-1">crazy_stuff(<span class="st" style="color: #20794D;">'B02884'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="68">
<pre><code>'s/b44'</code></pre>
</div>
</div>
<div class="cell" data-execution_count="69">
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb64-1">crazy_stuff_udf <span class="op" style="color: #5E5E5E;">=</span> F.udf(crazy_stuff, returnType<span class="op" style="color: #5E5E5E;">=</span>types.StringType())</span></code></pre></div>
</div>
<p>df<br>
.withColumn(‘pickup_date’, F.to_date(df.pickup_datetime))<br>
.withColumn(‘dropoff_date’, F.to_date(df.dropoff_datetime))<br>
.withColumn(‘base_id’, crazy_stuff_udf(df.dispatching_base_num))<br>
.select(‘base_id’, ‘pickup_date’, ‘dropoff_date’, ‘PULocationID’, ‘DOLocationID’)<br>
.show()</p>
</section>
</section>
<section id="preparing-yellow-and-green-taxi-data" class="level3">
<h3 class="anchored" data-anchor-id="preparing-yellow-and-green-taxi-data">5.3.3 Preparing Yellow and Green Taxi Data</h3>
<p>We can download the required datasets by using the following bash script :</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb65-1"><span class="bu" style="color: null;">set</span> <span class="op" style="color: #5E5E5E;">-</span>e</span>
<span id="cb65-2"></span>
<span id="cb65-3">URL_PREFIX<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"https://github.com/DataTalksClub/nyc-tlc-data/releases/download"</span></span>
<span id="cb65-4"></span>
<span id="cb65-5"><span class="cf" style="color: #003B4F;">for</span> TAXI_TYPE <span class="kw" style="color: #003B4F;">in</span> <span class="st" style="color: #20794D;">"yellow"</span> <span class="st" style="color: #20794D;">"green"</span></span>
<span id="cb65-6">do</span>
<span id="cb65-7">    <span class="cf" style="color: #003B4F;">for</span> YEAR <span class="kw" style="color: #003B4F;">in</span> <span class="dv" style="color: #AD0000;">2020</span> <span class="dv" style="color: #AD0000;">2021</span></span>
<span id="cb65-8">    do</span>
<span id="cb65-9">        <span class="cf" style="color: #003B4F;">for</span> MONTH <span class="kw" style="color: #003B4F;">in</span> {<span class="fl" style="color: #AD0000;">1..12</span>}</span>
<span id="cb65-10">        do</span>
<span id="cb65-11"></span>
<span id="cb65-12">        <span class="cf" style="color: #003B4F;">if</span> [ $YEAR <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">2020</span> ] <span class="op" style="color: #5E5E5E;">||</span> [ $MONTH <span class="op" style="color: #5E5E5E;">-</span>lt <span class="dv" style="color: #AD0000;">8</span> ]</span>
<span id="cb65-13">        then</span>
<span id="cb65-14">            FMONTH<span class="op" style="color: #5E5E5E;">=</span>`printf <span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">%02d</span><span class="st" style="color: #20794D;">"</span> ${MONTH}`</span>
<span id="cb65-15"></span>
<span id="cb65-16">            URL<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"$</span><span class="sc" style="color: #5E5E5E;">{URL_PREFIX}</span><span class="st" style="color: #20794D;">/$</span><span class="sc" style="color: #5E5E5E;">{TAXI_TYPE}</span><span class="st" style="color: #20794D;">/$</span><span class="sc" style="color: #5E5E5E;">{TAXI_TYPE}</span><span class="st" style="color: #20794D;">_tripdata_$</span><span class="sc" style="color: #5E5E5E;">{YEAR}</span><span class="st" style="color: #20794D;">-$</span><span class="sc" style="color: #5E5E5E;">{FMONTH}</span><span class="st" style="color: #20794D;">.csv.gz"</span></span>
<span id="cb65-17"></span>
<span id="cb65-18">            LOCAL_PREFIX<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"data/raw/$</span><span class="sc" style="color: #5E5E5E;">{TAXI_TYPE}</span><span class="st" style="color: #20794D;">/$</span><span class="sc" style="color: #5E5E5E;">{YEAR}</span><span class="st" style="color: #20794D;">/$</span><span class="sc" style="color: #5E5E5E;">{FMONTH}</span><span class="st" style="color: #20794D;">"</span></span>
<span id="cb65-19">            LOCAL_FILE<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"$</span><span class="sc" style="color: #5E5E5E;">{TAXI_TYPE}</span><span class="st" style="color: #20794D;">_tripdata_$</span><span class="sc" style="color: #5E5E5E;">{YEAR}</span><span class="st" style="color: #20794D;">_$</span><span class="sc" style="color: #5E5E5E;">{FMONTH}</span><span class="st" style="color: #20794D;">.csv.gz"</span></span>
<span id="cb65-20">            LOCAL_PATH<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"$</span><span class="sc" style="color: #5E5E5E;">{LOCAL_PREFIX}</span><span class="st" style="color: #20794D;">/$</span><span class="sc" style="color: #5E5E5E;">{LOCAL_FILE}</span><span class="st" style="color: #20794D;">"</span></span>
<span id="cb65-21"></span>
<span id="cb65-22">            echo <span class="st" style="color: #20794D;">"downloading $</span><span class="sc" style="color: #5E5E5E;">{URL}</span><span class="st" style="color: #20794D;"> to $</span><span class="sc" style="color: #5E5E5E;">{LOCAL_PATH}</span><span class="st" style="color: #20794D;">"</span></span>
<span id="cb65-23">            mkdir <span class="op" style="color: #5E5E5E;">-</span>p ${LOCAL_PREFIX}</span>
<span id="cb65-24">            wget ${URL} <span class="op" style="color: #5E5E5E;">-</span>O ${LOCAL_PATH}</span>
<span id="cb65-25">        fi</span>
<span id="cb65-26">        done</span>
<span id="cb65-27">    done</span>
<span id="cb65-28">done</span></code></pre></div>
</div>
<p>And running the script from the command lines for yellow and green for years 2020 and 2021 :</p>
<pre><code>./download_data.sh yellow 2020
./download_data.sh yellow 2021
./download_data.sh green 2020
./download_data.sh green 2021</code></pre>
<p>Then we need to configure the schema :</p>
<div class="cell" data-execution_count="72">
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb67-1">green_schema <span class="op" style="color: #5E5E5E;">=</span> types.StructType([</span>
<span id="cb67-2">    types.StructField(<span class="st" style="color: #20794D;">"VendorID"</span>, types.IntegerType(), <span class="va" style="color: #111111;">True</span>),</span>
<span id="cb67-3">    types.StructField(<span class="st" style="color: #20794D;">"lpep_pickup_datetime"</span>, types.TimestampType(), <span class="va" style="color: #111111;">True</span>),</span>
<span id="cb67-4">    types.StructField(<span class="st" style="color: #20794D;">"lpep_dropoff_datetime"</span>, types.TimestampType(), <span class="va" style="color: #111111;">True</span>),</span>
<span id="cb67-5">    types.StructField(<span class="st" style="color: #20794D;">"store_and_fwd_flag"</span>, types.StringType(), <span class="va" style="color: #111111;">True</span>),</span>
<span id="cb67-6">    types.StructField(<span class="st" style="color: #20794D;">"RatecodeID"</span>, types.IntegerType(), <span class="va" style="color: #111111;">True</span>),</span>
<span id="cb67-7">    types.StructField(<span class="st" style="color: #20794D;">"PULocationID"</span>, types.IntegerType(), <span class="va" style="color: #111111;">True</span>),</span>
<span id="cb67-8">    types.StructField(<span class="st" style="color: #20794D;">"DOLocationID"</span>, types.IntegerType(), <span class="va" style="color: #111111;">True</span>),</span>
<span id="cb67-9">    types.StructField(<span class="st" style="color: #20794D;">"passenger_count"</span>, types.IntegerType(), <span class="va" style="color: #111111;">True</span>),</span>
<span id="cb67-10">    types.StructField(<span class="st" style="color: #20794D;">"trip_distance"</span>, types.DoubleType(), <span class="va" style="color: #111111;">True</span>),</span>
<span id="cb67-11">    types.StructField(<span class="st" style="color: #20794D;">"fare_amount"</span>, types.DoubleType(), <span class="va" style="color: #111111;">True</span>),</span>
<span id="cb67-12">    types.StructField(<span class="st" style="color: #20794D;">"extra"</span>, types.DoubleType(), <span class="va" style="color: #111111;">True</span>),</span>
<span id="cb67-13">    types.StructField(<span class="st" style="color: #20794D;">"mta_tax"</span>, types.DoubleType(), <span class="va" style="color: #111111;">True</span>),</span>
<span id="cb67-14">    types.StructField(<span class="st" style="color: #20794D;">"tip_amount"</span>, types.DoubleType(), <span class="va" style="color: #111111;">True</span>),</span>
<span id="cb67-15">    types.StructField(<span class="st" style="color: #20794D;">"tolls_amount"</span>, types.DoubleType(), <span class="va" style="color: #111111;">True</span>),</span>
<span id="cb67-16">    types.StructField(<span class="st" style="color: #20794D;">"ehail_fee"</span>, types.DoubleType(), <span class="va" style="color: #111111;">True</span>),</span>
<span id="cb67-17">    types.StructField(<span class="st" style="color: #20794D;">"improvement_surcharge"</span>, types.DoubleType(), <span class="va" style="color: #111111;">True</span>),</span>
<span id="cb67-18">    types.StructField(<span class="st" style="color: #20794D;">"total_amount"</span>, types.DoubleType(), <span class="va" style="color: #111111;">True</span>),</span>
<span id="cb67-19">    types.StructField(<span class="st" style="color: #20794D;">"payment_type"</span>, types.IntegerType(), <span class="va" style="color: #111111;">True</span>),</span>
<span id="cb67-20">    types.StructField(<span class="st" style="color: #20794D;">"trip_type"</span>, types.IntegerType(), <span class="va" style="color: #111111;">True</span>),</span>
<span id="cb67-21">    types.StructField(<span class="st" style="color: #20794D;">"congestion_surcharge"</span>, types.DoubleType(), <span class="va" style="color: #111111;">True</span>)</span>
<span id="cb67-22">])</span>
<span id="cb67-23"></span>
<span id="cb67-24">yellow_schema <span class="op" style="color: #5E5E5E;">=</span> types.StructType([</span>
<span id="cb67-25">    types.StructField(<span class="st" style="color: #20794D;">"VendorID"</span>, types.IntegerType(), <span class="va" style="color: #111111;">True</span>),</span>
<span id="cb67-26">    types.StructField(<span class="st" style="color: #20794D;">"tpep_pickup_datetime"</span>, types.TimestampType(), <span class="va" style="color: #111111;">True</span>),</span>
<span id="cb67-27">    types.StructField(<span class="st" style="color: #20794D;">"tpep_dropoff_datetime"</span>, types.TimestampType(), <span class="va" style="color: #111111;">True</span>),</span>
<span id="cb67-28">    types.StructField(<span class="st" style="color: #20794D;">"passenger_count"</span>, types.IntegerType(), <span class="va" style="color: #111111;">True</span>),</span>
<span id="cb67-29">    types.StructField(<span class="st" style="color: #20794D;">"trip_distance"</span>, types.DoubleType(), <span class="va" style="color: #111111;">True</span>),</span>
<span id="cb67-30">    types.StructField(<span class="st" style="color: #20794D;">"RatecodeID"</span>, types.IntegerType(), <span class="va" style="color: #111111;">True</span>),</span>
<span id="cb67-31">    types.StructField(<span class="st" style="color: #20794D;">"store_and_fwd_flag"</span>, types.StringType(), <span class="va" style="color: #111111;">True</span>),</span>
<span id="cb67-32">    types.StructField(<span class="st" style="color: #20794D;">"PULocationID"</span>, types.IntegerType(), <span class="va" style="color: #111111;">True</span>),</span>
<span id="cb67-33">    types.StructField(<span class="st" style="color: #20794D;">"DOLocationID"</span>, types.IntegerType(), <span class="va" style="color: #111111;">True</span>),</span>
<span id="cb67-34">    types.StructField(<span class="st" style="color: #20794D;">"payment_type"</span>, types.IntegerType(), <span class="va" style="color: #111111;">True</span>),</span>
<span id="cb67-35">    types.StructField(<span class="st" style="color: #20794D;">"fare_amount"</span>, types.DoubleType(), <span class="va" style="color: #111111;">True</span>),</span>
<span id="cb67-36">    types.StructField(<span class="st" style="color: #20794D;">"extra"</span>, types.DoubleType(), <span class="va" style="color: #111111;">True</span>),</span>
<span id="cb67-37">    types.StructField(<span class="st" style="color: #20794D;">"mta_tax"</span>, types.DoubleType(), <span class="va" style="color: #111111;">True</span>),</span>
<span id="cb67-38">    types.StructField(<span class="st" style="color: #20794D;">"tip_amount"</span>, types.DoubleType(), <span class="va" style="color: #111111;">True</span>),</span>
<span id="cb67-39">    types.StructField(<span class="st" style="color: #20794D;">"tolls_amount"</span>, types.DoubleType(), <span class="va" style="color: #111111;">True</span>),</span>
<span id="cb67-40">    types.StructField(<span class="st" style="color: #20794D;">"improvement_surcharge"</span>, types.DoubleType(), <span class="va" style="color: #111111;">True</span>),</span>
<span id="cb67-41">    types.StructField(<span class="st" style="color: #20794D;">"total_amount"</span>, types.DoubleType(), <span class="va" style="color: #111111;">True</span>),</span>
<span id="cb67-42">    types.StructField(<span class="st" style="color: #20794D;">"congestion_surcharge"</span>, types.DoubleType(), <span class="va" style="color: #111111;">True</span>)</span>
<span id="cb67-43">])</span></code></pre></div>
</div>
<p>And then convert from csv to parquet :</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb68-1">year <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">2020</span></span>
<span id="cb68-2"></span>
<span id="cb68-3"><span class="cf" style="color: #003B4F;">for</span> month <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">13</span>):</span>
<span id="cb68-4">    <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'processing data for </span><span class="sc" style="color: #5E5E5E;">{</span>year<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">/</span><span class="sc" style="color: #5E5E5E;">{</span>month<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span>
<span id="cb68-5"></span>
<span id="cb68-6">    input_path <span class="op" style="color: #5E5E5E;">=</span> <span class="ss" style="color: #20794D;">f'data/raw/green/</span><span class="sc" style="color: #5E5E5E;">{</span>year<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">/</span><span class="sc" style="color: #5E5E5E;">{</span>month<span class="sc" style="color: #5E5E5E;">:02d}</span><span class="ss" style="color: #20794D;">/'</span></span>
<span id="cb68-7">    output_path <span class="op" style="color: #5E5E5E;">=</span> <span class="ss" style="color: #20794D;">f'data/pq/green/</span><span class="sc" style="color: #5E5E5E;">{</span>year<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">/</span><span class="sc" style="color: #5E5E5E;">{</span>month<span class="sc" style="color: #5E5E5E;">:02d}</span><span class="ss" style="color: #20794D;">/'</span></span>
<span id="cb68-8"></span>
<span id="cb68-9">    df_green <span class="op" style="color: #5E5E5E;">=</span> spark.read <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb68-10">        .option(<span class="st" style="color: #20794D;">"header"</span>, <span class="st" style="color: #20794D;">"true"</span>) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb68-11">        .schema(green_schema) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb68-12">        .csv(input_path)</span>
<span id="cb68-13"></span>
<span id="cb68-14">    df_green <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb68-15">        .repartition(<span class="dv" style="color: #AD0000;">4</span>) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb68-16">        .write.parquet(output_path)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb69-1">year <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">2021</span> </span>
<span id="cb69-2"></span>
<span id="cb69-3"><span class="cf" style="color: #003B4F;">for</span> month <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">13</span>):</span>
<span id="cb69-4">    <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'processing data for </span><span class="sc" style="color: #5E5E5E;">{</span>year<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">/</span><span class="sc" style="color: #5E5E5E;">{</span>month<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span>
<span id="cb69-5"></span>
<span id="cb69-6">    input_path <span class="op" style="color: #5E5E5E;">=</span> <span class="ss" style="color: #20794D;">f'data/raw/green/</span><span class="sc" style="color: #5E5E5E;">{</span>year<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">/</span><span class="sc" style="color: #5E5E5E;">{</span>month<span class="sc" style="color: #5E5E5E;">:02d}</span><span class="ss" style="color: #20794D;">/'</span></span>
<span id="cb69-7">    output_path <span class="op" style="color: #5E5E5E;">=</span> <span class="ss" style="color: #20794D;">f'data/pq/green/</span><span class="sc" style="color: #5E5E5E;">{</span>year<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">/</span><span class="sc" style="color: #5E5E5E;">{</span>month<span class="sc" style="color: #5E5E5E;">:02d}</span><span class="ss" style="color: #20794D;">/'</span></span>
<span id="cb69-8"></span>
<span id="cb69-9">    df_green <span class="op" style="color: #5E5E5E;">=</span> spark.read <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb69-10">        .option(<span class="st" style="color: #20794D;">"header"</span>, <span class="st" style="color: #20794D;">"true"</span>) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb69-11">        .schema(green_schema) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb69-12">        .csv(input_path)</span>
<span id="cb69-13"></span>
<span id="cb69-14">    df_green <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb69-15">        .repartition(<span class="dv" style="color: #AD0000;">4</span>) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb69-16">        .write.parquet(output_path)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb70-1">year <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">2020</span></span>
<span id="cb70-2"></span>
<span id="cb70-3"><span class="cf" style="color: #003B4F;">for</span> month <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">13</span>):</span>
<span id="cb70-4">    <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'processing data for </span><span class="sc" style="color: #5E5E5E;">{</span>year<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">/</span><span class="sc" style="color: #5E5E5E;">{</span>month<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span>
<span id="cb70-5"></span>
<span id="cb70-6">    input_path <span class="op" style="color: #5E5E5E;">=</span> <span class="ss" style="color: #20794D;">f'data/raw/yellow/</span><span class="sc" style="color: #5E5E5E;">{</span>year<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">/</span><span class="sc" style="color: #5E5E5E;">{</span>month<span class="sc" style="color: #5E5E5E;">:02d}</span><span class="ss" style="color: #20794D;">/'</span></span>
<span id="cb70-7">    output_path <span class="op" style="color: #5E5E5E;">=</span> <span class="ss" style="color: #20794D;">f'data/pq/yellow/</span><span class="sc" style="color: #5E5E5E;">{</span>year<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">/</span><span class="sc" style="color: #5E5E5E;">{</span>month<span class="sc" style="color: #5E5E5E;">:02d}</span><span class="ss" style="color: #20794D;">/'</span></span>
<span id="cb70-8"></span>
<span id="cb70-9">    df_yellow <span class="op" style="color: #5E5E5E;">=</span> spark.read <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb70-10">        .option(<span class="st" style="color: #20794D;">"header"</span>, <span class="st" style="color: #20794D;">"true"</span>) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb70-11">        .schema(yellow_schema) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb70-12">        .csv(input_path)</span>
<span id="cb70-13"></span>
<span id="cb70-14">    df_yellow <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb70-15">        .repartition(<span class="dv" style="color: #AD0000;">4</span>) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb70-16">        .write.parquet(output_path)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb71" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb71-1">year <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">2021</span> </span>
<span id="cb71-2"></span>
<span id="cb71-3"><span class="cf" style="color: #003B4F;">for</span> month <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">13</span>):</span>
<span id="cb71-4">    <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'processing data for </span><span class="sc" style="color: #5E5E5E;">{</span>year<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">/</span><span class="sc" style="color: #5E5E5E;">{</span>month<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span>
<span id="cb71-5"></span>
<span id="cb71-6">    input_path <span class="op" style="color: #5E5E5E;">=</span> <span class="ss" style="color: #20794D;">f'data/raw/yellow/</span><span class="sc" style="color: #5E5E5E;">{</span>year<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">/</span><span class="sc" style="color: #5E5E5E;">{</span>month<span class="sc" style="color: #5E5E5E;">:02d}</span><span class="ss" style="color: #20794D;">/'</span></span>
<span id="cb71-7">    output_path <span class="op" style="color: #5E5E5E;">=</span> <span class="ss" style="color: #20794D;">f'data/pq/yellow/</span><span class="sc" style="color: #5E5E5E;">{</span>year<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">/</span><span class="sc" style="color: #5E5E5E;">{</span>month<span class="sc" style="color: #5E5E5E;">:02d}</span><span class="ss" style="color: #20794D;">/'</span></span>
<span id="cb71-8"></span>
<span id="cb71-9">    df_green <span class="op" style="color: #5E5E5E;">=</span> spark.read <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb71-10">        .option(<span class="st" style="color: #20794D;">"header"</span>, <span class="st" style="color: #20794D;">"true"</span>) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb71-11">        .schema(yellow_schema) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb71-12">        .csv(input_path)</span>
<span id="cb71-13"></span>
<span id="cb71-14">    df_green <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb71-15">        .repartition(<span class="dv" style="color: #AD0000;">4</span>) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb71-16">        .write.parquet(output_path)</span></code></pre></div>
</div>
<p>We can see the structure of our downloaded parquet files using <code>tree</code> :</p>
<div class="cell" data-execution_count="225">
<div class="sourceCode cell-code" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb72-1"><span class="op" style="color: #5E5E5E;">!</span>tree data<span class="op" style="color: #5E5E5E;">/</span>pq<span class="op" style="color: #5E5E5E;">/</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>data/pq/
├── green
│&nbsp;&nbsp; ├── 2020
│&nbsp;&nbsp; │&nbsp;&nbsp; ├── 01
│&nbsp;&nbsp; │&nbsp;&nbsp; │&nbsp;&nbsp; ├── _SUCCESS
│&nbsp;&nbsp; │&nbsp;&nbsp; │&nbsp;&nbsp; ├── part-00000-8b01f98f-81fe-4596-89a1-b39326a4fc89-c000.snappy.parquet
│&nbsp;&nbsp; │&nbsp;&nbsp; │&nbsp;&nbsp; ├── part-00001-8b01f98f-81fe-4596-89a1-b39326a4fc89-c000.snappy.parquet
│&nbsp;&nbsp; │&nbsp;&nbsp; │&nbsp;&nbsp; ├── part-00002-8b01f98f-81fe-4596-89a1-b39326a4fc89-c000.snappy.parquet
│&nbsp;&nbsp; │&nbsp;&nbsp; │&nbsp;&nbsp; └── part-00003-8b01f98f-81fe-4596-89a1-b39326a4fc89-c000.snappy.parquet
│&nbsp;&nbsp; │&nbsp;&nbsp; ├── 02
│&nbsp;&nbsp; │&nbsp;&nbsp; │&nbsp;&nbsp; ├── _SUCCESS
│&nbsp;&nbsp; │&nbsp;&nbsp; │&nbsp;&nbsp; ├── part-00000-3c243630-2ac8-4a06-979b-1e8a398df62a-c000.snappy.parquet
│&nbsp;&nbsp; │&nbsp;&nbsp; │&nbsp;&nbsp; ├── part-00001-3c243630-2ac8-4a06-979b-1e8a398df62a-c000.snappy.parquet
│&nbsp;&nbsp; │&nbsp;&nbsp; │&nbsp;&nbsp; ├── part-00002-3c243630-2ac8-4a06-979b-1e8a398df62a-c000.snappy.parquet
│&nbsp;&nbsp; │&nbsp;&nbsp; │&nbsp;&nbsp; └── part-00003-3c243630-2ac8-4a06-979b-1e8a398df62a-c000.snappy.parquet
│&nbsp;&nbsp; │&nbsp;&nbsp; ├── 03
│&nbsp;&nbsp; │&nbsp;&nbsp; │&nbsp;&nbsp; ├── _SUCCESS
│&nbsp;&nbsp; │&nbsp;&nbsp; │&nbsp;&nbsp; ├── part-00000-be46dfd7-b4d2-4802-a124-99b9d191daf8-c000.snappy.parquet
│&nbsp;&nbsp; │&nbsp;&nbsp; │&nbsp;&nbsp; ├── part-00001-be46dfd7-b4d2-4802-a124-99b9d191daf8-c000.snappy.parquet
│&nbsp;&nbsp; │&nbsp;&nbsp; │&nbsp;&nbsp; ├── part-00002-be46dfd7-b4d2-4802-a124-99b9d191daf8-c000.snappy.parquet
│&nbsp;&nbsp; │&nbsp;&nbsp; │&nbsp;&nbsp; └── part-00003-be46dfd7-b4d2-4802-a124-99b9d191daf8-c000.snappy.parquet
│&nbsp;&nbsp; │&nbsp;&nbsp; ├── 04
│&nbsp;&nbsp; │&nbsp;&nbsp; │&nbsp;&nbsp; ├── _SUCCESS
│&nbsp;&nbsp; │&nbsp;&nbsp; │&nbsp;&nbsp; ├── part-00000-cbb6d825-747e-42d8-8237-400f4cf188ee-c000.snappy.parquet
│&nbsp;&nbsp; │&nbsp;&nbsp; │&nbsp;&nbsp; ├── part-00001-cbb6d825-747e-42d8-8237-400f4cf188ee-c000.snappy.parquet
│&nbsp;&nbsp; │&nbsp;&nbsp; │&nbsp;&nbsp; ├── part-00002-cbb6d825-747e-42d8-8237-400f4cf188ee-c000.snappy.parquet
│&nbsp;&nbsp; │&nbsp;&nbsp; │&nbsp;&nbsp; └── part-00003-cbb6d825-747e-42d8-8237-400f4cf188ee-c000.snappy.parquet
│&nbsp;&nbsp; │&nbsp;&nbsp; ├── 05
│&nbsp;&nbsp; │&nbsp;&nbsp; │&nbsp;&nbsp; ├── _SUCCESS
│&nbsp;&nbsp; │&nbsp;&nbsp; │&nbsp;&nbsp; ├── part-00000-199c0d3a-f772-495a-b4bd-de3261c10a84-c000.snappy.parquet
│&nbsp;&nbsp; │&nbsp;&nbsp; │&nbsp;&nbsp; ├── part-00001-199c0d3a-f772-495a-b4bd-de3261c10a84-c000.snappy.parquet
│&nbsp;&nbsp; │&nbsp;&nbsp; │&nbsp;&nbsp; ├── part-00002-199c0d3a-f772-495a-b4bd-de3261c10a84-c000.snappy.parquet
│&nbsp;&nbsp; │&nbsp;&nbsp; │&nbsp;&nbsp; └── part-00003-199c0d3a-f772-495a-b4bd-de3261c10a84-c000.snappy.parquet
│&nbsp;&nbsp; │&nbsp;&nbsp; ├── 06
│&nbsp;&nbsp; │&nbsp;&nbsp; │&nbsp;&nbsp; ├── _SUCCESS
│&nbsp;&nbsp; │&nbsp;&nbsp; │&nbsp;&nbsp; ├── part-00000-6ba25688-0e78-45b5-ae85-3460a5c5e921-c000.snappy.parquet
│&nbsp;&nbsp; │&nbsp;&nbsp; │&nbsp;&nbsp; ├── part-00001-6ba25688-0e78-45b5-ae85-3460a5c5e921-c000.snappy.parquet
│&nbsp;&nbsp; │&nbsp;&nbsp; │&nbsp;&nbsp; ├── part-00002-6ba25688-0e78-45b5-ae85-3460a5c5e921-c000.snappy.parquet
│&nbsp;&nbsp; │&nbsp;&nbsp; │&nbsp;&nbsp; └── part-00003-6ba25688-0e78-45b5-ae85-3460a5c5e921-c000.snappy.parquet
│&nbsp;&nbsp; │&nbsp;&nbsp; ├── 07
│&nbsp;&nbsp; │&nbsp;&nbsp; │&nbsp;&nbsp; ├── _SUCCESS
│&nbsp;&nbsp; │&nbsp;&nbsp; │&nbsp;&nbsp; ├── part-00000-626c45ff-38e2-4bdf-8add-f61defd0c946-c000.snappy.parquet
│&nbsp;&nbsp; │&nbsp;&nbsp; │&nbsp;&nbsp; ├── part-00001-626c45ff-38e2-4bdf-8add-f61defd0c946-c000.snappy.parquet
│&nbsp;&nbsp; │&nbsp;&nbsp; │&nbsp;&nbsp; ├── part-00002-626c45ff-38e2-4bdf-8add-f61defd0c946-c000.snappy.parquet
│&nbsp;&nbsp; │&nbsp;&nbsp; │&nbsp;&nbsp; └── part-00003-626c45ff-38e2-4bdf-8add-f61defd0c946-c000.snappy.parquet
│&nbsp;&nbsp; │&nbsp;&nbsp; ├── 08
│&nbsp;&nbsp; │&nbsp;&nbsp; │&nbsp;&nbsp; ├── _SUCCESS
│&nbsp;&nbsp; │&nbsp;&nbsp; │&nbsp;&nbsp; ├── part-00000-70a42578-baa5-4d7b-8350-3c8b54451443-c000.snappy.parquet
│&nbsp;&nbsp; │&nbsp;&nbsp; │&nbsp;&nbsp; ├── part-00001-70a42578-baa5-4d7b-8350-3c8b54451443-c000.snappy.parquet
│&nbsp;&nbsp; │&nbsp;&nbsp; │&nbsp;&nbsp; ├── part-00002-70a42578-baa5-4d7b-8350-3c8b54451443-c000.snappy.parquet
│&nbsp;&nbsp; │&nbsp;&nbsp; │&nbsp;&nbsp; └── part-00003-70a42578-baa5-4d7b-8350-3c8b54451443-c000.snappy.parquet
│&nbsp;&nbsp; │&nbsp;&nbsp; ├── 09
│&nbsp;&nbsp; │&nbsp;&nbsp; │&nbsp;&nbsp; ├── _SUCCESS
│&nbsp;&nbsp; │&nbsp;&nbsp; │&nbsp;&nbsp; ├── part-00000-7bf574b0-dfbd-461a-8ce5-f65bd261d528-c000.snappy.parquet
│&nbsp;&nbsp; │&nbsp;&nbsp; │&nbsp;&nbsp; ├── part-00001-7bf574b0-dfbd-461a-8ce5-f65bd261d528-c000.snappy.parquet
│&nbsp;&nbsp; │&nbsp;&nbsp; │&nbsp;&nbsp; ├── part-00002-7bf574b0-dfbd-461a-8ce5-f65bd261d528-c000.snappy.parquet
│&nbsp;&nbsp; │&nbsp;&nbsp; │&nbsp;&nbsp; └── part-00003-7bf574b0-dfbd-461a-8ce5-f65bd261d528-c000.snappy.parquet
│&nbsp;&nbsp; │&nbsp;&nbsp; ├── 10
│&nbsp;&nbsp; │&nbsp;&nbsp; │&nbsp;&nbsp; ├── _SUCCESS
│&nbsp;&nbsp; │&nbsp;&nbsp; │&nbsp;&nbsp; ├── part-00000-030469d0-906b-477c-accd-57a0d179dd2d-c000.snappy.parquet
│&nbsp;&nbsp; │&nbsp;&nbsp; │&nbsp;&nbsp; ├── part-00001-030469d0-906b-477c-accd-57a0d179dd2d-c000.snappy.parquet
│&nbsp;&nbsp; │&nbsp;&nbsp; │&nbsp;&nbsp; ├── part-00002-030469d0-906b-477c-accd-57a0d179dd2d-c000.snappy.parquet
│&nbsp;&nbsp; │&nbsp;&nbsp; │&nbsp;&nbsp; └── part-00003-030469d0-906b-477c-accd-57a0d179dd2d-c000.snappy.parquet
│&nbsp;&nbsp; │&nbsp;&nbsp; ├── 11
│&nbsp;&nbsp; │&nbsp;&nbsp; │&nbsp;&nbsp; ├── _SUCCESS
│&nbsp;&nbsp; │&nbsp;&nbsp; │&nbsp;&nbsp; ├── part-00000-4136ae51-88ac-4aa9-9d3c-d8ee0363f9cf-c000.snappy.parquet
│&nbsp;&nbsp; │&nbsp;&nbsp; │&nbsp;&nbsp; ├── part-00001-4136ae51-88ac-4aa9-9d3c-d8ee0363f9cf-c000.snappy.parquet
│&nbsp;&nbsp; │&nbsp;&nbsp; │&nbsp;&nbsp; ├── part-00002-4136ae51-88ac-4aa9-9d3c-d8ee0363f9cf-c000.snappy.parquet
│&nbsp;&nbsp; │&nbsp;&nbsp; │&nbsp;&nbsp; └── part-00003-4136ae51-88ac-4aa9-9d3c-d8ee0363f9cf-c000.snappy.parquet
│&nbsp;&nbsp; │&nbsp;&nbsp; └── 12
│&nbsp;&nbsp; │&nbsp;&nbsp;     ├── _SUCCESS
│&nbsp;&nbsp; │&nbsp;&nbsp;     ├── part-00000-5e4ac23a-9ea2-4d39-a974-72fa35bed604-c000.snappy.parquet
│&nbsp;&nbsp; │&nbsp;&nbsp;     ├── part-00001-5e4ac23a-9ea2-4d39-a974-72fa35bed604-c000.snappy.parquet
│&nbsp;&nbsp; │&nbsp;&nbsp;     ├── part-00002-5e4ac23a-9ea2-4d39-a974-72fa35bed604-c000.snappy.parquet
│&nbsp;&nbsp; │&nbsp;&nbsp;     └── part-00003-5e4ac23a-9ea2-4d39-a974-72fa35bed604-c000.snappy.parquet
│&nbsp;&nbsp; └── 2021
│&nbsp;&nbsp;     ├── 01
│&nbsp;&nbsp;     │&nbsp;&nbsp; ├── _SUCCESS
│&nbsp;&nbsp;     │&nbsp;&nbsp; ├── part-00000-a9d9b6cb-a441-4c75-ad83-e0dabbe67945-c000.snappy.parquet
│&nbsp;&nbsp;     │&nbsp;&nbsp; ├── part-00001-a9d9b6cb-a441-4c75-ad83-e0dabbe67945-c000.snappy.parquet
│&nbsp;&nbsp;     │&nbsp;&nbsp; ├── part-00002-a9d9b6cb-a441-4c75-ad83-e0dabbe67945-c000.snappy.parquet
│&nbsp;&nbsp;     │&nbsp;&nbsp; └── part-00003-a9d9b6cb-a441-4c75-ad83-e0dabbe67945-c000.snappy.parquet
│&nbsp;&nbsp;     ├── 02
│&nbsp;&nbsp;     │&nbsp;&nbsp; ├── _SUCCESS
│&nbsp;&nbsp;     │&nbsp;&nbsp; ├── part-00000-125ad13e-4d67-4cb1-8ae1-2fe33966fee4-c000.snappy.parquet
│&nbsp;&nbsp;     │&nbsp;&nbsp; ├── part-00001-125ad13e-4d67-4cb1-8ae1-2fe33966fee4-c000.snappy.parquet
│&nbsp;&nbsp;     │&nbsp;&nbsp; ├── part-00002-125ad13e-4d67-4cb1-8ae1-2fe33966fee4-c000.snappy.parquet
│&nbsp;&nbsp;     │&nbsp;&nbsp; └── part-00003-125ad13e-4d67-4cb1-8ae1-2fe33966fee4-c000.snappy.parquet
│&nbsp;&nbsp;     ├── 03
│&nbsp;&nbsp;     │&nbsp;&nbsp; ├── _SUCCESS
│&nbsp;&nbsp;     │&nbsp;&nbsp; ├── part-00000-1bc79775-8fc3-4709-854c-3351661cd6c4-c000.snappy.parquet
│&nbsp;&nbsp;     │&nbsp;&nbsp; ├── part-00001-1bc79775-8fc3-4709-854c-3351661cd6c4-c000.snappy.parquet
│&nbsp;&nbsp;     │&nbsp;&nbsp; ├── part-00002-1bc79775-8fc3-4709-854c-3351661cd6c4-c000.snappy.parquet
│&nbsp;&nbsp;     │&nbsp;&nbsp; └── part-00003-1bc79775-8fc3-4709-854c-3351661cd6c4-c000.snappy.parquet
│&nbsp;&nbsp;     ├── 04
│&nbsp;&nbsp;     │&nbsp;&nbsp; ├── _SUCCESS
│&nbsp;&nbsp;     │&nbsp;&nbsp; ├── part-00000-ceb35fd7-2ce7-4b84-83a3-cf31e6123391-c000.snappy.parquet
│&nbsp;&nbsp;     │&nbsp;&nbsp; ├── part-00001-ceb35fd7-2ce7-4b84-83a3-cf31e6123391-c000.snappy.parquet
│&nbsp;&nbsp;     │&nbsp;&nbsp; ├── part-00002-ceb35fd7-2ce7-4b84-83a3-cf31e6123391-c000.snappy.parquet
│&nbsp;&nbsp;     │&nbsp;&nbsp; └── part-00003-ceb35fd7-2ce7-4b84-83a3-cf31e6123391-c000.snappy.parquet
│&nbsp;&nbsp;     ├── 05
│&nbsp;&nbsp;     │&nbsp;&nbsp; ├── _SUCCESS
│&nbsp;&nbsp;     │&nbsp;&nbsp; ├── part-00000-0f4cffc3-22ef-4558-9ceb-40c78fd0a048-c000.snappy.parquet
│&nbsp;&nbsp;     │&nbsp;&nbsp; ├── part-00001-0f4cffc3-22ef-4558-9ceb-40c78fd0a048-c000.snappy.parquet
│&nbsp;&nbsp;     │&nbsp;&nbsp; ├── part-00002-0f4cffc3-22ef-4558-9ceb-40c78fd0a048-c000.snappy.parquet
│&nbsp;&nbsp;     │&nbsp;&nbsp; └── part-00003-0f4cffc3-22ef-4558-9ceb-40c78fd0a048-c000.snappy.parquet
│&nbsp;&nbsp;     ├── 06
│&nbsp;&nbsp;     │&nbsp;&nbsp; ├── _SUCCESS
│&nbsp;&nbsp;     │&nbsp;&nbsp; ├── part-00000-5ad0ef6e-9c3b-488a-85a0-b34a4c364eb0-c000.snappy.parquet
│&nbsp;&nbsp;     │&nbsp;&nbsp; ├── part-00001-5ad0ef6e-9c3b-488a-85a0-b34a4c364eb0-c000.snappy.parquet
│&nbsp;&nbsp;     │&nbsp;&nbsp; ├── part-00002-5ad0ef6e-9c3b-488a-85a0-b34a4c364eb0-c000.snappy.parquet
│&nbsp;&nbsp;     │&nbsp;&nbsp; └── part-00003-5ad0ef6e-9c3b-488a-85a0-b34a4c364eb0-c000.snappy.parquet
│&nbsp;&nbsp;     └── 07
│&nbsp;&nbsp;         ├── _SUCCESS
│&nbsp;&nbsp;         ├── part-00000-4283b1a5-f5da-4219-97b2-2bd986599afd-c000.snappy.parquet
│&nbsp;&nbsp;         ├── part-00001-4283b1a5-f5da-4219-97b2-2bd986599afd-c000.snappy.parquet
│&nbsp;&nbsp;         ├── part-00002-4283b1a5-f5da-4219-97b2-2bd986599afd-c000.snappy.parquet
│&nbsp;&nbsp;         └── part-00003-4283b1a5-f5da-4219-97b2-2bd986599afd-c000.snappy.parquet
└── yellow
    ├── 2020
    │&nbsp;&nbsp; ├── 01
    │&nbsp;&nbsp; │&nbsp;&nbsp; ├── _SUCCESS
    │&nbsp;&nbsp; │&nbsp;&nbsp; ├── part-00000-13e18553-247c-48af-af4e-b64c5f6024ed-c000.snappy.parquet
    │&nbsp;&nbsp; │&nbsp;&nbsp; ├── part-00001-13e18553-247c-48af-af4e-b64c5f6024ed-c000.snappy.parquet
    │&nbsp;&nbsp; │&nbsp;&nbsp; ├── part-00002-13e18553-247c-48af-af4e-b64c5f6024ed-c000.snappy.parquet
    │&nbsp;&nbsp; │&nbsp;&nbsp; └── part-00003-13e18553-247c-48af-af4e-b64c5f6024ed-c000.snappy.parquet
    │&nbsp;&nbsp; ├── 02
    │&nbsp;&nbsp; │&nbsp;&nbsp; ├── _SUCCESS
    │&nbsp;&nbsp; │&nbsp;&nbsp; ├── part-00000-2bc461f8-6484-43c8-8757-97e638e454ae-c000.snappy.parquet
    │&nbsp;&nbsp; │&nbsp;&nbsp; ├── part-00001-2bc461f8-6484-43c8-8757-97e638e454ae-c000.snappy.parquet
    │&nbsp;&nbsp; │&nbsp;&nbsp; ├── part-00002-2bc461f8-6484-43c8-8757-97e638e454ae-c000.snappy.parquet
    │&nbsp;&nbsp; │&nbsp;&nbsp; └── part-00003-2bc461f8-6484-43c8-8757-97e638e454ae-c000.snappy.parquet
    │&nbsp;&nbsp; ├── 03
    │&nbsp;&nbsp; │&nbsp;&nbsp; ├── _SUCCESS
    │&nbsp;&nbsp; │&nbsp;&nbsp; ├── part-00000-3c79e29b-b3fb-4f4c-9ce2-6eb6341de80c-c000.snappy.parquet
    │&nbsp;&nbsp; │&nbsp;&nbsp; ├── part-00001-3c79e29b-b3fb-4f4c-9ce2-6eb6341de80c-c000.snappy.parquet
    │&nbsp;&nbsp; │&nbsp;&nbsp; ├── part-00002-3c79e29b-b3fb-4f4c-9ce2-6eb6341de80c-c000.snappy.parquet
    │&nbsp;&nbsp; │&nbsp;&nbsp; └── part-00003-3c79e29b-b3fb-4f4c-9ce2-6eb6341de80c-c000.snappy.parquet
    │&nbsp;&nbsp; ├── 04
    │&nbsp;&nbsp; │&nbsp;&nbsp; ├── _SUCCESS
    │&nbsp;&nbsp; │&nbsp;&nbsp; ├── part-00000-c7ea0f14-9b83-40d7-bc3b-168d552efe6f-c000.snappy.parquet
    │&nbsp;&nbsp; │&nbsp;&nbsp; ├── part-00001-c7ea0f14-9b83-40d7-bc3b-168d552efe6f-c000.snappy.parquet
    │&nbsp;&nbsp; │&nbsp;&nbsp; ├── part-00002-c7ea0f14-9b83-40d7-bc3b-168d552efe6f-c000.snappy.parquet
    │&nbsp;&nbsp; │&nbsp;&nbsp; └── part-00003-c7ea0f14-9b83-40d7-bc3b-168d552efe6f-c000.snappy.parquet
    │&nbsp;&nbsp; ├── 05
    │&nbsp;&nbsp; │&nbsp;&nbsp; ├── _SUCCESS
    │&nbsp;&nbsp; │&nbsp;&nbsp; ├── part-00000-c966cece-74cf-4fb9-962e-9c818a4f1964-c000.snappy.parquet
    │&nbsp;&nbsp; │&nbsp;&nbsp; ├── part-00001-c966cece-74cf-4fb9-962e-9c818a4f1964-c000.snappy.parquet
    │&nbsp;&nbsp; │&nbsp;&nbsp; ├── part-00002-c966cece-74cf-4fb9-962e-9c818a4f1964-c000.snappy.parquet
    │&nbsp;&nbsp; │&nbsp;&nbsp; └── part-00003-c966cece-74cf-4fb9-962e-9c818a4f1964-c000.snappy.parquet
    │&nbsp;&nbsp; ├── 06
    │&nbsp;&nbsp; │&nbsp;&nbsp; ├── _SUCCESS
    │&nbsp;&nbsp; │&nbsp;&nbsp; ├── part-00000-9fb65628-ffb1-49b4-9682-0c71b2099651-c000.snappy.parquet
    │&nbsp;&nbsp; │&nbsp;&nbsp; ├── part-00001-9fb65628-ffb1-49b4-9682-0c71b2099651-c000.snappy.parquet
    │&nbsp;&nbsp; │&nbsp;&nbsp; ├── part-00002-9fb65628-ffb1-49b4-9682-0c71b2099651-c000.snappy.parquet
    │&nbsp;&nbsp; │&nbsp;&nbsp; └── part-00003-9fb65628-ffb1-49b4-9682-0c71b2099651-c000.snappy.parquet
    │&nbsp;&nbsp; ├── 07
    │&nbsp;&nbsp; │&nbsp;&nbsp; ├── _SUCCESS
    │&nbsp;&nbsp; │&nbsp;&nbsp; ├── part-00000-71ac3c30-7e37-438e-873d-1de2448ef2b6-c000.snappy.parquet
    │&nbsp;&nbsp; │&nbsp;&nbsp; ├── part-00001-71ac3c30-7e37-438e-873d-1de2448ef2b6-c000.snappy.parquet
    │&nbsp;&nbsp; │&nbsp;&nbsp; ├── part-00002-71ac3c30-7e37-438e-873d-1de2448ef2b6-c000.snappy.parquet
    │&nbsp;&nbsp; │&nbsp;&nbsp; └── part-00003-71ac3c30-7e37-438e-873d-1de2448ef2b6-c000.snappy.parquet
    │&nbsp;&nbsp; ├── 08
    │&nbsp;&nbsp; │&nbsp;&nbsp; ├── _SUCCESS
    │&nbsp;&nbsp; │&nbsp;&nbsp; ├── part-00000-5f4e316f-cefd-4aa3-a5cb-b1aefe474182-c000.snappy.parquet
    │&nbsp;&nbsp; │&nbsp;&nbsp; ├── part-00001-5f4e316f-cefd-4aa3-a5cb-b1aefe474182-c000.snappy.parquet
    │&nbsp;&nbsp; │&nbsp;&nbsp; ├── part-00002-5f4e316f-cefd-4aa3-a5cb-b1aefe474182-c000.snappy.parquet
    │&nbsp;&nbsp; │&nbsp;&nbsp; └── part-00003-5f4e316f-cefd-4aa3-a5cb-b1aefe474182-c000.snappy.parquet
    │&nbsp;&nbsp; ├── 09
    │&nbsp;&nbsp; │&nbsp;&nbsp; ├── _SUCCESS
    │&nbsp;&nbsp; │&nbsp;&nbsp; ├── part-00000-9cf0d56f-f5bc-42f4-9e3c-4472f1fef599-c000.snappy.parquet
    │&nbsp;&nbsp; │&nbsp;&nbsp; ├── part-00001-9cf0d56f-f5bc-42f4-9e3c-4472f1fef599-c000.snappy.parquet
    │&nbsp;&nbsp; │&nbsp;&nbsp; ├── part-00002-9cf0d56f-f5bc-42f4-9e3c-4472f1fef599-c000.snappy.parquet
    │&nbsp;&nbsp; │&nbsp;&nbsp; └── part-00003-9cf0d56f-f5bc-42f4-9e3c-4472f1fef599-c000.snappy.parquet
    │&nbsp;&nbsp; ├── 10
    │&nbsp;&nbsp; │&nbsp;&nbsp; ├── _SUCCESS
    │&nbsp;&nbsp; │&nbsp;&nbsp; ├── part-00000-79c26c54-874e-4a96-9ad6-b38b1b938766-c000.snappy.parquet
    │&nbsp;&nbsp; │&nbsp;&nbsp; ├── part-00001-79c26c54-874e-4a96-9ad6-b38b1b938766-c000.snappy.parquet
    │&nbsp;&nbsp; │&nbsp;&nbsp; ├── part-00002-79c26c54-874e-4a96-9ad6-b38b1b938766-c000.snappy.parquet
    │&nbsp;&nbsp; │&nbsp;&nbsp; └── part-00003-79c26c54-874e-4a96-9ad6-b38b1b938766-c000.snappy.parquet
    │&nbsp;&nbsp; ├── 11
    │&nbsp;&nbsp; │&nbsp;&nbsp; ├── _SUCCESS
    │&nbsp;&nbsp; │&nbsp;&nbsp; ├── part-00000-b3646277-b1f2-495f-a225-12cae19dc1ff-c000.snappy.parquet
    │&nbsp;&nbsp; │&nbsp;&nbsp; ├── part-00001-b3646277-b1f2-495f-a225-12cae19dc1ff-c000.snappy.parquet
    │&nbsp;&nbsp; │&nbsp;&nbsp; ├── part-00002-b3646277-b1f2-495f-a225-12cae19dc1ff-c000.snappy.parquet
    │&nbsp;&nbsp; │&nbsp;&nbsp; └── part-00003-b3646277-b1f2-495f-a225-12cae19dc1ff-c000.snappy.parquet
    │&nbsp;&nbsp; └── 12
    │&nbsp;&nbsp;     ├── _SUCCESS
    │&nbsp;&nbsp;     ├── part-00000-ab762734-8696-4d42-8f9d-d5b924d4fb29-c000.snappy.parquet
    │&nbsp;&nbsp;     ├── part-00001-ab762734-8696-4d42-8f9d-d5b924d4fb29-c000.snappy.parquet
    │&nbsp;&nbsp;     ├── part-00002-ab762734-8696-4d42-8f9d-d5b924d4fb29-c000.snappy.parquet
    │&nbsp;&nbsp;     └── part-00003-ab762734-8696-4d42-8f9d-d5b924d4fb29-c000.snappy.parquet
    └── 2021
        ├── 01
        │&nbsp;&nbsp; ├── _SUCCESS
        │&nbsp;&nbsp; ├── part-00000-1d24a28b-80bb-4115-9650-456962d66d59-c000.snappy.parquet
        │&nbsp;&nbsp; ├── part-00001-1d24a28b-80bb-4115-9650-456962d66d59-c000.snappy.parquet
        │&nbsp;&nbsp; ├── part-00002-1d24a28b-80bb-4115-9650-456962d66d59-c000.snappy.parquet
        │&nbsp;&nbsp; └── part-00003-1d24a28b-80bb-4115-9650-456962d66d59-c000.snappy.parquet
        ├── 02
        │&nbsp;&nbsp; ├── _SUCCESS
        │&nbsp;&nbsp; ├── part-00000-79399355-08a8-44fd-9a60-1cb83a19454e-c000.snappy.parquet
        │&nbsp;&nbsp; ├── part-00001-79399355-08a8-44fd-9a60-1cb83a19454e-c000.snappy.parquet
        │&nbsp;&nbsp; ├── part-00002-79399355-08a8-44fd-9a60-1cb83a19454e-c000.snappy.parquet
        │&nbsp;&nbsp; └── part-00003-79399355-08a8-44fd-9a60-1cb83a19454e-c000.snappy.parquet
        ├── 03
        │&nbsp;&nbsp; ├── _SUCCESS
        │&nbsp;&nbsp; ├── part-00000-b1231c11-d032-4088-b387-24cc04eaff40-c000.snappy.parquet
        │&nbsp;&nbsp; ├── part-00001-b1231c11-d032-4088-b387-24cc04eaff40-c000.snappy.parquet
        │&nbsp;&nbsp; ├── part-00002-b1231c11-d032-4088-b387-24cc04eaff40-c000.snappy.parquet
        │&nbsp;&nbsp; └── part-00003-b1231c11-d032-4088-b387-24cc04eaff40-c000.snappy.parquet
        ├── 04
        │&nbsp;&nbsp; ├── _SUCCESS
        │&nbsp;&nbsp; ├── part-00000-828ae8bb-c582-4e3e-a25b-8ffac100299e-c000.snappy.parquet
        │&nbsp;&nbsp; ├── part-00001-828ae8bb-c582-4e3e-a25b-8ffac100299e-c000.snappy.parquet
        │&nbsp;&nbsp; ├── part-00002-828ae8bb-c582-4e3e-a25b-8ffac100299e-c000.snappy.parquet
        │&nbsp;&nbsp; └── part-00003-828ae8bb-c582-4e3e-a25b-8ffac100299e-c000.snappy.parquet
        ├── 05
        │&nbsp;&nbsp; ├── _SUCCESS
        │&nbsp;&nbsp; ├── part-00000-a06be6df-4c6a-4a9c-994b-2e579cd79fd5-c000.snappy.parquet
        │&nbsp;&nbsp; ├── part-00001-a06be6df-4c6a-4a9c-994b-2e579cd79fd5-c000.snappy.parquet
        │&nbsp;&nbsp; ├── part-00002-a06be6df-4c6a-4a9c-994b-2e579cd79fd5-c000.snappy.parquet
        │&nbsp;&nbsp; └── part-00003-a06be6df-4c6a-4a9c-994b-2e579cd79fd5-c000.snappy.parquet
        ├── 06
        │&nbsp;&nbsp; ├── _SUCCESS
        │&nbsp;&nbsp; ├── part-00000-1d9a9dc9-eda5-44c8-b21d-2d8c3d6d0e62-c000.snappy.parquet
        │&nbsp;&nbsp; ├── part-00001-1d9a9dc9-eda5-44c8-b21d-2d8c3d6d0e62-c000.snappy.parquet
        │&nbsp;&nbsp; ├── part-00002-1d9a9dc9-eda5-44c8-b21d-2d8c3d6d0e62-c000.snappy.parquet
        │&nbsp;&nbsp; └── part-00003-1d9a9dc9-eda5-44c8-b21d-2d8c3d6d0e62-c000.snappy.parquet
        └── 07
            ├── _SUCCESS
            ├── part-00000-98a78c13-da79-4520-b66e-f7ba8384138e-c000.snappy.parquet
            ├── part-00001-98a78c13-da79-4520-b66e-f7ba8384138e-c000.snappy.parquet
            ├── part-00002-98a78c13-da79-4520-b66e-f7ba8384138e-c000.snappy.parquet
            └── part-00003-98a78c13-da79-4520-b66e-f7ba8384138e-c000.snappy.parquet

44 directories, 190 files</code></pre>
</div>
</div>
</section>
<section id="sql-with-spark" class="level3">
<h3 class="anchored" data-anchor-id="sql-with-spark">5.3.4 SQL with Spark</h3>
<p>We are going to recreate the <code>monthly_zone_revenue</code> model that we created previously in Week 4 using <code>dbt</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb74-1">{{ config(materialized<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'table'</span>) }}</span>
<span id="cb74-2"></span>
<span id="cb74-3"><span class="cf" style="color: #003B4F;">with</span> trips_data <span class="im" style="color: #00769E;">as</span> (</span>
<span id="cb74-4">    select <span class="op" style="color: #5E5E5E;">*</span> <span class="im" style="color: #00769E;">from</span> {{ ref(<span class="st" style="color: #20794D;">'fact_trips'</span>) }}</span>
<span id="cb74-5">)</span>
<span id="cb74-6">    select </span>
<span id="cb74-7">    <span class="op" style="color: #5E5E5E;">--</span> Reveneue grouping </span>
<span id="cb74-8">    pickup_zone <span class="im" style="color: #00769E;">as</span> revenue_zone,</span>
<span id="cb74-9">    date_trunc(<span class="st" style="color: #20794D;">'month'</span>, pickup_datetime) <span class="im" style="color: #00769E;">as</span> revenue_month, </span>
<span id="cb74-10">    <span class="op" style="color: #5E5E5E;">--</span>Note: For BQ use instead: date_trunc(pickup_datetime, month) <span class="im" style="color: #00769E;">as</span> revenue_month, </span>
<span id="cb74-11"></span>
<span id="cb74-12">    service_type, </span>
<span id="cb74-13"></span>
<span id="cb74-14">    <span class="op" style="color: #5E5E5E;">--</span> Revenue calculation </span>
<span id="cb74-15">    <span class="bu" style="color: null;">sum</span>(fare_amount) <span class="im" style="color: #00769E;">as</span> revenue_monthly_fare,</span>
<span id="cb74-16">    <span class="bu" style="color: null;">sum</span>(extra) <span class="im" style="color: #00769E;">as</span> revenue_monthly_extra,</span>
<span id="cb74-17">    <span class="bu" style="color: null;">sum</span>(mta_tax) <span class="im" style="color: #00769E;">as</span> revenue_monthly_mta_tax,</span>
<span id="cb74-18">    <span class="bu" style="color: null;">sum</span>(tip_amount) <span class="im" style="color: #00769E;">as</span> revenue_monthly_tip_amount,</span>
<span id="cb74-19">    <span class="bu" style="color: null;">sum</span>(tolls_amount) <span class="im" style="color: #00769E;">as</span> revenue_monthly_tolls_amount,</span>
<span id="cb74-20">    <span class="bu" style="color: null;">sum</span>(ehail_fee) <span class="im" style="color: #00769E;">as</span> revenue_monthly_ehail_fee,</span>
<span id="cb74-21">    <span class="bu" style="color: null;">sum</span>(improvement_surcharge) <span class="im" style="color: #00769E;">as</span> revenue_monthly_improvement_surcharge,</span>
<span id="cb74-22">    <span class="bu" style="color: null;">sum</span>(total_amount) <span class="im" style="color: #00769E;">as</span> revenue_monthly_total_amount,</span>
<span id="cb74-23">    <span class="bu" style="color: null;">sum</span>(congestion_surcharge) <span class="im" style="color: #00769E;">as</span> revenue_monthly_congestion_surcharge,</span>
<span id="cb74-24"></span>
<span id="cb74-25">    <span class="op" style="color: #5E5E5E;">--</span> Additional calculations</span>
<span id="cb74-26">    count(tripid) <span class="im" style="color: #00769E;">as</span> total_monthly_trips,</span>
<span id="cb74-27">    avg(passenger_count) <span class="im" style="color: #00769E;">as</span> avg_montly_passenger_count,</span>
<span id="cb74-28">    avg(trip_distance) <span class="im" style="color: #00769E;">as</span> avg_montly_trip_distance</span>
<span id="cb74-29"></span>
<span id="cb74-30">    <span class="im" style="color: #00769E;">from</span> trips_data</span>
<span id="cb74-31">    group by <span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">3</span></span></code></pre></div>
</div>
<p>First, let’s replicate the <code>trips_data</code> dataset which was created in Week 4 by combining the yellow and green datasets :</p>
<div class="cell" data-execution_count="226">
<div class="sourceCode cell-code" id="cb75" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb75-1">df_green <span class="op" style="color: #5E5E5E;">=</span> spark.read.parquet(<span class="st" style="color: #20794D;">'data/pq/green/*/*'</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="227">
<div class="sourceCode cell-code" id="cb76" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb76-1">df_green.printSchema()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>root
 |-- VendorID: integer (nullable = true)
 |-- lpep_pickup_datetime: timestamp (nullable = true)
 |-- lpep_dropoff_datetime: timestamp (nullable = true)
 |-- store_and_fwd_flag: string (nullable = true)
 |-- RatecodeID: integer (nullable = true)
 |-- PULocationID: integer (nullable = true)
 |-- DOLocationID: integer (nullable = true)
 |-- passenger_count: integer (nullable = true)
 |-- trip_distance: double (nullable = true)
 |-- fare_amount: double (nullable = true)
 |-- extra: double (nullable = true)
 |-- mta_tax: double (nullable = true)
 |-- tip_amount: double (nullable = true)
 |-- tolls_amount: double (nullable = true)
 |-- ehail_fee: double (nullable = true)
 |-- improvement_surcharge: double (nullable = true)
 |-- total_amount: double (nullable = true)
 |-- payment_type: integer (nullable = true)
 |-- trip_type: integer (nullable = true)
 |-- congestion_surcharge: double (nullable = true)
</code></pre>
</div>
</div>
<div class="cell" data-execution_count="228">
<div class="sourceCode cell-code" id="cb78" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb78-1">df_yellow <span class="op" style="color: #5E5E5E;">=</span> spark.read.parquet(<span class="st" style="color: #20794D;">'data/pq/yellow/*/*'</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="229">
<div class="sourceCode cell-code" id="cb79" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb79-1">df_yellow.printSchema()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>root
 |-- VendorID: integer (nullable = true)
 |-- tpep_pickup_datetime: timestamp (nullable = true)
 |-- tpep_dropoff_datetime: timestamp (nullable = true)
 |-- passenger_count: integer (nullable = true)
 |-- trip_distance: double (nullable = true)
 |-- RatecodeID: integer (nullable = true)
 |-- store_and_fwd_flag: string (nullable = true)
 |-- PULocationID: integer (nullable = true)
 |-- DOLocationID: integer (nullable = true)
 |-- payment_type: integer (nullable = true)
 |-- fare_amount: double (nullable = true)
 |-- extra: double (nullable = true)
 |-- mta_tax: double (nullable = true)
 |-- tip_amount: double (nullable = true)
 |-- tolls_amount: double (nullable = true)
 |-- improvement_surcharge: double (nullable = true)
 |-- total_amount: double (nullable = true)
 |-- congestion_surcharge: double (nullable = true)
</code></pre>
</div>
</div>
<p>The pick up and drop off fields have a different naming convention, Let’s correct for that using <code>.withColumnRenamed</code>:</p>
<div class="cell" data-execution_count="230">
<div class="sourceCode cell-code" id="cb81" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb81-1">df_green <span class="op" style="color: #5E5E5E;">=</span> df_green <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb81-2">    .withColumnRenamed(<span class="st" style="color: #20794D;">'lpep_pickup_datetime'</span>, <span class="st" style="color: #20794D;">'pickup_datetime'</span>) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb81-3">    .withColumnRenamed(<span class="st" style="color: #20794D;">'lpep_dropoff_datetime'</span>, <span class="st" style="color: #20794D;">'dropoff_datetime'</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="231">
<div class="sourceCode cell-code" id="cb82" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb82-1">df_yellow <span class="op" style="color: #5E5E5E;">=</span> df_yellow <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb82-2">    .withColumnRenamed(<span class="st" style="color: #20794D;">'tpep_pickup_datetime'</span>, <span class="st" style="color: #20794D;">'pickup_datetime'</span>) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb82-3">    .withColumnRenamed(<span class="st" style="color: #20794D;">'tpep_dropoff_datetime'</span>, <span class="st" style="color: #20794D;">'dropoff_datetime'</span>)</span></code></pre></div>
</div>
<p>We only want to combine on common columns, but there is still some inconsistency between the two datasets, for example green has <code>ehail_fee</code> whereas yellow does not. We can use Python’s <a href="https://docs.python.org/3/library/stdtypes.html#set-types-set-frozenset">set</a> object to help with this :</p>
<div class="cell" data-execution_count="232">
<div class="sourceCode cell-code" id="cb83" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb83-1">common_columns <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb83-2"></span>
<span id="cb83-3">yellow_columns <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">set</span>(df_yellow.columns)</span>
<span id="cb83-4"></span>
<span id="cb83-5"><span class="cf" style="color: #003B4F;">for</span> col <span class="kw" style="color: #003B4F;">in</span> df_green.columns:</span>
<span id="cb83-6">    <span class="cf" style="color: #003B4F;">if</span> col <span class="kw" style="color: #003B4F;">in</span> yellow_columns:</span>
<span id="cb83-7">        common_columns.append(col)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="233">
<div class="sourceCode cell-code" id="cb84" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb84-1">common_columns</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="233">
<pre><code>['VendorID',
 'pickup_datetime',
 'dropoff_datetime',
 'store_and_fwd_flag',
 'RatecodeID',
 'PULocationID',
 'DOLocationID',
 'passenger_count',
 'trip_distance',
 'fare_amount',
 'extra',
 'mta_tax',
 'tip_amount',
 'tolls_amount',
 'improvement_surcharge',
 'total_amount',
 'payment_type',
 'congestion_surcharge']</code></pre>
</div>
</div>
<p>We want to be able to distinguish between the yellow and green taxi services in our combined data set. To do this, prior to combining, we should add a new column to our green and yellow datasets named <code>service_type</code>. To add a new column to a PySpark DataFrame we can use the <a href="https://spark.apache.org/docs/3.1.3/api/python/reference/api/pyspark.sql.functions.lit.html">.lit() function</a>.</p>
<div class="cell" data-execution_count="234">
<div class="sourceCode cell-code" id="cb86" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb86-1"><span class="im" style="color: #00769E;">from</span> pyspark.sql <span class="im" style="color: #00769E;">import</span> functions <span class="im" style="color: #00769E;">as</span> F</span></code></pre></div>
</div>
<div class="cell" data-execution_count="235">
<div class="sourceCode cell-code" id="cb87" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb87-1">df_green <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb87-2">    .select(common_columns) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb87-3">    .withColumn(<span class="st" style="color: #20794D;">'service_type'</span>, F.lit(<span class="st" style="color: #20794D;">'green'</span>))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="235">
<pre><code>DataFrame[VendorID: int, pickup_datetime: timestamp, dropoff_datetime: timestamp, store_and_fwd_flag: string, RatecodeID: int, PULocationID: int, DOLocationID: int, passenger_count: int, trip_distance: double, fare_amount: double, extra: double, mta_tax: double, tip_amount: double, tolls_amount: double, improvement_surcharge: double, total_amount: double, payment_type: int, congestion_surcharge: double, service_type: string]</code></pre>
</div>
</div>
<div class="cell" data-execution_count="236">
<div class="sourceCode cell-code" id="cb89" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb89-1">df_yellow <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb89-2">    .select(common_columns) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb89-3">    .withColumn(<span class="st" style="color: #20794D;">'service_type'</span>, F.lit(<span class="st" style="color: #20794D;">'yellow'</span>))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="236">
<pre><code>DataFrame[VendorID: int, pickup_datetime: timestamp, dropoff_datetime: timestamp, store_and_fwd_flag: string, RatecodeID: int, PULocationID: int, DOLocationID: int, passenger_count: int, trip_distance: double, fare_amount: double, extra: double, mta_tax: double, tip_amount: double, tolls_amount: double, improvement_surcharge: double, total_amount: double, payment_type: int, congestion_surcharge: double, service_type: string]</code></pre>
</div>
</div>
<div class="cell" data-execution_count="237">
<div class="sourceCode cell-code" id="cb91" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb91-1">df_green_sel <span class="op" style="color: #5E5E5E;">=</span> df_green <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb91-2">    .select(common_columns) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb91-3">    .withColumn(<span class="st" style="color: #20794D;">'service_type'</span>, F.lit(<span class="st" style="color: #20794D;">'green'</span>))</span></code></pre></div>
</div>
<div class="cell" data-execution_count="238">
<div class="sourceCode cell-code" id="cb92" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb92-1">df_yellow_sel <span class="op" style="color: #5E5E5E;">=</span> df_yellow <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb92-2">    .select(common_columns) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb92-3">    .withColumn(<span class="st" style="color: #20794D;">'service_type'</span>, F.lit(<span class="st" style="color: #20794D;">'yellow'</span>))</span></code></pre></div>
</div>
<p>To merge our green and yellow datasets we can once again make use of one of Python’s <code>set</code>functions <code>.unionALL</code>:</p>
<div class="cell" data-execution_count="239">
<div class="sourceCode cell-code" id="cb93" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb93-1">df_green_sel.unionAll(df_yellow_sel)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="239">
<pre><code>DataFrame[VendorID: int, pickup_datetime: timestamp, dropoff_datetime: timestamp, store_and_fwd_flag: string, RatecodeID: int, PULocationID: int, DOLocationID: int, passenger_count: int, trip_distance: double, fare_amount: double, extra: double, mta_tax: double, tip_amount: double, tolls_amount: double, improvement_surcharge: double, total_amount: double, payment_type: int, congestion_surcharge: double, service_type: string]</code></pre>
</div>
</div>
<div class="cell" data-execution_count="240">
<div class="sourceCode cell-code" id="cb95" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb95-1">df_trips_data <span class="op" style="color: #5E5E5E;">=</span> df_green_sel.unionAll(df_yellow_sel)</span></code></pre></div>
</div>
<p>And we can use <code>.groupBy</code> to show the distribution by service type :</p>
<div class="cell" data-execution_count="241">
<div class="sourceCode cell-code" id="cb96" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb96-1">df_trips_data.groupBy(<span class="st" style="color: #20794D;">'service_type'</span>).count().show()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>[Stage 341:===================================&gt;                  (24 + 13) / 37]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>+------------+--------+
|service_type|   count|
+------------+--------+
|       green| 2304517|
|      yellow|39649199|
+------------+--------+
</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>                                                                                </code></pre>
</div>
</div>
<section id="querying-the-data-with-sql" class="level4">
<h4 class="anchored" data-anchor-id="querying-the-data-with-sql">Querying the data with SQL</h4>
<p>First, let’s register a temporary table :</p>
<div class="cell" data-execution_count="244">
<div class="sourceCode cell-code" id="cb100" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb100-1">df_trips_data.registerTempTable(<span class="st" style="color: #20794D;">'trips_data'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/home/stephen137/mambaforge/lib/python3.10/site-packages/pyspark/sql/dataframe.py:229: FutureWarning: Deprecated in 2.0, use createOrReplaceTempView instead.
  warnings.warn("Deprecated in 2.0, use createOrReplaceTempView instead.", FutureWarning)</code></pre>
</div>
</div>
<p>We can run SQL queries in Spark using <code>spark.sql</code> :</p>
<div class="cell" data-execution_count="245">
<div class="sourceCode cell-code" id="cb102" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb102-1">spark.sql(<span class="st" style="color: #20794D;">"""</span></span>
<span id="cb102-2"><span class="st" style="color: #20794D;">SELECT</span></span>
<span id="cb102-3"><span class="st" style="color: #20794D;">    service_type,</span></span>
<span id="cb102-4"><span class="st" style="color: #20794D;">    count(1)</span></span>
<span id="cb102-5"><span class="st" style="color: #20794D;">FROM</span></span>
<span id="cb102-6"><span class="st" style="color: #20794D;">    trips_data</span></span>
<span id="cb102-7"><span class="st" style="color: #20794D;">GROUP BY </span></span>
<span id="cb102-8"><span class="st" style="color: #20794D;">    service_type</span></span>
<span id="cb102-9"><span class="st" style="color: #20794D;">"""</span>).show()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>[Stage 344:=====================================&gt;                (26 + 11) / 37]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>+------------+--------+
|service_type|count(1)|
+------------+--------+
|       green| 2304517|
|      yellow|39649199|
+------------+--------+
</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>                                                                                </code></pre>
</div>
</div>
<p>Let’s get all the column names as a list :</p>
<div class="cell" data-execution_count="243">
<div class="sourceCode cell-code" id="cb106" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb106-1">df_trips_data.columns</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="243">
<pre><code>['VendorID',
 'pickup_datetime',
 'dropoff_datetime',
 'store_and_fwd_flag',
 'RatecodeID',
 'PULocationID',
 'DOLocationID',
 'passenger_count',
 'trip_distance',
 'fare_amount',
 'extra',
 'mta_tax',
 'tip_amount',
 'tolls_amount',
 'improvement_surcharge',
 'total_amount',
 'payment_type',
 'congestion_surcharge',
 'service_type']</code></pre>
</div>
</div>
<p>Let’s finally replicate the <code>monthly_zone_revenue</code> model created in Week 4 using <code>dbt</code>:</p>
<div class="cell" data-execution_count="246">
<div class="sourceCode cell-code" id="cb108" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb108-1">df_result <span class="op" style="color: #5E5E5E;">=</span> spark.sql(<span class="st" style="color: #20794D;">"""</span></span>
<span id="cb108-2"><span class="st" style="color: #20794D;">SELECT </span></span>
<span id="cb108-3"><span class="st" style="color: #20794D;">    -- Reveneue grouping </span></span>
<span id="cb108-4"><span class="st" style="color: #20794D;">    PULocationID AS revenue_zone,</span></span>
<span id="cb108-5"><span class="st" style="color: #20794D;">    date_trunc('month', pickup_datetime) AS revenue_month, </span></span>
<span id="cb108-6"><span class="st" style="color: #20794D;">    service_type, </span></span>
<span id="cb108-7"></span>
<span id="cb108-8"><span class="st" style="color: #20794D;">    -- Revenue calculation </span></span>
<span id="cb108-9"><span class="st" style="color: #20794D;">    SUM(fare_amount) AS revenue_monthly_fare,</span></span>
<span id="cb108-10"><span class="st" style="color: #20794D;">    SUM(extra) AS revenue_monthly_extra,</span></span>
<span id="cb108-11"><span class="st" style="color: #20794D;">    SUM(mta_tax) AS revenue_monthly_mta_tax,</span></span>
<span id="cb108-12"><span class="st" style="color: #20794D;">    SUM(tip_amount) AS revenue_monthly_tip_amount,</span></span>
<span id="cb108-13"><span class="st" style="color: #20794D;">    SUM(tolls_amount) AS revenue_monthly_tolls_amount,</span></span>
<span id="cb108-14"><span class="st" style="color: #20794D;">    SUM(improvement_surcharge) AS revenue_monthly_improvement_surcharge,</span></span>
<span id="cb108-15"><span class="st" style="color: #20794D;">    SUM(total_amount) AS revenue_monthly_total_amount,</span></span>
<span id="cb108-16"><span class="st" style="color: #20794D;">    SUM(congestion_surcharge) AS revenue_monthly_congestion_surcharge,</span></span>
<span id="cb108-17"></span>
<span id="cb108-18"><span class="st" style="color: #20794D;">    -- Additional calculations</span></span>
<span id="cb108-19"><span class="st" style="color: #20794D;">    AVG(passenger_count) AS avg_montly_passenger_count,</span></span>
<span id="cb108-20"><span class="st" style="color: #20794D;">    AVG(trip_distance) AS avg_montly_trip_distance</span></span>
<span id="cb108-21"><span class="st" style="color: #20794D;">FROM</span></span>
<span id="cb108-22"><span class="st" style="color: #20794D;">    trips_data</span></span>
<span id="cb108-23"><span class="st" style="color: #20794D;">GROUP BY</span></span>
<span id="cb108-24"><span class="st" style="color: #20794D;">    1, 2, 3</span></span>
<span id="cb108-25"><span class="st" style="color: #20794D;">"""</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="247">
<div class="sourceCode cell-code" id="cb109" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb109-1">df_result.show()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>[Stage 347:=====================================================&gt; (36 + 1) / 37]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>+------------+-------------------+------------+--------------------+---------------------+-----------------------+--------------------------+----------------------------+-------------------------------------+----------------------------+------------------------------------+--------------------------+------------------------+
|revenue_zone|      revenue_month|service_type|revenue_monthly_fare|revenue_monthly_extra|revenue_monthly_mta_tax|revenue_monthly_tip_amount|revenue_monthly_tolls_amount|revenue_monthly_improvement_surcharge|revenue_monthly_total_amount|revenue_monthly_congestion_surcharge|avg_montly_passenger_count|avg_montly_trip_distance|
+------------+-------------------+------------+--------------------+---------------------+-----------------------+--------------------------+----------------------------+-------------------------------------+----------------------------+------------------------------------+--------------------------+------------------------+
|          47|2020-01-01 00:00:00|       green|  16630.150000000023|               1192.0|                  160.0|        42.230000000000004|           523.0000000000002|                   210.90000000000015|          18770.429999999975|                                11.0|         1.177685950413223|       4.645000000000002|
|          53|2020-01-01 00:00:00|       green|   6281.649999999996|               330.25|                   49.0|                     39.22|          102.50000000000001|                    68.39999999999988|           6873.770000000004|                                2.75|        1.2417582417582418|       6.929710743801654|
|         128|2020-01-01 00:00:00|       green|   3261.330000000001|                158.0|                   35.5|                     82.25|          104.03999999999999|                    34.50000000000004|          3714.0200000000004|                                27.5|        1.0169491525423728|       7.023280000000001|
|         150|2020-01-01 00:00:00|       green|             9996.16|                627.5|                   98.0|         97.86999999999998|                      149.14|                   109.49999999999962|          11082.069999999992|                                 0.0|        1.1147540983606556|       5.393588516746414|
|         263|2020-01-01 00:00:00|       green|   8987.339999999998|                561.0|                 124.55|                    315.27|           335.0600000000001|                    127.1999999999995|          10684.170000000004|                              239.25|        1.4293478260869565|       5.264249422632793|
|          19|2020-01-01 00:00:00|       green|   7798.879999999999|                377.0|                   42.0|                      6.66|          174.40000000000003|                     67.4999999999999|           8466.440000000004|                                 0.0|                  1.046875|       7.850781893004114|
|         186|2020-01-01 00:00:00|       green|             1539.23|                85.25|                    6.0|                       0.0|           97.91999999999999|                                 13.8|          1742.1999999999998|                                 0.0|        1.6666666666666667|       9.389565217391304|
|         238|2020-01-01 00:00:00|       green|   5397.990000000001|                403.5|                   20.0|                       0.0|                      124.68|                    61.19999999999993|           6007.370000000001|                                 0.0|                       1.2|       6.460536585365853|
|         126|2020-01-01 00:00:00|       green|   11827.83999999999|               766.75|                  110.5|        101.86999999999999|           458.2800000000002|                   145.19999999999933|          13425.340000000004|                                11.0|                     1.275|       5.187806691449811|
|          96|2020-01-01 00:00:00|       green|   628.8000000000001|                 27.5|                    4.0|                       0.0|                       55.08|                    5.699999999999999|           721.0799999999999|                                 0.0|        1.1428571428571428|      7.0195454545454545|
|         116|2020-01-01 00:00:00|       green|   78706.70999999996|              3319.25|                 2632.5|         5847.950000000004|          1467.9299999999985|                   1756.4999999999027|           96138.29000000306|                              2793.0|         1.212485896953742|       3.068908940397343|
|          90|2020-01-01 00:00:00|       green|             2921.62|                165.0|                   19.0|                       0.0|          190.56000000000006|                   25.800000000000022|          3321.9800000000005|                                 0.0|                       1.2|       8.451627906976745|
|         101|2020-01-01 00:00:00|       green|   8472.769999999997|                460.5|                   38.0|        15.219999999999999|          232.56000000000006|                    70.49999999999986|           9289.550000000001|                                2.75|        1.0512820512820513|       9.081153846153853|
|         227|2020-01-01 00:00:00|       green|  14857.100000000011|               776.75|                   94.5|        21.569999999999997|          271.57000000000005|                   137.09999999999937|          16173.289999999986|                                 0.0|        1.0743801652892562|       7.235522088353416|
|         180|2020-01-01 00:00:00|       green|  4024.4600000000005|               210.75|                   26.0|                     20.24|           84.88999999999999|                    43.20000000000006|           4414.240000000002|                                2.75|        1.3396226415094339|       5.324473684210526|
|         190|2020-01-01 00:00:00|       green|  3786.0199999999995|                175.0|                   76.5|        242.16000000000008|                       24.48|                    62.69999999999993|           4419.360000000001|                               35.75|        1.4244604316546763|      3.5506912442396326|
|         264|2008-12-01 00:00:00|       green|                 0.0|                  0.0|                    0.0|                       0.0|                         0.0|                                  0.0|                         0.0|                                 0.0|                       1.0|                     0.0|
|         119|2020-01-01 00:00:00|       green|  21224.650000000012|               1391.0|                  186.5|                     74.62|           730.0800000000004|                    245.7000000000011|           23870.19999999996|                               13.75|        1.1612903225806452|       5.585108695652177|
|          26|2020-01-01 00:00:00|       green|   27098.79000000005|              1743.25|                  221.5|        121.72999999999999|           551.2800000000002|                   292.50000000000233|           30034.89999999993|                                 0.0|        1.1054852320675106|       4.771315789473685|
|         120|2020-01-01 00:00:00|       green|   692.4300000000001|                 5.25|                    7.0|        21.970000000000002|                       12.24|                    8.399999999999999|           752.7899999999998|                                 5.5|        1.1935483870967742|               4.6365625|
+------------+-------------------+------------+--------------------+---------------------+-----------------------+--------------------------+----------------------------+-------------------------------------+----------------------------+------------------------------------+--------------------------+------------------------+
only showing top 20 rows
</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>                                                                                </code></pre>
</div>
</div>
<p>And save our results :</p>
<div class="cell" data-execution_count="248">
<div class="sourceCode cell-code" id="cb113" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb113-1">df_result.coalesce(<span class="dv" style="color: #AD0000;">1</span>).write.parquet(<span class="st" style="color: #20794D;">'data/report/revenue/'</span>, mode<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'overwrite'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>                                                                                </code></pre>
</div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_5/DE_Zoomcamp_Week_5_files/figure-html/e5ca3ac6-d4a2-4f72-94cd-00ff16271c24.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">revenue_report.PNG</figcaption><p></p>
</figure>
</div>
<p>The <code>coalesce()</code> is used to decrease the number of partitions in an efficient way :</p>
<div class="cell" data-execution_count="253">
<div class="sourceCode cell-code" id="cb115" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb115-1"><span class="op" style="color: #5E5E5E;">!</span>ls <span class="op" style="color: #5E5E5E;">-</span>lh data<span class="op" style="color: #5E5E5E;">/</span>report<span class="op" style="color: #5E5E5E;">/</span>revenue</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>total 516K
-rw-r--r-- 1 stephen137 stephen137    0 Mar 30 15:37 _SUCCESS
-rw-r--r-- 1 stephen137 stephen137 513K Mar 30 15:37 part-00000-ee412a0e-dd1d-4ab7-a912-c9ebe84034ec-c000.snappy.parquet</code></pre>
</div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_5/DE_Zoomcamp_Week_5_files/figure-html/5a667343-4161-41e3-a964-555c5135b9d1.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">coalesce.PNG</figcaption><p></p>
</figure>
</div>
<p>Note that we haven’t written the results to a data warehouse yet. We are still effectively operating in our data lake, with a bunch of files.</p>
</section>
</section>
<section id="anatomy-of-a-spark-cluster" class="level3">
<h3 class="anchored" data-anchor-id="anatomy-of-a-spark-cluster">5.4.1 Anatomy of a Spark Cluster</h3>
<p>A Spark cluster is a group of computers (also known as <code>nodes</code>) that work together to process and analyze large sets of data. Spark is an open-source, distributed computing system that can be used for big data processing, machine learning, and other data-intensive tasks. The cluster is managed by a master node that coordinates the work of the other nodes, and distributes the data among them. This allows Spark to process and analyze large amounts of data quickly and efficiently.</p>
<p>Spark applications run as independent sets of processes on a <code>cluster</code>, coordinated by the SparkContext object in your main program (called the <code>driver program</code>).</p>
<p>Specifically, to run on a cluster, the SparkContext can connect to several types of <code>cluster managers</code> (either Spark’s own standalone cluster manager, Mesos, YARN or Kubernetes), which allocate resources across applications. Once connected, Spark acquires <code>executors</code> on nodes in the cluster, which are processes that run computations and store data for your application. Next, it sends your application code (defined by JAR or Python files passed to SparkContext) to the executors. Finally, SparkContext sends <code>tasks</code> to the executors to run.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_5/DE_Zoomcamp_Week_5_files/figure-html/195e32e0-940d-40c8-9685-85060167ce14.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">cluster_architecture.PNG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_5/DE_Zoomcamp_Week_5_files/figure-html/51130df4-5682-4cd9-9bd3-4ff80d5fe9f4.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">spark_execution.PNG</figcaption><p></p>
</figure>
</div>
<p><code>Cluster Manager Types</code> The system currently supports several cluster managers:</p>
<ul>
<li><a href="https://spark.apache.org/docs/3.3.2/spark-standalone.html">Standalone</a> – a simple cluster manager included with Spark that makes it easy to set up a cluster.</li>
<li><a href="https://spark.apache.org/docs/3.3.2/running-on-yarn.html">Hadoop YARN</a> – the resource manager in Hadoop 2 and 3.</li>
<li><a href="https://spark.apache.org/docs/3.3.2/running-on-kubernetes.html">Kubernetes</a> – an open-source system for automating deployment, scaling, and management of containerized applications.</li>
</ul>
<p>For a comprehensive overview take a look at this <a href="https://sparkbyexamples.com/">useful guide</a> with worked examples.</p>
<p><code>Cluster and partitions</code></p>
<p>Spark/PySpark partitioning is a way to split the data into multiple partitions so that you can execute transformations on multiple partitions in parallel which results in faster job completion. You can also write partitioned data into a file system (multiple sub-directories) for faster reads by downstream systems.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_5/DE_Zoomcamp_Week_5_files/figure-html/c0627bbd-dc5c-446f-8dab-2907910272cf.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">spark_components.PNG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_5/DE_Zoomcamp_Week_5_files/figure-html/d8bf9169-fe1c-45f2-b3af-86edb276d280.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">spark_execution_plan.PNG</figcaption><p></p>
</figure>
</div>
<p>The following table summarizes terms you’ll see used to refer to cluster concepts:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_5/DE_Zoomcamp_Week_5_files/figure-html/7b988b45-2af4-4c9d-9b42-f8f2c09f8eb1.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">cluster_glossary.PNG</figcaption><p></p>
</figure>
</div>
</section>
<section id="groupby-in-spark" class="level3">
<h3 class="anchored" data-anchor-id="groupby-in-spark">5.4.2 GroupBy in Spark</h3>
<p>Let’s now look at how Spark implements <code>GroupBy</code> :</p>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb117" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb117-1"><span class="co" style="color: #5E5E5E;"># import required packages</span></span>
<span id="cb117-2"><span class="im" style="color: #00769E;">import</span> pyspark</span>
<span id="cb117-3"><span class="im" style="color: #00769E;">from</span> pyspark.sql <span class="im" style="color: #00769E;">import</span> SparkSession</span>
<span id="cb117-4"></span>
<span id="cb117-5"><span class="co" style="color: #5E5E5E;"># our entry point to Spark</span></span>
<span id="cb117-6">spark <span class="op" style="color: #5E5E5E;">=</span> SparkSession.builder.getOrCreate()</span>
<span id="cb117-7">spark</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">

            <div>
                <p><b>SparkSession - in-memory</b></p>
                
        <div>
            <p><b>SparkContext</b></p>

            <p><a href="http://172.24.13.131:4040">Spark UI</a></p>

            <dl>
              <dt>Version</dt>
                <dd><code>v3.3.2</code></dd>
              <dt>Master</dt>
                <dd><code>local[*]</code></dd>
              <dt>AppName</dt>
                <dd><code>test</code></dd>
            </dl>
        </div>
        
            </div>
        
</div>
</div>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb118" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb118-1"><span class="co" style="color: #5E5E5E;"># load in green taxi data</span></span>
<span id="cb118-2">df_green <span class="op" style="color: #5E5E5E;">=</span> spark.read.parquet(<span class="st" style="color: #20794D;">'data/pq/green/*/*'</span>)</span>
<span id="cb118-3">df_green.createOrReplaceTempView(<span class="st" style="color: #20794D;">"green"</span>)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb119" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb119-1"><span class="co" style="color: #5E5E5E;"># GroupBy query - green taxi</span></span>
<span id="cb119-2">df_green_revenue <span class="op" style="color: #5E5E5E;">=</span> spark.sql(<span class="st" style="color: #20794D;">"""</span></span>
<span id="cb119-3"><span class="st" style="color: #20794D;">SELECT</span></span>
<span id="cb119-4"><span class="st" style="color: #20794D;">    date_trunc('hour', lpep_pickup_datetime) AS hour,</span></span>
<span id="cb119-5"><span class="st" style="color: #20794D;">    PULocationID AS zone,</span></span>
<span id="cb119-6"></span>
<span id="cb119-7"><span class="st" style="color: #20794D;">    SUM(total_amount) AS amount,</span></span>
<span id="cb119-8"><span class="st" style="color: #20794D;">    COUNT(1) AS number_records</span></span>
<span id="cb119-9"><span class="st" style="color: #20794D;">FROM</span></span>
<span id="cb119-10"><span class="st" style="color: #20794D;">    green</span></span>
<span id="cb119-11"><span class="st" style="color: #20794D;">WHERE</span></span>
<span id="cb119-12"><span class="st" style="color: #20794D;">    lpep_pickup_datetime &gt;= '2020-01-01 00:00:00'</span></span>
<span id="cb119-13"><span class="st" style="color: #20794D;">GROUP BY</span></span>
<span id="cb119-14"><span class="st" style="color: #20794D;">    1, 2</span></span>
<span id="cb119-15"><span class="st" style="color: #20794D;">"""</span>)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb120" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb120-1"><span class="co" style="color: #5E5E5E;"># Write our result to parquet</span></span>
<span id="cb120-2">df_green_revenue <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb120-3">    .repartition(<span class="dv" style="color: #AD0000;">20</span>) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb120-4">    .write.parquet(<span class="st" style="color: #20794D;">'data/report/revenue/green'</span>, mode<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'overwrite'</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb121" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb121-1">df_green_revenue.show(<span class="dv" style="color: #AD0000;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>+-------------------+----+------------------+--------------+
|               hour|zone|            amount|number_records|
+-------------------+----+------------------+--------------+
|2020-01-24 09:00:00|  81|             59.49|             2|
|2020-01-04 21:00:00|  25|            513.83|            32|
|2020-01-10 19:00:00|  66| 545.6800000000002|            27|
|2020-01-30 07:00:00|  75| 556.6600000000001|            40|
|2020-01-18 01:00:00| 260|            144.56|            12|
|2020-01-12 08:00:00| 177|31.090000000000003|             2|
|2020-01-20 21:00:00| 166|            133.28|            12|
|2020-01-03 04:00:00|  14|            105.34|             2|
|2020-01-30 20:00:00|  74| 766.4400000000002|            58|
|2020-01-02 16:00:00|  66|             257.0|            12|
+-------------------+----+------------------+--------------+
only showing top 10 rows
</code></pre>
</div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb123" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb123-1"><span class="co" style="color: #5E5E5E;"># load in yellow  taxi data</span></span>
<span id="cb123-2">df_yellow <span class="op" style="color: #5E5E5E;">=</span> spark.read.parquet(<span class="st" style="color: #20794D;">'data/pq/yellow/*/*'</span>)</span>
<span id="cb123-3">df_yellow.createOrReplaceTempView(<span class="st" style="color: #20794D;">"yellow"</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb124" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb124-1"><span class="co" style="color: #5E5E5E;"># GroupBy query - yellow taxi</span></span>
<span id="cb124-2">df_yellow_revenue <span class="op" style="color: #5E5E5E;">=</span> spark.sql(<span class="st" style="color: #20794D;">"""</span></span>
<span id="cb124-3"><span class="st" style="color: #20794D;">SELECT</span></span>
<span id="cb124-4"><span class="st" style="color: #20794D;">    date_trunc('hour', tpep_pickup_datetime) AS hour,</span></span>
<span id="cb124-5"><span class="st" style="color: #20794D;">    PULocationID AS zone,</span></span>
<span id="cb124-6"></span>
<span id="cb124-7"><span class="st" style="color: #20794D;">    SUM(total_amount) AS amount,</span></span>
<span id="cb124-8"><span class="st" style="color: #20794D;">    COUNT(1) AS number_records</span></span>
<span id="cb124-9"><span class="st" style="color: #20794D;">FROM</span></span>
<span id="cb124-10"><span class="st" style="color: #20794D;">    yellow</span></span>
<span id="cb124-11"><span class="st" style="color: #20794D;">WHERE</span></span>
<span id="cb124-12"><span class="st" style="color: #20794D;">    tpep_pickup_datetime &gt;= '2020-01-01 00:00:00'</span></span>
<span id="cb124-13"><span class="st" style="color: #20794D;">GROUP BY</span></span>
<span id="cb124-14"><span class="st" style="color: #20794D;">    1, 2</span></span>
<span id="cb124-15"><span class="st" style="color: #20794D;">"""</span>)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb125" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb125-1"><span class="co" style="color: #5E5E5E;"># Write our result to parquet</span></span>
<span id="cb125-2">df_yellow_revenue <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb125-3">    .repartition(<span class="dv" style="color: #AD0000;">20</span>) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb125-4">    .write.parquet(<span class="st" style="color: #20794D;">'data/report/revenue/yellow'</span>, mode<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'overwrite'</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb126" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb126-1">df_yellow_revenue.show(<span class="dv" style="color: #AD0000;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>[Stage 17:================================================&gt;       (18 + 3) / 21]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>+-------------------+----+------------------+--------------+
|               hour|zone|            amount|number_records|
+-------------------+----+------------------+--------------+
|2020-01-03 19:00:00| 142| 6023.089999999995|           403|
|2020-01-26 14:00:00| 239| 6541.649999999994|           437|
|2020-01-09 01:00:00| 100|            653.56|            37|
|2020-01-31 18:00:00| 237|12689.400000000009|           810|
|2020-01-04 03:00:00| 246|2092.5400000000004|           121|
|2020-01-14 09:00:00| 239| 4882.359999999997|           298|
|2020-01-27 16:00:00| 162| 7989.979999999996|           452|
|2020-01-17 20:00:00| 170| 6884.189999999997|           407|
|2020-01-23 15:00:00| 142| 5378.829999999997|           341|
|2020-01-27 06:00:00|  24|            536.49|            23|
+-------------------+----+------------------+--------------+
only showing top 10 rows
</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>                                                                                </code></pre>
</div>
</div>
<section id="what-exactly-is-spark-doing" class="level4">
<h4 class="anchored" data-anchor-id="what-exactly-is-spark-doing">What exactly is Spark doing ?</h4>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_5/DE_Zoomcamp_Week_5_files/figure-html/4278791d-572f-4c34-ac4e-063ae300df4f.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">groupby_stage_1.PNG</figcaption><p></p>
</figure>
</div>
<p><code>Shuffling</code></p>
<p><em>Shuffling</em> is a mechanism Spark uses to redistribute the data across different executors and even across machines. Spark shuffling triggers for transformation operations like <code>reducebyKey()</code>, <code>join()</code>, <code>groupBy()</code> etc.</p>
<p>Spark Shuffle is an expensive operation since it involves the following :</p>
<ul>
<li>disk I/O</li>
<li>data serialization and deserialization</li>
<li>network I/O</li>
</ul>
<p>When creating an RDD, Spark doesn’t necessarily store the data for all keys in a partition since at the time of creation there is no way we can set the key for the data set. Hence, when we run the reduceByKey() operation to aggregate the data on keys, Spark does the following :</p>
<ul>
<li>first runs map tasks on all partitions which groups all values for a single key</li>
<li>the results of the map tasks are kept in memory</li>
<li>when results do not fit in memory, Spark stores the data on a disk</li>
<li>shuffles the mapped data across partitions, sometimes it also stores the shuffled data into a disk for reuse when it needs to recalculate</li>
<li>run the garbage collection</li>
<li>finally runs reduce tasks on each partition based on key</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_5/DE_Zoomcamp_Week_5_files/figure-html/8d0b8f70-f843-459b-84d1-9e33616dc123.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">groupby_stage_2.PNG</figcaption><p></p>
</figure>
</div>
</section>
</section>
<section id="joins-in-spark" class="level3">
<h3 class="anchored" data-anchor-id="joins-in-spark">5.4.3 Joins in Spark</h3>
<p><code>joining our yellow and green tables by hour and by zone</code></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_5/DE_Zoomcamp_Week_5_files/figure-html/5903c39b-6bcd-41ce-9323-541c1575e1f3.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">join.PNG</figcaption><p></p>
</figure>
</div>
<p>Let’s use the results saved previously :</p>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb130" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb130-1">df_green_revenue <span class="op" style="color: #5E5E5E;">=</span> spark.read.parquet(<span class="st" style="color: #20794D;">'data/report/revenue/green'</span>)</span>
<span id="cb130-2">df_yellow_revenue <span class="op" style="color: #5E5E5E;">=</span> spark.read.parquet(<span class="st" style="color: #20794D;">'data/report/revenue/yellow'</span>)</span></code></pre></div>
</div>
<p>Rename the columns :</p>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb131" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb131-1">df_green_revenue_tmp <span class="op" style="color: #5E5E5E;">=</span> df_green_revenue <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb131-2">    .withColumnRenamed(<span class="st" style="color: #20794D;">'amount'</span>, <span class="st" style="color: #20794D;">'green_amount'</span>) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb131-3">    .withColumnRenamed(<span class="st" style="color: #20794D;">'number_records'</span>, <span class="st" style="color: #20794D;">'green_number_records'</span>)</span>
<span id="cb131-4"></span>
<span id="cb131-5">df_yellow_revenue_tmp <span class="op" style="color: #5E5E5E;">=</span> df_yellow_revenue <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb131-6">    .withColumnRenamed(<span class="st" style="color: #20794D;">'amount'</span>, <span class="st" style="color: #20794D;">'yellow_amount'</span>) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb131-7">    .withColumnRenamed(<span class="st" style="color: #20794D;">'number_records'</span>, <span class="st" style="color: #20794D;">'yellow_number_records'</span>)</span></code></pre></div>
</div>
<p>And join the two tables :</p>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb132" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb132-1">df_join <span class="op" style="color: #5E5E5E;">=</span> df_green_revenue_tmp.join(df_yellow_revenue_tmp, on<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'hour'</span>, <span class="st" style="color: #20794D;">'zone'</span>], how<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'outer'</span>)</span></code></pre></div>
</div>
<p>Write the result to parquet and show the result :</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb133" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb133-1">df_join.write.parquet(<span class="st" style="color: #20794D;">'data/report/revenue/total'</span>, mode<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'overwrite'</span>)</span>
<span id="cb133-2"></span>
<span id="cb133-3">df_join.show(<span class="dv" style="color: #AD0000;">5</span>)</span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_5/DE_Zoomcamp_Week_5_files/figure-html/83487d02-5340-4dcb-9bc5-96fbf7ccfcd2.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">join_parquet.PNG</figcaption><p></p>
</figure>
</div>
<section id="what-exactly-is-spark-doing-1" class="level4">
<h4 class="anchored" data-anchor-id="what-exactly-is-spark-doing-1">What exactly is Spark doing ?</h4>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_5/DE_Zoomcamp_Week_5_files/figure-html/f3c7a922-8e1b-4d04-83ca-264734f87878.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">merge_sort.PNG</figcaption><p></p>
</figure>
</div>
<p><code>Joining a large table to a small table</code></p>
<p>Once again we can work with our previous result :</p>
<div class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb134" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb134-1">df_join <span class="op" style="color: #5E5E5E;">=</span> spark.read.parquet(<span class="st" style="color: #20794D;">'data/report/revenue/total'</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb135" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb135-1">df_join.printSchema()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>root
 |-- hour: timestamp (nullable = true)
 |-- zone: integer (nullable = true)
 |-- green_amount: double (nullable = true)
 |-- green_number_records: long (nullable = true)
 |-- yellow_amount: double (nullable = true)
 |-- yellow_number_records: long (nullable = true)
</code></pre>
</div>
</div>
<div class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb137" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb137-1">df_join.show(<span class="dv" style="color: #AD0000;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>+-------------------+----+------------------+--------------------+------------------+---------------------+
|               hour|zone|      green_amount|green_number_records|     yellow_amount|yellow_number_records|
+-------------------+----+------------------+--------------------+------------------+---------------------+
|2020-01-01 00:00:00|  13|              null|                null|1214.8000000000002|                   56|
|2020-01-01 00:00:00|  48|              null|                null|10773.360000000004|                  455|
|2020-01-01 00:00:00|  76|143.77999999999997|                   4|             35.51|                    2|
|2020-01-01 00:00:00| 130|            133.35|                   7|              null|                 null|
|2020-01-01 00:00:00| 186|              null|                null| 4011.449999999998|                  188|
+-------------------+----+------------------+--------------------+------------------+---------------------+
only showing top 5 rows
</code></pre>
</div>
</div>
<p>Let’s find out more about the <code>zone</code> column. The information is stored in another table which I have already downloaded :</p>
<div class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb139" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb139-1">df_zones <span class="op" style="color: #5E5E5E;">=</span> spark.read.parquet(<span class="st" style="color: #20794D;">'zones/'</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb140" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb140-1">df_zones.printSchema()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>root
 |-- LocationID: string (nullable = true)
 |-- Borough: string (nullable = true)
 |-- Zone: string (nullable = true)
 |-- service_zone: string (nullable = true)
</code></pre>
</div>
</div>
<div class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb142" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb142-1">df_zones.show(<span class="dv" style="color: #AD0000;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>+----------+-------------+--------------------+------------+
|LocationID|      Borough|                Zone|service_zone|
+----------+-------------+--------------------+------------+
|         1|          EWR|      Newark Airport|         EWR|
|         2|       Queens|         Jamaica Bay|   Boro Zone|
|         3|        Bronx|Allerton/Pelham G...|   Boro Zone|
|         4|    Manhattan|       Alphabet City| Yellow Zone|
|         5|Staten Island|       Arden Heights|   Boro Zone|
+----------+-------------+--------------------+------------+
only showing top 5 rows
</code></pre>
</div>
</div>
<p>Let’s join the <code>df_zones</code> table to our <code>df_join</code> table :</p>
<div class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb144" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb144-1">df_result <span class="op" style="color: #5E5E5E;">=</span> df_join.join(df_zones, df_join.zone <span class="op" style="color: #5E5E5E;">==</span> df_zones.LocationID)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb145" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb145-1">df_result.show(<span class="dv" style="color: #AD0000;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>+-------------------+----+------------------+--------------------+------------------+---------------------+----------+---------+--------------------+------------+
|               hour|zone|      green_amount|green_number_records|     yellow_amount|yellow_number_records|LocationID|  Borough|                Zone|service_zone|
+-------------------+----+------------------+--------------------+------------------+---------------------+----------+---------+--------------------+------------+
|2020-01-01 00:00:00|  13|              null|                null|1214.8000000000002|                   56|        13|Manhattan|   Battery Park City| Yellow Zone|
|2020-01-01 00:00:00|  48|              null|                null|10773.360000000004|                  455|        48|Manhattan|        Clinton East| Yellow Zone|
|2020-01-01 00:00:00|  76|143.77999999999997|                   4|             35.51|                    2|        76| Brooklyn|       East New York|   Boro Zone|
|2020-01-01 00:00:00| 130|            133.35|                   7|              null|                 null|       130|   Queens|             Jamaica|   Boro Zone|
|2020-01-01 00:00:00| 186|              null|                null| 4011.449999999998|                  188|       186|Manhattan|Penn Station/Madi...| Yellow Zone|
+-------------------+----+------------------+--------------------+------------------+---------------------+----------+---------+--------------------+------------+
only showing top 5 rows
</code></pre>
</div>
</div>
<p>Let’s drop the <code>LocationID</code>, and <code>zone</code> columns as these are redundant :</p>
<div class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb147" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb147-1">df_result.drop(<span class="st" style="color: #20794D;">'LocationID'</span>, <span class="st" style="color: #20794D;">'zone'</span>).show(<span class="dv" style="color: #AD0000;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>+-------------------+------------------+--------------------+------------------+---------------------+---------+------------+
|               hour|      green_amount|green_number_records|     yellow_amount|yellow_number_records|  Borough|service_zone|
+-------------------+------------------+--------------------+------------------+---------------------+---------+------------+
|2020-01-01 00:00:00|              null|                null|1214.8000000000002|                   56|Manhattan| Yellow Zone|
|2020-01-01 00:00:00|              null|                null|10773.360000000004|                  455|Manhattan| Yellow Zone|
|2020-01-01 00:00:00|143.77999999999997|                   4|             35.51|                    2| Brooklyn|   Boro Zone|
|2020-01-01 00:00:00|            133.35|                   7|              null|                 null|   Queens|   Boro Zone|
|2020-01-01 00:00:00|              null|                null| 4011.449999999998|                  188|Manhattan| Yellow Zone|
+-------------------+------------------+--------------------+------------------+---------------------+---------+------------+
only showing top 5 rows
</code></pre>
</div>
</div>
<p>and write our results to parquet :</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb149" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb149-1">df_result.drop(<span class="st" style="color: #20794D;">'LocationID'</span>, <span class="st" style="color: #20794D;">'zone'</span>).write.parquet(<span class="st" style="color: #20794D;">'tmp/revenue-zones'</span>)</span></code></pre></div>
</div>
</section>
<section id="what-exactly-is-spark-doing-2" class="level4">
<h4 class="anchored" data-anchor-id="what-exactly-is-spark-doing-2">What exactly is Spark doing ?</h4>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_5/DE_Zoomcamp_Week_5_files/figure-html/013b9b96-f6ea-49bb-807d-017cb150cd55.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">zones.PNG</figcaption><p></p>
</figure>
</div>
<ul>
<li>each executor processes a partition of the Revenue DataFrame</li>
<li>the <code>zones</code> DataFrame is a small table, so each executor gets a copy of the entire DataFrame and merges it with their partition of the Revenue DataFrame within memory</li>
<li>Spark can <a href="https://en.wikipedia.org/wiki/Broadcasting_(networking)">broadcast</a> a small DataFrame by sending all the data in that small DataFrame to all nodes in the cluster</li>
<li>After the small DataFrame is broadcasted, Spark can perform a join without shuffling any of the data in the large DataFrame</li>
<li>Spark broadcast joins are perfect for joining a large DataFrame with a small DataFrame</li>
</ul>
<p>This is <strong><em>extremely</em></strong> fast.</p>
</section>
</section>
<section id="connecting-to-google-cloud-storage" class="level3">
<h3 class="anchored" data-anchor-id="connecting-to-google-cloud-storage">5.6.1 Connecting to Google Cloud Storage</h3>
<p>We can move the parquet files we created using Spark to Google Cloud Storage (GCS) by running the follwowing from the command line :</p>
<pre><code>gsutil -m cp -r pq/ gs://&lt;google_cloud_storage_bucket_name&gt;/&lt;bucket_folder_name&gt;</code></pre>
<p>In my case :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_5/DE_Zoomcamp_Week_5_files/figure-html/129645ce-8f32-48f7-8770-45ca8d6eed80.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">upload_to_GCS.PNG</figcaption><p></p>
</figure>
</div>
<p>And we can see that my bucket now includes a <code>pq</code> folder and has been loaded :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_5/DE_Zoomcamp_Week_5_files/figure-html/f801f305-d61e-449f-83c0-30506e627535.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">GCS.PNG</figcaption><p></p>
</figure>
</div>
<p>The Google <a href="https://cloud.google.com/dataproc/docs/concepts/connectors/cloud-storage#benefits_of_the_connector">Cloud Storage connector docs</a> provide detailed guidance, but essentially in order to enable PySpark to speak to Google Cloud we need to configure a <code>.jar</code> file which can be downloaded to any location (e.g.&nbsp;the <code>lib</code> folder) from the command line :</p>
<p>gsutil cp gs://hadoop-lib/gcs/gcs-connector-hadoop3-2.2.5.jar gcs-connector-hadoop3-2.2.5.jar</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_5/DE_Zoomcamp_Week_5_files/figure-html/090f6d15-099e-4314-abad-f8b605035c65.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">hadoop_connector.PNG</figcaption><p></p>
</figure>
</div>
<p>We now need to re-configure our normal entry point into Spark :</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb151" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb151-1"><span class="im" style="color: #00769E;">import</span> pyspark</span>
<span id="cb151-2"><span class="im" style="color: #00769E;">from</span> pyspark.sql <span class="im" style="color: #00769E;">import</span> SparkSession</span>
<span id="cb151-3"><span class="im" style="color: #00769E;">from</span> pyspark.conf <span class="im" style="color: #00769E;">import</span> SparkConf</span>
<span id="cb151-4"><span class="im" style="color: #00769E;">from</span> pyspark.context <span class="im" style="color: #00769E;">import</span> SparkContext</span></code></pre></div>
</div>
<p>We first need to specify the location of our Google Credential json file. Adjust your own details accordingly :</p>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb152" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb152-1">credentials_location <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'/home/stephen137/.google/taxi-rides-ny-137-abb685b49ccb.json'</span></span>
<span id="cb152-2"></span>
<span id="cb152-3">conf <span class="op" style="color: #5E5E5E;">=</span> SparkConf() <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb152-4">    .setMaster(<span class="st" style="color: #20794D;">'local[*]'</span>) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb152-5">    .setAppName(<span class="st" style="color: #20794D;">'test'</span>) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb152-6">    .<span class="bu" style="color: null;">set</span>(<span class="st" style="color: #20794D;">"spark.jars"</span>, <span class="st" style="color: #20794D;">"./lib/gcs-connector-hadoop3-2.2.5.jar"</span>) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb152-7">    .<span class="bu" style="color: null;">set</span>(<span class="st" style="color: #20794D;">"spark.hadoop.google.cloud.auth.service.account.enable"</span>, <span class="st" style="color: #20794D;">"true"</span>) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb152-8">    .<span class="bu" style="color: null;">set</span>(<span class="st" style="color: #20794D;">"spark.hadoop.google.cloud.auth.service.account.json.keyfile"</span>, credentials_location)</span></code></pre></div>
</div>
<p>The next thing we need to do is create a Spark context :</p>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb153" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb153-1">sc <span class="op" style="color: #5E5E5E;">=</span> SparkContext(conf<span class="op" style="color: #5E5E5E;">=</span>conf)</span>
<span id="cb153-2"></span>
<span id="cb153-3">hadoop_conf <span class="op" style="color: #5E5E5E;">=</span> sc._jsc.hadoopConfiguration()</span>
<span id="cb153-4"></span>
<span id="cb153-5">hadoop_conf.<span class="bu" style="color: null;">set</span>(<span class="st" style="color: #20794D;">"fs.AbstractFileSystem.gs.impl"</span>,  <span class="st" style="color: #20794D;">"com.google.cloud.hadoop.fs.gcs.GoogleHadoopFS"</span>)</span>
<span id="cb153-6">hadoop_conf.<span class="bu" style="color: null;">set</span>(<span class="st" style="color: #20794D;">"fs.gs.impl"</span>, <span class="st" style="color: #20794D;">"com.google.cloud.hadoop.fs.gcs.GoogleHadoopFileSystem"</span>)</span>
<span id="cb153-7">hadoop_conf.<span class="bu" style="color: null;">set</span>(<span class="st" style="color: #20794D;">"fs.gs.auth.service.account.json.keyfile"</span>, credentials_location)</span>
<span id="cb153-8">hadoop_conf.<span class="bu" style="color: null;">set</span>(<span class="st" style="color: #20794D;">"fs.gs.auth.service.account.enable"</span>, <span class="st" style="color: #20794D;">"true"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>23/03/31 14:55:39 WARN Utils: Your hostname, DESKTOP-1UDJOCI resolves to a loopback address: 127.0.1.1; using 172.24.13.131 instead (on interface eth0)
23/03/31 14:55:39 WARN Utils: Set SPARK_LOCAL_IP if you need to bind to another address
23/03/31 14:55:41 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).</code></pre>
</div>
</div>
<p>Once we have run this, we can now build our <code>SparkSession</code> using the parameters we instantiated in the previous step :</p>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb156" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb156-1">spark <span class="op" style="color: #5E5E5E;">=</span> SparkSession.builder <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb156-2">    .config(conf<span class="op" style="color: #5E5E5E;">=</span>sc.getConf()) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb156-3">    .getOrCreate()</span></code></pre></div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb157" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb157-1">spark</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">

            <div>
                <p><b>SparkSession - in-memory</b></p>
                
        <div>
            <p><b>SparkContext</b></p>

            <p><a href="http://172.24.13.131:4040">Spark UI</a></p>

            <dl>
              <dt>Version</dt>
                <dd><code>v3.3.2</code></dd>
              <dt>Master</dt>
                <dd><code>local[*]</code></dd>
              <dt>AppName</dt>
                <dd><code>test</code></dd>
            </dl>
        </div>
        
            </div>
        
</div>
</div>
<p>We are now able to read our files straight from Google Cloud Storage! Let’s do something simple to test our connection is working :</p>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb158" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb158-1">df_green <span class="op" style="color: #5E5E5E;">=</span> spark.read.parquet(<span class="st" style="color: #20794D;">'gs://dtc_data_lake_taxi-rides-ny-137/pq/green/*/*'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>                                                                                </code></pre>
</div>
</div>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb160" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb160-1">df_green.show()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>[Stage 1:&gt;                                                          (0 + 1) / 1]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>+--------+--------------------+---------------------+------------------+----------+------------+------------+---------------+-------------+-----------+-----+-------+----------+------------+---------+---------------------+------------+------------+---------+--------------------+
|VendorID|lpep_pickup_datetime|lpep_dropoff_datetime|store_and_fwd_flag|RatecodeID|PULocationID|DOLocationID|passenger_count|trip_distance|fare_amount|extra|mta_tax|tip_amount|tolls_amount|ehail_fee|improvement_surcharge|total_amount|payment_type|trip_type|congestion_surcharge|
+--------+--------------------+---------------------+------------------+----------+------------+------------+---------------+-------------+-----------+-----+-------+----------+------------+---------+---------------------+------------+------------+---------+--------------------+
|       2| 2020-01-12 18:15:04|  2020-01-12 18:19:52|                 N|         1|          41|          41|              1|         0.78|        5.5|  0.0|    0.5|      1.58|         0.0|     null|                  0.3|        7.88|           1|        1|                 0.0|
|       2| 2020-01-31 20:24:10|  2020-01-31 20:31:51|                 N|         1|         173|          70|              1|         0.98|        7.0|  0.5|    0.5|       0.0|         0.0|     null|                  0.3|         8.3|           2|        1|                 0.0|
|       2| 2020-01-07 08:16:53|  2020-01-07 08:41:39|                 N|         1|          74|         236|              1|          2.7|       16.0|  0.0|    0.5|      3.91|         0.0|     null|                  0.3|       23.46|           1|        1|                2.75|
|       1| 2020-01-15 14:47:15|  2020-01-15 14:54:34|                 N|         1|          25|          66|              1|          0.8|        6.5|  0.0|    0.5|       0.0|         0.0|     null|                  0.3|         7.3|           2|        1|                 0.0|
|    null| 2020-01-31 10:08:00|  2020-01-31 10:20:00|              null|      null|         259|          51|           null|         2.33|      22.49| 2.75|    0.0|       0.0|         0.0|     null|                  0.3|       25.54|        null|     null|                null|
|       2| 2020-01-18 17:46:45|  2020-01-18 18:04:08|                 N|         1|         177|         188|              1|         2.62|       12.5|  0.0|    0.5|       0.0|         0.0|     null|                  0.3|        13.3|           1|        1|                 0.0|
|       2| 2020-01-17 20:08:44|  2020-01-17 20:18:47|                 N|         1|          65|          97|              1|         1.13|        8.0|  0.5|    0.5|      1.86|         0.0|     null|                  0.3|       11.16|           1|        1|                 0.0|
|    null| 2020-01-13 10:47:00|  2020-01-13 10:54:00|              null|      null|         165|         123|           null|         1.36|      17.51| 2.75|    0.0|       0.0|         0.0|     null|                  0.3|       20.56|        null|     null|                null|
|    null| 2020-01-07 15:36:00|  2020-01-07 16:11:00|              null|      null|         170|         220|           null|        11.15|       46.0| 2.75|    0.0|       0.0|         0.0|     null|                  0.3|       49.05|        null|     null|                null|
|    null| 2020-01-10 11:47:00|  2020-01-10 12:03:00|              null|      null|          74|          41|           null|         1.78|       8.76|  0.0|    0.5|       0.0|         0.0|     null|                  0.3|        9.56|        null|     null|                null|
|       1| 2020-01-08 20:17:48|  2020-01-08 20:23:24|                 Y|         1|          75|          41|              1|          1.0|        6.0|  0.5|    0.5|       0.0|         0.0|     null|                  0.3|         7.3|           2|        1|                 0.0|
|       2| 2020-01-28 10:57:21|  2020-01-28 11:15:13|                 N|         1|          74|         151|              1|         2.75|       13.5|  0.0|    0.5|      2.86|         0.0|     null|                  0.3|       17.16|           1|        1|                 0.0|
|       1| 2020-01-16 18:02:21|  2020-01-16 18:11:21|                 N|         1|          41|          74|              1|          1.1|        7.5|  1.0|    0.5|       2.3|         0.0|     null|                  0.3|        11.6|           1|        1|                 0.0|
|       2| 2020-01-07 14:03:38|  2020-01-07 14:17:02|                 N|         1|         116|          74|              1|         3.81|       13.5|  0.0|    0.5|       0.0|         0.0|     null|                  0.3|        14.3|           2|        1|                 0.0|
|       2| 2020-01-14 09:52:46|  2020-01-14 10:06:41|                 N|         1|         152|         244|              1|         1.85|       11.0|  0.0|    0.5|       0.0|         0.0|     null|                  0.3|        11.8|           1|        1|                 0.0|
|    null| 2020-01-23 05:40:00|  2020-01-23 06:13:00|              null|      null|          71|          88|           null|         9.14|      30.99| 2.75|    0.0|       0.0|         0.0|     null|                  0.3|       34.04|        null|     null|                null|
|       2| 2020-01-23 10:17:52|  2020-01-23 10:24:02|                 N|         1|          43|         236|              1|         1.04|        6.0|  0.0|    0.5|       0.0|         0.0|     null|                  0.3|        9.55|           2|        1|                2.75|
|       2| 2020-01-09 21:09:46|  2020-01-09 21:14:35|                 N|         1|          65|          49|              1|         1.14|        5.5|  0.5|    0.5|       1.2|         0.0|     null|                  0.3|         8.0|           1|        1|                 0.0|
|    null| 2020-01-08 20:53:00|  2020-01-08 21:00:00|              null|      null|         254|         254|           null|         1.15|        8.0|  0.0|    0.0|       0.0|         0.0|     null|                  0.3|         8.3|        null|     null|                null|
|       2| 2020-01-02 09:04:51|  2020-01-02 09:11:18|                 N|         1|         116|         244|              1|         0.92|        6.0|  0.0|    0.0|       0.0|         0.0|     null|                  0.0|         6.0|           2|        2|                 0.0|
+--------+--------------------+---------------------+------------------+----------+------------+------------+---------------+-------------+-----------+-----+-------+----------+------------+---------+---------------------+------------+------------+---------+--------------------+
only showing top 20 rows
</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>                                                                                </code></pre>
</div>
</div>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb164" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb164-1">df_green.count()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>                                                                                </code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>2304517</code></pre>
</div>
</div>
<p>Excellent. Spark and GCS are talking to each other :)</p>
</section>
<section id="creating-a-local-clark-cluster" class="level3">
<h3 class="anchored" data-anchor-id="creating-a-local-clark-cluster">5.6.2 Creating a Local Clark Cluster</h3>
<p>If we consult the <a href="https://spark.apache.org/docs/latest/spark-standalone.html#starting-a-cluster-manually">official documentation</a> we can see that it is very simple to start a cluster manually. From the command line check where Spark has been downloaded using :</p>
<pre><code>echo $SPARK_HOME</code></pre>
<p>and then navigate to that directory and execute the following :</p>
<pre><code>./sbin/start-master.sh</code></pre>
<p>Note that when we create a local session it runs at <code>localhost:8080</code>.</p>
<p><code>Killing a localhost session</code></p>
<p>Note, on Linux or Ubuntu, to find out the PID of process bound on a particular port you can use :</p>
<pre><code>fuser &lt;port_number&gt;/tcp</code></pre>
<p>and then :</p>
<pre><code>fuser -k &lt;port_number&gt;/tcp</code></pre>
<p>to kill that session.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_5/DE_Zoomcamp_Week_5_files/figure-html/8de63d6e-0efd-4aee-ae0b-11eb24fbd566.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">local_spark.PNG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_5/DE_Zoomcamp_Week_5_files/figure-html/8d0cf4b4-afb9-45d0-a74a-ee163d1f2aba.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">spark_master.PNG</figcaption><p></p>
</figure>
</div>
<p>And our Spark Session configuration is as follows :</p>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb171" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb171-1"><span class="im" style="color: #00769E;">import</span> pyspark</span>
<span id="cb171-2"><span class="im" style="color: #00769E;">from</span> pyspark.sql <span class="im" style="color: #00769E;">import</span> SparkSession</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb172" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb172-1">spark <span class="op" style="color: #5E5E5E;">=</span> SparkSession.builder <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb172-2">    .master(<span class="st" style="color: #20794D;">""</span>) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb172-3">    .appName(<span class="st" style="color: #20794D;">'test'</span>) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb172-4">    .getOrCreate()</span></code></pre></div>
</div>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb173" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb173-1">spark</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">

            <div>
                <p><b>SparkSession - in-memory</b></p>
                
        <div>
            <p><b>SparkContext</b></p>

            <p><a href="http://172.24.13.131:4041">Spark UI</a></p>

            <dl>
              <dt>Version</dt>
                <dd><code>v3.3.2</code></dd>
              <dt>Master</dt>
                <dd><code>spark://DESKTOP-1UDJOCI.localdomain:7077</code></dd>
              <dt>AppName</dt>
                <dd><code>test</code></dd>
            </dl>
        </div>
        
            </div>
        
</div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb174" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb174-1">df_green <span class="op" style="color: #5E5E5E;">=</span> spark.read.parquet(<span class="st" style="color: #20794D;">'data/pq/green/*/*'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>                                                                                </code></pre>
</div>
</div>
<p>Note that although we have started a cluster we have zero workers, we only have a master.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_5/DE_Zoomcamp_Week_5_files/figure-html/9c1bcbda-721f-4f06-9a61-ce05c56b9db0.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">spark_master.PNG</figcaption><p></p>
</figure>
</div>
<p>We need an executor. To start a worker run the following from the command line :</p>
<pre><code>./sbin/start-worker.sh spark://DESKTOP-1UDJOCI.localdomain:7077</code></pre>
<p>Now we have a worker and our task has completed:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_5/DE_Zoomcamp_Week_5_files/figure-html/63a627f7-26aa-4cd2-bc27-2aed80aa56f1.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">worker.PNG</figcaption><p></p>
</figure>
</div>
<section id="turning-the-notebook-into-a-python-script" class="level4">
<h4 class="anchored" data-anchor-id="turning-the-notebook-into-a-python-script">Turning the NoteBook into a Python script</h4>
<p>To convert a Jupyter Notebook to a Python script you simply run the following from the command line:</p>
<pre><code>jupyter nbconvert --to=script &lt;notebook_name&gt;</code></pre>
<p>Then we can run the created <code>06_spark_sql_notebook.py</code> file :</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb178" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb178-1"><span class="co" style="color: #5E5E5E;">#!/usr/bin/env python</span></span>
<span id="cb178-2"><span class="co" style="color: #5E5E5E;"># coding: utf-8</span></span>
<span id="cb178-3"></span>
<span id="cb178-4"><span class="co" style="color: #5E5E5E;"># In[1]:</span></span>
<span id="cb178-5"><span class="im" style="color: #00769E;">import</span> pyspark</span>
<span id="cb178-6"><span class="im" style="color: #00769E;">from</span> pyspark.sql <span class="im" style="color: #00769E;">import</span> SparkSession</span>
<span id="cb178-7"></span>
<span id="cb178-8">spark <span class="op" style="color: #5E5E5E;">=</span> SparkSession.builder</span>
<span id="cb178-9">    .master(<span class="st" style="color: #20794D;">"spark://DESKTOP-1UDJOCI.localdomain:7077"</span>)</span>
<span id="cb178-10">    .appName(<span class="st" style="color: #20794D;">'test'</span>)</span>
<span id="cb178-11">    .getOrCreate()</span>
<span id="cb178-12"></span>
<span id="cb178-13"><span class="co" style="color: #5E5E5E;"># In[2]:</span></span>
<span id="cb178-14">df_green <span class="op" style="color: #5E5E5E;">=</span> spark.read.parquet(<span class="st" style="color: #20794D;">'data/pq/green/*/*'</span>)</span>
<span id="cb178-15"></span>
<span id="cb178-16"><span class="co" style="color: #5E5E5E;"># In[3]:</span></span>
<span id="cb178-17">df_green.count()</span>
<span id="cb178-18"></span>
<span id="cb178-19"><span class="co" style="color: #5E5E5E;"># In[4]:</span></span>
<span id="cb178-20">df_green <span class="op" style="color: #5E5E5E;">=</span> df_green</span>
<span id="cb178-21">    .withColumnRenamed(<span class="st" style="color: #20794D;">'lpep_pickup_datetime'</span>, <span class="st" style="color: #20794D;">'pickup_datetime'</span>)</span>
<span id="cb178-22">    .withColumnRenamed(<span class="st" style="color: #20794D;">'lpep_dropoff_datetime'</span>, <span class="st" style="color: #20794D;">'dropoff_datetime'</span>)</span>
<span id="cb178-23"></span>
<span id="cb178-24"><span class="co" style="color: #5E5E5E;"># In[5]:</span></span>
<span id="cb178-25">df_yellow <span class="op" style="color: #5E5E5E;">=</span> spark.read.parquet(<span class="st" style="color: #20794D;">'data/pq/yellow/*/*'</span>)</span>
<span id="cb178-26"></span>
<span id="cb178-27"></span>
<span id="cb178-28"><span class="co" style="color: #5E5E5E;"># In[6]:</span></span>
<span id="cb178-29">df_yellow <span class="op" style="color: #5E5E5E;">=</span> df_yellow</span>
<span id="cb178-30">    .withColumnRenamed(<span class="st" style="color: #20794D;">'tpep_pickup_datetime'</span>, <span class="st" style="color: #20794D;">'pickup_datetime'</span>)</span>
<span id="cb178-31">    .withColumnRenamed(<span class="st" style="color: #20794D;">'tpep_dropoff_datetime'</span>, <span class="st" style="color: #20794D;">'dropoff_datetime'</span>)</span>
<span id="cb178-32"></span>
<span id="cb178-33"><span class="co" style="color: #5E5E5E;"># In[7]:</span></span>
<span id="cb178-34">common_colums <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb178-35">yellow_columns <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">set</span>(df_yellow.columns)</span>
<span id="cb178-36"></span>
<span id="cb178-37"><span class="cf" style="color: #003B4F;">for</span> col <span class="kw" style="color: #003B4F;">in</span> df_green.columns:</span>
<span id="cb178-38">    <span class="cf" style="color: #003B4F;">if</span> col <span class="kw" style="color: #003B4F;">in</span> yellow_columns:</span>
<span id="cb178-39">        common_colums.append(col)</span>
<span id="cb178-40"></span>
<span id="cb178-41"><span class="co" style="color: #5E5E5E;"># In[13]:</span></span>
<span id="cb178-42">common_colums <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'VendorID'</span>,</span>
<span id="cb178-43">     <span class="st" style="color: #20794D;">'pickup_datetime'</span>,</span>
<span id="cb178-44">     <span class="st" style="color: #20794D;">'dropoff_datetime'</span>,</span>
<span id="cb178-45">     <span class="st" style="color: #20794D;">'store_and_fwd_flag'</span>,</span>
<span id="cb178-46">     <span class="st" style="color: #20794D;">'RatecodeID'</span>,</span>
<span id="cb178-47">     <span class="st" style="color: #20794D;">'PULocationID'</span>,</span>
<span id="cb178-48">     <span class="st" style="color: #20794D;">'DOLocationID'</span>,</span>
<span id="cb178-49">     <span class="st" style="color: #20794D;">'passenger_count'</span>,</span>
<span id="cb178-50">     <span class="st" style="color: #20794D;">'trip_distance'</span>,</span>
<span id="cb178-51">     <span class="st" style="color: #20794D;">'fare_amount'</span>,</span>
<span id="cb178-52">     <span class="st" style="color: #20794D;">'extra'</span>,</span>
<span id="cb178-53">     <span class="st" style="color: #20794D;">'mta_tax'</span>,</span>
<span id="cb178-54">     <span class="st" style="color: #20794D;">'tip_amount'</span>,</span>
<span id="cb178-55">     <span class="st" style="color: #20794D;">'tolls_amount'</span>,</span>
<span id="cb178-56">     <span class="st" style="color: #20794D;">'improvement_surcharge'</span>,</span>
<span id="cb178-57">     <span class="st" style="color: #20794D;">'total_amount'</span>,</span>
<span id="cb178-58">     <span class="st" style="color: #20794D;">'payment_type'</span>,</span>
<span id="cb178-59">     <span class="st" style="color: #20794D;">'congestion_surcharge'</span></span>
<span id="cb178-60">]</span>
<span id="cb178-61"></span>
<span id="cb178-62"><span class="co" style="color: #5E5E5E;"># In[8]:</span></span>
<span id="cb178-63"><span class="im" style="color: #00769E;">from</span> pyspark.sql <span class="im" style="color: #00769E;">import</span> functions <span class="im" style="color: #00769E;">as</span> F</span>
<span id="cb178-64"></span>
<span id="cb178-65"><span class="co" style="color: #5E5E5E;"># In[9]:</span></span>
<span id="cb178-66">df_green_sel <span class="op" style="color: #5E5E5E;">=</span> df_green</span>
<span id="cb178-67">    .select(common_colums)</span>
<span id="cb178-68">    .withColumn(<span class="st" style="color: #20794D;">'service_type'</span>, F.lit(<span class="st" style="color: #20794D;">'green'</span>))</span>
<span id="cb178-69"></span>
<span id="cb178-70"><span class="co" style="color: #5E5E5E;"># In[10]:</span></span>
<span id="cb178-71">df_yellow_sel <span class="op" style="color: #5E5E5E;">=</span> df_yellow</span>
<span id="cb178-72">    .select(common_colums)</span>
<span id="cb178-73">    .withColumn(<span class="st" style="color: #20794D;">'service_type'</span>, F.lit(<span class="st" style="color: #20794D;">'yellow'</span>))</span>
<span id="cb178-74"></span>
<span id="cb178-75"><span class="co" style="color: #5E5E5E;"># In[11]:</span></span>
<span id="cb178-76">df_trips_data <span class="op" style="color: #5E5E5E;">=</span> df_green_sel.unionAll(df_yellow_sel)</span>
<span id="cb178-77"></span>
<span id="cb178-78"><span class="co" style="color: #5E5E5E;"># In[12]:</span></span>
<span id="cb178-79">df_trips_data.groupBy(<span class="st" style="color: #20794D;">'service_type'</span>).count().show()</span>
<span id="cb178-80"></span>
<span id="cb178-81"><span class="co" style="color: #5E5E5E;"># In[13]:</span></span>
<span id="cb178-82">df_trips_data.columns</span>
<span id="cb178-83">ls</span>
<span id="cb178-84"></span>
<span id="cb178-85"><span class="co" style="color: #5E5E5E;"># In[14]:</span></span>
<span id="cb178-86"><span class="co" style="color: #5E5E5E;"># df_trips_data.registerTempTable('trips_data') # Deprecated.</span></span>
<span id="cb178-87">df_trips_data.createOrReplaceTempView(<span class="st" style="color: #20794D;">"trips_data"</span>)</span>
<span id="cb178-88"></span>
<span id="cb178-89"><span class="co" style="color: #5E5E5E;"># In[15]:</span></span>
<span id="cb178-90">df_result <span class="op" style="color: #5E5E5E;">=</span> spark.sql(<span class="st" style="color: #20794D;">"""</span></span>
<span id="cb178-91"><span class="st" style="color: #20794D;">SELECT</span></span>
<span id="cb178-92"><span class="st" style="color: #20794D;">    -- Reveneue grouping</span></span>
<span id="cb178-93"><span class="st" style="color: #20794D;">    PULocationID AS revenue_zone,</span></span>
<span id="cb178-94"><span class="st" style="color: #20794D;">    date_trunc('month', pickup_datetime) AS revenue_month,</span></span>
<span id="cb178-95"><span class="st" style="color: #20794D;">    service_type,</span></span>
<span id="cb178-96"></span>
<span id="cb178-97"><span class="st" style="color: #20794D;">    -- Revenue calculation</span></span>
<span id="cb178-98"><span class="st" style="color: #20794D;">    SUM(fare_amount) AS revenue_monthly_fare,</span></span>
<span id="cb178-99"><span class="st" style="color: #20794D;">    SUM(extra) AS revenue_monthly_extra,</span></span>
<span id="cb178-100"><span class="st" style="color: #20794D;">    SUM(mta_tax) AS revenue_monthly_mta_tax,</span></span>
<span id="cb178-101"><span class="st" style="color: #20794D;">    SUM(tip_amount) AS revenue_monthly_tip_amount,</span></span>
<span id="cb178-102"><span class="st" style="color: #20794D;">    SUM(tolls_amount) AS revenue_monthly_tolls_amount,</span></span>
<span id="cb178-103"><span class="st" style="color: #20794D;">    SUM(improvement_surcharge) AS revenue_monthly_improvement_surcharge,</span></span>
<span id="cb178-104"><span class="st" style="color: #20794D;">    SUM(total_amount) AS revenue_monthly_total_amount,</span></span>
<span id="cb178-105"><span class="st" style="color: #20794D;">    SUM(congestion_surcharge) AS revenue_monthly_congestion_surcharge,</span></span>
<span id="cb178-106"></span>
<span id="cb178-107"><span class="st" style="color: #20794D;">    -- Additional calculations</span></span>
<span id="cb178-108"><span class="st" style="color: #20794D;">    AVG(passenger_count) AS avg_montly_passenger_count,</span></span>
<span id="cb178-109"><span class="st" style="color: #20794D;">    AVG(trip_distance) AS avg_montly_trip_distance</span></span>
<span id="cb178-110"><span class="st" style="color: #20794D;">FROM</span></span>
<span id="cb178-111"><span class="st" style="color: #20794D;">    trips_data</span></span>
<span id="cb178-112"><span class="st" style="color: #20794D;">GROUP BY</span></span>
<span id="cb178-113"><span class="st" style="color: #20794D;">    1, 2, 3</span></span>
<span id="cb178-114"><span class="st" style="color: #20794D;">"""</span>)</span>
<span id="cb178-115"></span>
<span id="cb178-116"><span class="co" style="color: #5E5E5E;"># In[19]:</span></span>
<span id="cb178-117">df_result.coalesce(<span class="dv" style="color: #AD0000;">1</span>).write.parquet(<span class="st" style="color: #20794D;">'data/report/revenue/'</span>, mode<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'overwrite'</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb179" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb179-1"><span class="op" style="color: #5E5E5E;">!</span>python <span class="dv" style="color: #AD0000;">0</span><span class="er" style="color: #AD0000;">6_spark_sql_notebook</span>.py</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>23/04/03 11:02:47 WARN Utils: Your hostname, DESKTOP-1UDJOCI resolves to a loopback address: 127.0.1.1; using 172.21.104.92 instead (on interface eth0)
23/04/03 11:02:47 WARN Utils: Set SPARK_LOCAL_IP if you need to bind to another address
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
23/04/03 11:02:48 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
                                                                                </code></pre>
</div>
</div>
<p>Now, if we go to the ~/Blog/posts/DE_Zoomcamp_Week_5/data/reportdirectory, we see that the revenue directory has just been created :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_5/DE_Zoomcamp_Week_5_files/figure-html/6802b70b-16b1-4c49-980e-67a21767b20d.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">revenue_report_2.PNG</figcaption><p></p>
</figure>
</div>
<p>Let’s paramaterize our script using <code>argparse</code> like we did in week 1, to allow us to configure parameters from the command line :</p>
<p><code>06_spark_sql.py</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb181" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb181-1"><span class="co" style="color: #5E5E5E;">#!/usr/bin/env python</span></span>
<span id="cb181-2"><span class="co" style="color: #5E5E5E;"># coding: utf-8</span></span>
<span id="cb181-3"></span>
<span id="cb181-4"><span class="im" style="color: #00769E;">import</span> argparse</span>
<span id="cb181-5"></span>
<span id="cb181-6"><span class="im" style="color: #00769E;">import</span> pyspark</span>
<span id="cb181-7"><span class="im" style="color: #00769E;">from</span> pyspark.sql <span class="im" style="color: #00769E;">import</span> SparkSession</span>
<span id="cb181-8"><span class="im" style="color: #00769E;">from</span> pyspark.sql <span class="im" style="color: #00769E;">import</span> functions <span class="im" style="color: #00769E;">as</span> F</span>
<span id="cb181-9"></span>
<span id="cb181-10"></span>
<span id="cb181-11">parser <span class="op" style="color: #5E5E5E;">=</span> argparse.ArgumentParser()</span>
<span id="cb181-12"></span>
<span id="cb181-13">parser.add_argument(<span class="st" style="color: #20794D;">'--input_green'</span>, required<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb181-14">parser.add_argument(<span class="st" style="color: #20794D;">'--input_yellow'</span>, required<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb181-15">parser.add_argument(<span class="st" style="color: #20794D;">'--output'</span>, required<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb181-16"></span>
<span id="cb181-17">args <span class="op" style="color: #5E5E5E;">=</span> parser.parse_args()</span>
<span id="cb181-18"></span>
<span id="cb181-19">input_green <span class="op" style="color: #5E5E5E;">=</span> args.input_green</span>
<span id="cb181-20">input_yellow <span class="op" style="color: #5E5E5E;">=</span> args.input_yellow</span>
<span id="cb181-21">output <span class="op" style="color: #5E5E5E;">=</span> args.output</span>
<span id="cb181-22"></span>
<span id="cb181-23"></span>
<span id="cb181-24">spark <span class="op" style="color: #5E5E5E;">=</span> SparkSession.builder <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb181-25">    .appName(<span class="st" style="color: #20794D;">'test'</span>) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb181-26">    .getOrCreate()</span>
<span id="cb181-27"></span>
<span id="cb181-28">df_green <span class="op" style="color: #5E5E5E;">=</span> spark.read.parquet(input_green)</span>
<span id="cb181-29"></span>
<span id="cb181-30">df_green <span class="op" style="color: #5E5E5E;">=</span> df_green <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb181-31">    .withColumnRenamed(<span class="st" style="color: #20794D;">'lpep_pickup_datetime'</span>, <span class="st" style="color: #20794D;">'pickup_datetime'</span>) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb181-32">    .withColumnRenamed(<span class="st" style="color: #20794D;">'lpep_dropoff_datetime'</span>, <span class="st" style="color: #20794D;">'dropoff_datetime'</span>)</span>
<span id="cb181-33"></span>
<span id="cb181-34">df_yellow <span class="op" style="color: #5E5E5E;">=</span> spark.read.parquet(input_yellow)</span>
<span id="cb181-35"></span>
<span id="cb181-36"></span>
<span id="cb181-37">df_yellow <span class="op" style="color: #5E5E5E;">=</span> df_yellow <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb181-38">    .withColumnRenamed(<span class="st" style="color: #20794D;">'tpep_pickup_datetime'</span>, <span class="st" style="color: #20794D;">'pickup_datetime'</span>) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb181-39">    .withColumnRenamed(<span class="st" style="color: #20794D;">'tpep_dropoff_datetime'</span>, <span class="st" style="color: #20794D;">'dropoff_datetime'</span>)</span>
<span id="cb181-40"></span>
<span id="cb181-41"></span>
<span id="cb181-42">common_colums <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb181-43">    <span class="st" style="color: #20794D;">'VendorID'</span>,</span>
<span id="cb181-44">    <span class="st" style="color: #20794D;">'pickup_datetime'</span>,</span>
<span id="cb181-45">    <span class="st" style="color: #20794D;">'dropoff_datetime'</span>,</span>
<span id="cb181-46">    <span class="st" style="color: #20794D;">'store_and_fwd_flag'</span>,</span>
<span id="cb181-47">    <span class="st" style="color: #20794D;">'RatecodeID'</span>,</span>
<span id="cb181-48">    <span class="st" style="color: #20794D;">'PULocationID'</span>,</span>
<span id="cb181-49">    <span class="st" style="color: #20794D;">'DOLocationID'</span>,</span>
<span id="cb181-50">    <span class="st" style="color: #20794D;">'passenger_count'</span>,</span>
<span id="cb181-51">    <span class="st" style="color: #20794D;">'trip_distance'</span>,</span>
<span id="cb181-52">    <span class="st" style="color: #20794D;">'fare_amount'</span>,</span>
<span id="cb181-53">    <span class="st" style="color: #20794D;">'extra'</span>,</span>
<span id="cb181-54">    <span class="st" style="color: #20794D;">'mta_tax'</span>,</span>
<span id="cb181-55">    <span class="st" style="color: #20794D;">'tip_amount'</span>,</span>
<span id="cb181-56">    <span class="st" style="color: #20794D;">'tolls_amount'</span>,</span>
<span id="cb181-57">    <span class="st" style="color: #20794D;">'improvement_surcharge'</span>,</span>
<span id="cb181-58">    <span class="st" style="color: #20794D;">'total_amount'</span>,</span>
<span id="cb181-59">    <span class="st" style="color: #20794D;">'payment_type'</span>,</span>
<span id="cb181-60">    <span class="st" style="color: #20794D;">'congestion_surcharge'</span></span>
<span id="cb181-61">]</span>
<span id="cb181-62"></span>
<span id="cb181-63"></span>
<span id="cb181-64"></span>
<span id="cb181-65">df_green_sel <span class="op" style="color: #5E5E5E;">=</span> df_green <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb181-66">    .select(common_colums) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb181-67">    .withColumn(<span class="st" style="color: #20794D;">'service_type'</span>, F.lit(<span class="st" style="color: #20794D;">'green'</span>))</span>
<span id="cb181-68"></span>
<span id="cb181-69">df_yellow_sel <span class="op" style="color: #5E5E5E;">=</span> df_yellow <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb181-70">    .select(common_colums) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb181-71">    .withColumn(<span class="st" style="color: #20794D;">'service_type'</span>, F.lit(<span class="st" style="color: #20794D;">'yellow'</span>))</span>
<span id="cb181-72"></span>
<span id="cb181-73"></span>
<span id="cb181-74">df_trips_data <span class="op" style="color: #5E5E5E;">=</span> df_green_sel.unionAll(df_yellow_sel)</span>
<span id="cb181-75"></span>
<span id="cb181-76">df_trips_data.registerTempTable(<span class="st" style="color: #20794D;">'trips_data'</span>)</span>
<span id="cb181-77"></span>
<span id="cb181-78"></span>
<span id="cb181-79">df_result <span class="op" style="color: #5E5E5E;">=</span> spark.sql(<span class="st" style="color: #20794D;">"""</span></span>
<span id="cb181-80"><span class="st" style="color: #20794D;">SELECT </span></span>
<span id="cb181-81"><span class="st" style="color: #20794D;">    -- Reveneue grouping </span></span>
<span id="cb181-82"><span class="st" style="color: #20794D;">    PULocationID AS revenue_zone,</span></span>
<span id="cb181-83"><span class="st" style="color: #20794D;">    date_trunc('month', pickup_datetime) AS revenue_month, </span></span>
<span id="cb181-84"><span class="st" style="color: #20794D;">    service_type, </span></span>
<span id="cb181-85"></span>
<span id="cb181-86"><span class="st" style="color: #20794D;">    -- Revenue calculation </span></span>
<span id="cb181-87"><span class="st" style="color: #20794D;">    SUM(fare_amount) AS revenue_monthly_fare,</span></span>
<span id="cb181-88"><span class="st" style="color: #20794D;">    SUM(extra) AS revenue_monthly_extra,</span></span>
<span id="cb181-89"><span class="st" style="color: #20794D;">    SUM(mta_tax) AS revenue_monthly_mta_tax,</span></span>
<span id="cb181-90"><span class="st" style="color: #20794D;">    SUM(tip_amount) AS revenue_monthly_tip_amount,</span></span>
<span id="cb181-91"><span class="st" style="color: #20794D;">    SUM(tolls_amount) AS revenue_monthly_tolls_amount,</span></span>
<span id="cb181-92"><span class="st" style="color: #20794D;">    SUM(improvement_surcharge) AS revenue_monthly_improvement_surcharge,</span></span>
<span id="cb181-93"><span class="st" style="color: #20794D;">    SUM(total_amount) AS revenue_monthly_total_amount,</span></span>
<span id="cb181-94"><span class="st" style="color: #20794D;">    SUM(congestion_surcharge) AS revenue_monthly_congestion_surcharge,</span></span>
<span id="cb181-95"></span>
<span id="cb181-96"><span class="st" style="color: #20794D;">    -- Additional calculations</span></span>
<span id="cb181-97"><span class="st" style="color: #20794D;">    AVG(passenger_count) AS avg_montly_passenger_count,</span></span>
<span id="cb181-98"><span class="st" style="color: #20794D;">    AVG(trip_distance) AS avg_montly_trip_distance</span></span>
<span id="cb181-99"><span class="st" style="color: #20794D;">FROM</span></span>
<span id="cb181-100"><span class="st" style="color: #20794D;">    trips_data</span></span>
<span id="cb181-101"><span class="st" style="color: #20794D;">GROUP BY</span></span>
<span id="cb181-102"><span class="st" style="color: #20794D;">    1, 2, 3</span></span>
<span id="cb181-103"><span class="st" style="color: #20794D;">"""</span>)</span>
<span id="cb181-104"></span>
<span id="cb181-105"></span>
<span id="cb181-106">df_result.coalesce(<span class="dv" style="color: #AD0000;">1</span>) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb181-107">    .write.parquet(output, mode<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'overwrite'</span>)</span></code></pre></div>
</div>
<p>Now, we can run our script with a set of parameters :</p>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb182" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb182-1"><span class="op" style="color: #5E5E5E;">!</span> python <span class="dv" style="color: #AD0000;">0</span><span class="er" style="color: #AD0000;">6_spark_sql</span>.py <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb182-2">    <span class="op" style="color: #5E5E5E;">--</span>input_green<span class="op" style="color: #5E5E5E;">=</span>data<span class="op" style="color: #5E5E5E;">/</span>pq<span class="op" style="color: #5E5E5E;">/</span>green<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2020</span><span class="op" style="color: #5E5E5E;">/*/</span> <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb182-3">    <span class="op" style="color: #5E5E5E;">--</span>input_yellow<span class="op" style="color: #5E5E5E;">=</span>data<span class="op" style="color: #5E5E5E;">/</span>pq<span class="op" style="color: #5E5E5E;">/</span>yellow<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2020</span><span class="op" style="color: #5E5E5E;">/*/</span> <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb182-4">    <span class="op" style="color: #5E5E5E;">--</span>output<span class="op" style="color: #5E5E5E;">=</span>data<span class="op" style="color: #5E5E5E;">/</span>report<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">2020</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>23/04/03 11:13:44 WARN Utils: Your hostname, DESKTOP-1UDJOCI resolves to a loopback address: 127.0.1.1; using 172.21.104.92 instead (on interface eth0)
23/04/03 11:13:44 WARN Utils: Set SPARK_LOCAL_IP if you need to bind to another address
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
23/04/03 11:13:46 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
/home/stephen137/mambaforge/lib/python3.10/site-packages/pyspark/sql/dataframe.py:229: FutureWarning: Deprecated in 2.0, use createOrReplaceTempView instead.
  warnings.warn("Deprecated in 2.0, use createOrReplaceTempView instead.", FutureWarning)
                                                                                </code></pre>
</div>
</div>
<p>We see that our report is created successfully :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_5/DE_Zoomcamp_Week_5_files/figure-html/fc4db87f-d1f3-43b3-91c7-15371ad8ae9a.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">report_2020.PNG</figcaption><p></p>
</figure>
</div>
<p>Imagine we have multiple clusters. It is not convenient to hardcode the <code>.master("spark://DESKTOP-1UDJOCI.localdomain:7077")</code> so we will remove it from our script :</p>
<p><code>06_spark_sql_notebook.py</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb184" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb184-1">spark <span class="op" style="color: #5E5E5E;">=</span> SparkSession.builder <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb184-2">    .appName(<span class="st" style="color: #20794D;">'test'</span>) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb184-3">    .getOrCreate()</span></code></pre></div>
</div>
<p>We will specifiy the master outside of our script from the command line by using</p>
<pre><code>spark-submit </code></pre>
<p>The <code>spark-submit</code> script in Spark’s bin directory is used to launch applications on a cluster. See <a href="https://spark.apache.org/docs/latest/submitting-applications.html">Submitting Applications</a> for further information.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb186" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb186-1">URL<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"spark://DESKTOP-1UDJOCI.localdomain:7077"</span></span>
<span id="cb186-2"></span>
<span id="cb186-3">spark<span class="op" style="color: #5E5E5E;">-</span>submit <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb186-4">    <span class="op" style="color: #5E5E5E;">--</span>master<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"$</span><span class="sc" style="color: #5E5E5E;">{URL}</span><span class="st" style="color: #20794D;">"</span> \</span>
<span id="cb186-5">    <span class="dv" style="color: #AD0000;">0</span><span class="er" style="color: #AD0000;">6_spark_sql</span>.py <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb186-6">        <span class="op" style="color: #5E5E5E;">--</span>input_green<span class="op" style="color: #5E5E5E;">=</span>data<span class="op" style="color: #5E5E5E;">/</span>pq<span class="op" style="color: #5E5E5E;">/</span>green<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2021</span><span class="op" style="color: #5E5E5E;">/*/</span> <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb186-7">        <span class="op" style="color: #5E5E5E;">--</span>input_yellow<span class="op" style="color: #5E5E5E;">=</span>data<span class="op" style="color: #5E5E5E;">/</span>pq<span class="op" style="color: #5E5E5E;">/</span>yellow<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2021</span><span class="op" style="color: #5E5E5E;">/*/</span> <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb186-8">        <span class="op" style="color: #5E5E5E;">--</span>output<span class="op" style="color: #5E5E5E;">=</span>data<span class="op" style="color: #5E5E5E;">/</span>report<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">2021</span></span></code></pre></div>
</div>
<p>We see that our report is created successfully :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_5/DE_Zoomcamp_Week_5_files/figure-html/09813afd-0f4e-40dc-844b-5a097a0d9c9e.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">report_2021.PNG</figcaption><p></p>
</figure>
</div>
<p>Before we finish, we have to stop the workers and stop the master. Navigate to the directory where Spark is installed on your and run the following from the command line :</p>
<pre><code>./sbin/stop-slave.sh

./sbin/stop-worker.sh

./sbin/stop-master.sh</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_5/DE_Zoomcamp_Week_5_files/figure-html/174127a1-ba47-4c29-a30c-e7b4af05bd10.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">stop.PNG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_5/DE_Zoomcamp_Week_5_files/figure-html/5a9aee0c-dba7-4ec3-ba65-7f9d94e0d90c.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">stop_UI.PNG</figcaption><p></p>
</figure>
</div>
<p>We have successfully closed down our session.</p>
</section>
</section>
<section id="setting-up-a-dataproc-cluster" class="level3">
<h3 class="anchored" data-anchor-id="setting-up-a-dataproc-cluster">5.6.3 Setting up a Dataproc Cluster</h3>
<p>Google Cloud Dataproc is a managed service for running Apache Hadoop and Spark jobs. It can be used for big data processing and machine learning.</p>
<p>Dataproc actually uses Compute Engine instances under the hood, but it takes care of the management details for you. It’s a layer on top that makes it easy to spin up and down clusters as you need them.</p>
<p>The main benefits are that:</p>
<ul>
<li>it is a managed service, so you don’t need a system administrator to set it up</li>
<li>it is fast. You can spin up a cluster in about 90 seconds</li>
<li>it is cheaper than building your own cluster because you only pay when jobs are running. You can spin up a Dataproc cluster when you need to run a job and shut it down afterward</li>
<li>it is integrated with other Google Cloud services, including Cloud Storage, BigQuery, and <a href="https://cloud.google.com/bigtable">Cloud Bigtable</a>, so it’s easy to get data into and out of it</li>
</ul>
<p>See <a href="https://cloud.google.com/dataproc/docs/quickstarts">Cloud Dataproc docs</a> for a quickstart tour.</p>
<section id="create-a-cluster" class="level4">
<h4 class="anchored" data-anchor-id="create-a-cluster">Create a cluster</h4>
<p>First, navigate to Dataproc on Google Cloud and enable the API if you haven’t already done so :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_5/DE_Zoomcamp_Week_5_files/figure-html/ab26bec6-b96c-4660-9c52-15784da66aaf.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">dataproc_API.PNG</figcaption><p></p>
</figure>
</div>
<p>Then create a cluster. We’ll use <code>Compute Engine</code> :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_5/DE_Zoomcamp_Week_5_files/figure-html/96dd2c93-5046-4b5e-adbe-e466dd315c7f.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">dataproc_compute_engine.PNG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_5/DE_Zoomcamp_Week_5_files/figure-html/b06a8efa-fdb0-4eb7-9cb5-d70650002e8c.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">dataproc_setup.PNG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_5/DE_Zoomcamp_Week_5_files/figure-html/556a0d75-bffc-42fd-abc0-366132c489ba.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">dataproc_components.PNG</figcaption><p></p>
</figure>
</div>
<p>By creating a cluster we also create a virtual machine, so it might take a while :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_5/DE_Zoomcamp_Week_5_files/figure-html/fa6f4c4d-1e6f-45a6-ba74-9b623e521fbc.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">cluster_running.PNG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_5/DE_Zoomcamp_Week_5_files/figure-html/0db4906e-8411-41b0-b3aa-b8f6d88a0b61.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">cluster_VM.PNG</figcaption><p></p>
</figure>
</div>
<p>Now that our cluster is running let’s now try to submit a job there. With Dataproc, we don’t need to use the same instructions as before to establish the connection with Google Cloud Storage (GCS). Dataproc is already configured to access GCS.</p>
<p>First, we need to to upload the following file to our data bucket :</p>
<p><code>06_spark_sql.py file</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb188" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb188-1"><span class="co" style="color: #5E5E5E;">#!/usr/bin/env python</span></span>
<span id="cb188-2"><span class="co" style="color: #5E5E5E;"># coding: utf-8</span></span>
<span id="cb188-3"></span>
<span id="cb188-4"><span class="im" style="color: #00769E;">import</span> argparse</span>
<span id="cb188-5"></span>
<span id="cb188-6"><span class="im" style="color: #00769E;">import</span> pyspark</span>
<span id="cb188-7"><span class="im" style="color: #00769E;">from</span> pyspark.sql <span class="im" style="color: #00769E;">import</span> SparkSession</span>
<span id="cb188-8"><span class="im" style="color: #00769E;">from</span> pyspark.sql <span class="im" style="color: #00769E;">import</span> functions <span class="im" style="color: #00769E;">as</span> F</span>
<span id="cb188-9"></span>
<span id="cb188-10"></span>
<span id="cb188-11">parser <span class="op" style="color: #5E5E5E;">=</span> argparse.ArgumentParser()</span>
<span id="cb188-12"></span>
<span id="cb188-13">parser.add_argument(<span class="st" style="color: #20794D;">'--input_green'</span>, required<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb188-14">parser.add_argument(<span class="st" style="color: #20794D;">'--input_yellow'</span>, required<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb188-15">parser.add_argument(<span class="st" style="color: #20794D;">'--output'</span>, required<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb188-16"></span>
<span id="cb188-17">args <span class="op" style="color: #5E5E5E;">=</span> parser.parse_args()</span>
<span id="cb188-18"></span>
<span id="cb188-19">input_green <span class="op" style="color: #5E5E5E;">=</span> args.input_green</span>
<span id="cb188-20">input_yellow <span class="op" style="color: #5E5E5E;">=</span> args.input_yellow</span>
<span id="cb188-21">output <span class="op" style="color: #5E5E5E;">=</span> args.output</span>
<span id="cb188-22"></span>
<span id="cb188-23"></span>
<span id="cb188-24">spark <span class="op" style="color: #5E5E5E;">=</span> SparkSession.builder <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb188-25">    .appName(<span class="st" style="color: #20794D;">'test'</span>) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb188-26">    .getOrCreate()</span>
<span id="cb188-27"></span>
<span id="cb188-28">df_green <span class="op" style="color: #5E5E5E;">=</span> spark.read.parquet(input_green)</span>
<span id="cb188-29"></span>
<span id="cb188-30">df_green <span class="op" style="color: #5E5E5E;">=</span> df_green <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb188-31">    .withColumnRenamed(<span class="st" style="color: #20794D;">'lpep_pickup_datetime'</span>, <span class="st" style="color: #20794D;">'pickup_datetime'</span>) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb188-32">    .withColumnRenamed(<span class="st" style="color: #20794D;">'lpep_dropoff_datetime'</span>, <span class="st" style="color: #20794D;">'dropoff_datetime'</span>)</span>
<span id="cb188-33"></span>
<span id="cb188-34">df_yellow <span class="op" style="color: #5E5E5E;">=</span> spark.read.parquet(input_yellow)</span>
<span id="cb188-35"></span>
<span id="cb188-36"></span>
<span id="cb188-37">df_yellow <span class="op" style="color: #5E5E5E;">=</span> df_yellow <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb188-38">    .withColumnRenamed(<span class="st" style="color: #20794D;">'tpep_pickup_datetime'</span>, <span class="st" style="color: #20794D;">'pickup_datetime'</span>) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb188-39">    .withColumnRenamed(<span class="st" style="color: #20794D;">'tpep_dropoff_datetime'</span>, <span class="st" style="color: #20794D;">'dropoff_datetime'</span>)</span>
<span id="cb188-40"></span>
<span id="cb188-41"></span>
<span id="cb188-42">common_colums <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb188-43">    <span class="st" style="color: #20794D;">'VendorID'</span>,</span>
<span id="cb188-44">    <span class="st" style="color: #20794D;">'pickup_datetime'</span>,</span>
<span id="cb188-45">    <span class="st" style="color: #20794D;">'dropoff_datetime'</span>,</span>
<span id="cb188-46">    <span class="st" style="color: #20794D;">'store_and_fwd_flag'</span>,</span>
<span id="cb188-47">    <span class="st" style="color: #20794D;">'RatecodeID'</span>,</span>
<span id="cb188-48">    <span class="st" style="color: #20794D;">'PULocationID'</span>,</span>
<span id="cb188-49">    <span class="st" style="color: #20794D;">'DOLocationID'</span>,</span>
<span id="cb188-50">    <span class="st" style="color: #20794D;">'passenger_count'</span>,</span>
<span id="cb188-51">    <span class="st" style="color: #20794D;">'trip_distance'</span>,</span>
<span id="cb188-52">    <span class="st" style="color: #20794D;">'fare_amount'</span>,</span>
<span id="cb188-53">    <span class="st" style="color: #20794D;">'extra'</span>,</span>
<span id="cb188-54">    <span class="st" style="color: #20794D;">'mta_tax'</span>,</span>
<span id="cb188-55">    <span class="st" style="color: #20794D;">'tip_amount'</span>,</span>
<span id="cb188-56">    <span class="st" style="color: #20794D;">'tolls_amount'</span>,</span>
<span id="cb188-57">    <span class="st" style="color: #20794D;">'improvement_surcharge'</span>,</span>
<span id="cb188-58">    <span class="st" style="color: #20794D;">'total_amount'</span>,</span>
<span id="cb188-59">    <span class="st" style="color: #20794D;">'payment_type'</span>,</span>
<span id="cb188-60">    <span class="st" style="color: #20794D;">'congestion_surcharge'</span></span>
<span id="cb188-61">]</span>
<span id="cb188-62"></span>
<span id="cb188-63"></span>
<span id="cb188-64"></span>
<span id="cb188-65">df_green_sel <span class="op" style="color: #5E5E5E;">=</span> df_green <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb188-66">    .select(common_colums) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb188-67">    .withColumn(<span class="st" style="color: #20794D;">'service_type'</span>, F.lit(<span class="st" style="color: #20794D;">'green'</span>))</span>
<span id="cb188-68"></span>
<span id="cb188-69">df_yellow_sel <span class="op" style="color: #5E5E5E;">=</span> df_yellow <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb188-70">    .select(common_colums) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb188-71">    .withColumn(<span class="st" style="color: #20794D;">'service_type'</span>, F.lit(<span class="st" style="color: #20794D;">'yellow'</span>))</span>
<span id="cb188-72"></span>
<span id="cb188-73"></span>
<span id="cb188-74">df_trips_data <span class="op" style="color: #5E5E5E;">=</span> df_green_sel.unionAll(df_yellow_sel)</span>
<span id="cb188-75"></span>
<span id="cb188-76">df_trips_data.registerTempTable(<span class="st" style="color: #20794D;">'trips_data'</span>)</span>
<span id="cb188-77"></span>
<span id="cb188-78"></span>
<span id="cb188-79">df_result <span class="op" style="color: #5E5E5E;">=</span> spark.sql(<span class="st" style="color: #20794D;">"""</span></span>
<span id="cb188-80"><span class="st" style="color: #20794D;">SELECT </span></span>
<span id="cb188-81"><span class="st" style="color: #20794D;">    -- Reveneue grouping </span></span>
<span id="cb188-82"><span class="st" style="color: #20794D;">    PULocationID AS revenue_zone,</span></span>
<span id="cb188-83"><span class="st" style="color: #20794D;">    date_trunc('month', pickup_datetime) AS revenue_month, </span></span>
<span id="cb188-84"><span class="st" style="color: #20794D;">    service_type, </span></span>
<span id="cb188-85"></span>
<span id="cb188-86"><span class="st" style="color: #20794D;">    -- Revenue calculation </span></span>
<span id="cb188-87"><span class="st" style="color: #20794D;">    SUM(fare_amount) AS revenue_monthly_fare,</span></span>
<span id="cb188-88"><span class="st" style="color: #20794D;">    SUM(extra) AS revenue_monthly_extra,</span></span>
<span id="cb188-89"><span class="st" style="color: #20794D;">    SUM(mta_tax) AS revenue_monthly_mta_tax,</span></span>
<span id="cb188-90"><span class="st" style="color: #20794D;">    SUM(tip_amount) AS revenue_monthly_tip_amount,</span></span>
<span id="cb188-91"><span class="st" style="color: #20794D;">    SUM(tolls_amount) AS revenue_monthly_tolls_amount,</span></span>
<span id="cb188-92"><span class="st" style="color: #20794D;">    SUM(improvement_surcharge) AS revenue_monthly_improvement_surcharge,</span></span>
<span id="cb188-93"><span class="st" style="color: #20794D;">    SUM(total_amount) AS revenue_monthly_total_amount,</span></span>
<span id="cb188-94"><span class="st" style="color: #20794D;">    SUM(congestion_surcharge) AS revenue_monthly_congestion_surcharge,</span></span>
<span id="cb188-95"></span>
<span id="cb188-96"><span class="st" style="color: #20794D;">    -- Additional calculations</span></span>
<span id="cb188-97"><span class="st" style="color: #20794D;">    AVG(passenger_count) AS avg_montly_passenger_count,</span></span>
<span id="cb188-98"><span class="st" style="color: #20794D;">    AVG(trip_distance) AS avg_montly_trip_distance</span></span>
<span id="cb188-99"><span class="st" style="color: #20794D;">FROM</span></span>
<span id="cb188-100"><span class="st" style="color: #20794D;">    trips_data</span></span>
<span id="cb188-101"><span class="st" style="color: #20794D;">GROUP BY</span></span>
<span id="cb188-102"><span class="st" style="color: #20794D;">    1, 2, 3</span></span>
<span id="cb188-103"><span class="st" style="color: #20794D;">"""</span>)</span>
<span id="cb188-104"></span>
<span id="cb188-105"></span>
<span id="cb188-106">df_result.coalesce(<span class="dv" style="color: #AD0000;">1</span>) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb188-107">    .write.parquet(output, mode<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'overwrite'</span>)</span></code></pre></div>
</div>
<p>We can do this from the command line using :</p>
<pre><code>gsutil cp 06_spark_sql.py &lt;data_bucket_path&gt;/code/06_spark_sql.py&gt;</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_5/DE_Zoomcamp_Week_5_files/figure-html/e15bdb7e-3881-4b84-92fa-2a5b0ef82761.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">spark_sql_to_gcs.PNG</figcaption><p></p>
</figure>
</div>
<p>Now <code>SUBMIT JOB</code> from within our cluster in Google Cloud, passing the following arguments:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb190" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb190-1"> <span class="op" style="color: #5E5E5E;">--</span>input_green<span class="op" style="color: #5E5E5E;">=</span>gs:<span class="op" style="color: #5E5E5E;">//</span>dtc_data_lake_taxi<span class="op" style="color: #5E5E5E;">-</span>rides<span class="op" style="color: #5E5E5E;">-</span>ny<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">137</span><span class="op" style="color: #5E5E5E;">/</span>pq<span class="op" style="color: #5E5E5E;">/</span>green<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2021</span><span class="op" style="color: #5E5E5E;">/*/</span> </span>
<span id="cb190-2">        <span class="op" style="color: #5E5E5E;">--</span>input_yellow<span class="op" style="color: #5E5E5E;">=</span>gs:<span class="op" style="color: #5E5E5E;">//</span>dtc_data_lake_taxi<span class="op" style="color: #5E5E5E;">-</span>rides<span class="op" style="color: #5E5E5E;">-</span>ny<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">137</span><span class="op" style="color: #5E5E5E;">/</span>pq<span class="op" style="color: #5E5E5E;">/</span>yellow<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2021</span><span class="op" style="color: #5E5E5E;">/*/</span> </span>
<span id="cb190-3">        <span class="op" style="color: #5E5E5E;">--</span>output<span class="op" style="color: #5E5E5E;">=</span>gs:<span class="op" style="color: #5E5E5E;">//</span>dtc_data_lake_taxi<span class="op" style="color: #5E5E5E;">-</span>rides<span class="op" style="color: #5E5E5E;">-</span>ny<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">137</span><span class="op" style="color: #5E5E5E;">/</span>report<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">2021</span>   </span>
<span id="cb190-4">    </span></code></pre></div>
</div>
<p>Make sure you specify your own unique bucket path when doing this.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_5/DE_Zoomcamp_Week_5_files/figure-html/0eaffdae-40fb-44ae-8c81-dc9aad91f12e.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">dataproc_submit.PNG</figcaption><p></p>
</figure>
</div>
<p>So we have successfully submitted our job to a cluster we created on Google Cloud, and it did some compute and saved the results in our bucket :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_5/DE_Zoomcamp_Week_5_files/figure-html/8a426d33-0a54-425d-a630-553f9d282b4e.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">dataproc_bucket.PNG</figcaption><p></p>
</figure>
</div>
</section>
<section id="equivalent-rest" class="level4">
<h4 class="anchored" data-anchor-id="equivalent-rest">Equivalent REST</h4>
<p>If we click on <code>EQUIVALENT REST</code> at the bottom left of the Job Configuration we can construct an <code>equivalent API REST request or gcloud tool command</code> to use inyour code or from the command line to create a cluster.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_5/DE_Zoomcamp_Week_5_files/figure-html/b416a2bc-9e3f-441b-8ccb-eeb1070e4e32.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">equivalent_REST.PNG</figcaption><p></p>
</figure>
</div>
<p>The Equivalent REST response looks like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb191" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb191-1">{</span>
<span id="cb191-2">  <span class="st" style="color: #20794D;">"reference"</span>: {</span>
<span id="cb191-3">    <span class="st" style="color: #20794D;">"jobId"</span>: <span class="st" style="color: #20794D;">"job-baedec74"</span>,</span>
<span id="cb191-4">    <span class="st" style="color: #20794D;">"projectId"</span>: <span class="st" style="color: #20794D;">"taxi-rides-ny-137"</span></span>
<span id="cb191-5">  },</span>
<span id="cb191-6">  <span class="st" style="color: #20794D;">"placement"</span>: {</span>
<span id="cb191-7">    <span class="st" style="color: #20794D;">"clusterName"</span>: <span class="st" style="color: #20794D;">"de-zoomcamp-cluster"</span></span>
<span id="cb191-8">  },</span>
<span id="cb191-9">  <span class="st" style="color: #20794D;">"status"</span>: {</span>
<span id="cb191-10">    <span class="st" style="color: #20794D;">"state"</span>: <span class="st" style="color: #20794D;">"DONE"</span>,</span>
<span id="cb191-11">    <span class="st" style="color: #20794D;">"stateStartTime"</span>: <span class="st" style="color: #20794D;">"2023-04-03T11:46:50.903406Z"</span></span>
<span id="cb191-12">  },</span>
<span id="cb191-13">  <span class="st" style="color: #20794D;">"yarnApplications"</span>: [</span>
<span id="cb191-14">    {</span>
<span id="cb191-15">      <span class="st" style="color: #20794D;">"name"</span>: <span class="st" style="color: #20794D;">"test"</span>,</span>
<span id="cb191-16">      <span class="st" style="color: #20794D;">"state"</span>: <span class="st" style="color: #20794D;">"FINISHED"</span>,</span>
<span id="cb191-17">      <span class="st" style="color: #20794D;">"progress"</span>: <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb191-18">      <span class="st" style="color: #20794D;">"trackingUrl"</span>: <span class="st" style="color: #20794D;">"http://de-zoomcamp-cluster-m:8088/proxy/application_1680518000410_0002/"</span></span>
<span id="cb191-19">    }</span>
<span id="cb191-20">  ],</span>
<span id="cb191-21">  <span class="st" style="color: #20794D;">"statusHistory"</span>: [</span>
<span id="cb191-22">    {</span>
<span id="cb191-23">      <span class="st" style="color: #20794D;">"state"</span>: <span class="st" style="color: #20794D;">"PENDING"</span>,</span>
<span id="cb191-24">      <span class="st" style="color: #20794D;">"stateStartTime"</span>: <span class="st" style="color: #20794D;">"2023-04-03T11:46:05.044918Z"</span></span>
<span id="cb191-25">    },</span>
<span id="cb191-26">    {</span>
<span id="cb191-27">      <span class="st" style="color: #20794D;">"state"</span>: <span class="st" style="color: #20794D;">"SETUP_DONE"</span>,</span>
<span id="cb191-28">      <span class="st" style="color: #20794D;">"stateStartTime"</span>: <span class="st" style="color: #20794D;">"2023-04-03T11:46:05.103569Z"</span></span>
<span id="cb191-29">    },</span>
<span id="cb191-30">    {</span>
<span id="cb191-31">      <span class="st" style="color: #20794D;">"state"</span>: <span class="st" style="color: #20794D;">"RUNNING"</span>,</span>
<span id="cb191-32">      <span class="st" style="color: #20794D;">"details"</span>: <span class="st" style="color: #20794D;">"Agent reported job success"</span>,</span>
<span id="cb191-33">      <span class="st" style="color: #20794D;">"stateStartTime"</span>: <span class="st" style="color: #20794D;">"2023-04-03T11:46:05.575809Z"</span></span>
<span id="cb191-34">    }</span>
<span id="cb191-35">  ],</span>
<span id="cb191-36">  <span class="st" style="color: #20794D;">"driverControlFilesUri"</span>: <span class="st" style="color: #20794D;">"gs://dataproc-staging-europe-central2-684134901955-zy3qc9tq/google-cloud-dataproc-metainfo/9b321dfc-9e87-4daa-8a26-df51150917c0/jobs/job-baedec74/"</span>,</span>
<span id="cb191-37">  <span class="st" style="color: #20794D;">"driverOutputResourceUri"</span>: <span class="st" style="color: #20794D;">"gs://dataproc-staging-europe-central2-684134901955-zy3qc9tq/google-cloud-dataproc-metainfo/9b321dfc-9e87-4daa-8a26-df51150917c0/jobs/job-baedec74/driveroutput"</span>,</span>
<span id="cb191-38">  <span class="st" style="color: #20794D;">"jobUuid"</span>: <span class="st" style="color: #20794D;">"86629eb7-f8b1-43eb-9371-7d955f572160"</span>,</span>
<span id="cb191-39">  <span class="st" style="color: #20794D;">"done"</span>: true,</span>
<span id="cb191-40">  <span class="st" style="color: #20794D;">"pysparkJob"</span>: {</span>
<span id="cb191-41">    <span class="st" style="color: #20794D;">"mainPythonFileUri"</span>: <span class="st" style="color: #20794D;">"gs://dtc_data_lake_taxi-rides-ny-137/code/06_spark_sql.py"</span>,</span>
<span id="cb191-42">    <span class="st" style="color: #20794D;">"args"</span>: [</span>
<span id="cb191-43">      <span class="st" style="color: #20794D;">"--input_green=gs://dtc_data_lake_taxi-rides-ny-137/pq/green/2021/*/"</span>,</span>
<span id="cb191-44">      <span class="st" style="color: #20794D;">"--input_yellow=gs://dtc_data_lake_taxi-rides-ny-137/pq/yellow/2021/*/"</span>,</span>
<span id="cb191-45">      <span class="st" style="color: #20794D;">"--output=gs://dtc_data_lake_taxi-rides-ny-137/report-2021"</span></span>
<span id="cb191-46">    ]</span>
<span id="cb191-47">  }</span>
<span id="cb191-48">}</span></code></pre></div>
</div>
</section>
<section id="submit-a-job-with-gcloud-cli" class="level4">
<h4 class="anchored" data-anchor-id="submit-a-job-with-gcloud-cli">Submit a job with gcloud CLI</h4>
<p>See <a href="https://cloud.google.com/dataproc/docs/guides/submit-job">Submit a job</a> for details as to how to submit a job with Google Cloud SDK.</p>
<p>For example, to submit a job to a Dataproc cluster with gcloud CLI, run the following from the command line :</p>
<pre><code>gcloud dataproc jobs submit pyspark \
--cluster=de-zoomcamp-cluster \
--region=europe-central2 \
gs://dtc_data_lake_taxi-rides-ny-137/code/06_spark_sql.py \
-- \
    --input_green=gs://dtc_data_lake_taxi-rides-ny-137/pq/green/2021/*/ \
    --input_yellow=gs://dtc_data_lake_taxi-rides-ny-137/pq/yellow/2021/*/ \
    --output=gs://dtc_data_lake_taxi-rides-ny-137/report-2021</code></pre>
<p>Before submitting this command, you may find that you need to add the role <code>Dataproc Administrator</code> to the permissions created in the previous weeks. I had already set this up possibly :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_5/DE_Zoomcamp_Week_5_files/figure-html/00051dbc-d026-4ed8-baa6-ec46c7aca913.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">dataproc_gcloud.PNG</figcaption><p></p>
</figure>
</div>
</section>
</section>
<section id="connecting-spark-to-bigquery" class="level3">
<h3 class="anchored" data-anchor-id="connecting-spark-to-bigquery">5.6.4 Connecting Spark to BigQuery</h3>
<p>Sometimes we want to write directly to our data warehouse, BigQuery. A template example of how to connect to Spark is included within the <a href="https://cloud.google.com/dataproc/docs/tutorials/bigquery-connector-spark-example#pyspark">Google Docs</a> which we will modify for our specific purposes. The template is included below :</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb193" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb193-1"><span class="co" style="color: #5E5E5E;">#!/usr/bin/env python</span></span>
<span id="cb193-2"></span>
<span id="cb193-3"><span class="co" style="color: #5E5E5E;">"""BigQuery I/O PySpark example."""</span></span>
<span id="cb193-4"></span>
<span id="cb193-5"><span class="im" style="color: #00769E;">from</span> pyspark.sql <span class="im" style="color: #00769E;">import</span> SparkSession</span>
<span id="cb193-6"></span>
<span id="cb193-7">spark <span class="op" style="color: #5E5E5E;">=</span> SparkSession <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb193-8">  .builder <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb193-9">  .master(<span class="st" style="color: #20794D;">'yarn'</span>) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb193-10">  .appName(<span class="st" style="color: #20794D;">'spark-bigquery-demo'</span>) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb193-11">  .getOrCreate()</span>
<span id="cb193-12"></span>
<span id="cb193-13"><span class="co" style="color: #5E5E5E;"># Use the Cloud Storage bucket for temporary BigQuery export data used</span></span>
<span id="cb193-14"><span class="co" style="color: #5E5E5E;"># by the connector.</span></span>
<span id="cb193-15">bucket <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"[bucket]"</span></span>
<span id="cb193-16">spark.conf.<span class="bu" style="color: null;">set</span>(<span class="st" style="color: #20794D;">'temporaryGcsBucket'</span>, bucket)</span>
<span id="cb193-17"></span>
<span id="cb193-18"><span class="co" style="color: #5E5E5E;"># Load data from BigQuery.</span></span>
<span id="cb193-19">words <span class="op" style="color: #5E5E5E;">=</span> spark.read.<span class="bu" style="color: null;">format</span>(<span class="st" style="color: #20794D;">'bigquery'</span>) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb193-20">  .option(<span class="st" style="color: #20794D;">'table'</span>, <span class="st" style="color: #20794D;">'bigquery-public-data:samples.shakespeare'</span>) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb193-21">  .load()</span>
<span id="cb193-22">words.createOrReplaceTempView(<span class="st" style="color: #20794D;">'words'</span>)</span>
<span id="cb193-23"></span>
<span id="cb193-24"><span class="co" style="color: #5E5E5E;"># Perform word count.</span></span>
<span id="cb193-25">word_count <span class="op" style="color: #5E5E5E;">=</span> spark.sql(</span>
<span id="cb193-26">    <span class="st" style="color: #20794D;">'SELECT word, SUM(word_count) AS word_count FROM words GROUP BY word'</span>)</span>
<span id="cb193-27">word_count.show()</span>
<span id="cb193-28">word_count.printSchema()</span>
<span id="cb193-29"></span>
<span id="cb193-30"><span class="co" style="color: #5E5E5E;"># Saving the data to BigQuery</span></span>
<span id="cb193-31">word_count.write.<span class="bu" style="color: null;">format</span>(<span class="st" style="color: #20794D;">'bigquery'</span>) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb193-32">  .option(<span class="st" style="color: #20794D;">'table'</span>, <span class="st" style="color: #20794D;">'wordcount_dataset.wordcount_output'</span>) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb193-33">  .save()</span></code></pre></div>
</div>
<p>Navigate to the buckets created by Dataproc :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_5/DE_Zoomcamp_Week_5_files/figure-html/c072b33b-235b-469a-a2f4-cdf17817ba02.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">dataproc_bucket_BQ.PNG</figcaption><p></p>
</figure>
</div>
<p>and modify the <code>06_spark_sql_big_query.py</code> file to reference this Dataproc bucket :</p>
<p><code>06_spark_sql_big_query.py</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb194" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb194-1"><span class="co" style="color: #5E5E5E;">#!/usr/bin/env python</span></span>
<span id="cb194-2"><span class="co" style="color: #5E5E5E;"># coding: utf-8</span></span>
<span id="cb194-3"></span>
<span id="cb194-4"><span class="im" style="color: #00769E;">import</span> argparse</span>
<span id="cb194-5"></span>
<span id="cb194-6"><span class="im" style="color: #00769E;">import</span> pyspark</span>
<span id="cb194-7"><span class="im" style="color: #00769E;">from</span> pyspark.sql <span class="im" style="color: #00769E;">import</span> SparkSession</span>
<span id="cb194-8"><span class="im" style="color: #00769E;">from</span> pyspark.sql <span class="im" style="color: #00769E;">import</span> functions <span class="im" style="color: #00769E;">as</span> F</span>
<span id="cb194-9"></span>
<span id="cb194-10"></span>
<span id="cb194-11">parser <span class="op" style="color: #5E5E5E;">=</span> argparse.ArgumentParser()</span>
<span id="cb194-12"></span>
<span id="cb194-13">parser.add_argument(<span class="st" style="color: #20794D;">'--input_green'</span>, required<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb194-14">parser.add_argument(<span class="st" style="color: #20794D;">'--input_yellow'</span>, required<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb194-15">parser.add_argument(<span class="st" style="color: #20794D;">'--output'</span>, required<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb194-16"></span>
<span id="cb194-17">args <span class="op" style="color: #5E5E5E;">=</span> parser.parse_args()</span>
<span id="cb194-18"></span>
<span id="cb194-19">input_green <span class="op" style="color: #5E5E5E;">=</span> args.input_green</span>
<span id="cb194-20">input_yellow <span class="op" style="color: #5E5E5E;">=</span> args.input_yellow</span>
<span id="cb194-21">output <span class="op" style="color: #5E5E5E;">=</span> args.output</span>
<span id="cb194-22"></span>
<span id="cb194-23"></span>
<span id="cb194-24">spark <span class="op" style="color: #5E5E5E;">=</span> SparkSession.builder <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb194-25">    .appName(<span class="st" style="color: #20794D;">'test'</span>) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb194-26">    .getOrCreate()</span>
<span id="cb194-27"></span>
<span id="cb194-28"><span class="co" style="color: #5E5E5E;"># First modification.</span></span>
<span id="cb194-29"><span class="co" style="color: #5E5E5E;"># Use the Cloud Storage bucket for temporary BigQuery export data used</span></span>
<span id="cb194-30"><span class="co" style="color: #5E5E5E;"># by the connector.</span></span>
<span id="cb194-31">bucket <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"dataproc-temp-europe-central2-684134901955-awcbvroo"</span></span>
<span id="cb194-32">spark.conf.<span class="bu" style="color: null;">set</span>(<span class="st" style="color: #20794D;">'temporaryGcsBucket'</span>, bucket)</span>
<span id="cb194-33"></span>
<span id="cb194-34">df_green <span class="op" style="color: #5E5E5E;">=</span> spark.read.parquet(input_green)</span>
<span id="cb194-35"></span>
<span id="cb194-36">df_green <span class="op" style="color: #5E5E5E;">=</span> df_green <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb194-37">    .withColumnRenamed(<span class="st" style="color: #20794D;">'lpep_pickup_datetime'</span>, <span class="st" style="color: #20794D;">'pickup_datetime'</span>) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb194-38">    .withColumnRenamed(<span class="st" style="color: #20794D;">'lpep_dropoff_datetime'</span>, <span class="st" style="color: #20794D;">'dropoff_datetime'</span>)</span>
<span id="cb194-39"></span>
<span id="cb194-40">df_yellow <span class="op" style="color: #5E5E5E;">=</span> spark.read.parquet(input_yellow)</span>
<span id="cb194-41"></span>
<span id="cb194-42"></span>
<span id="cb194-43">df_yellow <span class="op" style="color: #5E5E5E;">=</span> df_yellow <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb194-44">    .withColumnRenamed(<span class="st" style="color: #20794D;">'tpep_pickup_datetime'</span>, <span class="st" style="color: #20794D;">'pickup_datetime'</span>) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb194-45">    .withColumnRenamed(<span class="st" style="color: #20794D;">'tpep_dropoff_datetime'</span>, <span class="st" style="color: #20794D;">'dropoff_datetime'</span>)</span>
<span id="cb194-46"></span>
<span id="cb194-47"></span>
<span id="cb194-48">common_colums <span class="op" style="color: #5E5E5E;">=</span> [</span>
<span id="cb194-49">    <span class="st" style="color: #20794D;">'VendorID'</span>,</span>
<span id="cb194-50">    <span class="st" style="color: #20794D;">'pickup_datetime'</span>,</span>
<span id="cb194-51">    <span class="st" style="color: #20794D;">'dropoff_datetime'</span>,</span>
<span id="cb194-52">    <span class="st" style="color: #20794D;">'store_and_fwd_flag'</span>,</span>
<span id="cb194-53">    <span class="st" style="color: #20794D;">'RatecodeID'</span>,</span>
<span id="cb194-54">    <span class="st" style="color: #20794D;">'PULocationID'</span>,</span>
<span id="cb194-55">    <span class="st" style="color: #20794D;">'DOLocationID'</span>,</span>
<span id="cb194-56">    <span class="st" style="color: #20794D;">'passenger_count'</span>,</span>
<span id="cb194-57">    <span class="st" style="color: #20794D;">'trip_distance'</span>,</span>
<span id="cb194-58">    <span class="st" style="color: #20794D;">'fare_amount'</span>,</span>
<span id="cb194-59">    <span class="st" style="color: #20794D;">'extra'</span>,</span>
<span id="cb194-60">    <span class="st" style="color: #20794D;">'mta_tax'</span>,</span>
<span id="cb194-61">    <span class="st" style="color: #20794D;">'tip_amount'</span>,</span>
<span id="cb194-62">    <span class="st" style="color: #20794D;">'tolls_amount'</span>,</span>
<span id="cb194-63">    <span class="st" style="color: #20794D;">'improvement_surcharge'</span>,</span>
<span id="cb194-64">    <span class="st" style="color: #20794D;">'total_amount'</span>,</span>
<span id="cb194-65">    <span class="st" style="color: #20794D;">'payment_type'</span>,</span>
<span id="cb194-66">    <span class="st" style="color: #20794D;">'congestion_surcharge'</span></span>
<span id="cb194-67">]</span>
<span id="cb194-68"></span>
<span id="cb194-69"></span>
<span id="cb194-70"></span>
<span id="cb194-71">df_green_sel <span class="op" style="color: #5E5E5E;">=</span> df_green <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb194-72">    .select(common_colums) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb194-73">    .withColumn(<span class="st" style="color: #20794D;">'service_type'</span>, F.lit(<span class="st" style="color: #20794D;">'green'</span>))</span>
<span id="cb194-74"></span>
<span id="cb194-75">df_yellow_sel <span class="op" style="color: #5E5E5E;">=</span> df_yellow <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb194-76">    .select(common_colums) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb194-77">    .withColumn(<span class="st" style="color: #20794D;">'service_type'</span>, F.lit(<span class="st" style="color: #20794D;">'yellow'</span>))</span>
<span id="cb194-78"></span>
<span id="cb194-79"></span>
<span id="cb194-80">df_trips_data <span class="op" style="color: #5E5E5E;">=</span> df_green_sel.unionAll(df_yellow_sel)</span>
<span id="cb194-81"></span>
<span id="cb194-82">df_trips_data.registerTempTable(<span class="st" style="color: #20794D;">'trips_data'</span>)</span>
<span id="cb194-83"></span>
<span id="cb194-84"></span>
<span id="cb194-85">df_result <span class="op" style="color: #5E5E5E;">=</span> spark.sql(<span class="st" style="color: #20794D;">"""</span></span>
<span id="cb194-86"><span class="st" style="color: #20794D;">SELECT</span></span>
<span id="cb194-87"><span class="st" style="color: #20794D;">    -- Revenue grouping</span></span>
<span id="cb194-88"><span class="st" style="color: #20794D;">    PULocationID AS revenue_zone,</span></span>
<span id="cb194-89"><span class="st" style="color: #20794D;">    date_trunc('month', pickup_datetime) AS revenue_month,</span></span>
<span id="cb194-90"><span class="st" style="color: #20794D;">    service_type,</span></span>
<span id="cb194-91"></span>
<span id="cb194-92"><span class="st" style="color: #20794D;">    -- Revenue calculation</span></span>
<span id="cb194-93"><span class="st" style="color: #20794D;">    SUM(fare_amount) AS revenue_monthly_fare,</span></span>
<span id="cb194-94"><span class="st" style="color: #20794D;">    SUM(extra) AS revenue_monthly_extra,</span></span>
<span id="cb194-95"><span class="st" style="color: #20794D;">    SUM(mta_tax) AS revenue_monthly_mta_tax,</span></span>
<span id="cb194-96"><span class="st" style="color: #20794D;">    SUM(tip_amount) AS revenue_monthly_tip_amount,</span></span>
<span id="cb194-97"><span class="st" style="color: #20794D;">    SUM(tolls_amount) AS revenue_monthly_tolls_amount,</span></span>
<span id="cb194-98"><span class="st" style="color: #20794D;">    SUM(improvement_surcharge) AS revenue_monthly_improvement_surcharge,</span></span>
<span id="cb194-99"><span class="st" style="color: #20794D;">    SUM(total_amount) AS revenue_monthly_total_amount,</span></span>
<span id="cb194-100"><span class="st" style="color: #20794D;">    SUM(congestion_surcharge) AS revenue_monthly_congestion_surcharge,</span></span>
<span id="cb194-101"></span>
<span id="cb194-102"><span class="st" style="color: #20794D;">    -- Additional calculations</span></span>
<span id="cb194-103"><span class="st" style="color: #20794D;">    AVG(passenger_count) AS avg_montly_passenger_count,</span></span>
<span id="cb194-104"><span class="st" style="color: #20794D;">    AVG(trip_distance) AS avg_montly_trip_distance</span></span>
<span id="cb194-105"><span class="st" style="color: #20794D;">FROM</span></span>
<span id="cb194-106"><span class="st" style="color: #20794D;">    trips_data</span></span>
<span id="cb194-107"><span class="st" style="color: #20794D;">GROUP BY</span></span>
<span id="cb194-108"><span class="st" style="color: #20794D;">    1, 2, 3</span></span>
<span id="cb194-109"><span class="st" style="color: #20794D;">"""</span>)</span>
<span id="cb194-110"></span>
<span id="cb194-111"><span class="co" style="color: #5E5E5E;"># Second modification.</span></span>
<span id="cb194-112"><span class="co" style="color: #5E5E5E;"># Saving the data to BigQuery</span></span>
<span id="cb194-113">df_result.write.<span class="bu" style="color: null;">format</span>(<span class="st" style="color: #20794D;">'bigquery'</span>) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb194-114">    .option(<span class="st" style="color: #20794D;">'table'</span>, output) <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb194-115">    .save()</span></code></pre></div>
</div>
<p>Upload this script to our data bucket from the command line using :</p>
<pre><code>gsutil cp 06_spark_sql_big_query.py gs://dtc_data_lake_taxi-rides-ny-137/code/06_spark_sql_big_query.py  </code></pre>
<p>he BigQuery schema we already have is trips_data_all.</p>
<p>So, we slightly modify the script created previously to create the report in BigQuery by indicating the schema name for the report:</p>
<p><code>--output=trips_data_all.reports-2020</code></p>
<p>We also need to specify the connector jar :</p>
<p><code>--jars=gs://spark-lib/bigquery/spark-bigquery-latest_2.12.jar</code></p>
<p>And run the following from the command line :</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb196" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb196-1">gcloud dataproc jobs submit pyspark <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb196-2">    <span class="op" style="color: #5E5E5E;">--</span>cluster<span class="op" style="color: #5E5E5E;">=</span>de<span class="op" style="color: #5E5E5E;">-</span>zoomcamp<span class="op" style="color: #5E5E5E;">-</span>cluster <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb196-3">    <span class="op" style="color: #5E5E5E;">--</span>region<span class="op" style="color: #5E5E5E;">=</span>europe<span class="op" style="color: #5E5E5E;">-</span>central2 <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb196-4">    <span class="op" style="color: #5E5E5E;">--</span>jars<span class="op" style="color: #5E5E5E;">=</span>gs:<span class="op" style="color: #5E5E5E;">//</span>spark<span class="op" style="color: #5E5E5E;">-</span>lib<span class="op" style="color: #5E5E5E;">/</span>bigquery<span class="op" style="color: #5E5E5E;">/</span>spark<span class="op" style="color: #5E5E5E;">-</span>bigquery<span class="op" style="color: #5E5E5E;">-</span>latest_2<span class="fl" style="color: #AD0000;">.12</span>.jar <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb196-5">    gs:<span class="op" style="color: #5E5E5E;">//</span>dtc_data_lake_taxi<span class="op" style="color: #5E5E5E;">-</span>rides<span class="op" style="color: #5E5E5E;">-</span>ny<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">137</span><span class="op" style="color: #5E5E5E;">/</span>code<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">0</span><span class="er" style="color: #AD0000;">6_spark_sql_big_query</span>.py <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb196-6">    <span class="op" style="color: #5E5E5E;">--</span> <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb196-7">        <span class="op" style="color: #5E5E5E;">--</span>input_green<span class="op" style="color: #5E5E5E;">=</span>gs:<span class="op" style="color: #5E5E5E;">//</span>dtc_data_lake_taxi<span class="op" style="color: #5E5E5E;">-</span>rides<span class="op" style="color: #5E5E5E;">-</span>ny<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">137</span><span class="op" style="color: #5E5E5E;">/</span>pq<span class="op" style="color: #5E5E5E;">/</span>green<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2020</span><span class="op" style="color: #5E5E5E;">/*/</span> <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb196-8">        <span class="op" style="color: #5E5E5E;">--</span>input_yellow<span class="op" style="color: #5E5E5E;">=</span>gs:<span class="op" style="color: #5E5E5E;">//</span>dtc_data_lake_taxi<span class="op" style="color: #5E5E5E;">-</span>rides<span class="op" style="color: #5E5E5E;">-</span>ny<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">137</span><span class="op" style="color: #5E5E5E;">/</span>pq<span class="op" style="color: #5E5E5E;">/</span>yellow<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2020</span><span class="op" style="color: #5E5E5E;">/*/</span> <span class="op" style="color: #5E5E5E;">\</span></span>
<span id="cb196-9">        <span class="op" style="color: #5E5E5E;">--</span>output<span class="op" style="color: #5E5E5E;">=</span>trips_data_all.reports<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">2020</span></span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_5/DE_Zoomcamp_Week_5_files/figure-html/d8823858-eb2d-48f0-9e56-e208640d682d.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">gcloud_BQ.PNG</figcaption><p></p>
</figure>
</div>
<p>That seems to have run successfully. Let’s check BigQuery :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_5/DE_Zoomcamp_Week_5_files/figure-html/fae24962-07f7-46ba-93ba-2b220ad34e98.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">gcloud_cluster_BQ_reports_2020.PNG</figcaption><p></p>
</figure>
</div>
<p>Our table has been created and we can see the first 10 rows.</p>


</section>

 ]]></description>
  <category>Spark</category>
  <category>Dataproc</category>
  <category>BigQuery</category>
  <category>DataTalksClub</category>
  <guid>https://stephen137.github.io/posts/DE_Zoomcamp_Week_5/DE_Zoomcamp_Week_5.html</guid>
  <pubDate>Sun, 02 Apr 2023 22:00:00 GMT</pubDate>
  <media:content url="https://stephen137.github.io/posts/DE_Zoomcamp_Week_5/batch_processing.PNG" medium="image"/>
</item>
<item>
  <title>Data Engineering Zoomcamp - Week 4</title>
  <dc:creator>Stephen Barrie</dc:creator>
  <link>https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4.html</link>
  <description><![CDATA[ 




<section id="week-4---analytics-engineering" class="level2">
<h2 class="anchored" data-anchor-id="week-4---analytics-engineering">Week 4 - Analytics Engineering</h2>
<p>Goal: Transforming the data previously loaded in to our data warehouse (in my case BigQuery) by building models using a <a href="https://github.com/DataTalksClub/data-engineering-zoomcamp/blob/main/week_4_analytics_engineering/taxi_rides_ny/README.md">dbt project</a>, testing and deploying those models in a production environment, before finally visualizing the data in Looker.</p>
<p>Note that I have already ingested the prerequisite datasets to Google Cloud Storage using the <a href="https://www.prefect.io/">Prefect</a> work orchestration solution, and have created the following external tables in BigQuery:</p>
<ul>
<li><p>Yellow trip data (109,047,518 rows) <img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/37072954-6175-4aeb-b15d-44db33da91c9.PNG" class="img-fluid" alt="yellow_trip_data.PNG"></p></li>
<li><p>fhv trip data (43,244,696) <img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/adaa502c-e8d6-43c8-bd1c-21dd41149a42.PNG" class="img-fluid" alt="fhv_trip_data.PNG"></p></li>
<li><p>Green trip data (7,778,101 rows) <img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/cb73b94b-a7eb-440d-8100-4cb06bfbdfc8.PNG" class="img-fluid" alt="green_trip_data.PNG"></p></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/3ace9e5b-b482-44c0-ab33-eaf8cef0228a.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">week_4.JPG</figcaption><p></p>
</figure>
</div>
<section id="analytics-engineering-basics" class="level3">
<h3 class="anchored" data-anchor-id="analytics-engineering-basics">4.1.1 Analytics Engineering Basics</h3>
<section id="what-is-analytics-engineering" class="level4">
<h4 class="anchored" data-anchor-id="what-is-analytics-engineering">What is Analytics Engineering ?</h4>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/b5371c91-2d1d-4e51-83a1-bbd40a852819.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">data_team_roles.PNG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/cf600eff-4089-4708-a3bc-afda73970197.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">tooling.PNG</figcaption><p></p>
</figure>
</div>
</section>
<section id="data-modeling-concepts" class="level4">
<h4 class="anchored" data-anchor-id="data-modeling-concepts">Data Modeling Concepts</h4>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/c7953f75-d4c6-4648-9f31-1211d4833565.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">elt_etl.PNG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/148f708b-1d74-4038-982b-aaee4ce91d03.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">kimball.PNG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/823ffca9-47c7-4c1e-b9af-e1b7465d82b8.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">elements_dimensional_modelling.PNG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/93bfcdd8-f4e9-49f1-a59b-7ab0484c1050.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">architect_dimension_modeling.PNG</figcaption><p></p>
</figure>
</div>
</section>
</section>
<section id="what-is-dbt" class="level3">
<h3 class="anchored" data-anchor-id="what-is-dbt">4.1.2 What is dbt ?</h3>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/77794918-2902-4f20-be56-5d554e42a149.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">what_is_dbt.PNG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/d98e022d-d296-4282-8371-21c24632ecd9.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">how_does_dbt_work.PNG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/153b1441-a97d-4ce6-9870-629b34ccda6c.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">how_to_use_dbt.PNG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/cc5cc6f4-de2f-4129-96d6-6653ca23469c.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">how_are_we_going_to_use_dbt.PNG</figcaption><p></p>
</figure>
</div>
</section>
<section id="how-to-set-up-dbt-for-using-bigquery" class="level3">
<h3 class="anchored" data-anchor-id="how-to-set-up-dbt-for-using-bigquery">How to set up dbt for using BigQuery</h3>
<p><a href="https://docs.getdbt.com/tutorial/setting-up">Official documentation</a></p>
<section id="create-a-bigquery-service-account" class="level4">
<h4 class="anchored" data-anchor-id="create-a-bigquery-service-account">Create a BigQuery service account</h4>
<p>In order to connect we need the service account JSON file generated from bigquery:</p>
<ol type="1">
<li>Open the <a href="https://console.cloud.google.com/apis/credentials/wizard">BigQuery credential wizard</a> to create a service account in your taxi project</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/09e95e7a-6cd7-4f0e-b0dc-60244f638131.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">dbt_bq_1.PNG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/6edfbce1-c0c4-4a0f-a68a-5232ed41762f.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">dbt_bq_2.PNG</figcaption><p></p>
</figure>
</div>
<ol start="2" type="1">
<li>You can either grant the specific roles the account will need or simply use bq admin, as you’ll be the sole user of both accounts and data.</li>
</ol>
<p><em>Note: if you decide to use specific roles instead of BQ Admin, some users reported that they needed to add also viewer role to avoid encountering denied access errors</em></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/d89b8144-665e-49e0-9ee2-b1d5111edde8.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">dbt_bq_3.PNG</figcaption><p></p>
</figure>
</div>
<ol start="3" type="1">
<li>Now that the service account has been created we need to add and download a JSON key, go to the keys section, navigate to <code>ADD KEY</code> then select <code>Create new key</code> from the dropdown. Select key type JSON and once you click on create it will get inmediately downloaded for you to use.</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/4e70441a-5943-4d11-ac51-a7fa5a0c0849.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">dbt_bq_4.PNG</figcaption><p></p>
</figure>
</div>
</section>
</section>
<section id="create-a-dbt-cloud-project" class="level3">
<h3 class="anchored" data-anchor-id="create-a-dbt-cloud-project">Create a dbt cloud project</h3>
<ol type="1">
<li>Create a dbt cloud account from <a href="https://www.getdbt.com/pricing/">their website</a> (free for solo developers)</li>
<li>Once you have logged in into dbt cloud you will be prompted to create a new project</li>
</ol>
<p>We are going to need:</p>
<ul>
<li>access to our data warehouse (BigQuery - set up in weeks 2 and 3)</li>
<li>admin access to our repo, where we will have the dbt project</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/eb6d2702-d4e5-4a41-8b3d-ec5e5194031c.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">project_setup.PNG</figcaption><p></p>
</figure>
</div>
<ol start="3" type="1">
<li><p>Name our project</p></li>
<li><p>Choose BigQuery as our data warehouse:</p></li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/b780785f-348c-4c25-88aa-813e2e0f7d00.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">dbase_connection.PNG</figcaption><p></p>
</figure>
</div>
<ol start="5" type="1">
<li>Upload the key you downloaded from BQ on the create from file option. This will fill out most fields related to the production credentials. Scroll down to the end of the page and set up your development credentials.</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/fd1ab2d5-e34a-4f7e-ba51-4ae426b587cc.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">dbt_bq_5.PNG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/0887af15-4358-41b1-afaf-dd4f72c0b4e1.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">dbt_bq_6.PNG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/b0b5ae3c-24c0-42aa-90c1-29d39e501b4d.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">dbt_test.PNG</figcaption><p></p>
</figure>
</div>
</section>
<section id="add-github-repository" class="level3">
<h3 class="anchored" data-anchor-id="add-github-repository">Add GitHub repository</h3>
<p>Note: This step could be skipped by using a managed repository if you don’t have your own GitHub repo for the course.</p>
<ol type="1">
<li>Select git clone and paste the SSH key from your repo.</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/577b74fc-87c6-4c0c-b42c-99b7108fd697.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">github_repo.PNG</figcaption><p></p>
</figure>
</div>
<ol start="2" type="1">
<li>You will get a deploy key, head to your GH repo and go to the settings tab. Under security you’ll find the menu <em>deploy keys</em>. Click on <code>Add deploy key</code> and paste the deploy key provided by dbt cloud. Make sure to tick on “write access”.</li>
</ol>
</section>
<section id="review-your-project-settings" class="level3">
<h3 class="anchored" data-anchor-id="review-your-project-settings">Review your project settings</h3>
<p>At the end, if you go to your projects it should look some like this:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/b043d527-a8e1-4bd2-a86c-0eb1bdcf6605.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">dbt_project.PNG</figcaption><p></p>
</figure>
</div>
</section>
<section id="start-your-dbt-project-bigquery-and-dbt-cloud" class="level3">
<h3 class="anchored" data-anchor-id="start-your-dbt-project-bigquery-and-dbt-cloud">4.2.1 Start Your dbt Project: BigQuery and dbt Cloud</h3>
<p>You’ll notice after initializing your project that the main branch will be read-only. This is because any changes to code cannot and should not be made directly in the base branch. A new branch must be created in the dbt Cloud IDE in order to make any changes to your project.</p>
<p>You can perform git tasks (such as create a new branch) with the <code>Commit and Sync</code> button. Once you commit the initial “changes” even though you haven’t made any changes because it’s read only! you can then create a new branch from the same place, and make edits within that branch.</p>
<p>Once you have created the new branch - edit the <code>dbt_project_yaml</code> to as per below and save the file:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/ca789475-2997-4795-8973-6b22b76dbbcf.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">dbt_yaml.PNG</figcaption><p></p>
</figure>
</div>
</section>
<section id="build-the-first-dbt-models" class="level3">
<h3 class="anchored" data-anchor-id="build-the-first-dbt-models">4.3.1 Build the First dbt Models</h3>
<section id="anatomy-of-a-dbt-model-written-code-vs-compiled-sources" class="level4">
<h4 class="anchored" data-anchor-id="anatomy-of-a-dbt-model-written-code-vs-compiled-sources">Anatomy of a dbt model: written code vs compiled sources</h4>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/ca30e80a-cca5-4cbc-916d-17292195ee18.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">dbt_model_anatomy.PNG</figcaption><p></p>
</figure>
</div>
</section>
<section id="sources-seeds-and-ref" class="level4">
<h4 class="anchored" data-anchor-id="sources-seeds-and-ref">Sources, seeds and ref</h4>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/7630b65d-b815-4974-8c7b-d558d069fbe6.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">dbt_model_FROM_clause.PNG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/b3357e81-d884-454f-8975-bb519e5f0ac1.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">dbt_model_FROM_clause_ref.PNG</figcaption><p></p>
</figure>
</div>
<p>Let’s now go back to our dbt IDE and create two new directories for the models we will be creating:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/7ef7d7a6-c19e-4705-89d9-bce7bf6cc204.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">models_directories.PNG</figcaption><p></p>
</figure>
</div>
<p>The first directory <code>Staging</code> will be used for our raw data. Let’s create a <code>schema.yml</code> file to use the <code>source</code> macro to resolve the correct schema, build the correct dependencies, and generate the lineage automatically:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/190d268e-438a-496b-9b25-2686d4c67aaf.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">staging_schema_yml.PNG</figcaption><p></p>
</figure>
</div>
<p>Now let’s create a sql file :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/b4b36f3a-1d6e-4031-b2a1-ba10873275f5.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">staging_green_sql.PNG</figcaption><p></p>
</figure>
</div>
<p>We can run this model using one of the following commands within the dbt terminal:</p>
<pre><code>dbt run  # Builds models in your target database.
dbt run -m stg_green_tripdata.sql
dbt run --select stg_green_tripdata  # Builds a specific model.
dbt run --select stg_green_tripdata+  # Builds a specific model and its children.
dbt run --select +stg_green_tripdata  # Builds a specific model and its ancestors.
dbt run --select +stg_green_tripdata+  # Builds a specific model and its children and ancestors.</code></pre>
<p>Let’s go with :</p>
<pre><code>dbt run -m stg_green_tripdata.sql</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/cdb9b0c1-bd31-4ce4-aed0-1dd114bf5b3e.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">model_run_error_region.PNG</figcaption><p></p>
</figure>
</div>
<p>I ran into an error because of inconsistent regions. The data buckets and BigQuery tables have to be configured to the same region. I reconfigured my staging table to <code>Central Europe 2</code> to be consistent with my data bucket and the model ran successfully!</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/cf71db17-d1e0-4636-8926-12492e5826c8.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">dbt_green_tripdata_modelrun.PNG</figcaption><p></p>
</figure>
</div>
<p>If we now head to <code>BigQuery</code> we can see that our sql table has been created :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/df13f474-cf86-46c5-bc1f-25afc949f4e7.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">BQ_stg_green_tripdata.PNG</figcaption><p></p>
</figure>
</div>
</section>
<section id="macros" class="level4">
<h4 class="anchored" data-anchor-id="macros">Macros</h4>
<p><a href="https://docs.getdbt.com/docs/build/jinja-macros#macros">Macros</a> in Jinja are pieces of code that can be reused multiple times – they are analogous to “functions” in other programming languages, and are extremely useful if you find yourself repeating code across multiple models. Macros are defined in <code>.sql</code> files, typically in your <code>macros</code> directory <a href="https://docs.getdbt.com/reference/project-configs/macro-paths">(docs)</a>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/b30a4c48-fe8f-4d94-bbda-c811ca7ad478.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">macros.PNG</figcaption><p></p>
</figure>
</div>
<p>Let’s now create a macros file for our project :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/d2e685e5-b007-44e8-a6fa-41a768b4abaa.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">get_payment_type_macro.PNG</figcaption><p></p>
</figure>
</div>
<p>And let’s add that macro to our <code>stg_green_tripdata.sql</code> file :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/080cdaae-c330-4a2a-b01b-0795648f863b.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">staging_green_sql_updated.PNG</figcaption><p></p>
</figure>
</div>
<p>And run the model once again using the following command within the dbt terminal:</p>
<pre><code>dbt run --select stg_green_tripdata    </code></pre>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="dv" style="color: #AD0000;">0</span><span class="er" style="color: #AD0000;">9</span>:<span class="dv" style="color: #AD0000;">0</span><span class="er" style="color: #AD0000;">9</span>:<span class="dv" style="color: #AD0000;">43</span>  Began running node model.taxi_rides_ny.stg_green_tripdata</span>
<span id="cb4-2"><span class="dv" style="color: #AD0000;">0</span><span class="er" style="color: #AD0000;">9</span>:<span class="dv" style="color: #AD0000;">0</span><span class="er" style="color: #AD0000;">9</span>:<span class="dv" style="color: #AD0000;">43</span>  <span class="dv" style="color: #AD0000;">1</span> of <span class="dv" style="color: #AD0000;">1</span> START sql view model dbt_stephen_barrie.stg_green_tripdata .............. [RUN]</span>
<span id="cb4-3"><span class="dv" style="color: #AD0000;">0</span><span class="er" style="color: #AD0000;">9</span>:<span class="dv" style="color: #AD0000;">0</span><span class="er" style="color: #AD0000;">9</span>:<span class="dv" style="color: #AD0000;">43</span>  Acquiring new bigquery connection <span class="st" style="color: #20794D;">'model.taxi_rides_ny.stg_green_tripdata'</span></span>
<span id="cb4-4"><span class="dv" style="color: #AD0000;">0</span><span class="er" style="color: #AD0000;">9</span>:<span class="dv" style="color: #AD0000;">0</span><span class="er" style="color: #AD0000;">9</span>:<span class="dv" style="color: #AD0000;">43</span>  Began compiling node model.taxi_rides_ny.stg_green_tripdata</span>
<span id="cb4-5"><span class="dv" style="color: #AD0000;">0</span><span class="er" style="color: #AD0000;">9</span>:<span class="dv" style="color: #AD0000;">0</span><span class="er" style="color: #AD0000;">9</span>:<span class="dv" style="color: #AD0000;">43</span>  Writing injected SQL <span class="cf" style="color: #003B4F;">for</span> node <span class="st" style="color: #20794D;">"model.taxi_rides_ny.stg_green_tripdata"</span></span>
<span id="cb4-6"><span class="dv" style="color: #AD0000;">0</span><span class="er" style="color: #AD0000;">9</span>:<span class="dv" style="color: #AD0000;">0</span><span class="er" style="color: #AD0000;">9</span>:<span class="dv" style="color: #AD0000;">43</span>  Timing info <span class="cf" style="color: #003B4F;">for</span> model.taxi_rides_ny.stg_green_tripdata (<span class="bu" style="color: null;">compile</span>): <span class="dv" style="color: #AD0000;">2023</span><span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">0</span><span class="er" style="color: #AD0000;">3</span><span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">27</span> <span class="dv" style="color: #AD0000;">0</span><span class="er" style="color: #AD0000;">9</span>:<span class="dv" style="color: #AD0000;">0</span><span class="er" style="color: #AD0000;">9</span>:<span class="fl" style="color: #AD0000;">43.922045</span> <span class="op" style="color: #5E5E5E;">=&gt;</span> <span class="dv" style="color: #AD0000;">2023</span><span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">0</span><span class="er" style="color: #AD0000;">3</span><span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">27</span> <span class="dv" style="color: #AD0000;">0</span><span class="er" style="color: #AD0000;">9</span>:<span class="dv" style="color: #AD0000;">0</span><span class="er" style="color: #AD0000;">9</span>:<span class="fl" style="color: #AD0000;">43.940627</span></span>
<span id="cb4-7"><span class="dv" style="color: #AD0000;">0</span><span class="er" style="color: #AD0000;">9</span>:<span class="dv" style="color: #AD0000;">0</span><span class="er" style="color: #AD0000;">9</span>:<span class="dv" style="color: #AD0000;">43</span>  Began executing node model.taxi_rides_ny.stg_green_tripdata</span>
<span id="cb4-8"><span class="dv" style="color: #AD0000;">0</span><span class="er" style="color: #AD0000;">9</span>:<span class="dv" style="color: #AD0000;">0</span><span class="er" style="color: #AD0000;">9</span>:<span class="dv" style="color: #AD0000;">43</span>  Writing runtime sql <span class="cf" style="color: #003B4F;">for</span> node <span class="st" style="color: #20794D;">"model.taxi_rides_ny.stg_green_tripdata"</span></span>
<span id="cb4-9"><span class="dv" style="color: #AD0000;">0</span><span class="er" style="color: #AD0000;">9</span>:<span class="dv" style="color: #AD0000;">0</span><span class="er" style="color: #AD0000;">9</span>:<span class="dv" style="color: #AD0000;">43</span>  Opening a new connection, currently <span class="kw" style="color: #003B4F;">in</span> state closed</span>
<span id="cb4-10"><span class="dv" style="color: #AD0000;">0</span><span class="er" style="color: #AD0000;">9</span>:<span class="dv" style="color: #AD0000;">0</span><span class="er" style="color: #AD0000;">9</span>:<span class="dv" style="color: #AD0000;">43</span>  On model.taxi_rides_ny.stg_green_tripdata: <span class="op" style="color: #5E5E5E;">/*</span> {<span class="st" style="color: #20794D;">"app"</span>: <span class="st" style="color: #20794D;">"dbt"</span>, <span class="st" style="color: #20794D;">"dbt_version"</span>: <span class="st" style="color: #20794D;">"1.4.5"</span>, <span class="st" style="color: #20794D;">"profile_name"</span>: <span class="st" style="color: #20794D;">"user"</span>, <span class="st" style="color: #20794D;">"target_name"</span>: <span class="st" style="color: #20794D;">"default"</span>, <span class="st" style="color: #20794D;">"node_id"</span>: <span class="st" style="color: #20794D;">"model.taxi_rides_ny.stg_green_tripdata"</span>} <span class="op" style="color: #5E5E5E;">*/</span></span>
<span id="cb4-11"></span>
<span id="cb4-12"></span>
<span id="cb4-13">  create <span class="kw" style="color: #003B4F;">or</span> replace view `taxi<span class="op" style="color: #5E5E5E;">-</span>rides<span class="op" style="color: #5E5E5E;">-</span>ny<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">137</span>`.`dbt_stephen_barrie`.`stg_green_tripdata`</span>
<span id="cb4-14">  OPTIONS()</span>
<span id="cb4-15">  <span class="im" style="color: #00769E;">as</span> </span>
<span id="cb4-16"></span>
<span id="cb4-17">select</span>
<span id="cb4-18">    <span class="op" style="color: #5E5E5E;">--</span> identifiers</span>
<span id="cb4-19">    cast(vendorid <span class="im" style="color: #00769E;">as</span> integer) <span class="im" style="color: #00769E;">as</span> vendorid,</span>
<span id="cb4-20">    cast(ratecodeid <span class="im" style="color: #00769E;">as</span> integer) <span class="im" style="color: #00769E;">as</span> ratecodeid,</span>
<span id="cb4-21">    cast(pulocationid <span class="im" style="color: #00769E;">as</span> integer) <span class="im" style="color: #00769E;">as</span>  pickup_locationid,</span>
<span id="cb4-22">    cast(dolocationid <span class="im" style="color: #00769E;">as</span> integer) <span class="im" style="color: #00769E;">as</span> dropoff_locationid,</span>
<span id="cb4-23"></span>
<span id="cb4-24">    <span class="op" style="color: #5E5E5E;">--</span> timestamps</span>
<span id="cb4-25">    cast(lpep_pickup_datetime <span class="im" style="color: #00769E;">as</span> timestamp) <span class="im" style="color: #00769E;">as</span> pickup_datetime,</span>
<span id="cb4-26">    cast(lpep_dropoff_datetime <span class="im" style="color: #00769E;">as</span> timestamp) <span class="im" style="color: #00769E;">as</span> dropoff_datetime,</span>
<span id="cb4-27"></span>
<span id="cb4-28">    <span class="op" style="color: #5E5E5E;">--</span> trip info</span>
<span id="cb4-29">    store_and_fwd_flag,</span>
<span id="cb4-30">    cast(passenger_count <span class="im" style="color: #00769E;">as</span> integer) <span class="im" style="color: #00769E;">as</span> passenger_count,</span>
<span id="cb4-31">    cast(trip_distance <span class="im" style="color: #00769E;">as</span> numeric) <span class="im" style="color: #00769E;">as</span> trip_distance,</span>
<span id="cb4-32">    cast(trip_type <span class="im" style="color: #00769E;">as</span> integer) <span class="im" style="color: #00769E;">as</span> trip_type,</span>
<span id="cb4-33"></span>
<span id="cb4-34">    <span class="op" style="color: #5E5E5E;">--</span> payment info</span>
<span id="cb4-35">    cast(fare_amount <span class="im" style="color: #00769E;">as</span> numeric) <span class="im" style="color: #00769E;">as</span> fare_amount,</span>
<span id="cb4-36">    cast(extra <span class="im" style="color: #00769E;">as</span> numeric) <span class="im" style="color: #00769E;">as</span> extra,</span>
<span id="cb4-37">    cast(mta_tax <span class="im" style="color: #00769E;">as</span> numeric) <span class="im" style="color: #00769E;">as</span> mta_tax,</span>
<span id="cb4-38">    cast(tip_amount <span class="im" style="color: #00769E;">as</span> numeric) <span class="im" style="color: #00769E;">as</span> tip_amount,</span>
<span id="cb4-39">    cast(tolls_amount <span class="im" style="color: #00769E;">as</span> numeric) <span class="im" style="color: #00769E;">as</span> tolls_amount,</span>
<span id="cb4-40">    cast(ehail_fee <span class="im" style="color: #00769E;">as</span> numeric) <span class="im" style="color: #00769E;">as</span> ehail_fee,</span>
<span id="cb4-41">    cast(improvement_surcharge <span class="im" style="color: #00769E;">as</span> numeric) <span class="im" style="color: #00769E;">as</span> improvement_surcharge,</span>
<span id="cb4-42">    cast(total_amount <span class="im" style="color: #00769E;">as</span> numeric) <span class="im" style="color: #00769E;">as</span> total_amount,</span>
<span id="cb4-43">    cast(payment_type <span class="im" style="color: #00769E;">as</span> integer) <span class="im" style="color: #00769E;">as</span> payment_type,</span>
<span id="cb4-44">    <span class="cf" style="color: #003B4F;">case</span> payment_type</span>
<span id="cb4-45">        when <span class="dv" style="color: #AD0000;">1</span> then <span class="st" style="color: #20794D;">'Credit card'</span></span>
<span id="cb4-46">        when <span class="dv" style="color: #AD0000;">2</span> then <span class="st" style="color: #20794D;">'Cash'</span></span>
<span id="cb4-47">        when <span class="dv" style="color: #AD0000;">3</span> then <span class="st" style="color: #20794D;">'No charge'</span></span>
<span id="cb4-48">        when <span class="dv" style="color: #AD0000;">4</span> then <span class="st" style="color: #20794D;">'Dispute'</span></span>
<span id="cb4-49">        when <span class="dv" style="color: #AD0000;">5</span> then <span class="st" style="color: #20794D;">'Unknown'</span></span>
<span id="cb4-50">        when <span class="dv" style="color: #AD0000;">6</span> then <span class="st" style="color: #20794D;">'Voided trip'</span></span>
<span id="cb4-51">    end <span class="im" style="color: #00769E;">as</span> payment_type_description,</span>
<span id="cb4-52">    cast(congestion_surcharge <span class="im" style="color: #00769E;">as</span> numeric) <span class="im" style="color: #00769E;">as</span> congestion_surcharge</span>
<span id="cb4-53"></span>
<span id="cb4-54"><span class="im" style="color: #00769E;">from</span> `taxi<span class="op" style="color: #5E5E5E;">-</span>rides<span class="op" style="color: #5E5E5E;">-</span>ny<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">137</span>`.`trips_data_all`.`green_tripdata`</span>
<span id="cb4-55">limit <span class="dv" style="color: #AD0000;">100</span><span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb4-56"></span>
<span id="cb4-57"></span>
<span id="cb4-58"><span class="dv" style="color: #AD0000;">0</span><span class="er" style="color: #AD0000;">9</span>:<span class="dv" style="color: #AD0000;">0</span><span class="er" style="color: #AD0000;">9</span>:<span class="dv" style="color: #AD0000;">44</span>  BigQuery adapter: https:<span class="op" style="color: #5E5E5E;">//</span>console.cloud.google.com<span class="op" style="color: #5E5E5E;">/</span>bigquery?project<span class="op" style="color: #5E5E5E;">=</span>taxi<span class="op" style="color: #5E5E5E;">-</span>rides<span class="op" style="color: #5E5E5E;">-</span>ny<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">137</span><span class="op" style="color: #5E5E5E;">&amp;</span>j<span class="op" style="color: #5E5E5E;">=</span>bq:europe<span class="op" style="color: #5E5E5E;">-</span>central2:<span class="dv" style="color: #AD0000;">8</span><span class="er" style="color: #AD0000;">ca3c78e</span><span class="op" style="color: #5E5E5E;">-</span>ccc7<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">4992</span><span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">95</span><span class="er" style="color: #AD0000;">bd</span><span class="op" style="color: #5E5E5E;">-</span>bcdb0df40f4e<span class="op" style="color: #5E5E5E;">&amp;</span>page<span class="op" style="color: #5E5E5E;">=</span>queryresults</span>
<span id="cb4-59"><span class="dv" style="color: #AD0000;">0</span><span class="er" style="color: #AD0000;">9</span>:<span class="dv" style="color: #AD0000;">0</span><span class="er" style="color: #AD0000;">9</span>:<span class="dv" style="color: #AD0000;">45</span>  Timing info <span class="cf" style="color: #003B4F;">for</span> model.taxi_rides_ny.stg_green_tripdata (execute): <span class="dv" style="color: #AD0000;">2023</span><span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">0</span><span class="er" style="color: #AD0000;">3</span><span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">27</span> <span class="dv" style="color: #AD0000;">0</span><span class="er" style="color: #AD0000;">9</span>:<span class="dv" style="color: #AD0000;">0</span><span class="er" style="color: #AD0000;">9</span>:<span class="fl" style="color: #AD0000;">43.941082</span> <span class="op" style="color: #5E5E5E;">=&gt;</span> <span class="dv" style="color: #AD0000;">2023</span><span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">0</span><span class="er" style="color: #AD0000;">3</span><span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">27</span> <span class="dv" style="color: #AD0000;">0</span><span class="er" style="color: #AD0000;">9</span>:<span class="dv" style="color: #AD0000;">0</span><span class="er" style="color: #AD0000;">9</span>:<span class="fl" style="color: #AD0000;">45.000530</span></span>
<span id="cb4-60"><span class="dv" style="color: #AD0000;">0</span><span class="er" style="color: #AD0000;">9</span>:<span class="dv" style="color: #AD0000;">0</span><span class="er" style="color: #AD0000;">9</span>:<span class="dv" style="color: #AD0000;">45</span>  Sending event: {<span class="st" style="color: #20794D;">'category'</span>: <span class="st" style="color: #20794D;">'dbt'</span>, <span class="st" style="color: #20794D;">'action'</span>: <span class="st" style="color: #20794D;">'run_model'</span>, <span class="st" style="color: #20794D;">'label'</span>: <span class="st" style="color: #20794D;">'40e82f39-51cb-4467-afa1-3237172c4c5d'</span>, <span class="st" style="color: #20794D;">'context'</span>: [<span class="op" style="color: #5E5E5E;">&lt;</span>snowplow_tracker.self_describing_json.SelfDescribingJson <span class="bu" style="color: null;">object</span> at <span class="bn" style="color: #AD0000;">0x7fb6833835e0</span><span class="op" style="color: #5E5E5E;">&gt;</span>]}</span>
<span id="cb4-61"><span class="dv" style="color: #AD0000;">0</span><span class="er" style="color: #AD0000;">9</span>:<span class="dv" style="color: #AD0000;">0</span><span class="er" style="color: #AD0000;">9</span>:<span class="dv" style="color: #AD0000;">45</span>  <span class="dv" style="color: #AD0000;">1</span> of <span class="dv" style="color: #AD0000;">1</span> OK created sql view model dbt_stephen_barrie.stg_green_tripdata ......... [[<span class="dv" style="color: #AD0000;">32</span><span class="er" style="color: #AD0000;">mCREATE</span> VIEW (<span class="dv" style="color: #AD0000;">0</span> processed)[<span class="dv" style="color: #AD0000;">0</span><span class="er" style="color: #AD0000;">m</span> <span class="kw" style="color: #003B4F;">in</span> <span class="fl" style="color: #AD0000;">1.08</span><span class="er" style="color: #AD0000;">s</span>]</span>
<span id="cb4-62"><span class="dv" style="color: #AD0000;">0</span><span class="er" style="color: #AD0000;">9</span>:<span class="dv" style="color: #AD0000;">0</span><span class="er" style="color: #AD0000;">9</span>:<span class="dv" style="color: #AD0000;">45</span>  Finished running node model.taxi_rides_ny.stg_green_tripdata</span></code></pre></div>
</div>
<p>We can also see the compiled code:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/5b6997cf-8a54-49d2-9348-152313f9d82c.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">compiled_code_stg_green.PNG</figcaption><p></p>
</figure>
</div>
</section>
<section id="packages" class="level4">
<h4 class="anchored" data-anchor-id="packages">Packages</h4>
<p>dbt packages are essentially standalone dbt projects, with models and macros that tackle a specific problem area. As a dbt user, by adding a package to our project, the package’s models and macros will become part of our own project.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/e1dc92d9-bb4d-47ca-a51e-f619a5f8de16.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">packages.PNG</figcaption><p></p>
</figure>
</div>
<p>Let’s create a <code>packages.yaml</code> file to include the following :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/95ef9435-4ea1-4417-8df5-516d71bdb461.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">packages_yml.PNG</figcaption><p></p>
</figure>
</div>
<p>To install this package and download the dependencies run the following command in the dbt terminal:</p>
<pre><code>dbt deps   </code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/bb99a88b-7fd9-4b7f-bad0-0b5d0f1d1107.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">dbt_deps.PNG</figcaption><p></p>
</figure>
</div>
<p>A number of folders and files have now been created:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/eb7a00cd-503f-4c0b-82f5-d0fbf374d589.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">dbt_packages.PNG</figcaption><p></p>
</figure>
</div>
<p>Let’s return to our model and update our <code>stg_green_tripdata.sql</code> file to make use of a macro:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/4cefee22-bfb0-4564-885d-67dd5cd67eee.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">macro_surrogate.PNG</figcaption><p></p>
</figure>
</div>
<p>Now let’s run the command from the dbt IDE :</p>
<pre><code>dbt run --select stg_green_tripdata</code></pre>
<p>And we can see the compiled code extract:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/48e4a1a0-d1e4-44a4-afa6-b840eda51387.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">surrogate_compiled.PNG</figcaption><p></p>
</figure>
</div>
</section>
<section id="variables" class="level4">
<h4 class="anchored" data-anchor-id="variables">Variables</h4>
<p>dbt provides a mechanism, <a href="https://docs.getdbt.com/reference/dbt-jinja-functions/var">variables</a>, to provide data to models for compilation. Variables can be used to <a href="https://github.com/dbt-labs/snowplow/blob/0.3.9/dbt_project.yml#L22">configure timezones</a>, <a href="https://github.com/dbt-labs/quickbooks/blob/v0.1.0/dbt_project.yml#L23">avoid hardcoding table names</a> or otherwise provide data to models to configure how they are compiled.</p>
<p>See <a href="https://docs.getdbt.com/docs/build/project-variables">Project variables</a> for further details.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/d7f17b1d-b638-467f-a20b-6dbfce2271d7.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">variables.PNG</figcaption><p></p>
</figure>
</div>
<p>Let’s now introduce the above <code>is_test_run</code> variable into our <code>stg_green_tripdata.sql</code> file which will allow us to control from the command line whether we execute a <code>test_run</code> with a limit of 100 rows, or a full run, with no limit:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/681543bb-e6d6-4f4c-a83a-44d9b368c417.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">limit_variable.PNG</figcaption><p></p>
</figure>
</div>
<p>And run the model from the IDE first, <code>without</code> specifying our variable function, and so the run will default to <code>True</code> and the limit of 100 rows will be applied :</p>
<pre><code>dbt run --select stg_green_tripdata</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/cd971f17-1a17-4406-bfca-4652be25d63d.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">limit_100.PNG</figcaption><p></p>
</figure>
</div>
<p>But if we run again, this time specifying our variable as <code>False</code> then the 100 row limit will not be applied :</p>
<pre><code>dbt run --select stg_green_tripdata --var 'is_test_run: false'</code></pre>
<p>We can see from our Big Query table that we now have <code>6,835,902</code> rows :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/4e083276-3a37-49e2-8131-1723532c5cc2.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">green_tripdata_BQ_no_limit.PNG</figcaption><p></p>
</figure>
</div>
<p>OK, now that we have built our <code>green_tripdata</code> model let’s replicate these steps for our <code>yellow_tripdata</code> :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/dc319591-d297-496f-ba42-c6526a5a4924.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">staging_yellow.PNG</figcaption><p></p>
</figure>
</div>
<p>Now use <code>dbt run</code> because we have two models:</p>
<pre><code>dbt run --var 'is_test_run: false'</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/460fb15b-068c-4b3b-ba87-2af94566b43b.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">green_and_yellow.PNG</figcaption><p></p>
</figure>
</div>
<p>And if we check Big Query we can see our <code>stg_yellow_tripdata table</code> has been added with `107,991,349 rows:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/3d39debf-0580-40d3-ad5f-568075be1f95.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">yellow_trip_data_BQ.PNG</figcaption><p></p>
</figure>
</div>
</section>
<section id="dbt-seeds" class="level4">
<h4 class="anchored" data-anchor-id="dbt-seeds">dbt Seeds</h4>
<p>Seeds are CSV files in your dbt project (typically in your <code>seeds</code> directory), that dbt can load into your data warehouse using the <code>dbt seed</code> command. Typically these are small files that contain data that will not change that often. See <a href="https://docs.getdbt.com/docs/build/seeds">Seeds</a> for further detail.</p>
<p>Let’s add the <a href="https://github.com/DataTalksClub/data-engineering-zoomcamp/blob/main/week_4_analytics_engineering/taxi_rides_ny/data/taxi_zone_lookup.csv">taxi zone look up csv file</a> by creating a new file within the <code>seeds</code> directory and simply copying and pasitng the contents of the raw csv file:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/71d363ff-349a-4325-9df2-6543c71faf0d.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">taxi_zone_lookup.PNG</figcaption><p></p>
</figure>
</div>
<p>and then run the following command from the dbt terminal:</p>
<pre><code>dbt seed</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/18beb23b-e512-4d48-a6b5-ffc2ca2be321.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">dbt_seed.PNG</figcaption><p></p>
</figure>
</div>
<p>And head back to BigQuery and we find our table created with 265 rows :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/a92c3593-4640-41f0-b16c-cd5709c896c6.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">taxi_zone_lookup_BQ.PNG</figcaption><p></p>
</figure>
</div>
<p>We can specify the data types of the csv fill, by modifying our <code>dbt_project.yml</code> file - otherwise default types will be applied :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/e378e659-fc6d-47c5-a8b5-4be7807ec1b4.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">dbt_seed_project_yml.PNG</figcaption><p></p>
</figure>
</div>
<p>If we slightly modify data(for example, change 1,“EWR”,“Newark Airport”,“EWR” to 1,“NEWR”,“Newark Airport”,“NEWR”) in the csv file, and then run the following command:</p>
<pre><code>dbt seed --full-refresh</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/708e7d41-3eb1-4c4f-b28a-26332ad73e2b.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">updated_seed.PNG</figcaption><p></p>
</figure>
</div>
<p>Let’s now create a model from this seed. First, create a new file within the <code>core</code> directory called <code>dim_zones.sql</code> :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/5dac4bda-3a6a-44f6-bf5f-1960739662a3.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">dim_zones.PNG</figcaption><p></p>
</figure>
</div>
<p>Ideally, we want everything in the directory to be tables to have efficient queries.</p>
<p>Now, create the model <code>fact_trips.sql</code> within the <code>core</code> directory :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/d170590e-ad1a-42b2-935e-74ba57353d62.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">fact_trips.PNG</figcaption><p></p>
</figure>
</div>
<p>And we can have this nice visualization of the lineage :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/e6d4946b-cde1-4508-b4d4-6c2fabad420a.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">fact_trips_lineage.PNG</figcaption><p></p>
</figure>
</div>
<p>The <code>dbt run</code> command will create everything, except the seeds:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/31b38a16-0e0e-419f-b695-4ab949b21898.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">fact_trips_error.PNG</figcaption><p></p>
</figure>
</div>
<p>I ran into an error and after quite a bit of head scratching, it arose because the order of my columns was not consistent between my <code>yellow</code> and <code>green</code> tables. The following are basic rules for combining the result sets of two queries by using UNION:</p>
<ul>
<li>The number and the order of the columns must be the same in all queries.</li>
<li>The data types must be compatible.</li>
</ul>
<p>After synchronizing the column order it ran successfully:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/0c040389-06d2-452f-b3cf-492048866c1f.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">dbt_run.PNG</figcaption><p></p>
</figure>
</div>
<p>And I now have my <code>fact_trips</code> table in BQ:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/24138c28-6723-4734-80c0-ca88e38dc901.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">fact_trips_BQ.PNG</figcaption><p></p>
</figure>
</div>
<p>However we also want to run the seeds, so we will use the command <code>dbt build --select fact_trips</code> to run only the <code>fact_trips</code> model :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/8149fd85-90bb-4456-a29c-037cc6ad90b8.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">select_fact_trips.PNG</figcaption><p></p>
</figure>
</div>
<p>The command <code>dbt build --select +fact_trips --var 'is_test_run: false'</code> will run everything that <code>fact_trips</code> needs. dbt already knows the dependencies :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/e8396c50-e764-4abc-8556-65478c1706ff.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">select_plus_fact_trips.PNG</figcaption><p></p>
</figure>
</div>
<p>And we can see in BQ that our <code>fact_trips</code> table now has <code>113,324,889</code> rows :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/6996c69c-4553-4545-9ef2-7ccc3b6557d7.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">fact_trips_BQ_updated.PNG</figcaption><p></p>
</figure>
</div>
</section>
</section>
<section id="testing-and-documenting-the-project" class="level3">
<h3 class="anchored" data-anchor-id="testing-and-documenting-the-project">4.3.2 Testing and Documenting the Project</h3>
<p>Tests are assertions you make about your models and other resources in your dbt project (e.g.&nbsp;sources, seeds and snapshots). When you run dbt test, dbt will tell you if each test in your project passes or fails.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/3093a92a-37de-47b9-aec3-f63dd346ae64.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">tests.PNG</figcaption><p></p>
</figure>
</div>
<p>See <a href="https://docs.getdbt.com/docs/build/tests">Tests</a> for further details.</p>
<section id="documentation" class="level4">
<h4 class="anchored" data-anchor-id="documentation">Documentation</h4>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/e1e27707-042c-4c47-bd43-9adf1eb0172e.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">documentation.PNG</figcaption><p></p>
</figure>
</div>
<p>For further detail about documentation see <a href="https://docs.getdbt.com/docs/collaborate/documentation">here</a>.</p>
</section>
</section>
<section id="deploying-a-dbt-project" class="level3">
<h3 class="anchored" data-anchor-id="deploying-a-dbt-project">Deploying a dbt project</h3>
<p>Let’s create a <code>dm_monthly_zone_revenue.sql</code> file :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/2d6946f8-d66e-490a-a278-3f93804a6651.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">dm_monthly_zone_revenue.PNG</figcaption><p></p>
</figure>
</div>
<p>Then build the table and its dependencies using:</p>
<pre><code>dbt build --select +dm_monthly_zone_revenue --var 'is_test_run: false'</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/2a4c0e54-4bd8-4c4c-9ca2-cd8365c52ad1.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">dm_monthly_zone_revenue_build.PNG</figcaption><p></p>
</figure>
</div>
<p>And we can see that we now have the table in BQ :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/81ce0463-9049-4f12-90da-21a2fc21f781.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">dm_monthly_zone_revenue_BQ.PNG</figcaption><p></p>
</figure>
</div>
<p>Then, we update the <code>schema.yml</code> file in <code>models/staging</code> to define the model. This section is used in particular to document the model and to add tests:</p>
<p><code>models/staging/schema.yml</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">version: <span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb13-2"></span>
<span id="cb13-3">sources:</span>
<span id="cb13-4">    <span class="op" style="color: #5E5E5E;">-</span> name: staging</span>
<span id="cb13-5">      <span class="co" style="color: #5E5E5E;">#For bigquery:</span></span>
<span id="cb13-6">      database: taxi<span class="op" style="color: #5E5E5E;">-</span>rides<span class="op" style="color: #5E5E5E;">-</span>ny<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">137</span></span>
<span id="cb13-7"></span>
<span id="cb13-8">      <span class="co" style="color: #5E5E5E;"># For postgres:</span></span>
<span id="cb13-9">      <span class="co" style="color: #5E5E5E;"># database: production</span></span>
<span id="cb13-10"></span>
<span id="cb13-11">      schema: trips_data_all</span>
<span id="cb13-12"></span>
<span id="cb13-13">      <span class="co" style="color: #5E5E5E;"># loaded_at_field: record_loaded_at</span></span>
<span id="cb13-14">      tables:</span>
<span id="cb13-15">        <span class="op" style="color: #5E5E5E;">-</span> name: green_tripdata</span>
<span id="cb13-16">        <span class="op" style="color: #5E5E5E;">-</span> name: yellow_tripdata</span>
<span id="cb13-17">         <span class="co" style="color: #5E5E5E;"># freshness:</span></span>
<span id="cb13-18">           <span class="co" style="color: #5E5E5E;"># error_after: {count: 6, period: hour}</span></span>
<span id="cb13-19"></span>
<span id="cb13-20">models:</span>
<span id="cb13-21">    <span class="op" style="color: #5E5E5E;">-</span> name: stg_green_tripdata</span>
<span id="cb13-22">      description: <span class="op" style="color: #5E5E5E;">&gt;</span></span>
<span id="cb13-23">        Trip made by green taxis, also known <span class="im" style="color: #00769E;">as</span> boro taxis <span class="kw" style="color: #003B4F;">and</span> street<span class="op" style="color: #5E5E5E;">-</span>hail liveries.</span>
<span id="cb13-24">        Green taxis may respond to street hails,but only <span class="kw" style="color: #003B4F;">in</span> the areas indicated <span class="kw" style="color: #003B4F;">in</span> green on the</span>
<span id="cb13-25">        <span class="bu" style="color: null;">map</span> (i.e. above W <span class="dv" style="color: #AD0000;">110</span> St<span class="op" style="color: #5E5E5E;">/</span>E <span class="dv" style="color: #AD0000;">96</span><span class="er" style="color: #AD0000;">th</span> St <span class="kw" style="color: #003B4F;">in</span> Manhattan <span class="kw" style="color: #003B4F;">and</span> <span class="kw" style="color: #003B4F;">in</span> the boroughs).</span>
<span id="cb13-26">        The records were collected <span class="kw" style="color: #003B4F;">and</span> provided to the NYC Taxi <span class="kw" style="color: #003B4F;">and</span> Limousine Commission (TLC) by</span>
<span id="cb13-27">        technology service providers. </span>
<span id="cb13-28">      columns:</span>
<span id="cb13-29">          <span class="op" style="color: #5E5E5E;">-</span> name: tripid</span>
<span id="cb13-30">            description: Primary key <span class="cf" style="color: #003B4F;">for</span> this table, generated <span class="cf" style="color: #003B4F;">with</span> a concatenation of vendorid<span class="op" style="color: #5E5E5E;">+</span>pickup_datetime</span>
<span id="cb13-31">            tests: <span class="co" style="color: #5E5E5E;"># severity = warn = warning given but program run continues | severity = never = IMMEDIATE stop</span></span>
<span id="cb13-32">                <span class="op" style="color: #5E5E5E;">-</span> unique:</span>
<span id="cb13-33">                    severity: warn</span>
<span id="cb13-34">                <span class="op" style="color: #5E5E5E;">-</span> not_null:</span>
<span id="cb13-35">                    severity: warn</span>
<span id="cb13-36">          <span class="op" style="color: #5E5E5E;">-</span> name: VendorID </span>
<span id="cb13-37">            description: <span class="op" style="color: #5E5E5E;">&gt;</span> </span>
<span id="cb13-38">                A code indicating the TPEP provider that provided the record.</span>
<span id="cb13-39">                <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">=</span> Creative Mobile Technologies, LLC<span class="op" style="color: #5E5E5E;">;</span> </span>
<span id="cb13-40">                <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">=</span> VeriFone Inc.</span>
<span id="cb13-41">          <span class="op" style="color: #5E5E5E;">-</span> name: pickup_datetime </span>
<span id="cb13-42">            description: The date <span class="kw" style="color: #003B4F;">and</span> time when the meter was engaged.</span>
<span id="cb13-43">          <span class="op" style="color: #5E5E5E;">-</span> name: dropoff_datetime </span>
<span id="cb13-44">            description: The date <span class="kw" style="color: #003B4F;">and</span> time when the meter was disengaged.</span>
<span id="cb13-45">          <span class="op" style="color: #5E5E5E;">-</span> name: Passenger_count </span>
<span id="cb13-46">            description: The number of passengers <span class="kw" style="color: #003B4F;">in</span> the vehicle. This <span class="kw" style="color: #003B4F;">is</span> a driver<span class="op" style="color: #5E5E5E;">-</span>entered value.</span>
<span id="cb13-47">          <span class="op" style="color: #5E5E5E;">-</span> name: Trip_distance </span>
<span id="cb13-48">            description: The elapsed trip distance <span class="kw" style="color: #003B4F;">in</span> miles reported by the taximeter.</span>
<span id="cb13-49">          <span class="op" style="color: #5E5E5E;">-</span> name: Pickup_locationid</span>
<span id="cb13-50">            description: locationid where the meter was engaged.</span>
<span id="cb13-51">            tests: <span class="co" style="color: #5E5E5E;"># severity = warn = warning given but program run continues | severity = never = IMMEDIATE stop</span></span>
<span id="cb13-52">              <span class="op" style="color: #5E5E5E;">-</span> relationships:</span>
<span id="cb13-53">                  to: ref(<span class="st" style="color: #20794D;">'taxi_zone_lookup'</span>)</span>
<span id="cb13-54">                  field: locationid</span>
<span id="cb13-55">                  severity: warn</span>
<span id="cb13-56">          <span class="op" style="color: #5E5E5E;">-</span> name: dropoff_locationid </span>
<span id="cb13-57">            description: locationid where the meter was engaged.</span>
<span id="cb13-58">            tests: <span class="co" style="color: #5E5E5E;"># severity = warn = warning given but program run continues | severity = never = IMMEDIATE stop</span></span>
<span id="cb13-59">              <span class="op" style="color: #5E5E5E;">-</span> relationships:</span>
<span id="cb13-60">                  to: ref(<span class="st" style="color: #20794D;">'taxi_zone_lookup'</span>)</span>
<span id="cb13-61">                  field: locationid</span>
<span id="cb13-62">          <span class="op" style="color: #5E5E5E;">-</span> name: RateCodeID </span>
<span id="cb13-63">            description: <span class="op" style="color: #5E5E5E;">&gt;</span></span>
<span id="cb13-64">                The final rate code <span class="kw" style="color: #003B4F;">in</span> effect at the end of the trip.</span>
<span id="cb13-65">                  <span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">=</span> Standard rate</span>
<span id="cb13-66">                  <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">=</span>JFK</span>
<span id="cb13-67">                  <span class="dv" style="color: #AD0000;">3</span><span class="op" style="color: #5E5E5E;">=</span>Newark</span>
<span id="cb13-68">                  <span class="dv" style="color: #AD0000;">4</span><span class="op" style="color: #5E5E5E;">=</span>Nassau <span class="kw" style="color: #003B4F;">or</span> Westchester</span>
<span id="cb13-69">                  <span class="dv" style="color: #AD0000;">5</span><span class="op" style="color: #5E5E5E;">=</span>Negotiated fare</span>
<span id="cb13-70">                  <span class="dv" style="color: #AD0000;">6</span><span class="op" style="color: #5E5E5E;">=</span>Group ride</span>
<span id="cb13-71">          <span class="op" style="color: #5E5E5E;">-</span> name: Store_and_fwd_flag </span>
<span id="cb13-72">            description: <span class="op" style="color: #5E5E5E;">&gt;</span> </span>
<span id="cb13-73">              This flag indicates whether the trip record was held <span class="kw" style="color: #003B4F;">in</span> vehicle</span>
<span id="cb13-74">              memory before sending to the vendor, aka “store <span class="kw" style="color: #003B4F;">and</span> forward,”</span>
<span id="cb13-75">              because the vehicle did <span class="kw" style="color: #003B4F;">not</span> have a connection to the server.</span>
<span id="cb13-76">                Y<span class="op" style="color: #5E5E5E;">=</span> store <span class="kw" style="color: #003B4F;">and</span> forward trip</span>
<span id="cb13-77">                N<span class="op" style="color: #5E5E5E;">=</span> <span class="kw" style="color: #003B4F;">not</span> a store <span class="kw" style="color: #003B4F;">and</span> forward trip</span>
<span id="cb13-78">          <span class="op" style="color: #5E5E5E;">-</span> name: Dropoff_longitude </span>
<span id="cb13-79">            description: Longitude where the meter was disengaged.</span>
<span id="cb13-80">          <span class="op" style="color: #5E5E5E;">-</span> name: Dropoff_latitude </span>
<span id="cb13-81">            description: Latitude where the meter was disengaged.</span>
<span id="cb13-82">          <span class="op" style="color: #5E5E5E;">-</span> name: Payment_type </span>
<span id="cb13-83">            description: <span class="op" style="color: #5E5E5E;">&gt;</span></span>
<span id="cb13-84">              A numeric code signifying how the passenger paid <span class="cf" style="color: #003B4F;">for</span> the trip.</span>
<span id="cb13-85">            tests: <span class="co" style="color: #5E5E5E;"># severity = warn = warning given but program run continues | severity = never = IMMEDIATE stop</span></span>
<span id="cb13-86">              <span class="op" style="color: #5E5E5E;">-</span> accepted_values:</span>
<span id="cb13-87">                  values: <span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">{{</span><span class="st" style="color: #20794D;"> var('payment_type_values') </span><span class="sc" style="color: #5E5E5E;">}}</span><span class="st" style="color: #20794D;">"</span></span>
<span id="cb13-88">                  severity: warn</span>
<span id="cb13-89">                  quote: false</span>
<span id="cb13-90">          <span class="op" style="color: #5E5E5E;">-</span> name: payment_type_description</span>
<span id="cb13-91">            description: Description of the payment_type code</span>
<span id="cb13-92">          <span class="op" style="color: #5E5E5E;">-</span> name: Fare_amount </span>
<span id="cb13-93">            description: <span class="op" style="color: #5E5E5E;">&gt;</span> </span>
<span id="cb13-94">              The time<span class="op" style="color: #5E5E5E;">-</span><span class="kw" style="color: #003B4F;">and</span><span class="op" style="color: #5E5E5E;">-</span>distance fare calculated by the meter.</span>
<span id="cb13-95">              Extra Miscellaneous extras <span class="kw" style="color: #003B4F;">and</span> surcharges. Currently, this only includes</span>
<span id="cb13-96">              the $<span class="fl" style="color: #AD0000;">0.50</span> <span class="kw" style="color: #003B4F;">and</span> $<span class="dv" style="color: #AD0000;">1</span> rush hour <span class="kw" style="color: #003B4F;">and</span> overnight charges.</span>
<span id="cb13-97">              MTA_tax $<span class="fl" style="color: #AD0000;">0.50</span> MTA tax that <span class="kw" style="color: #003B4F;">is</span> automatically triggered based on the metered</span>
<span id="cb13-98">              rate <span class="kw" style="color: #003B4F;">in</span> use.</span>
<span id="cb13-99">          <span class="op" style="color: #5E5E5E;">-</span> name: Improvement_surcharge </span>
<span id="cb13-100">            description: <span class="op" style="color: #5E5E5E;">&gt;</span> </span>
<span id="cb13-101">              $<span class="fl" style="color: #AD0000;">0.30</span> improvement surcharge assessed trips at the flag drop. The</span>
<span id="cb13-102">              improvement surcharge began being levied <span class="kw" style="color: #003B4F;">in</span> <span class="fl" style="color: #AD0000;">2015.</span></span>
<span id="cb13-103">          <span class="op" style="color: #5E5E5E;">-</span> name: Tip_amount </span>
<span id="cb13-104">            description: <span class="op" style="color: #5E5E5E;">&gt;</span> </span>
<span id="cb13-105">              Tip amount. This field <span class="kw" style="color: #003B4F;">is</span> automatically populated <span class="cf" style="color: #003B4F;">for</span> credit card</span>
<span id="cb13-106">              tips. Cash tips are <span class="kw" style="color: #003B4F;">not</span> included.</span>
<span id="cb13-107">          <span class="op" style="color: #5E5E5E;">-</span> name: Tolls_amount </span>
<span id="cb13-108">            description: Total amount of <span class="bu" style="color: null;">all</span> tolls paid <span class="kw" style="color: #003B4F;">in</span> trip.</span>
<span id="cb13-109">          <span class="op" style="color: #5E5E5E;">-</span> name: Total_amount </span>
<span id="cb13-110">            description: The total amount charged to passengers. Does <span class="kw" style="color: #003B4F;">not</span> include cash tips.</span>
<span id="cb13-111"></span>
<span id="cb13-112">    <span class="op" style="color: #5E5E5E;">-</span> name: stg_yellow_tripdata</span>
<span id="cb13-113">      description: <span class="op" style="color: #5E5E5E;">&gt;</span> </span>
<span id="cb13-114">        Trips made by New York City<span class="st" style="color: #20794D;">'s iconic yellow taxis. </span></span>
<span id="cb13-115"><span class="er" style="color: #AD0000;">        Yellow taxis are the only vehicles permitted to respond to a street hail from a passenger in all five</span></span>
<span id="cb13-116"><span class="er" style="color: #AD0000;">        boroughs. They may also be hailed using an e-hail app like Curb or Arro.</span></span>
<span id="cb13-117"><span class="er" style="color: #AD0000;">        The records were collected and provided to the NYC Taxi and Limousine Commission (TLC) by</span></span>
<span id="cb13-118"><span class="er" style="color: #AD0000;">        technology service providers. </span></span>
<span id="cb13-119"><span class="er" style="color: #AD0000;">      columns:</span></span>
<span id="cb13-120"><span class="er" style="color: #AD0000;">          - name: tripid</span></span>
<span id="cb13-121"><span class="er" style="color: #AD0000;">            description: Primary key for this table, generated with a concatenation of vendorid+pickup_datetime</span></span>
<span id="cb13-122"><span class="er" style="color: #AD0000;">            tests: # severity = warn = warning given but program run continues | severity = never = IMMEDIATE stop</span></span>
<span id="cb13-123"><span class="er" style="color: #AD0000;">                - unique:</span></span>
<span id="cb13-124"><span class="er" style="color: #AD0000;">                    severity: warn</span></span>
<span id="cb13-125"><span class="er" style="color: #AD0000;">                - not_null:</span></span>
<span id="cb13-126"><span class="er" style="color: #AD0000;">                    severity: warn</span></span>
<span id="cb13-127"><span class="er" style="color: #AD0000;">          - name: VendorID </span></span>
<span id="cb13-128"><span class="er" style="color: #AD0000;">            description: &gt; </span></span>
<span id="cb13-129"><span class="er" style="color: #AD0000;">                A code indicating the TPEP provider that provided the record.</span></span>
<span id="cb13-130"><span class="er" style="color: #AD0000;">                1= Creative Mobile Technologies, LLC; </span></span>
<span id="cb13-131"><span class="er" style="color: #AD0000;">                2= VeriFone Inc.</span></span>
<span id="cb13-132"><span class="er" style="color: #AD0000;">          - name: pickup_datetime </span></span>
<span id="cb13-133"><span class="er" style="color: #AD0000;">            description: The date and time when the meter was engaged.</span></span>
<span id="cb13-134"><span class="er" style="color: #AD0000;">          - name: dropoff_datetime </span></span>
<span id="cb13-135"><span class="er" style="color: #AD0000;">            description: The date and time when the meter was disengaged.</span></span>
<span id="cb13-136"><span class="er" style="color: #AD0000;">          - name: Passenger_count </span></span>
<span id="cb13-137"><span class="er" style="color: #AD0000;">            description: The number of passengers in the vehicle. This is a driver-entered value.</span></span>
<span id="cb13-138"><span class="er" style="color: #AD0000;">          - name: Trip_distance </span></span>
<span id="cb13-139"><span class="er" style="color: #AD0000;">            description: The elapsed trip distance in miles reported by the taximeter.</span></span>
<span id="cb13-140"><span class="er" style="color: #AD0000;">          - name: Pickup_locationid</span></span>
<span id="cb13-141"><span class="er" style="color: #AD0000;">            description: locationid where the meter was engaged.</span></span>
<span id="cb13-142"><span class="er" style="color: #AD0000;">            tests: # severity = warn = warning given but program run continues | severity = never = IMMEDIATE stop</span></span>
<span id="cb13-143"><span class="er" style="color: #AD0000;">              - relationships:</span></span>
<span id="cb13-144"><span class="er" style="color: #AD0000;">                  to: ref('taxi_zone_lookup')</span></span>
<span id="cb13-145"><span class="er" style="color: #AD0000;">                  field: locationid</span></span>
<span id="cb13-146"><span class="er" style="color: #AD0000;">                  severity: warn</span></span>
<span id="cb13-147"><span class="er" style="color: #AD0000;">          - name: dropoff_locationid </span></span>
<span id="cb13-148"><span class="er" style="color: #AD0000;">            description: locationid where the meter was engaged.</span></span>
<span id="cb13-149"><span class="er" style="color: #AD0000;">            tests: # severity = warn = warning given but program run continues | severity = never = IMMEDIATE stop</span></span>
<span id="cb13-150"><span class="er" style="color: #AD0000;">              - relationships:</span></span>
<span id="cb13-151"><span class="er" style="color: #AD0000;">                  to: ref('taxi_zone_lookup')</span></span>
<span id="cb13-152"><span class="er" style="color: #AD0000;">                  field: locationid</span></span>
<span id="cb13-153"><span class="er" style="color: #AD0000;">                  severity: warn</span></span>
<span id="cb13-154"><span class="er" style="color: #AD0000;">          - name: RateCodeID </span></span>
<span id="cb13-155"><span class="er" style="color: #AD0000;">            description: &gt;</span></span>
<span id="cb13-156"><span class="er" style="color: #AD0000;">                The final rate code in effect at the end of the trip.</span></span>
<span id="cb13-157"><span class="er" style="color: #AD0000;">                  1= Standard rate</span></span>
<span id="cb13-158"><span class="er" style="color: #AD0000;">                  2=JFK</span></span>
<span id="cb13-159"><span class="er" style="color: #AD0000;">                  3=Newark</span></span>
<span id="cb13-160"><span class="er" style="color: #AD0000;">                  4=Nassau or Westchester</span></span>
<span id="cb13-161"><span class="er" style="color: #AD0000;">                  5=Negotiated fare</span></span>
<span id="cb13-162"><span class="er" style="color: #AD0000;">                  6=Group ride</span></span>
<span id="cb13-163"><span class="er" style="color: #AD0000;">          - name: Store_and_fwd_flag </span></span>
<span id="cb13-164"><span class="er" style="color: #AD0000;">            description: &gt; </span></span>
<span id="cb13-165"><span class="er" style="color: #AD0000;">              This flag indicates whether the trip record was held in vehicle</span></span>
<span id="cb13-166"><span class="er" style="color: #AD0000;">              memory before sending to the vendor, aka “store and forward,”</span></span>
<span id="cb13-167"><span class="er" style="color: #AD0000;">              because the vehicle did not have a connection to the server.</span></span>
<span id="cb13-168"><span class="er" style="color: #AD0000;">                Y= store and forward trip</span></span>
<span id="cb13-169"><span class="er" style="color: #AD0000;">                N= not a store and forward trip</span></span>
<span id="cb13-170"><span class="er" style="color: #AD0000;">          - name: Dropoff_longitude </span></span>
<span id="cb13-171"><span class="er" style="color: #AD0000;">            description: Longitude where the meter was disengaged.</span></span>
<span id="cb13-172"><span class="er" style="color: #AD0000;">          - name: Dropoff_latitude </span></span>
<span id="cb13-173"><span class="er" style="color: #AD0000;">            description: Latitude where the meter was disengaged.</span></span>
<span id="cb13-174"><span class="er" style="color: #AD0000;">          - name: Payment_type </span></span>
<span id="cb13-175"><span class="er" style="color: #AD0000;">            description: &gt;</span></span>
<span id="cb13-176"><span class="er" style="color: #AD0000;">              A numeric code signifying how the passenger paid for the trip.</span></span>
<span id="cb13-177"><span class="er" style="color: #AD0000;">            tests: # severity = warn = warning given but program run continues | severity = never = IMMEDIATE stop</span></span>
<span id="cb13-178"><span class="er" style="color: #AD0000;">              - accepted_values:</span></span>
<span id="cb13-179"><span class="er" style="color: #AD0000;">                  values: "{{ var('payment_type_values') }}"</span></span>
<span id="cb13-180"><span class="er" style="color: #AD0000;">                  severity: warn</span></span>
<span id="cb13-181"><span class="er" style="color: #AD0000;">                  quote: false</span></span>
<span id="cb13-182"><span class="er" style="color: #AD0000;">          - name: payment_type_description</span></span>
<span id="cb13-183"><span class="er" style="color: #AD0000;">            description: Description of the payment_type code</span></span>
<span id="cb13-184"><span class="er" style="color: #AD0000;">          - name: Fare_amount </span></span>
<span id="cb13-185"><span class="er" style="color: #AD0000;">            description: &gt; </span></span>
<span id="cb13-186"><span class="er" style="color: #AD0000;">              The time-and-distance fare calculated by the meter.</span></span>
<span id="cb13-187"><span class="er" style="color: #AD0000;">              Extra Miscellaneous extras and surcharges. Currently, this only includes</span></span>
<span id="cb13-188"><span class="er" style="color: #AD0000;">              the $0.50 and $1 rush hour and overnight charges.</span></span>
<span id="cb13-189"><span class="er" style="color: #AD0000;">              MTA_tax $0.50 MTA tax that is automatically triggered based on the metered</span></span>
<span id="cb13-190"><span class="er" style="color: #AD0000;">              rate in use.</span></span>
<span id="cb13-191"><span class="er" style="color: #AD0000;">          - name: Improvement_surcharge </span></span>
<span id="cb13-192"><span class="er" style="color: #AD0000;">            description: &gt; </span></span>
<span id="cb13-193"><span class="er" style="color: #AD0000;">              $0.30 improvement surcharge assessed trips at the flag drop. The</span></span>
<span id="cb13-194"><span class="er" style="color: #AD0000;">              improvement surcharge began being levied in 2015.</span></span>
<span id="cb13-195"><span class="er" style="color: #AD0000;">          - name: Tip_amount </span></span>
<span id="cb13-196"><span class="er" style="color: #AD0000;">            description: &gt; </span></span>
<span id="cb13-197"><span class="er" style="color: #AD0000;">              Tip amount. This field is automatically populated for credit card</span></span>
<span id="cb13-198"><span class="er" style="color: #AD0000;">              tips. Cash tips are not included.</span></span>
<span id="cb13-199"><span class="er" style="color: #AD0000;">          - name: Tolls_amount </span></span>
<span id="cb13-200"><span class="er" style="color: #AD0000;">            description: Total amount of all tolls paid in trip.</span></span>
<span id="cb13-201"><span class="er" style="color: #AD0000;">          - name: Total_amount </span></span>
<span id="cb13-202"><span class="er" style="color: #AD0000;">            description: The total amount charged to passengers. Does not include cash tips.                </span></span></code></pre></div>
</div>
<p>Next, we modify the <code>dbt_project.yml</code> to define the <code>payment_type_values</code> variable :</p>
<p><code>dbt.project/yml</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;"># Name your project! Project names should contain only lowercase characters</span></span>
<span id="cb14-2"><span class="co" style="color: #5E5E5E;"># and underscores. A good package name should reflect your organization's</span></span>
<span id="cb14-3"><span class="co" style="color: #5E5E5E;"># name or the intended use of these models</span></span>
<span id="cb14-4">name: <span class="st" style="color: #20794D;">'taxi_rides_ny'</span></span>
<span id="cb14-5">version: <span class="st" style="color: #20794D;">'1.0.0'</span></span>
<span id="cb14-6">config<span class="op" style="color: #5E5E5E;">-</span>version: <span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb14-7"></span>
<span id="cb14-8"><span class="co" style="color: #5E5E5E;"># This setting configures which "profile" dbt uses for this project.</span></span>
<span id="cb14-9">profile: <span class="st" style="color: #20794D;">'pg-dbt-workshop'</span></span>
<span id="cb14-10"></span>
<span id="cb14-11"><span class="co" style="color: #5E5E5E;"># These configurations specify where dbt should look for different types of files.</span></span>
<span id="cb14-12"><span class="co" style="color: #5E5E5E;"># The `source-paths` config, for example, states that models in this project can be</span></span>
<span id="cb14-13"><span class="co" style="color: #5E5E5E;"># found in the "models/" directory. You probably won't need to change these!</span></span>
<span id="cb14-14">model<span class="op" style="color: #5E5E5E;">-</span>paths: [<span class="st" style="color: #20794D;">"models"</span>]</span>
<span id="cb14-15">analysis<span class="op" style="color: #5E5E5E;">-</span>paths: [<span class="st" style="color: #20794D;">"analysis"</span>]</span>
<span id="cb14-16">test<span class="op" style="color: #5E5E5E;">-</span>paths: [<span class="st" style="color: #20794D;">"tests"</span>]</span>
<span id="cb14-17">seed<span class="op" style="color: #5E5E5E;">-</span>paths: [<span class="st" style="color: #20794D;">"seeds"</span>]</span>
<span id="cb14-18">macro<span class="op" style="color: #5E5E5E;">-</span>paths: [<span class="st" style="color: #20794D;">"macros"</span>]</span>
<span id="cb14-19">snapshot<span class="op" style="color: #5E5E5E;">-</span>paths: [<span class="st" style="color: #20794D;">"snapshots"</span>]</span>
<span id="cb14-20"></span>
<span id="cb14-21">target<span class="op" style="color: #5E5E5E;">-</span>path: <span class="st" style="color: #20794D;">"target"</span>  <span class="co" style="color: #5E5E5E;"># directory which will store compiled SQL files</span></span>
<span id="cb14-22">clean<span class="op" style="color: #5E5E5E;">-</span>targets:         <span class="co" style="color: #5E5E5E;"># directories to be removed by `dbt clean`</span></span>
<span id="cb14-23">    <span class="op" style="color: #5E5E5E;">-</span> <span class="st" style="color: #20794D;">"target"</span></span>
<span id="cb14-24">    <span class="op" style="color: #5E5E5E;">-</span> <span class="st" style="color: #20794D;">"dbt_packages"</span></span>
<span id="cb14-25">    <span class="op" style="color: #5E5E5E;">-</span> <span class="st" style="color: #20794D;">"dbt_modules"</span></span>
<span id="cb14-26"></span>
<span id="cb14-27"></span>
<span id="cb14-28"><span class="co" style="color: #5E5E5E;"># Configuring models</span></span>
<span id="cb14-29"><span class="co" style="color: #5E5E5E;"># Full documentation: https://docs.getdbt.com/docs/configuring-models</span></span>
<span id="cb14-30"></span>
<span id="cb14-31"><span class="co" style="color: #5E5E5E;"># In this example config, we tell dbt to build all models in the example/ directory</span></span>
<span id="cb14-32"><span class="co" style="color: #5E5E5E;"># as tables. These settings can be overridden in the individual model files</span></span>
<span id="cb14-33"><span class="co" style="color: #5E5E5E;"># using the `{{ config(...) }}` macro.</span></span>
<span id="cb14-34">models:</span>
<span id="cb14-35">  taxi_rides_ny:</span>
<span id="cb14-36">      <span class="co" style="color: #5E5E5E;"># Applies to all files under models/.../</span></span>
<span id="cb14-37">      staging:</span>
<span id="cb14-38">          materialized: view</span>
<span id="cb14-39">      core:</span>
<span id="cb14-40">          materialized: table</span>
<span id="cb14-41"><span class="bu" style="color: null;">vars</span>:</span>
<span id="cb14-42">  payment_type_values: [<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">6</span>]</span>
<span id="cb14-43"></span>
<span id="cb14-44">seeds: </span>
<span id="cb14-45">    taxi_rides_ny:</span>
<span id="cb14-46">        taxi_zone_lookup:</span>
<span id="cb14-47">            <span class="op" style="color: #5E5E5E;">+</span>column_types:</span>
<span id="cb14-48">                locationid: numeric</span></code></pre></div>
</div>
<p>Then, we can run <code>dbt test</code> or one of the following commands:</p>
<pre><code>dbt test                               # Run tests on data in deployed models.
dbt test --select stg_green_tripdata   # Run tests on data in specified model.
dbt test --select stg_green_tripdata+  # Run tests on data in specified model and its children.
dbt test --select +stg_green_tripdata  # Run tests on data in specified model and its ancestors.
dbt build  # Run the seeds, run the tests and run the models.</code></pre>
<p>Let’s use <code>dbt test</code> :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/b82bf8c8-daae-4092-9f4a-bfea227d237c.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">dbt_test_warn.PNG</figcaption><p></p>
</figure>
</div>
<p>We see that the column <code>tripid</code> from the <code>stg_green_tripdata</code> table is not unique after all. So let’s update our sql files - to keep only the first row of duplicates, with the condition <code>where rn = 1</code> - rn means <code>row number</code></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/a93c53be-184e-4d84-8835-9a0a1ff96c93.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">green_trip_data_updated.PNG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/27059e9f-9fec-4261-a801-d1a33ffe42a1.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">yellow_trip_data_updated.PNG</figcaption><p></p>
</figure>
</div>
<p>For further detail on duplicates, see <a href="https://database.guide/4-ways-to-check-for-duplicate-rows-in-sql-server/">4 Ways to Check for Duplicate Rows in SQL Server</a>.</p>
<p>Let’s now run everything we have built so far with <code>dbt build</code> :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/1c495f07-0619-47e8-88df-f0bae8116af5.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">dbt_build_all_pass.PNG</figcaption><p></p>
</figure>
</div>
<p>As we can see, this time, all tests have passed.</p>
<p>The final thing to do is to complete our project is to add a <code>schema.yml</code> file for our core models :</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">version: <span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb16-2"></span>
<span id="cb16-3">models:</span>
<span id="cb16-4">  <span class="op" style="color: #5E5E5E;">-</span> name: dim_zones</span>
<span id="cb16-5">    description: <span class="op" style="color: #5E5E5E;">&gt;</span></span>
<span id="cb16-6">      List of unique zones idefied by locationid.</span>
<span id="cb16-7">      Includes the service zone they correspond to (Green <span class="kw" style="color: #003B4F;">or</span> yellow).</span>
<span id="cb16-8">  <span class="op" style="color: #5E5E5E;">-</span> name: fact_trips</span>
<span id="cb16-9">    description: <span class="op" style="color: #5E5E5E;">&gt;</span></span>
<span id="cb16-10">      Taxi trips corresponding to both service zones (Green <span class="kw" style="color: #003B4F;">and</span> yellow).</span>
<span id="cb16-11">      The table contains records where both pickup <span class="kw" style="color: #003B4F;">and</span> dropoff locations are valid <span class="kw" style="color: #003B4F;">and</span> known zones.</span>
<span id="cb16-12">      Each record corresponds to a trip uniquely identified by tripid.</span>
<span id="cb16-13"></span>
<span id="cb16-14">  <span class="op" style="color: #5E5E5E;">-</span> name: dm_monthly_zone_revenue</span>
<span id="cb16-15">    description: <span class="op" style="color: #5E5E5E;">&gt;</span></span>
<span id="cb16-16">      Aggregated table of <span class="bu" style="color: null;">all</span> taxi trips corresponding to both service zones (Green <span class="kw" style="color: #003B4F;">and</span> yellow) per pickup zone, month <span class="kw" style="color: #003B4F;">and</span> service.</span>
<span id="cb16-17">      The table contains monthly sums of the fare elements used to calculate the monthly revenue.</span>
<span id="cb16-18">      The table contains also monthly indicators like number of trips, <span class="kw" style="color: #003B4F;">and</span> average trip distance.</span>
<span id="cb16-19">    columns:</span>
<span id="cb16-20">      <span class="op" style="color: #5E5E5E;">-</span> name: revenue_monthly_total_amount</span>
<span id="cb16-21">        description: Monthly <span class="bu" style="color: null;">sum</span> of the the total_amount of the fare charged <span class="cf" style="color: #003B4F;">for</span> the trip per pickup zone, month <span class="kw" style="color: #003B4F;">and</span> service.</span>
<span id="cb16-22">        tests:</span>
<span id="cb16-23">            <span class="op" style="color: #5E5E5E;">-</span> not_null:</span>
<span id="cb16-24">                severity: error</span></code></pre></div>
</div>
<p>and a <code>macros_properties.yml</code> file for completeness :</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">version: <span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb17-2"></span>
<span id="cb17-3">macros:</span>
<span id="cb17-4">  <span class="op" style="color: #5E5E5E;">-</span> name: get_payment_type_description</span>
<span id="cb17-5">    description: <span class="op" style="color: #5E5E5E;">&gt;</span></span>
<span id="cb17-6">      This macro receives a payment_type <span class="kw" style="color: #003B4F;">and</span> returns the corresponding description.</span>
<span id="cb17-7">    arguments:</span>
<span id="cb17-8">      <span class="op" style="color: #5E5E5E;">-</span> name: payment_type</span>
<span id="cb17-9">        <span class="bu" style="color: null;">type</span>: <span class="bu" style="color: null;">int</span></span>
<span id="cb17-10">        description: <span class="op" style="color: #5E5E5E;">&gt;</span> </span>
<span id="cb17-11">          payment_type value.</span>
<span id="cb17-12">          Must be one of the accepted values, otherwise the macro will <span class="cf" style="color: #003B4F;">return</span> null</span></code></pre></div>
</div>
<p>See <a href="https://docs.getdbt.com/reference/resource-properties/tests">Tests</a> and <a href="https://docs.getdbt.com/reference/resource-configs/severity">Configuring test severity</a> for more information about tests.</p>
</section>
<section id="deployment-using-dbt-cloud" class="level3">
<h3 class="anchored" data-anchor-id="deployment-using-dbt-cloud">4.4.1 Deployment Using dbt Cloud</h3>
<p>Now that we have created a complete project, and tested it, and know that everything runs error-free it is time to <code>deploy</code> our project using <a href="https://en.wikipedia.org/wiki/Version_control"><strong>version control</strong></a> and <a href="https://en.wikipedia.org/wiki/CI/CD"><strong>CI/CD</strong></a> in a production environment.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/393038d4-5ff8-4bb6-873e-b27923cd694c.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">deployment.PNG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/107ef1c8-9d2f-46cd-aaab-a01347997fa0.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">dbt_production.PNG</figcaption><p></p>
</figure>
</div>
<section id="continuous-integration-ci" class="level4">
<h4 class="anchored" data-anchor-id="continuous-integration-ci">Continuous Integration (CI)</h4>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/c76b9ae5-b0dd-4b15-8b43-b3e2630b1910.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">continuous_integration.PNG</figcaption><p></p>
</figure>
</div>
<p>For further detail on enabling CI in dbt Cloud see <a href="https://docs.getdbt.com/docs/deploy/cloud-ci-job">the documentation</a>.</p>
</section>
<section id="creating-a-production-environment" class="level4">
<h4 class="anchored" data-anchor-id="creating-a-production-environment">Creating a Production environment</h4>
<p>In dbt cloud, commit my-new-branch and pull request. Then in our GitHub repository <a href="https://github.com/Stephen137/taxi_rides_ny">taxi_rides_ny</a>, merge this pull request to our main branch.</p>
<p>Now head back to the dbt IDE. We already have a <em>development</em> environment :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/703f8085-b501-4be6-881c-ac599de68d14.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">development.PNG</figcaption><p></p>
</figure>
</div>
<p>But let’s now create a <em>production</em> environment :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/f105bed6-a75a-4e04-9a1e-3a70808db484.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">production.PNG</figcaption><p></p>
</figure>
</div>
<p>And now let’s create a <code>Job</code> :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/3a282be8-9589-42d9-a4d6-2ef452a92240.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">create_job_1.PNG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/f9f66339-ca24-4a9f-b4c7-2153dc7023f6.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">create_job_2.PNG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/9d3fd0fd-357d-489a-9281-50f39e3d5717.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">create_job_3.PNG</figcaption><p></p>
</figure>
</div>
<p>Note that in order to have access to <a href="https://docs.getdbt.com/docs/deploy/webhooks">Webhooks</a> you need to have either a <code>Team</code> or <code>Enterprise</code> subscription.</p>
<p>Let’s now run the job :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/1a2828ff-8651-47e8-b4d4-5665b0b32318.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">dbt_build_run.PNG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/139cc43d-eb2f-4536-89e6-7ca62fdebc90.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">dbt_run_overview.PNG</figcaption><p></p>
</figure>
</div>
<p>Under <code>Artifacts</code> we can see the compiled code together with the manifest :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/4335873b-74c0-4af8-895c-cade7e0f09b7.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">artefacts.PNG</figcaption><p></p>
</figure>
</div>
<p>and the documentation :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/eeec5dd1-194e-4ec8-8d73-55d22cbb757c.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">docs.PNG</figcaption><p></p>
</figure>
</div>
<p>We can also see the Lineage Graph for our models :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/be47cc0b-f60e-4dec-8993-c3704f0c95b4.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">production_lineage_graph.PNG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/1bd18f1a-038a-455d-974b-caffcf1cfa52.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">lineage_graph_2.PNG</figcaption><p></p>
</figure>
</div>
<p>Let’s head back to the dbt cloud IDE and account settings and within Artifacts link the documentation to our <code>dbt build</code> :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/173f2f8c-5d7e-412f-abb1-d76041da48c1.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">artifact_link.PNG</figcaption><p></p>
</figure>
</div>
<p>Now that we have now successfully transformed our data using dbt models and tested and deployed those models, the final step is to visualize our data.</p>
</section>
</section>
<section id="visualising-the-data-with-looker-f.k.a-google-data-studio" class="level3">
<h3 class="anchored" data-anchor-id="visualising-the-data-with-looker-f.k.a-google-data-studio">4.5.1 Visualising the data with Looker (f.k.a Google Data Studio)</h3>
<p>Now that we have successfully transformed our data using dbt, it is time to visualise that data. Let’s first take a look at <code>Looker</code> formerly known as <code>Google Data Studio</code>, an online tool for converting data into customizable informative reports and dashboards introduced by Google on March 15, 2016 as part of the enterprise Google Analytics 360 suite.</p>
<p>In May 2016, Google announced a free version of Data Studio for individuals and small teams. See https://en.wikipedia.org/wiki/Looker_Studio.</p>
<p>Go to <a href="https://lookerstudio.google.com/overview">Looker Studio</a> and click <code>USE IT FOR FREE</code>. Make sure you are signed in to the correct Google account. The first thing we need to do is create a data source. There are 23 different <code>connectors</code> at the time of writing. We will be using <code>BigQuery</code> :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/70bd7375-3548-4708-ad53-6b0cc561c946.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">google_connectors.PNG</figcaption><p></p>
</figure>
</div>
<p>We will be working with the table <code>fact_trips</code> table of our <code>taxi-rides-ny</code> project created in our dbt <code>production</code> environment :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/2ced51f2-c189-4564-a16d-9c16abd78dd0.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">looker_BQ.PNG</figcaption><p></p>
</figure>
</div>
<p>After connecting we are taken to the main dashboard. Although <code>dimensions</code> and <code>facts</code> should be familiar terms to those with knowledge of <a href="https://en.wikipedia.org/wiki/Dimensional_modeling">dimensional modeling</a> the name <code>fact_trips</code> can be changed to something that is more palatable for other stakeholders.</p>
<p>We can see all 27 columns and their data types. Default aggregation is applied on some, but these can and should be removed where this is not appropriate, e.g.&nbsp;categorical data. Columns can be added from here. Descriptions can also be added to provide useful information for other users of the data.</p>
<p>Note at the top there is a <code>Data Freshness</code> tab - the default setting is 12 hours but can be changed.</p>
<p>At the bottom there is a default <code>Metric</code> named <code>Record Count</code> which is useful - others can be added from here.</p>
<p>After modifying the default aggregations go ahead and create a report :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/2e4c1436-436a-44e6-99b8-460d489d7ce0.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">looker_create_report.PNG</figcaption><p></p>
</figure>
</div>
<p>Let’s choose a time series chart to begin with :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/0b369a89-bb07-4260-bca2-ee4fa589e638.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">looker_time_series.PNG</figcaption><p></p>
</figure>
</div>
<p>We can see right away that the date range is 2001 to 2082! This is because we didn’t filter the data and we have some outliers. We can define our date range by using <code>Add a control</code> from the dropdown, and dragging the filter above our chart.</p>
<p>There is a wide variety of visualizations available to us. For illustrative purposes we will :</p>
<ul>
<li>create a scorecard for <code>Total trips recorded</code></li>
<li>create a pie chart for <code>Service type distribution</code></li>
<li>create a table with a heatmap for <code>Trips per pickup zone</code></li>
<li>create a stacked column chart for <code>Trips per month and year</code>. We need to create a new field to allow us to filter by month</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/c294b73c-1978-475a-89be-69bd3e6eef45.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">new_field_formula.PNG</figcaption><p></p>
</figure>
</div>
<p>The final result is an aesthetic visualization ready for sharing. There is an email delivery scheduler which is very useful for providing for example weekly KPIs for key stakeholders :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4_files/figure-html/c7996384-1e46-4ce4-9479-c25f1fd5ecf5.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">dashboard.PNG</figcaption><p></p>
</figure>
</div>
</section>
<section id="visualising-the-data-with-metabase" class="level3">
<h3 class="anchored" data-anchor-id="visualising-the-data-with-metabase">4.5.2 Visualising the data with Metabase</h3>
<p>We have seen what Looker can do, but there is also another visualization package called <strong>Metabase</strong>. There is a <a href="https://www.metabase.com/">cloud version</a> but also a free <a href="https://www.metabase.com/start/oss/">open source version</a> where you can grab the Docker image for local hosting.</p>
<p>To learn more about Metabase check out the Metabase <a href="https://www.metabase.com/learn/visualization/">docs and tutorials</a>.</p>
</section>
<section id="advanced-knowledge" class="level3">
<h3 class="anchored" data-anchor-id="advanced-knowledge">Advanced knowledge</h3>
<ul>
<li><a href="https://docs.getdbt.com/docs/building-a-dbt-project/building-models/configuring-incremental-models">Make a model Incremental</a></li>
<li><a href="https://docs.getdbt.com/reference/resource-configs/tags">Use of tags</a></li>
<li><a href="https://docs.getdbt.com/docs/building-a-dbt-project/hooks-operations">Hooks</a></li>
<li><a href="https://docs.getdbt.com/docs/building-a-dbt-project/analyses">Analysis</a></li>
<li><a href="https://docs.getdbt.com/docs/building-a-dbt-project/snapshots">Snapshots</a></li>
<li><a href="https://docs.getdbt.com/docs/building-a-dbt-project/exposures">Exposure</a></li>
<li><a href="https://docs.getdbt.com/docs/building-a-dbt-project/metrics">Metrics</a></li>
</ul>
</section>
<section id="workshop-maximizing-confidence-in-your-data-model-changes-with-dbt-and-piperider" class="level3">
<h3 class="anchored" data-anchor-id="workshop-maximizing-confidence-in-your-data-model-changes-with-dbt-and-piperider">Workshop: Maximizing Confidence in Your Data Model Changes with dbt and PipeRider</h3>
<p><a href="https://www.youtube.com/watch?v=O-tyUOQccSs">Maximizing Confidence in Your Data Model Changes with dbt and PipeRider</a></p>
<p>To learn how to use PipeRider together with dbt for detecting changes in model and data, <a href="https://github.com/InfuseAI/taxi_rides_ny_duckdb">sign up for a workshop here</a>.</p>


</section>
</section>

 ]]></description>
  <category>dbt</category>
  <category>BigQuery</category>
  <category>Looker</category>
  <category>DataTalksClub</category>
  <guid>https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/DE_Zoomcamp_Week_4.html</guid>
  <pubDate>Mon, 27 Mar 2023 22:00:00 GMT</pubDate>
  <media:content url="https://stephen137.github.io/posts/DE_Zoomcamp_Week_4/d_b_t.PNG" medium="image"/>
</item>
<item>
  <title>Data Engineering Zoomcamp - Week 3</title>
  <dc:creator>Stephen Barrie</dc:creator>
  <link>https://stephen137.github.io/posts/DE_Zoomcamp_Week_3/DE_Zoomcamp_Week_3.html</link>
  <description><![CDATA[ 




<section id="week-3---data-warehouse-and-bigquery" class="level2">
<h2 class="anchored" data-anchor-id="week-3---data-warehouse-and-bigquery">Week 3 - Data Warehouse and BigQuery</h2>
<p>A <code>Data Warehouse</code> is an OLAP solution used for reporting and data analysis and generally includes raw, meta and summary data.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_3/DE_Zoomcamp_Week_3_files/figure-html/70ee6d4b-a9f7-43b6-820d-7ec5d4bb7b60.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">data_warehouse.PNG</figcaption><p></p>
</figure>
</div>
<p>BigQuery (BQ) is a widely used serverless Data Warehouse which has a lot of built in features such as:</p>
<ul>
<li>machine learning</li>
<li>geospatial analysis</li>
<li>business intelligence</li>
</ul>
<p>One of its key strengths is that Big Query maximises flexibility by separating the compute engine that analyses data from the storage.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_3/DE_Zoomcamp_Week_3_files/figure-html/de264a26-0485-415e-9ac0-df069fae5389.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">week_3.JPG</figcaption><p></p>
</figure>
</div>
<section id="data-warehouse-and-bigquery" class="level3">
<h3 class="anchored" data-anchor-id="data-warehouse-and-bigquery">3.1.1 Data Warehouse and BigQuery</h3>
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_3/DE_Zoomcamp_Week_3_files/figure-html/40e31b3b-24f1-4632-a167-94fc27cea629.png" class="img-fluid" alt="download.png">In <a href="https://en.wikipedia.org/wiki/Online_transaction_processing">OnLine Transaction Processing (OLTP)</a> information systems typically facilitate and manage transaction-oriented applications. This is contrasted with <a href="https://en.wikipedia.org/wiki/Online_analytical_processing">OnLine Analytical Processing (OLAP)</a> which is an approach to answer multi-dimensional analytical (MDA) queries swiftly in computing.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_3/DE_Zoomcamp_Week_3_files/figure-html/145c4ddb-770a-4f44-af04-a36790ce2e7b.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">OLTP_OLAP_1.PNG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_3/DE_Zoomcamp_Week_3_files/figure-html/3cb207e9-03e9-4f8d-90b8-f197ab0f9848.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">OLTP_OLAP_2.PNG</figcaption><p></p>
</figure>
</div>
<p>Let’s now take a closer look at BQ in particular our New York taxi project dataset. BQ generally caches data, but for our purposes let’s disable this to ensure consistent results:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_3/DE_Zoomcamp_Week_3_files/figure-html/25432c8d-26ae-4d65-b344-fb119d867139.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">big_query_cache.PNG</figcaption><p></p>
</figure>
</div>
<p>BQ also provides a lot of open source public datasets e.g.&nbsp;<code>citibike_stations</code> and we can run a query and save the results or explore further using <code>Sheets</code>, <code>Looker Studio</code> or <code>Colab Notebook</code> :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_3/DE_Zoomcamp_Week_3_files/figure-html/a92762a6-186f-4139-8073-9e453ecb9474.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">citibike_stations.PNG</figcaption><p></p>
</figure>
</div>
<p>In terms of pricing there are two tiers - on demand pricing and flat rate pricing - depending on your specific requirements.</p>
<p>As explained in the <a href="https://cloud.google.com/bigquery/docs/tables-intro">BQ docs</a> external tables are similar to standard BigQuery tables, in that these tables store their metadata and schema in BigQuery storage. However, their data resides in an external source. External tables are contained inside a dataset, and you manage them in the same way that you manage a standard BigQuery table.</p>
<p>Let’s use the data we already have stored in our data bucket and create an external table. In my particular case, project name is <code>taxi-rides-ny-137</code>, dataset name is <code>de_zoomcamp</code> and we are going to create a table named <code>external_yellow_tripdata</code>.</p>
<p>The files I have in GCS are <code>parquet</code> format and we copy the path ids and include as <code>uris</code> :</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">CREATE OR REPLACE EXTERNAL TABLE `taxi<span class="op" style="color: #5E5E5E;">-</span>rides<span class="op" style="color: #5E5E5E;">-</span>ny<span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">137.</span><span class="er" style="color: #AD0000;">de_zoomcamp</span>.external_yellow_tripdata`</span>
<span id="cb1-2">OPTIONS (</span>
<span id="cb1-3">  <span class="bu" style="color: null;">format</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'PARQUET'</span>,</span>
<span id="cb1-4">  uris <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'gs://dtc_data_lake_taxi-rides-ny-137/data/yellow/yellow_tripdata_2021-01.parquet'</span>, <span class="st" style="color: #20794D;">'gs://dtc_data_lake_taxi-rides-ny-137/data/yellow/yellow_tripdata_2021-02.parquet'</span>, <span class="st" style="color: #20794D;">'gs://dtc_data_lake_taxi-rides-ny-137/data/yellow/yellow_tripdata_2021-03.parquet'</span>]</span>
<span id="cb1-5">)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
</div>
<p>We run the query and our table is created. BQ is able to pick up the schema (column name and data type) directly from the parquet file :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_3/DE_Zoomcamp_Week_3_files/figure-html/49588a9e-70a9-4acd-9238-c0f5db0af5c7.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">external_yellow_trip_table_schema.PNG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_3/DE_Zoomcamp_Week_3_files/figure-html/64cac1d8-c06b-4e5d-bc33-c17a1b78ae9a.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">external_yellow_trip_table_details.PNG</figcaption><p></p>
</figure>
</div>
<p>Let’s now run a quick query on this table :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_3/DE_Zoomcamp_Week_3_files/figure-html/69817a34-ca97-443c-a311-ab4331817f65.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">external_yellow_trip_table_query.PNG</figcaption><p></p>
</figure>
</div>
</section>
<section id="partitioning-in-big-query" class="level3">
<h3 class="anchored" data-anchor-id="partitioning-in-big-query">Partitioning in Big Query</h3>
<p>A partitioned table is divided into segments, called partitions, that make it easier to manage and query your data. By dividing a large table into smaller partitions, you can improve query performance and control costs by reducing the number of bytes read by a query. You partition tables by specifying a partition column which is used to segment the table.</p>
<p>Further information is provided in the <a href="https://cloud.google.com/bigquery/docs/partitioned-tables">BQ docs</a>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_3/DE_Zoomcamp_Week_3_files/figure-html/92740acb-fb57-41ae-ae0f-f846f7a290a0.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">partition.PNG</figcaption><p></p>
</figure>
</div>
<p>Let’s first create a <code>non-partioned table</code> to demonstrate the benefits of a <code>partitioned table</code> :</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;">## Create a non partitioned table from external table</span></span>
<span id="cb2-2">CREATE OR REPLACE TABLE taxi<span class="op" style="color: #5E5E5E;">-</span>rides<span class="op" style="color: #5E5E5E;">-</span>ny<span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">137.</span><span class="er" style="color: #AD0000;">de_zoomcamp</span>.yellow_tripdata_non_partitoned AS</span>
<span id="cb2-3">SELECT <span class="op" style="color: #5E5E5E;">*</span> </span>
<span id="cb2-4">FROM taxi<span class="op" style="color: #5E5E5E;">-</span>rides<span class="op" style="color: #5E5E5E;">-</span>ny<span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">137.</span><span class="er" style="color: #AD0000;">de_zoomcamp</span>.external_yellow_tripdata<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_3/DE_Zoomcamp_Week_3_files/figure-html/dd37074e-bf0b-4adf-94d7-521a1695be38.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">non_partition.PNG</figcaption><p></p>
</figure>
</div>
<p>As we can see the pick up times are not in chronological order. Now let’s create a partitioned table which partitions by the column `tpep_pickup_datetime’:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;"># Create a partitioned table from external table</span></span>
<span id="cb3-2">CREATE OR REPLACE TABLE taxi<span class="op" style="color: #5E5E5E;">-</span>rides<span class="op" style="color: #5E5E5E;">-</span>ny<span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">137.</span><span class="er" style="color: #AD0000;">de_zoomcamp</span>.yellow_tripdata_partitoned</span>
<span id="cb3-3">PARTITION BY</span>
<span id="cb3-4">  DATE(tpep_pickup_datetime) AS</span>
<span id="cb3-5">SELECT <span class="op" style="color: #5E5E5E;">*</span> FROM taxi<span class="op" style="color: #5E5E5E;">-</span>rides<span class="op" style="color: #5E5E5E;">-</span>ny<span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">137.</span><span class="er" style="color: #AD0000;">de_zoomcamp</span>.external_yellow_tripdata<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_3/DE_Zoomcamp_Week_3_files/figure-html/018a24b8-40e4-42c4-a6e5-8b975e766247.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">partitioned.PNG</figcaption><p></p>
</figure>
</div>
<p>As we can see our trip pickup times are now sorted in chronological order. Let’s take a closer look at how the partitioning is workng in practice.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;"># Let's look into the partitions</span></span>
<span id="cb4-2">SELECT table_name, partition_id, total_rows</span>
<span id="cb4-3">FROM `de_zoomcamp.INFORMATION_SCHEMA.PARTITIONS`</span>
<span id="cb4-4">WHERE table_name <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'yellow_tripdata_partitoned'</span></span>
<span id="cb4-5">ORDER BY total_rows DESC<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_3/DE_Zoomcamp_Week_3_files/figure-html/d0d0149e-805c-4eef-93a1-806b9f61733a.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">partition_info.PNG</figcaption><p></p>
</figure>
</div>
<p>We can see the partitioning (splits) by date. Let’s move on to another interesting feature concept in BQ known as <code>Clustering</code>.</p>
</section>
<section id="clustering-in-big-query" class="level3">
<h3 class="anchored" data-anchor-id="clustering-in-big-query">Clustering in Big Query</h3>
<p>Clustered tables in BigQuery are tables that have a user-defined column sort order using clustered columns. <a href="https://cloud.google.com/bigquery/docs/clustered-tables">Clustered tables</a> can improve query performance and reduce query costs.</p>
<p>In BigQuery, a clustered column is a user-defined table property that sorts <a href="https://cloud.google.com/bigquery/docs/storage_overview#storage_layout">storage blocks</a> based on the values in the clustered columns. The storage blocks are adaptively sized based on the size of the table. A clustered table maintains the sort properties in the context of each operation that modifies it. Queries that filter or aggregate by the clustered columns only scan the relevant blocks based on the clustered columns instead of the entire table or table partition. As a result, BigQuery might not be able to accurately estimate the bytes to be processed by the query or the query costs, but it attempts to reduce the total bytes at execution.</p>
<p>When you cluster a table using multiple columns, the column order determines which columns take precedence when BigQuery sorts and groups the data into storage blocks.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_3/DE_Zoomcamp_Week_3_files/figure-html/59f258a9-ef38-4851-a47d-e5e84c47803a.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">clustering.PNG</figcaption><p></p>
</figure>
</div>
<p>Let’s develop the partitioned table we created previously and create a new table with cluster functionality - by <code>VendorID</code> :</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;"># Creating a partition and cluster table</span></span>
<span id="cb5-2">CREATE OR REPLACE TABLE taxi<span class="op" style="color: #5E5E5E;">-</span>rides<span class="op" style="color: #5E5E5E;">-</span>ny<span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">137.</span><span class="er" style="color: #AD0000;">de_zoomcamp</span>.yellow_tripdata_partitioned_clustered</span>
<span id="cb5-3">PARTITION BY DATE(tpep_pickup_datetime)</span>
<span id="cb5-4">CLUSTER BY VendorID AS</span>
<span id="cb5-5">SELECT <span class="op" style="color: #5E5E5E;">*</span> FROM taxi<span class="op" style="color: #5E5E5E;">-</span>rides<span class="op" style="color: #5E5E5E;">-</span>ny<span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">137.</span><span class="er" style="color: #AD0000;">de_zoomcamp</span>.external_yellow_tripdata<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
</div>
<p>We obtain an error warning as the VendorID data type is <code>Float</code>. We need to convert to integer in order to cluster. We can modify table schemas <a href="https://cloud.google.com/bigquery/docs/managing-table-schemas">cast a column’s data type</a> including casting data types, by overwriting or saving to a new destination table.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">SELECT <span class="op" style="color: #5E5E5E;">*</span>,</span>
<span id="cb6-2"> CAST(VendorID AS INT64) AS Vendor_ID</span>
<span id="cb6-3">FROM taxi<span class="op" style="color: #5E5E5E;">-</span>rides<span class="op" style="color: #5E5E5E;">-</span>ny<span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">137.</span><span class="er" style="color: #AD0000;">de_zoomcamp</span>.external_yellow_tripdata</span>
<span id="cb6-4">WHERE VendorID IS NOT NULL</span>
<span id="cb6-5"> <span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
</div>
<p>We can configure our query further by clicking on <code>More</code> and specifying the destination etc.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_3/DE_Zoomcamp_Week_3_files/figure-html/e4ad694c-4824-414d-b740-0520f3fce5f1.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">cast.PNG</figcaption><p></p>
</figure>
</div>
<p>OK so with a new column <code>Vendor_ID</code> now created with type <code>int64</code> let’s now proceed to create our partioned, clustered table:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;"># Creating a partition and cluster table</span></span>
<span id="cb7-2">CREATE OR REPLACE TABLE taxi<span class="op" style="color: #5E5E5E;">-</span>rides<span class="op" style="color: #5E5E5E;">-</span>ny<span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">137.</span><span class="er" style="color: #AD0000;">de_zoomcamp</span>.yellow_tripdata_partitoned_clustered</span>
<span id="cb7-3">PARTITION BY DATE(tpep_pickup_datetime)</span>
<span id="cb7-4">CLUSTER BY Vendor_ID AS</span>
<span id="cb7-5">SELECT <span class="op" style="color: #5E5E5E;">*</span> FROM taxi<span class="op" style="color: #5E5E5E;">-</span>rides<span class="op" style="color: #5E5E5E;">-</span>ny<span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">137.</span><span class="er" style="color: #AD0000;">de_zoomcamp</span>.external_yellow_tripdata_cast<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_3/DE_Zoomcamp_Week_3_files/figure-html/b46ee5cf-f50f-4505-9bd4-fab552bfb035.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">partition_cluster.PNG</figcaption><p></p>
</figure>
</div>
<p>To illustrate the cost savings available through using clustering, the clustered table uses <code>66.25 MB</code> against <code>68.73MB</code> for the partioned table, a saving of 3.6%. The costs savings become more pronounced as the size of the dataset increases.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_3/DE_Zoomcamp_Week_3_files/figure-html/0e98a06e-5901-4945-946a-d1c1d7a33376.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">partition_memory.PNG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_3/DE_Zoomcamp_Week_3_files/figure-html/cf0b5541-515b-4f1d-a6a7-3f5d7aa27e42.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">partition_cluster_memory.PNG</figcaption><p></p>
</figure>
</div>
</section>
<section id="partitioning-and-clustering" class="level3">
<h3 class="anchored" data-anchor-id="partitioning-and-clustering">3.1.2 Partitioning and Clustering</h3>
<p>Whilst, partitioning and clustering can enhance query performance, it is important to be aware that they do generate some computational overhead (meta data reads and maintenance). As a general guide, we should only consider using partitioning and clustering for tables with a data size of 1GB +.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_3/DE_Zoomcamp_Week_3_files/figure-html/2e716443-57de-4797-a48a-268d5457c41b.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">BQ_partition.PNG</figcaption><p></p>
</figure>
</div>
<p>The default ingestion time is daily, however you may require more granularity in which case BQ also offers hourly partitioning. Note that the number of partitions is limited to 4000.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_3/DE_Zoomcamp_Week_3_files/figure-html/e9aa8b00-0a3e-4300-afd7-e2b7c94b2e76.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">BQ_clustering.PNG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_3/DE_Zoomcamp_Week_3_files/figure-html/3176236d-4917-4084-b1cb-b67cffdd200d.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">clustering_columns.PNG</figcaption><p></p>
</figure>
</div>
<p>Let’s have a look at a comparison between the two and the criteria to consider when choosing one, or the other, or both.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_3/DE_Zoomcamp_Week_3_files/figure-html/47671cef-dc12-4a4b-b8a6-e289af981ccd.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">partition_vs_cluster.PNG</figcaption><p></p>
</figure>
</div>
<p>Clustering should be used where :</p>
<ul>
<li>partitioning results in a small amount of data (~ &lt; 1 GB) per partition</li>
<li>partitioning results in a large number of partitions (beyond the 4k limit)</li>
<li>partitioning results in our mutation operations modifying the majority of partitions in the table frequently (e.g.&nbsp;every few minutes)</li>
</ul>
</section>
<section id="automatic-reclustering" class="level3">
<h3 class="anchored" data-anchor-id="automatic-reclustering">Automatic reclustering</h3>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_3/DE_Zoomcamp_Week_3_files/figure-html/8931ea16-2875-44f7-88ac-ad18745ba278.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">automatic_reclustering.PNG</figcaption><p></p>
</figure>
</div>
</section>
<section id="biq-query-best-practices" class="level3">
<h3 class="anchored" data-anchor-id="biq-query-best-practices">3.2.1 Biq Query Best Practices</h3>
<p>Generally most of our efforts are focused on :</p>
<ol type="1">
<li>cost reduction</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_3/DE_Zoomcamp_Week_3_files/figure-html/e29879e1-20cc-421a-8f4a-4a0bb405f467.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">cost_reduction.PNG</figcaption><p></p>
</figure>
</div>
<ol start="2" type="1">
<li>improved query performance</li>
</ol>
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_3/DE_Zoomcamp_Week_3_files/figure-html/16c0d794-4e42-4747-ac0b-e19ae722e29f.PNG" class="img-fluid" alt="performance.PNG"> <img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_3/DE_Zoomcamp_Week_3_files/figure-html/c27540e0-b15f-4cb8-885c-45445323d8ff.PNG" class="img-fluid" alt="performance_2.PNG"></p>
<p>If we place the largest table first then it will be distributed evenly, and with the smallest table placed second it will be <code>broadcasted</code> to all of the nodes, which is computationally efficient. We will cover the internal workings of Biq Query in the next section.</p>
</section>
<section id="internals-of-big-query-under-the-hood" class="level3">
<h3 class="anchored" data-anchor-id="internals-of-big-query-under-the-hood">3.2.2 Internals of Big Query (under the hood)</h3>
<p>Whilst it is possible to work with Big Query (as with say machine learning) without a detailed understanding of what is going on <code>under the hood</code> it is helpful to have a high-level overview so that we can build our query structure in a way that maximises efficiency and minimises cost.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_3/DE_Zoomcamp_Week_3_files/figure-html/e25186d7-2955-4b46-a4ba-a94c840f04d8.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">BQ_arch.PNG</figcaption><p></p>
</figure>
</div>
</section>
<section id="record-oriented-vs-column-oriented-memory-storage" class="level3">
<h3 class="anchored" data-anchor-id="record-oriented-vs-column-oriented-memory-storage">Record-oriented vs column-oriented memory storage</h3>
<p>We touched earlier on the idea of <code>broadcasting</code> which is a computationally efficient method of reading data. The following diagram helps illustrate the concept :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_3/DE_Zoomcamp_Week_3_files/figure-html/a32f0601-6a15-44f8-97f0-ea5ad6417f30.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">record_column.PNG</figcaption><p></p>
</figure>
</div>
<p>A <code>record-oriented</code> structure is similar to how csv’s work - they are easy to process and understand. Big Query uses the alternative <code>column-oriented</code> structure which helps provide better aggregation performance.</p>
</section>
<section id="dremel" class="level3">
<h3 class="anchored" data-anchor-id="dremel">Dremel</h3>
<p>Dremel is a scalable, interactive ad-hoc query system for analysis of read-only nested data. By combining multi-level execution trees and columnar data layout, it is capable of running aggregation queries over trillion-row tables in seconds. The system scales to thousands of CPUs and petabytes of data, and has thousands of users at Google. If you want to dig deeper you can read <a href="https://research.google/pubs/pub36632/">this publication</a>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_3/DE_Zoomcamp_Week_3_files/figure-html/9262075d-f29f-4c7d-be0d-9dbfad58c2a4.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">dremel.PNG</figcaption><p></p>
</figure>
</div>
<p>Some additional resources are included below :</p>
<p><a href="https://cloud.google.com/bigquery/docs/how-to">BigQuery How-to guides</a></p>
<p><a href="https://panoply.io/data-warehouse-guide/bigquery-architecture/">A Deep Dive Into Google BigQuery Architecture</a></p>
<p><a href="https://www.goldsborough.me/distributed-systems/2019/05/18//21-09-00-a_look_at_dremel/">A Look at Dremel</a></p>
</section>
<section id="bigquery-machine-learning" class="level3">
<h3 class="anchored" data-anchor-id="bigquery-machine-learning">3.3.1 BigQuery Machine Learning</h3>
<p>BigQuery makes machine learning techniques accessible to those without any in depth knowledge of Python and its traditional machine learning libraries such as <code>PyTorch</code> or <code>scikit-learn</code>. A dangerous thing if handled without care. Nevertheless it is useful to be able to leverage machine learning to unlock even richer insights from our data.</p>
<p>A model can be built within BigQuery with no need to export data into a different system.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_3/DE_Zoomcamp_Week_3_files/figure-html/f670cfb1-c18f-4905-a152-d12031de0563.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">ML_bigquery_price1.PNG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_3/DE_Zoomcamp_Week_3_files/figure-html/2ffe6c4c-d146-48b6-85b0-a51af8230a4e.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">ML_bigquery_price2.PNG</figcaption><p></p>
</figure>
</div>
<p>A typical machine learning flow is illustrated below. Big Query can handle the train/test split, feature engineering, parameter tuning, cross validation etc and ultimately model deployment using a Docker image.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_3/DE_Zoomcamp_Week_3_files/figure-html/2afbe178-f81e-4c06-84ce-f3766eaf881f.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">ML_flow.PNG</figcaption><p></p>
</figure>
</div>
</section>
<section id="which-algorithms-should-we-use" class="level3">
<h3 class="anchored" data-anchor-id="which-algorithms-should-we-use">Which algorithms should we use ?</h3>
<p>Our particular use case will drive our algorithm selection. An illustration is included below which provides examples of which algorithms might be appropriate depending on what it is that you want to do :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_3/DE_Zoomcamp_Week_3_files/figure-html/5d5ec721-d7fd-4f30-a245-618c9a67d81d.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">algorithms.PNG</figcaption><p></p>
</figure>
</div>
</section>
<section id="building-a-linear-regression-model-in-bigquery" class="level3">
<h3 class="anchored" data-anchor-id="building-a-linear-regression-model-in-bigquery">Building a Linear Regression model in BigQuery</h3>
<p>A wide range of models can be created within BQ - see the <a href="https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-create">attached documentation</a>. We are going to build a <code>Linear Regression</code> model which predicts the tip amount (our <code>target variable</code>) based on some selected input variable columns - or <code>features</code>as they are often referred to. We will be revisiting our <code>yellow_tripdata_partitioned</code> table.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;"># SELECT THE COLUMNS (FEATURES) OF INTEREST</span></span>
<span id="cb8-2">SELECT passenger_count, trip_distance, PULocationID, DOLocationID, payment_type, fare_amount, tolls_amount, tip_amount</span>
<span id="cb8-3">FROM taxi<span class="op" style="color: #5E5E5E;">-</span>rides<span class="op" style="color: #5E5E5E;">-</span>ny<span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">137.</span><span class="er" style="color: #AD0000;">de_zoomcamp</span>.yellow_tripdata_partitoned</span>
<span id="cb8-4">WHERE fare_amount <span class="op" style="color: #5E5E5E;">!=</span> <span class="dv" style="color: #AD0000;">0</span><span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
</div>
<p>Feature preprocessing is one of the most important steps in developing a machine learning model. It consists of the creation of features as well as the cleaning of the data. Sometimes, the creation of features is also referred as “feature engineering”. BigQuery ML supports two types of feature preprocessing:</p>
<ul>
<li><p><a href="https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-auto-preprocessing">Automatic preprocessing</a></p></li>
<li><p><a href="https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-preprocessing-functions">Manual preprocessing</a></p></li>
</ul>
<p>Data types are important when building a machine learning model - essentially all input features need to be <code>numerical</code>. Our table includes some <code>categorical</code> data which although not strictly numerical can be coerced by something called <code>one-hot-encoding</code>. BQ can do this for us but we first have to cast the categorical datatypes <code>PULocationID</code>, <code>DOLocationID</code>, and <code>payment_type</code> from <code>INTEGER</code> to <code>STRING</code>.</p>
<p>Let’s create a new table which for our machine learning model :</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;"># CREATE A ML TABLE WITH APPROPRIATE DATA TYPES</span></span>
<span id="cb9-2">CREATE OR REPLACE TABLE `taxi<span class="op" style="color: #5E5E5E;">-</span>rides<span class="op" style="color: #5E5E5E;">-</span>ny<span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">137.</span><span class="er" style="color: #AD0000;">de_zoomcamp</span>.yellow_tripdata_ml` (</span>
<span id="cb9-3">`passenger_count` INTEGER,</span>
<span id="cb9-4">`trip_distance` FLOAT64,</span>
<span id="cb9-5">`PULocationID` STRING,</span>
<span id="cb9-6">`DOLocationID` STRING,</span>
<span id="cb9-7">`payment_type` STRING,</span>
<span id="cb9-8">`fare_amount` FLOAT64,</span>
<span id="cb9-9">`tolls_amount` FLOAT64,</span>
<span id="cb9-10">`tip_amount` FLOAT64</span>
<span id="cb9-11">) AS (</span>
<span id="cb9-12">SELECT CAST(passenger_count AS INTEGER) , trip_distance, cast(PULocationID AS STRING), CAST(DOLocationID AS STRING),</span>
<span id="cb9-13">CAST(payment_type AS STRING), fare_amount, tolls_amount, tip_amount</span>
<span id="cb9-14">FROM `taxi<span class="op" style="color: #5E5E5E;">-</span>rides<span class="op" style="color: #5E5E5E;">-</span>ny<span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">137.</span><span class="er" style="color: #AD0000;">de_zoomcamp</span>.yellow_tripdata_partitoned` WHERE fare_amount <span class="op" style="color: #5E5E5E;">!=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb9-15">)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_3/DE_Zoomcamp_Week_3_files/figure-html/d4e7ec73-77a2-4da9-8604-a399b804a59f.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">ML_table.PNG</figcaption><p></p>
</figure>
</div>
<p>Let’s now go ahead and create our linear regression model :</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;"># CREATE MODEL WITH DEFAULT SETTING</span></span>
<span id="cb10-2">CREATE OR REPLACE MODEL `taxi<span class="op" style="color: #5E5E5E;">-</span>rides<span class="op" style="color: #5E5E5E;">-</span>ny<span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">137.</span><span class="er" style="color: #AD0000;">de_zoomcamp</span>.tip_model`</span>
<span id="cb10-3">OPTIONS</span>
<span id="cb10-4">(model_type<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'linear_reg'</span>,</span>
<span id="cb10-5">input_label_cols<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'tip_amount'</span>],</span>
<span id="cb10-6">DATA_SPLIT_METHOD<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'AUTO_SPLIT'</span>) AS</span>
<span id="cb10-7">SELECT</span>
<span id="cb10-8"><span class="op" style="color: #5E5E5E;">*</span></span>
<span id="cb10-9">FROM</span>
<span id="cb10-10">`taxi<span class="op" style="color: #5E5E5E;">-</span>rides<span class="op" style="color: #5E5E5E;">-</span>ny<span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">137.</span><span class="er" style="color: #AD0000;">de_zoomcamp</span>.yellow_tripdata_ml`</span>
<span id="cb10-11">WHERE</span>
<span id="cb10-12">tip_amount IS NOT NULL<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_3/DE_Zoomcamp_Week_3_files/figure-html/bbe24e49-c8d4-4b9c-b064-f48879ad927d.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">taxi_tip_lin_reg_model.PNG</figcaption><p></p>
</figure>
</div>
<p>That didn’t take too long - just 32 seconds to build our Linear Regression model! We can find out more about our model here :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_3/DE_Zoomcamp_Week_3_files/figure-html/504a3578-4ec2-4d5e-a4be-b60564793461.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">tip_model.PNG</figcaption><p></p>
</figure>
</div>
<p>Note that this is by no means an optimal model - our aim here is to illustrate how to build and deploy a simple model using BigQuery.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_3/DE_Zoomcamp_Week_3_files/figure-html/21c05ad6-54a1-4eb8-99d1-b013825307bb.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">tip_model_evaluation.PNG</figcaption><p></p>
</figure>
</div>
<p>Let’s now get some <code>summary statistics</code> for our model <code>features</code> - that is the columns from our table which our model will use to try to map or predict the level of tip :</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;"># CHECK FEATURES</span></span>
<span id="cb11-2">SELECT <span class="op" style="color: #5E5E5E;">*</span> FROM ML.FEATURE_INFO(MODEL `taxi<span class="op" style="color: #5E5E5E;">-</span>rides<span class="op" style="color: #5E5E5E;">-</span>ny<span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">137.</span><span class="er" style="color: #AD0000;">de_zoomcamp</span>.tip_model`)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_3/DE_Zoomcamp_Week_3_files/figure-html/3317f767-1989-49f9-9eb3-68ed56348952.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">lin_reg_model_summary_stats.PNG</figcaption><p></p>
</figure>
</div>
<p>Next, let’s evaluate our model :</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;"># EVALUATE THE MODEL</span></span>
<span id="cb12-2">SELECT</span>
<span id="cb12-3"><span class="op" style="color: #5E5E5E;">*</span></span>
<span id="cb12-4">FROM</span>
<span id="cb12-5">ML.EVALUATE(MODEL `taxi<span class="op" style="color: #5E5E5E;">-</span>rides<span class="op" style="color: #5E5E5E;">-</span>ny<span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">137.</span><span class="er" style="color: #AD0000;">de_zoomcamp</span>.tip_model`,</span>
<span id="cb12-6">(</span>
<span id="cb12-7">SELECT</span>
<span id="cb12-8"><span class="op" style="color: #5E5E5E;">*</span></span>
<span id="cb12-9">FROM</span>
<span id="cb12-10">`taxi<span class="op" style="color: #5E5E5E;">-</span>rides<span class="op" style="color: #5E5E5E;">-</span>ny<span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">137.</span><span class="er" style="color: #AD0000;">de_zoomcamp</span>.yellow_tripdata_ml`</span>
<span id="cb12-11">WHERE</span>
<span id="cb12-12">tip_amount IS NOT NULL</span>
<span id="cb12-13">))<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_3/DE_Zoomcamp_Week_3_files/figure-html/a6417651-b57f-4d26-a81d-6359847ac907.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">model_evaluate.PNG</figcaption><p></p>
</figure>
</div>
<p>And now let’s make some predictions on the <code>test</code> data which was held out from the training dataset (as part of the train/test split). The idea is that the model makes predictions using input features that it has not seen before, which provides us with some assurance on how well the model will perform.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;"># MAKE PREDICTIONS</span></span>
<span id="cb13-2">SELECT</span>
<span id="cb13-3"><span class="op" style="color: #5E5E5E;">*</span></span>
<span id="cb13-4">FROM</span>
<span id="cb13-5">ML.PREDICT(MODEL `taxi<span class="op" style="color: #5E5E5E;">-</span>rides<span class="op" style="color: #5E5E5E;">-</span>ny<span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">137.</span><span class="er" style="color: #AD0000;">de_zoomcamp</span>.tip_model`,</span>
<span id="cb13-6">(</span>
<span id="cb13-7">SELECT</span>
<span id="cb13-8"><span class="op" style="color: #5E5E5E;">*</span></span>
<span id="cb13-9">FROM</span>
<span id="cb13-10">`taxi<span class="op" style="color: #5E5E5E;">-</span>rides<span class="op" style="color: #5E5E5E;">-</span>ny<span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">137.</span><span class="er" style="color: #AD0000;">de_zoomcamp</span>.yellow_tripdata_ml`</span>
<span id="cb13-11">WHERE</span>
<span id="cb13-12">tip_amount IS NOT NULL</span>
<span id="cb13-13">))<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_3/DE_Zoomcamp_Week_3_files/figure-html/e9cfebe0-42bf-48f7-92c2-8c301d326848.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">taxi_tip_predict.PNG</figcaption><p></p>
</figure>
</div>
<p>There is a trade off to be made with machine learning models. As model complexity increases performance is likely to improve, however the danger is that we do not fully understand what is going on <code>under the hood</code>. You may have heard the term <code>black box</code> being used to describe such models.</p>
<p>If you want to understand I highly recommend this book <a href="https://christophm.github.io/interpretable-ml-book/">Interpretable Machine Learning</a> by <a href="https://christophmolnar.com/">Christoph Molnar</a> which is an excellent reference guide.</p>
<p>BQ does provide some assistance with model interpretation - in the form of <code>explain_predict</code> :</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;"># PREDICT AND EXPLAIN</span></span>
<span id="cb14-2">SELECT</span>
<span id="cb14-3"><span class="op" style="color: #5E5E5E;">*</span></span>
<span id="cb14-4">FROM</span>
<span id="cb14-5">ML.EXPLAIN_PREDICT(MODEL `taxi<span class="op" style="color: #5E5E5E;">-</span>rides<span class="op" style="color: #5E5E5E;">-</span>ny<span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">137.</span><span class="er" style="color: #AD0000;">de_zoomcamp</span>.tip_model`,</span>
<span id="cb14-6">(</span>
<span id="cb14-7">SELECT</span>
<span id="cb14-8"><span class="op" style="color: #5E5E5E;">*</span></span>
<span id="cb14-9">FROM</span>
<span id="cb14-10">`taxi<span class="op" style="color: #5E5E5E;">-</span>rides<span class="op" style="color: #5E5E5E;">-</span>ny<span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">137.</span><span class="er" style="color: #AD0000;">de_zoomcamp</span>.yellow_tripdata_ml`</span>
<span id="cb14-11">WHERE</span>
<span id="cb14-12">tip_amount IS NOT NULL</span>
<span id="cb14-13">), STRUCT(<span class="dv" style="color: #AD0000;">3</span> <span class="im" style="color: #00769E;">as</span> top_k_features))<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_3/DE_Zoomcamp_Week_3_files/figure-html/bc505b79-6ef5-431e-8bed-ace40cdf9b91.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">taxi_tip_model_explain_predict.PNG</figcaption><p></p>
</figure>
</div>
<p>BQ also allows us to refine our model by way of hyper parameter tuning :</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;"># HYPER PARAM TUNNING</span></span>
<span id="cb15-2">CREATE OR REPLACE MODEL `taxi<span class="op" style="color: #5E5E5E;">-</span>rides<span class="op" style="color: #5E5E5E;">-</span>ny<span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">137.</span><span class="er" style="color: #AD0000;">de_zoomcamp</span>.tip_hyperparam_model`</span>
<span id="cb15-3">OPTIONS</span>
<span id="cb15-4">(model_type<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'linear_reg'</span>,</span>
<span id="cb15-5">input_label_cols<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'tip_amount'</span>],</span>
<span id="cb15-6">DATA_SPLIT_METHOD<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'AUTO_SPLIT'</span>,</span>
<span id="cb15-7">num_trials<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">5</span>,</span>
<span id="cb15-8">max_parallel_trials<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>,</span>
<span id="cb15-9">l1_reg<span class="op" style="color: #5E5E5E;">=</span>hparam_range(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">20</span>),</span>
<span id="cb15-10">l2_reg<span class="op" style="color: #5E5E5E;">=</span>hparam_candidates([<span class="dv" style="color: #AD0000;">0</span>, <span class="fl" style="color: #AD0000;">0.1</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">10</span>])) AS</span>
<span id="cb15-11">SELECT</span>
<span id="cb15-12"><span class="op" style="color: #5E5E5E;">*</span></span>
<span id="cb15-13">FROM</span>
<span id="cb15-14">`taxi<span class="op" style="color: #5E5E5E;">-</span>rides<span class="op" style="color: #5E5E5E;">-</span>ny<span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">137.</span><span class="er" style="color: #AD0000;">de_zoomcamp</span>.yellow_tripdata_ml`</span>
<span id="cb15-15">WHERE</span>
<span id="cb15-16">tip_amount IS NOT NULL<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_3/DE_Zoomcamp_Week_3_files/figure-html/df01080b-dc5f-43ff-b507-1fbe73a08c40.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">hyper_param.PNG</figcaption><p></p>
</figure>
</div>
<p>Unfortunately hyperparameter tuning is not supported for my region - <code>europe-central2</code>. See the attached <a href="https://cloud.google.com/bigquery-ml/docs/locations">documentation</a> for details.</p>
<blockquote class="blockquote">
<p>Come to think of it I do recall Alexey flagging the importance of regions back at the start of the course! Both my bucket and dataset regions were set as Central Europe, but based on the recommendations I have seen on the course Slack - I created a new bucket and dataset with region set to US.</p>
</blockquote>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="co" style="color: #5E5E5E;"># HYPER PARAM TUNNING</span></span>
<span id="cb16-2">CREATE OR REPLACE MODEL `taxi<span class="op" style="color: #5E5E5E;">-</span>rides<span class="op" style="color: #5E5E5E;">-</span>ny<span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">137.</span><span class="er" style="color: #AD0000;">de_zoomcamp_ml</span>.tip_hyperparam_model`</span>
<span id="cb16-3">OPTIONS</span>
<span id="cb16-4">(model_type<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'linear_reg'</span>,</span>
<span id="cb16-5">input_label_cols<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'tip_amount'</span>],</span>
<span id="cb16-6">DATA_SPLIT_METHOD<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'AUTO_SPLIT'</span>,</span>
<span id="cb16-7">num_trials<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">5</span>,</span>
<span id="cb16-8">max_parallel_trials<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>,</span>
<span id="cb16-9">l1_reg<span class="op" style="color: #5E5E5E;">=</span>hparam_range(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">20</span>),</span>
<span id="cb16-10">l2_reg<span class="op" style="color: #5E5E5E;">=</span>hparam_candidates([<span class="dv" style="color: #AD0000;">0</span>, <span class="fl" style="color: #AD0000;">0.1</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">10</span>])) AS</span>
<span id="cb16-11">SELECT</span>
<span id="cb16-12"><span class="op" style="color: #5E5E5E;">*</span></span>
<span id="cb16-13">FROM</span>
<span id="cb16-14">`taxi<span class="op" style="color: #5E5E5E;">-</span>rides<span class="op" style="color: #5E5E5E;">-</span>ny<span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">137.</span><span class="er" style="color: #AD0000;">de_zoomcamp_ml</span>.yellow_tripdata_ml`</span>
<span id="cb16-15">WHERE</span>
<span id="cb16-16">tip_amount IS NOT NULL<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_3/DE_Zoomcamp_Week_3_files/figure-html/514cc215-b68e-4c8f-8a8f-14bcaa5e8985.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">hyper_param_model.PNG</figcaption><p></p>
</figure>
</div>
</section>
<section id="big-query-machine-learning-deployment" class="level3">
<h3 class="anchored" data-anchor-id="big-query-machine-learning-deployment">3.3.2 Big Query Machine Learning Deployment</h3>
<p>Now that we have built our model let’s now go ahead and deploy this in a Docker image.</p>
<p>In order to access Google Cloud from the command line, you will usually have to authorize the Google Cloud CLI. See the docs <a href="https://cloud.google.com/sdk/docs/authorizing">here</a> for more info. We already set this up earlier in the course.</p>
<p>So let us now export our model to Google Cloud Storage from the command line using:</p>
<pre><code>bq --project_id taxi-rides-ny-137 extract -m de_zoomcamp_ml.tip_model gs://de_zoomcamp_ml/models</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_3/DE_Zoomcamp_Week_3_files/figure-html/1e540a25-f6f0-464e-a990-c5e406a6df20.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">model_gcs.PNG</figcaption><p></p>
</figure>
</div>
<p>And we can see our model is now stored in Google Cloud Storage.</p>
<p>The next step is to create a new directory to save our model locally</p>
<pre><code>mkdir /tmp/model</code></pre>
<p>and then from within that directory run :</p>
<pre><code>gsutil cp -r gs://de_zoomcamp_ml/models /tmp/model</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_3/DE_Zoomcamp_Week_3_files/figure-html/874b37e3-b7b2-4e99-a072-1c7832d75bea.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">model_local_temp.PNG</figcaption><p></p>
</figure>
</div>
<p>Next create a version subdirectory. This step sets a version number (1 in this case) for the model :</p>
<pre><code>mkdir -p serving_dir/tip_model/1</code></pre>
<p>Copy all the temp model data into this directory :</p>
<pre><code>cp -r /tmp/model/models/* serving_dir/tip_model/1</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_3/DE_Zoomcamp_Week_3_files/figure-html/25a2f5b9-cc36-4e57-b226-34601964af6d.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">serving_dir.PNG</figcaption><p></p>
</figure>
</div>
<pre><code>rm - r tmp/model</code></pre>
</section>
<section id="serving-saved-model-with-tensorflow-serving" class="level3">
<h3 class="anchored" data-anchor-id="serving-saved-model-with-tensorflow-serving">Serving saved model with Tensorflow Serving</h3>
<p>Once we have our model saved, and Tensorflow Serving correctly installed with Docker, we are going to serve it as an API endpoint. It is worth mentioning that Tensorflow Serving allows two types of API endpoint,  <code>REST</code> and <code>gRPC</code>.</p>
<ul>
<li><p><code>REST</code> is a communication “protocol” used by web applications. It defines a communication style on how clients communicate with web services. REST clients communicate with the server using the standard HTTP methods like GET, POST, DELETE, etc. The payloads of the requests are mostly encoded in JSON format.</p></li>
<li><p><code>gRPC</code> on the other hand is a communication protocol initially developed at Google. The standard data format used with gRPC is called the protocol buffer. gRPC provides low- latency communication and smaller payloads than REST and is preferred when working with extremely large files during inference.</p></li>
</ul>
<p>In this tutorial, we’ll use a REST endpoint, since it is easier to use and inspect. It should also be noted that Tensorflow Serving will provision both endpoints when we run it, so we do not need to worry about extra configuration and setup.</p>
<p>The next thing to do is to pull our Docker tensorflow serving image :</p>
<pre><code>docker pull tensorflow/serving</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_3/DE_Zoomcamp_Week_3_files/figure-html/f4680b7c-1f3a-4c37-b833-b3f3b9be737d.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">docker_pull.PNG</figcaption><p></p>
</figure>
</div>
<p>And now let’s run the Docker container :</p>
<p>docker run -p 8501:8501 -h 0.0.0.0 –mount type=bind,source=$(pwd)/serving_dir/tip_model,target=/models/tip_model -e MODEL_NAME=tip_model -t tensorflow/serving</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_3/DE_Zoomcamp_Week_3_files/figure-html/f65a209a-d558-480b-a4d2-aa4d44d1dcae.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">docker_tensor_flow_serving.PNG</figcaption><p></p>
</figure>
</div>
<p>Now that the endpoint is up and running, we can make inference calls to it via an HTTP request. I was not able to connect to the <a href="https://www.postman.com/">Postman API</a> however I was able to carry out inference within this Jupyter NoteBook using the Python <code>requests</code> and <code>json</code> libraries as demonstrated below :</p>
<div class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="im" style="color: #00769E;">import</span> requests</span>
<span id="cb24-2"><span class="im" style="color: #00769E;">import</span> json</span>
<span id="cb24-3"></span>
<span id="cb24-4"><span class="co" style="color: #5E5E5E;"># define input fetaures that we want to make prediction on</span></span>
<span id="cb24-5">data <span class="op" style="color: #5E5E5E;">=</span> {<span class="st" style="color: #20794D;">"instances"</span>: [{<span class="st" style="color: #20794D;">"passenger_count"</span>:<span class="dv" style="color: #AD0000;">1</span>, <span class="st" style="color: #20794D;">"trip_distance"</span>:<span class="fl" style="color: #AD0000;">22.2</span>, <span class="st" style="color: #20794D;">"PULocationID"</span>:<span class="st" style="color: #20794D;">"193"</span>, <span class="st" style="color: #20794D;">"DOLocationID"</span>:<span class="st" style="color: #20794D;">"264"</span>, <span class="st" style="color: #20794D;">"payment_type"</span>:<span class="st" style="color: #20794D;">"1"</span>, <span class="st" style="color: #20794D;">"fare_amount"</span>:<span class="fl" style="color: #AD0000;">20.4</span>,<span class="st" style="color: #20794D;">"tolls_amount"</span>:<span class="fl" style="color: #AD0000;">0.0</span>}]}</span>
<span id="cb24-6"></span>
<span id="cb24-7">data_json <span class="op" style="color: #5E5E5E;">=</span> json.dumps(data)</span>
<span id="cb24-8">        </span>
<span id="cb24-9"><span class="co" style="color: #5E5E5E;"># define the REST endpoint URL</span></span>
<span id="cb24-10">url <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"http://localhost:8501/v1/models/tip_model:predict"</span></span>
<span id="cb24-11">        </span>
<span id="cb24-12">headers <span class="op" style="color: #5E5E5E;">=</span> {<span class="st" style="color: #20794D;">"content-type"</span>:<span class="st" style="color: #20794D;">"application/json"</span>}</span>
<span id="cb24-13">        </span>
<span id="cb24-14">json_response <span class="op" style="color: #5E5E5E;">=</span> requests.post(url, data <span class="op" style="color: #5E5E5E;">=</span> data_json, headers <span class="op" style="color: #5E5E5E;">=</span> headers)</span>
<span id="cb24-15">        </span>
<span id="cb24-16"><span class="bu" style="color: null;">print</span>(json_response.json())</span></code></pre></div>
</div>
<p>{‘predictions’: [[2.2043918289692783]]}</p>
<p>So the predicted taxi tip is $2.20 for the input features provided.</p>
<p>The requests package is used to construct and send an HTTP call to a server, while the json package will be used to parse the data (image) before sending it. The prediction URL is made up of a few important parts. A general structure may look like the one below:</p>
<p>http://{HOST}:{PORT}/v1/models/{MODEL_NAME}:{VERB}</p>
<ul>
<li>HOST: The domain name or IP address of your model server</li>
<li>PORT: The server port for your URL. By default, TF Serving uses 8501 for REST endpoint.</li>
<li>MODEL_NAME: The name of the model you’re serving.</li>
<li>VERB: The verb has to do with your model signature. You can specify one of predict, classify or regress.</li>
</ul>
</section>
<section id="creating-an-external-table" class="level3">
<h3 class="anchored" data-anchor-id="creating-an-external-table">Creating an external table</h3>
<p>Let’s now have a go at some exercises to get a feel for Big Query. The data we will be working with is <a href="https://github.com/DataTalksClub/nyc-tlc-data/releases/tag/fhv">here</a> - specifically the <code>2019</code> year.</p>
<p>I have uploaded the files in <code>.gz</code> format to my data bucket</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_3/DE_Zoomcamp_Week_3_files/figure-html/e1323f57-7f1f-4409-a688-c852da8d60fb.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">fhv_bucket.PNG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_3/DE_Zoomcamp_Week_3_files/figure-html/424b9369-1295-43bf-b5e0-0f724a9b2158.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">bucket_URI.PNG</figcaption><p></p>
</figure>
</div>
<p>Let’s now create an <code>external</code> table.</p>
<p>First thing to do is create a dataset :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_3/DE_Zoomcamp_Week_3_files/figure-html/8234df11-a418-49e9-91b3-bc0ecdb2b73d.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">create_dataset.PNG</figcaption><p></p>
</figure>
</div>
<p>And the create our <code>external</code> table :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_3/DE_Zoomcamp_Week_3_files/figure-html/0dcfe829-27fa-418b-8efd-37798c3573d1.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">fhv_external_table.PNG</figcaption><p></p>
</figure>
</div>
</section>
<section id="creating-a-table-in-big-query" class="level3">
<h3 class="anchored" data-anchor-id="creating-a-table-in-big-query">Creating a table in Big Query</h3>
<p>OK, let’s create a BigQuery table. This takes a bit longer than an external table. It’s funny how impatient we have become - I was concerned it had crashed, but 98 seconds to load 43 <code>million</code> records is not exactly slow!!!</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_3/DE_Zoomcamp_Week_3_files/figure-html/c0ce4ca0-3f61-45ae-946d-632b552868cb.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">fhv_BQ.PNG</figcaption><p></p>
</figure>
</div>
<ol type="1">
<li>What is the count for fhv vehicle records for year 2019?</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_3/DE_Zoomcamp_Week_3_files/figure-html/640289e5-8766-4b19-9203-c4ccc0b011a8.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">q1.PNG</figcaption><p></p>
</figure>
</div>
<ol start="2" type="1">
<li>Write a query to count the distinct number of affiliated_base_number for the entire dataset on both the tables.</li>
</ol>
<p>What is the estimated amount of data that will be read when this query is executed on the External Table?</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_3/DE_Zoomcamp_Week_3_files/figure-html/589928d9-43a9-4546-b951-4819779b45a0.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">q2_external.PNG</figcaption><p></p>
</figure>
</div>
<p>What is the estimated amount of data that will be read when this query is executed on the BQ Table?</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_3/DE_Zoomcamp_Week_3_files/figure-html/b461ad32-caad-431e-8ad2-f8481a5aee2a.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">q2_BQ.PNG</figcaption><p></p>
</figure>
</div>
<p>The BigQuery table is estimated to consume 317.94MB however as the external data is not held within BQ no estimate is available for the BQ query.</p>
<ol start="3" type="1">
<li>How many records have both a blank (null) PUlocationID and DOlocationID in the entire dataset?</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_3/DE_Zoomcamp_Week_3_files/figure-html/c2efc855-ac6b-4ed3-b8f9-c913154ffab6.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">q3.PNG</figcaption><p></p>
</figure>
</div>
<ol start="4" type="1">
<li>What is the best strategy to optimize the table if query always filter by pickup_datetime and order by affiliated_base_number?</li>
</ol>
<p>Partitioning will give us the filter, and clustering will provide us with the ordering so the optimized strategy would be :</p>
<pre><code>Partition by pickup_datetime Cluster on affiliated_base_number</code></pre>
<p>Note that <code>Affiliated_base_number</code> is a string data type which we cannot partition on.</p>
<ol start="5" type="1">
<li>Implement the optimized solution you chose for question 4.</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_3/DE_Zoomcamp_Week_3_files/figure-html/9f7f145a-183d-47eb-a83a-997f34454c63.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">q5_part_clust_table.PNG</figcaption><p></p>
</figure>
</div>
<p>Write a query to retrieve the distinct <code>Affiliated_base_number</code> between <code>pickup_datetime</code> 2019/03/01 and 2019/03/31 (inclusive).</p>
<p>Use the BQ table you created earlier in your <code>FROM</code> clause and note the estimated bytes.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_3/DE_Zoomcamp_Week_3_files/figure-html/c3c2c68f-9b65-4d7a-864e-2b0f2265d98c.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">q5_BQ.PNG</figcaption><p></p>
</figure>
</div>
<p>Now change the table in the <code>FROM</code> clause to the partitioned table you created for question 4 and note the estimated bytes processed.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_3/DE_Zoomcamp_Week_3_files/figure-html/4a6d16fe-bae2-44ff-ad55-f103c6f3b1ad.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">q5_partitioned.PNG</figcaption><p></p>
</figure>
</div>
<p>We can see that there is a huge cost saving by partitioning - just 23.05MB compard with 647.87MB!</p>
<ol start="6" type="1">
<li>Where is the data stored in the External Table you created?</li>
</ol>
<p>The data used to create our external table is stored in our GCS bucket - we referenced the URI on creation.</p>
<ol start="7" type="1">
<li>Is it best practice in Big Query to always cluster your data?</li>
</ol>
<p>No.&nbsp;If your data is &lt; 1GB the additional meta data overhead could outweigh any performance boost obtained from clustering.</p>


</section>
</section>

 ]]></description>
  <category>GCP</category>
  <category>BigQuery</category>
  <category>Data Lakes</category>
  <category>ETL</category>
  <category>Prefect</category>
  <category>DataTalksClub</category>
  <guid>https://stephen137.github.io/posts/DE_Zoomcamp_Week_3/DE_Zoomcamp_Week_3.html</guid>
  <pubDate>Mon, 20 Mar 2023 23:00:00 GMT</pubDate>
  <media:content url="https://stephen137.github.io/posts/DE_Zoomcamp_Week_3/data_warehousing.png" medium="image" type="image/png" height="71" width="144"/>
</item>
<item>
  <title>Data Engineering Zoomcamp - Week 2</title>
  <dc:creator>Stephen Barrie</dc:creator>
  <link>https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/DE_Zoomcamp_Week_2.html</link>
  <description><![CDATA[ 




<section id="week-2---workflow-orchestration" class="level2">
<h2 class="anchored" data-anchor-id="week-2---workflow-orchestration">Week 2 - Workflow Orchestration</h2>
<p>Just like a physical transport logistics system, it is important to have a smooth data logistics system. This process is also known as <code>Workflow Orchestration</code>. Workflow orchestration allows us to turn any code into a workflow that we can schedule, run and observe.</p>
<p>Core features:</p>
<ul>
<li>remote execution</li>
<li>scheduling</li>
<li>retries</li>
<li>caching</li>
<li>integration with external systems (APIs, databases)</li>
<li>ad-hoc runs</li>
<li>parametrization</li>
<li>alert when something fails</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/DE_Zoomcamp_Week_2_files/figure-html/4e3e08f6-0273-4434-b889-b6921482a0d6.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">week_2.JPG</figcaption><p></p>
</figure>
</div>
<section id="data-lakes" class="level3">
<h3 class="anchored" data-anchor-id="data-lakes">2.1.1 Data Lakes</h3>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/DE_Zoomcamp_Week_2_files/figure-html/63571a21-e79a-4984-9ae2-064605e666d9.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">data_lake.JPG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/DE_Zoomcamp_Week_2_files/figure-html/99ac080c-c55c-4967-9b59-6ee28c178207.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">data_lake_origin.JPG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/DE_Zoomcamp_Week_2_files/figure-html/8d8ec4af-26c4-4148-9113-958b9cec5bf8.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">lake_vs_warehouse.JPG</figcaption><p></p>
</figure>
</div>
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/DE_Zoomcamp_Week_2_files/figure-html/32a74388-8691-46cb-af3c-ca2f3e11c4c2.JPG" class="img-fluid" alt="ELT.JPG"> <img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/DE_Zoomcamp_Week_2_files/figure-html/e8510545-0ce2-41c5-911b-b155778c8a6b.JPG" class="img-fluid" alt="ETL.JPG"></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/DE_Zoomcamp_Week_2_files/figure-html/6ae5b11c-ef1d-4bda-bb11-92e54d61126b.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">data_lake_cloud.JPG</figcaption><p></p>
</figure>
</div>
</section>
<section id="introduction-to-workflow-orchestration-data-flow-logistics" class="level3">
<h3 class="anchored" data-anchor-id="introduction-to-workflow-orchestration-data-flow-logistics">2.2.1 Introduction to Workflow Orchestration (data flow logistics)</h3>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/DE_Zoomcamp_Week_2_files/figure-html/8e933809-32f3-4068-b99c-4af53575eac5.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">data_engineering_map.JPG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/DE_Zoomcamp_Week_2_files/figure-html/7bb92351-add5-415c-a679-d0ca038ddd66.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">workflow_orchestration.JPG</figcaption><p></p>
</figure>
</div>
</section>
<section id="introduction-to-prefect" class="level3">
<h3 class="anchored" data-anchor-id="introduction-to-prefect">2.2.2 Introduction to Prefect</h3>
<p><a href="https://docs.prefect.io/">Prefect</a> is air traffic control for the modern data stack. Monitor, coordinate, and orchestrate dataflows between and across your applications. Build pipelines, deploy them anywhere, and configure them remotely. You might just love your workflows again.</p>
<p>In this session, we are going to take a look at a basic python script that pulls the yellow taxi data into a postgres db and then transforms that script to be orchestrated with Prefect.</p>
<p>Prefect is the modern open source dataflow automation platform that will allow us to add observability and orchestration by utilizing python to write code as workflows to build,run and monitor pipelines at scale.</p>
<p>First let’s clone the <a href="https://github.com/discdiver/prefect-zoomcamp">Prefect repo</a> from the command line:</p>
<pre><code>git clone https://github.com/discdiver/prefect-zoomcamp.git</code></pre>
<p>Next, create a python environment :</p>
<pre><code>conda create -n zoomcamp python=3.9   </code></pre>
<p>Once created we need to activate it:</p>
<pre><code>conda activate zoomcamp</code></pre>
<p>To deactivate an environment use:</p>
<pre><code>conda deactivate  </code></pre>
<p>Note from the terminal that we are no longer running in <code>base</code> but our newly created <code>zoomcamp</code> environment:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/DE_Zoomcamp_Week_2_files/figure-html/b25f0936-402d-48f8-9a9c-e62ccca914ad.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">zoomcamp_environ.JPG</figcaption><p></p>
</figure>
</div>
<p>Then install all package dependencies with:</p>
<pre><code>pip install -r requirements.txt</code></pre>
<p>Once that’s done we can check that has installed successfully and which version we have from the command line:</p>
<pre><code>prefect version</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/DE_Zoomcamp_Week_2_files/figure-html/d77efb41-a9d9-41ac-b90d-16651906a4b2.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">prefect_version.JPG</figcaption><p></p>
</figure>
</div>
<p>I started Docker Desktop and executed these commands :</p>
<p>docker run -d<br>
-e POSTGRES_USER=“root”<br>
-e POSTGRES_PASSWORD=“root”<br>
-e POSTGRES_DB=“ny_taxi”<br>
-v $(pwd)/ny_taxi_postgres_data:/var/lib/postgresql/data<br>
-p 5432:5432<br>
postgres:13</p>
<p>Then, I executed the <code>ingest_data.py</code> file and ran with</p>
<pre><code>python ingest_data.py

#!/usr/bin/env python
# coding: utf-8
import os
import argparse
from time import time
import pandas as pd
from sqlalchemy import create_engine


def ingest_data(user, password, host, port, db, table_name, url):

# the backup files are gzipped, and it's important to keep the correct extension
# for pandas to be able to open the file
if url.endswith('.csv.gz'):
    csv_name = 'yellow_tripdata_2021-01.csv.gz'
else:
    csv_name = 'output.csv'

os.system(f"wget {url} -O {csv_name}")
postgres_url = f'postgresql://{user}:{password}@{host}:{port}/{db}'
engine = create_engine(postgres_url)

df_iter = pd.read_csv(csv_name, iterator=True, chunksize=100000)

df = next(df_iter)

df.tpep_pickup_datetime = pd.to_datetime(df.tpep_pickup_datetime)
df.tpep_dropoff_datetime = pd.to_datetime(df.tpep_dropoff_datetime)

df.head(n=0).to_sql(name=table_name, con=engine, if_exists='replace')

df.to_sql(name=table_name, con=engine, if_exists='append')


while True: 

    try:
        t_start = time()
        
        df = next(df_iter)

        df.tpep_pickup_datetime = pd.to_datetime(df.tpep_pickup_datetime)
        df.tpep_dropoff_datetime = pd.to_datetime(df.tpep_dropoff_datetime)

        df.to_sql(name=table_name, con=engine, if_exists='append')

        t_end = time()

        print('inserted another chunk, took %.3f second' % (t_end - t_start))

    except StopIteration:
        print("Finished ingesting data into the postgres database")
        break

if __name__ == '__main__':
user = "root"
password = "root"
host = "localhost"
port = "5432"
db = "ny_taxi"
table_name = "yellow_taxi_trips"
csv_url = "https://github.com/DataTalksClub/nyc-tlc-data/releases/download/yellow/yellow_tripdata_2021-01.csv.gz"

ingest_data(user, password, host, port, db, table_name, csv_url)</code></pre>
<p>I then opened up <code>pgcli</code></p>
<pre><code>pgcli -h localhost -p 5432 -u root -d ny_taxi</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/DE_Zoomcamp_Week_2_files/figure-html/d6190ac2-543f-455c-8e42-d68a7bab06d6.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">data_ingest.JPG</figcaption><p></p>
</figure>
</div>
<p>So we can see that the data ingested into the postgres db. This is great but we had to manually trigger this python script. Using a workflow orchestration tool will allow us to add a scheduler so that we won’t have to trigger this script manually anymore. Additionally, we’ll get all the functionality that comes with workflow orchestation such as visibility, and resilience to the dataflow with automatic retries or caching and more.</p>
<p>Let’s transform this into a Prefect flow. A flow is the most basic Prefect object that is a container for workflow logic and allows you to interact and understand the state of the workflow. Flows are like functions, they take inputs, preform work, and return an output. We can start by using the <code>@flow decorator</code>to a <code>main_flow</code> function.</p>
<ul>
<li>import prefect with <code>from prefect import flow, task</code></li>
<li>move everything that was in our <code>'if __name__ == '__main__'</code> function to a new <code>def main():</code> function (replace with a reference to <code>main()</code></li>
<li>add <code>@flow(name="Ingest Flow")</code> above a new <code>def main()</code> function</li>
<li>remove the <code>while True</code> part of our original script</li>
</ul>
<p>I started Docker Desktop and executed these commands:</p>
<p>docker run -d<br>
-e POSTGRES_USER=“root”<br>
-e POSTGRES_PASSWORD=“root”<br>
-e POSTGRES_DB=“ny_taxi”<br>
-v $(pwd)/ny_taxi_postgres_data:/var/lib/postgresql/data<br>
-p 5432:5432<br>
postgres:13</p>
<p>Then start the Prefect Orion orchestration engine using:</p>
<pre><code>prefect orion start</code></pre>
<p>Open another terminal window and run the following command:</p>
<pre><code>prefect config set PREFECT_API_URL=http://127.0.0.1:4200/api


#!/usr/bin/env python
# coding: utf-8
import os
import argparse
from time import time
import pandas as pd
from sqlalchemy import create_engine
from prefect import flow, task                 # Added

def ingest_data(user, password, host, port, db, table_name, url):

# the backup files are gzipped, and it's important to keep the correct extension
# for pandas to be able to open the file
if url.endswith('.csv.gz'):
    csv_name = 'yellow_tripdata_2021-01.csv.gz'
else:
    csv_name = 'output.csv'

os.system(f"wget {url} -O {csv_name}")
postgres_url = f'postgresql://{user}:{password}@{host}:{port}/{db}'
engine = create_engine(postgres_url)

df_iter = pd.read_csv(csv_name, iterator=True, chunksize=100000)

df = next(df_iter)

df.tpep_pickup_datetime = pd.to_datetime(df.tpep_pickup_datetime)
df.tpep_dropoff_datetime = pd.to_datetime(df.tpep_dropoff_datetime)

df.head(n=0).to_sql(name=table_name, con=engine, if_exists='replace')

df.to_sql(name=table_name, con=engine, if_exists='append')


@flow(name="Ingest Flow")                       # Added
def main_flow():
user = "root"
password = "root"
host = "localhost"
port = "5432"
db = "ny_taxi"
table_name = "yellow_taxi_trips"
csv_url = "https://github.com/DataTalksClub/nyc-tlc-data/releases/download/yellow/yellow_tripdata_2021-01.csv.gz"

ingest_data(user, password, host, port, db, table_name, csv_url)


if __name__ == '__main__':
main_flow()                                      # everything that was here moved into the new def main(): function </code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/DE_Zoomcamp_Week_2_files/figure-html/e81304af-7105-4e54-9c72-ba74c0ee69e2.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">flow_run1.JPG</figcaption><p></p>
</figure>
</div>
<p>We successfully completed a <code>flow run</code>.</p>
<p>Flows contain tasks so let’s transform ingest_data into a task by adding the <span class="citation" data-cites="task">@task</span> decorator. Tasks are not required for flows but tasks are special because they receive metadata about upstream dependencies and the state of those dependencies before the function is run, which gives you the opportunity to have a task wait on the completion of another task before executing.</p>
<p>We can simplify this script and transform it into an extract and transform before we load the data into the postgres db. We start by breaking apart the large <code>ingest_data</code> function into multiple functions so that we can get more <code>visibility</code> into the <code>tasks</code> that are running or potentially causing failures.</p>
<p>Let’s create a new task called <code>extract data</code> that will take the url for the csv and the task will actually return the results. Since this is pulling data from external my system (something we may not control) we want to add automatic <code>retries</code> and also add a <code>caching</code> so that if this task has already been run, it will not need to run again.</p>
<pre><code>import from prefect.tasks import task_input_hash</code></pre>
<p>If we look at the data in PotsgreSQL we can see that on row 4, there is a passenger count of 0. So let’s do a transformation step to cleanse the data before we load the data to postgres. We can create a new task called <code>transform_data</code> for this.</p>
<p>Lastly, let’s actually simplify the original <code>ingest_data()</code> function and rename this to <code>load_data()</code></p>
<pre><code>#!/usr/bin/env python
# coding: utf-8
import os
import argparse
from time import time
import pandas as pd
from sqlalchemy import create_engine
from prefect import flow, task 
from prefect.tasks import task_input_hash
from datetime import timedelta

@task(log_prints=True, tags=["extract"], cache_key_fn=task_input_hash, cache_expiration=timedelta(days=1))
def extract_data(url: str):
# the backup files are gzipped, and it's important to keep the correct extension
# for pandas to be able to open the file
if url.endswith('.csv.gz'):
    csv_name = 'yellow_tripdata_2021-01.csv.gz'
else:
    csv_name = 'output.csv'

os.system(f"wget {url} -O {csv_name}")

df_iter = pd.read_csv(csv_name, iterator=True, chunksize=100000)

df = next(df_iter)

df.tpep_pickup_datetime = pd.to_datetime(df.tpep_pickup_datetime)
df.tpep_dropoff_datetime = pd.to_datetime(df.tpep_dropoff_datetime)

return df

@task(log_prints=True)
def transform_data(df):
    print(f"pre: missing passenger count: {df['passenger_count'].isin([0]).sum()}")
    df = df[df['passenger_count'] != 0]
    print(f"post: missing passenger count: {df['passenger_count'].isin([0]).sum()}")
    return df



@task(log_prints=True, retries=3)
def load_data(user, password, host, port, db, table_name, df):
  postgres_url = f'postgresql://{user}:{password}@{host}:{port}/{db}'
  engine = create_engine(postgres_url)
  df.head(n=0).to_sql(name=table_name, con=engine, if_exists='replace')
  df.to_sql(name=table_name, con=engine, if_exists='append')



@flow(name="Ingest Flow")
def main_flow():
    user = "root"
    password = "root"
    host = "localhost"
    port = "5432"
    db = "ny_taxi"
    table_name = "yellow_taxi_trips"
    csv_url = "https://github.com/DataTalksClub/nyc-tlc-data/releases/download/yellow/yellow_tripdata_2021-01.csv.gz"

    raw_data=extract_data(csv_url)
    data = transform_data(raw_data)
    load_data(user, password, host, port, db, table_name, data)

if __name__ == '__main__':
    main_flow()</code></pre>
<p>There’s a lot more we can add by sprinkling in Prefect to our flow. We could parameterize the flow to take a table name so that we could change the table name loaded each time the flow was run.</p>
<p>Flows can also contain other flows - and so we can create a <code>sub-flow</code> :</p>
<pre><code>#!/usr/bin/env python
# coding: utf-8
import os
import argparse
from time import time
import pandas as pd
from sqlalchemy import create_engine
from prefect import flow, task 
from prefect.tasks import task_input_hash
from datetime import timedelta

@task(log_prints=True, tags=["extract"], cache_key_fn=task_input_hash, cache_expiration=timedelta(days=1))
def extract_data(url: str):
# the backup files are gzipped, and it's important to keep the correct extension
# for pandas to be able to open the file
if url.endswith('.csv.gz'):
    csv_name = 'yellow_tripdata_2021-01.csv.gz'
else:
    csv_name = 'output.csv'

os.system(f"wget {url} -O {csv_name}")

df_iter = pd.read_csv(csv_name, iterator=True, chunksize=100000)

df = next(df_iter)

df.tpep_pickup_datetime = pd.to_datetime(df.tpep_pickup_datetime)
df.tpep_dropoff_datetime = pd.to_datetime(df.tpep_dropoff_datetime)

return df

@task(log_prints=True)
def transform_data(df):
    print(f"pre: missing passenger count: {df['passenger_count'].isin([0]).sum()}")
    df = df[df['passenger_count'] != 0]
    print(f"post: missing passenger count: {df['passenger_count'].isin([0]).sum()}")
    return df

@task(log_prints=True, retries=3)
def load_data(user, password, host, port, db, table_name, df):
  postgres_url = f"postgresql://{user}:{password}@{host}:{port}/{db}"
  engine = create_engine(postgres_url)
  df.head(n=0).to_sql(name=table_name, con=engine, if_exists='replace')
  df.to_sql(name=table_name, con=engine, if_exists='append')

  @flow(name="Subflow", log_prints=True)
  def log_subflow(table_name:str):
      print("Logging Subflow for: {table_name}")

@flow(name="Ingest Flow")
def main_flow(table_name: str):
    user = "root"
    password = "root"
    host = "localhost"
    port = "5432"
    db = "ny_taxi"
    csv_url = "https://github.com/DataTalksClub/nyc-tlc-data/releases/download/yellow/yellow_tripdata_2021-01.csv.gz"
    log_subflow = (table_name)
    raw_data = extract_data(csv_url)
    data = transform_data(raw_data)
    load_data(user, password, host, port, db, table_name, data)

if __name__ == '__main__':
    main_flow("yellow_taxi_trips")</code></pre>
<p>That has run successfully:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/DE_Zoomcamp_Week_2_files/figure-html/ad18c860-f545-43e8-b325-1dd463a19f8d.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">sub_flow.JPG</figcaption><p></p>
</figure>
</div>
<p>Let’s now open the open source UI to visualise our flow runs :</p>
<pre><code>prefect orion start</code></pre>
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/DE_Zoomcamp_Week_2_files/figure-html/25cc8011-10b0-403c-9a51-91ce959b7c26.JPG" class="img-fluid" alt="prefect_orion.JPG"><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/DE_Zoomcamp_Week_2_files/figure-html/964d7165-c296-4d3e-9dd3-7a4525ab9915.jpg" class="img-fluid" alt="download.jpg"></p>
<p>This should default but if you are having problems or just want to make sure you set the prefect config to point to the api URL:</p>
<pre><code>prefect config set PREFECT_API_URL=http://127.0.0.1:4200/api</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/DE_Zoomcamp_Week_2_files/figure-html/ac55d25f-10b8-4a61-b207-a2d8633faff9.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">prefect_api_url.JPG</figcaption><p></p>
</figure>
</div>
<p>This is especially important if you are going to host the Url somewhere else and need to change the url for the api that your flows are communicating with.</p>
<p>Opening up the localhost we can see the Prefect UI, which gives us a nice dashboard to see all of our flow run history.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/DE_Zoomcamp_Week_2_files/figure-html/818033db-c98d-4b52-8a51-e4fdb40fa5ca.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">prefect_UI.JPG</figcaption><p></p>
</figure>
</div>
<p>We can then drill down into the runs to obtain more details :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/DE_Zoomcamp_Week_2_files/figure-html/a1f37a03-bb12-4a0f-97df-563cdfdbd6b1.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">optimistic_flounder.JPG</figcaption><p></p>
</figure>
</div>
<p>A quick navigation lets us dive into the logs of that flow run, navigate around. You’ll notice over on the side we have <code>Deployments</code>, <code>Work Queues</code>, <code>Blocks</code>, <code>Notifications</code>, and <code>Task Run Concurrency</code>.</p>
<p>Blocks are a primitive within Prefect that enable the storage of configuration and provide an interface with interacting with external systems. There are several different types of blocks you can build, and you can even create your own. Block names are immutable so they can be reused across multiple flows. Blocks can also build upon blocks or be installed as part of Integration <a href="https://docs.prefect.io/collections/catalog/">collection</a> which is prebuilt tasks and blocks that are pip installable. For example, a lot of users use the SqlAlchemy.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/DE_Zoomcamp_Week_2_files/figure-html/6d20c728-7a32-4b11-b1ff-1f6bb02de81f.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">prefect_blocks.JPG</figcaption><p></p>
</figure>
</div>
<p>Let’s add the sqlalchemy connector :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/DE_Zoomcamp_Week_2_files/figure-html/4c09f604-44a7-43b4-9f1c-33c8da259000.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">sqlalchemy_connector.PNG</figcaption><p></p>
</figure>
</div>
<p>As you can see we have now created the block and can now update our ingestion script to include the necessary code to make the connection work :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/DE_Zoomcamp_Week_2_files/figure-html/43264408-8954-4456-93a8-73dc3fab9213.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">sqlalchemy_connector_block.PNG</figcaption><p></p>
</figure>
</div>
<pre><code>#!/usr/bin/env python
# coding: utf-8

import os
import argparse
from time import time
import pandas as pd
from sqlalchemy import create_engine
from prefect import flow, task
from prefect.tasks import task_input_hash
from datetime import timedelta
from prefect_sqlalchemy import SqlAlchemyConnector

@task(log_prints=True, retries=3, cache_key_fn=task_input_hash, cache_expiration=timedelta(days=1))
def extract_data(csv_url):
# the backup files are gzipped, and it's important to keep the correct extension
# for pandas to be able to open the file
if csv_url.endswith('.csv.gz'):
    csv_name = 'yellow_tripdata_2021-01.csv.gz'
else:
    csv_name = 'output.csv'

os.system(f"wget {csv_url} -O {csv_name}")

df_iter = pd.read_csv(csv_name, iterator=True, chunksize=100000)

df = next(df_iter)

df.tpep_pickup_datetime = pd.to_datetime(df.tpep_pickup_datetime)
df.tpep_dropoff_datetime = pd.to_datetime(df.tpep_dropoff_datetime)
return df 

@task(log_prints=True)
def transform_data(df):
    print(f"pre: missing passenger count: {df['passenger_count'].isin([0]).sum()}")
    df = df[df['passenger_count'] != 0]
    print(f"post: missing passenger count: {df['passenger_count'].isin([0]).sum()}")
    return df 

@task(log_prints=True, retries=3)
def ingest_data(table_name, df):
    connection_block = SqlAlchemyConnector.load("postgres-connector")

with connection_block.get_connection(begin=False) as engine:    
    df.head(n=0).to_sql(name=table_name, con=engine, if_exists='replace')
    df.to_sql(name=table_name, con=engine, if_exists='append')

@flow(name="Subflow", log_prints=True)
def log_subflow(table_name: str):
    print(f"Logging Subflow for: {table_name}")

@flow(name="Ingest Flow")
def main_flow(table_name: str):
    csv_url = "https://github.com/DataTalksClub/nyc-tlc-data/releases/download/yellow/yellow_tripdata_2021-01.csv.gz"
    log_subflow(table_name)
    raw_data = extract_data(csv_url)
    data = transform_data(raw_data)
    ingest_data(table_name, data)

if __name__ == '__main__':
    main_flow("yellow_taxi_trips")</code></pre>
<p>And run our flow:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/DE_Zoomcamp_Week_2_files/figure-html/1015e5a8-ebb3-4fb9-bc2f-bc4f4323ff95.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">ingest_data_flow.PNG</figcaption><p></p>
</figure>
</div>
</section>
<section id="extract-transform-and-load-etl-with-google-cloud-platform-gcp-and-prefect" class="level3">
<h3 class="anchored" data-anchor-id="extract-transform-and-load-etl-with-google-cloud-platform-gcp-and-prefect">2.2.3 Extract, Transform and Load (ETL) with Google Cloud Platform (GCP) and Prefect</h3>
<p>OK, so next up we are going to create an <code>ETL</code> flow using <code>Prefect</code> to grab a csv file from the web, clean it up, write it out locally and finally upload the data to a <code>data lake</code> within <code>Google Cloud Storage(GCS)</code>.</p>
<section id="create-prefect-gcp-blocks" class="level4">
<h4 class="anchored" data-anchor-id="create-prefect-gcp-blocks">Create Prefect GCP blocks</h4>
<p>First of all let’s register our GCP blocks from the command line:</p>
<pre><code>prefect block register -m prefect_gcp</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/DE_Zoomcamp_Week_2_files/figure-html/0468a656-27f0-44a2-bf41-068f70b8fd9e.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">prefect_gcp_block.png</figcaption><p></p>
</figure>
</div>
<p>And now let’s create a <code>GCS Bucket</code> block from the Prefect GUI :</p>
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/DE_Zoomcamp_Week_2_files/figure-html/b51d593c-ff4e-451f-a363-d6ca870f95e2.PNG" class="img-fluid" alt="gcs_bucket.PNG">+</p>
<p>and add credentials :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/DE_Zoomcamp_Week_2_files/figure-html/c963fa84-beeb-4b86-9ba3-849218f4c792.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">gcs_bucket_plus_credentials.PNG</figcaption><p></p>
</figure>
</div>
<p>Not that I created a service account previously within GCP and generated a key which I have saved on my machine in JSON format. I then copied and pasted the contents of the file (a dictionary) into the Service Account Info field.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/DE_Zoomcamp_Week_2_files/figure-html/d50abbf9-4d3f-4114-a3d8-bd99bea5f121.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">gcp_blocks.PNG</figcaption><p></p>
</figure>
</div>
<p>We can now grab the block code and incorporate this into our workflow:</p>
<pre><code>from pathlib import Path
import pandas as pd
from prefect import flow, task
from prefect_gcp.cloud_storage import GcsBucket # this code provided on creation of our block
from random import randint


@task(retries=3)
def fetch(dataset_url: str) -&gt; pd.DataFrame:
"""Read taxi data from web into pandas DataFrame"""
# if randint(0, 1) &gt; 0:
#     raise Exception

    df = pd.read_csv(dataset_url)
    return df


@task(log_prints=True)
def clean(df: pd.DataFrame) -&gt; pd.DataFrame:
"""Fix dtype issues"""
    df["tpep_pickup_datetime"] = pd.to_datetime(df["tpep_pickup_datetime"])
    df["tpep_dropoff_datetime"] = pd.to_datetime(df["tpep_dropoff_datetime"])
    print(df.head(2))
    print(f"columns: {df.dtypes}")
    print(f"rows: {len(df)}")
    return df


@task()
def write_local(df: pd.DataFrame, color: str, dataset_file: str) -&gt; Path:
"""Write DataFrame out locally as parquet file"""
    path = Path(f"data/{color}/{dataset_file}.parquet")
    df.to_parquet(path, compression="gzip")
    return path


@task()
def write_gcs(path: Path) -&gt; None:
"""Upload local parquet file to GCS"""
    gcs_block = GcsBucket.load("de-zoomcamp") # the name we gave our block on creation
    gcs_block.upload_from_path(from_path=path, to_path=path)
    return


@flow()
def etl_web_to_gcs() -&gt; None:
"""The main ETL function"""
    color = "yellow"
    year = 2021
    month = 1
    dataset_file = f"{color}_tripdata_{year}-{month:02}"
    dataset_url = f"https://github.com/DataTalksClub/nyc-tlc-data/releases/download/{color}/{dataset_file}.csv.gz"

    df = fetch(dataset_url)
    df_clean = clean(df)
    path = write_local(df_clean, color, dataset_file)
    write_gcs(path)


if __name__ == "__main__":
    etl_web_to_gcs()</code></pre>
<p>Note the above flow has been hardcoded in places, but we will be refining / <code>parametrizing</code> this later.</p>
<p>First let’s create directories to store our data locally :</p>
<pre><code>mkdir data
mkdir yellow</code></pre>
<p>and then run the script :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/DE_Zoomcamp_Week_2_files/figure-html/4bc25313-67cb-4d5f-af78-b5624716d2f0.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">etl_web_to_gcs.PNG</figcaption><p></p>
</figure>
</div>
<p>We can visualise the run on Prefect:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/DE_Zoomcamp_Week_2_files/figure-html/e0d8cbad-7684-4181-a56d-bd57ddfd866b.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">prefect_etl_web_to_gcs.PNG</figcaption><p></p>
</figure>
</div>
<p>And confirm that the data has been successfully uploaded to our <code>data lake</code> bucket on GCS :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/DE_Zoomcamp_Week_2_files/figure-html/b40351cc-9f28-4e90-bfcc-b4dfad6b4502.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">data_lake_bucket_yellow_taxi.PNG</figcaption><p></p>
</figure>
</div>
</section>
</section>
<section id="from-google-cloud-storage-to-biq-query" class="level3">
<h3 class="anchored" data-anchor-id="from-google-cloud-storage-to-biq-query">2.2.4 From Google Cloud Storage to Biq Query</h3>
<p>Now that we have successfully uploaded our data to a <code>data lake</code> within Google Cloud Storage let’s now move it to <code>Big Query</code> which is a <code>data warehouse</code>. We can do this by creating a flow which extracts our data from Google Cloud Storage, creates a DataFrame, does some very basic cleaning (fill missing passenger count with zero) and then writes our dataframe to Big Query.</p>
<p>Before we go ahead and create our flow let’s first head over to GCP and configure Big Query. First let’s add our data which we previously uploaded to our data bucket:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/DE_Zoomcamp_Week_2_files/figure-html/41ac58ea-ffc4-40a6-bcbd-de483143a85b.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">big_query_add_data.PNG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/DE_Zoomcamp_Week_2_files/figure-html/ec86b762-af21-40ee-a116-ca0e0fd84f96.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">yellow_parquet.PNG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/DE_Zoomcamp_Week_2_files/figure-html/93f65716-0774-4001-be11-966a57f0dd6a.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">create_table.PNG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/DE_Zoomcamp_Week_2_files/figure-html/ebd8bc4f-b184-48b9-afba-992b077d5e32.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">table.PNG</figcaption><p></p>
</figure>
</div>
<p>Let’s delete the data from the table prior to creating a flow which will automate this process for us:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/DE_Zoomcamp_Week_2_files/figure-html/3b401569-bd11-459f-9955-e4a42c555643.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">delete_data_biq_query.PNG</figcaption><p></p>
</figure>
</div>
<p>Let’s now create our flow. Note that we can make use of our Prefect blocks created previously, namely our <code>GcsBucket</code>, and <code>GcpCredentials</code>.</p>
<pre><code>from pathlib import Path
import pandas as pd
from prefect import flow, task
from prefect_gcp.cloud_storage import GcsBucket
from prefect_gcp import GcpCredentials


@task(retries=3)
def extract_from_gcs(color: str, year: int, month: int) -&gt; Path:
"""Download trip data from GCS"""
    gcs_path = f"data/{color}/{color}_tripdata_{year}-{month:02}.parquet"
    gcs_block = GcsBucket.load("de-zoomcamp") # this is the name we gave our Prefect block on creation
    gcs_block.get_directory(from_path=gcs_path, local_path=f"../data/") # .. saves the file into a directory up a level
    return Path(f"../data/{gcs_path}")


@task()
def transform(path: Path) -&gt; pd.DataFrame:
"""Data cleaning example"""
    df = pd.read_parquet(path)
    print(f"pre: missing passenger count: {df['passenger_count'].isna().sum()}")
    df["passenger_count"].fillna(0, inplace=True)
    print(f"post: missing passenger count: {df['passenger_count'].isna().sum()}")
    return df


@task()
def write_bq(df: pd.DataFrame) -&gt; None:
"""Write DataFrame to BiqQuery"""

    gcp_credentials_block = GcpCredentials.load("de-gcp-creds") # 

    df.to_gbq(
    destination_table="de_zoomcamp.ny_taxi_rides", # this is the name of our table created in Big Query
    project_id="taxi-rides-ny-137", # this is our project ID on Google Cloud Platform
    credentials=gcp_credentials_block.get_credentials_from_service_account(),
    chunksize=500_000,
    if_exists="append",
)


@flow()
def etl_gcs_to_bq():
"""Main ETL flow to load data into Big Query"""
    color = "yellow"
    year = 2021
    month = 1

    path = extract_from_gcs(color, year, month)
    df = transform(path)
    write_bq(df)


if __name__ == "__main__":
    etl_gcs_to_bq()</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/DE_Zoomcamp_Week_2_files/figure-html/ea1311fa-1f05-4a71-8215-28e8bf99d74c.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">etl_gcs_to_BQ.PNG</figcaption><p></p>
</figure>
</div>
<p>Our flow appears to have run successfully - let’s check Big Query:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/DE_Zoomcamp_Week_2_files/figure-html/724bac99-ebd7-448a-9711-b2f0eecdbe1e.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">gcs_to_BQ_confirm.PNG</figcaption><p></p>
</figure>
</div>
<p>Yes, all <code>1,369,765</code> rows of our data are now available for query within BigQuery.</p>
</section>
<section id="parametrizing-flow-deployments-with-etl-into-gcs-flow" class="level3">
<h3 class="anchored" data-anchor-id="parametrizing-flow-deployments-with-etl-into-gcs-flow">2.2.5 Parametrizing Flow &amp; Deployments with ETL into GCS flow</h3>
<p>Let’s now build upon the existing flow and blocks that we configured previously and learn how to add <code>Parameterization</code> to our flows and create deployments. This removes the inflexibility of hard coded flows, by allowing our flow to take <code>parameters</code>, to be defined at run time. So to start, let’s allow our flow to take parameters of <code>year</code>, <code>month</code>, and <code>color</code>:</p>
<pre><code>from pathlib import Path
import pandas as pd
from prefect import flow, task
from prefect_gcp.cloud_storage import GcsBucket
from random import randint
from prefect.tasks import task_input_hash
from datetime import timedelta


@task(retries=3, cache_key_fn=task_input_hash, cache_expiration=timedelta(days=1)) # make use of cache so not having to re-read dataset
def fetch(dataset_url: str) -&gt; pd.DataFrame:
"""Read taxi data from web into pandas DataFrame"""
# if randint(0, 1) &gt; 0:
#     raise Exception

    df = pd.read_csv(dataset_url)
    return df


@task(log_prints=True)
def clean(df: pd.DataFrame) -&gt; pd.DataFrame:
"""Fix dtype issues"""
    df["tpep_pickup_datetime"] = pd.to_datetime(df["tpep_pickup_datetime"])
    df["tpep_dropoff_datetime"] = pd.to_datetime(df["tpep_dropoff_datetime"])
    print(df.head(2))
    print(f"columns: {df.dtypes}")
    print(f"rows: {len(df)}")
    return df


@task()
def write_local(df: pd.DataFrame, color: str, dataset_file: str) -&gt; Path:
"""Write DataFrame out locally as parquet file"""
    path = Path(f"data/{color}/{dataset_file}.parquet")
    df.to_parquet(path, compression="gzip")
    return path


@task()
def write_gcs(path: Path) -&gt; None:
"""Upload local parquet file to GCS"""
    gcs_block = GcsBucket.load("de-zoomcamp")  # the name we gave our block on creation
    gcs_block.upload_from_path(from_path=path, to_path=path)
    return


@flow()
def etl_web_to_gcs(year: int, month: int, color: str) -&gt; None:
"""The main ETL function"""
    dataset_file = f"{color}_tripdata_{year}-{month:02}"
    dataset_url = f"https://github.com/DataTalksClub/nyc-tlc-data/releases/download/{color}/{dataset_file}.csv.gz"

    df = fetch(dataset_url)
    df_clean = clean(df)
    path = write_local(df_clean, color, dataset_file)
    write_gcs(path)


@flow()
def etl_parent_flow(
    months: list[int] = [1, 2], year: int = 2021, color: str = "yellow" # pass in months as a list
):
for month in months:
    etl_web_to_gcs(year, month, color)


if __name__ == "__main__":
    color = "yellow"
    months = [1, 2, 3]
    year = 2021
    etl_parent_flow(months, year, color)</code></pre>
<p>Once again create the required directories to save locally and run the flow:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/DE_Zoomcamp_Week_2_files/figure-html/43443cf8-b787-4fda-ab7c-32b938f2b077.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">parametrize1.PNG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/DE_Zoomcamp_Week_2_files/figure-html/dc9ea213-5e67-413e-baad-2536dfe39213.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">parametrize2.PNG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/DE_Zoomcamp_Week_2_files/figure-html/3d16b68d-8cd1-4064-85fb-db1c8dece8e6.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">parametrize3.PNG</figcaption><p></p>
</figure>
</div>
<p>Excellent. Our data has been picked up, cleansed and flow runs commpleted - we can see the logs from our Orion terminal :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/DE_Zoomcamp_Week_2_files/figure-html/7ca7c38a-4b37-4162-a9e5-d4bfe672aa22.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">prefect_parametrize.PNG</figcaption><p></p>
</figure>
</div>
<p>And we can see our parent run, and the three subflow runs :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/DE_Zoomcamp_Week_2_files/figure-html/5a433fa7-2ba2-4380-b5f5-4f36bba3de85.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">prefect_parent_subflows.PNG</figcaption><p></p>
</figure>
</div>
<p><code>Deployment</code> using Prefect</p>
<p>This is all very good and works well but we had to execute the flows from the terminal manually. Let’s look at how we can use <code>Prefect</code> to configure and deploy runs from the API. A <code>deployment</code> in Prefect is a server-side concept that encapsulates a flow, allowing it to be scheduled and triggered via the API.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/DE_Zoomcamp_Week_2_files/figure-html/3d9ee78c-b596-4715-93e0-9ae7b845fe7b.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">deployments.PNG</figcaption><p></p>
</figure>
</div>
<p>A flow can have multiple deployments and you can think of it as the container of metadata needed for the flow to be scheduled. This might be what type of infrastructure the flow will run on, or where the flow code is stored, maybe it’s scheduled or has certain parameters.</p>
<p>There are two ways to create a deployment:</p>
<ul>
<li>using the CLI command</li>
<li>with python.</li>
</ul>
<p>We will see how to set up the deployment with Python in the next section. So for now we are going to create one using the CLI.</p>
<p>Inside our terminal we can type :</p>
<pre><code>prefect deployment build ./parameterized_flow.py:etl_parent_flow -n "Parameterized ETL"</code></pre>
<p>The file name is <code>./parametrized_flow.py</code> and <code>:etl_parent_flow</code> specifies the entry point of our flow and the <code>-n</code> refers to the name that we want to give our deployment.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/DE_Zoomcamp_Week_2_files/figure-html/088d9bff-e12e-48ea-b58b-705099ace341.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">deployment_yaml.PNG</figcaption><p></p>
</figure>
</div>
<p>Now we can see it created a yaml file with all our details. This is the metadata. The default file did not include any parameters but I have amended the file to include :</p>
<pre><code>{ "color": "yellow", "months" :[1, 2, 3], "year": 2021}

###
### A complete description of a Prefect Deployment for flow 'etl-parent-flow'
###
name: Parameterized ETL
description: null
version: 13fb131389eead1a3008d65d3170ceb0
# The work queue that will handle this deployment's runs
work_queue_name: default
work_pool_name: null
tags: []
parameters: { "color": "yellow", "months" :[1, 2, 3], "year": 2021} # default file did not include any parameters
schedule: null
is_schedule_active: null
infra_overrides: {}
infrastructure:
  type: process
  env: {}
  labels: {}
  name: null
  command: null
  stream_output: true
  working_dir: null
  block_type_slug: process
  _block_type_slug: process

###
### DO NOT EDIT BELOW THIS LINE
###
flow_name: etl-parent-flow
manifest_path: null
storage: null
path: /home/stephen137/data-engineering-zoomcamp/prefect-zoomcamp/flows/03_deployments
entrypoint: parameterized_flow.py:etl_parent_flow
parameter_openapi_schema:
  title: Parameters
  type: object
  properties:
months:
  title: months
  default:
  - 1
  - 2
  position: 0
  type: array
  items:
    type: integer
year:
  title: year
  default: 2021
  position: 1
  type: integer
color:
  title: color
  default: yellow
  position: 2
  type: string
  required: null
  definitions: null
timestamp: '2023-03-14T09:33:56.112462+00:00'</code></pre>
<p>Now we need to apply the deployment by running the yaml file:</p>
<pre><code>prefect deployment apply etl_parent_flow-deployment.yaml</code></pre>
<p>This sends all the metadata over to the Prefect API.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/DE_Zoomcamp_Week_2_files/figure-html/626ea313-4c24-4704-9471-372419066515.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">deployment_apply.PNG</figcaption><p></p>
</figure>
</div>
<p>From the Prefect UI we can see the deployment, trigger a flow run, change parameters etc. Let’s go ahead and trigger a quick run :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/DE_Zoomcamp_Week_2_files/figure-html/3bac0f28-73cc-40f0-ab3b-c086727ead77.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">prefect_deployment.PNG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/DE_Zoomcamp_Week_2_files/figure-html/85c9b17b-baa2-483c-a8b4-77b9f0e9abfd.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">prefect_scheduled_run.PNG</figcaption><p></p>
</figure>
</div>
<p>So, our run is scheduled but is <code>queued up</code>. If we go now to the Prefect Orion UI <code>Work Queues</code> we can see we have <code>1 late run</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/DE_Zoomcamp_Week_2_files/figure-html/8f3ff4a7-2a7d-46dd-920f-44709db90711.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">work_queue_late_run.PNG</figcaption><p></p>
</figure>
</div>
<p>We need to have an agent living in our execution environment (local) to trigger it. When we deployed from the terminal the following message was generated :</p>
<pre><code>To execute flow runs from this deployment, start an agent that pulls work from the 'default' work queue:
$ prefect agent start -q 'default'</code></pre>
<p>So let’s now go ahead and start our agent:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/DE_Zoomcamp_Week_2_files/figure-html/b32b94a0-57ff-450b-ae27-e413f3f329a5.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">agent_1.PNG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/DE_Zoomcamp_Week_2_files/figure-html/bf60ecdc-fe58-4eb2-8e58-8cdb2e9565d3.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">agent_2.PNG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/DE_Zoomcamp_Week_2_files/figure-html/66a8d183-21d1-4e02-af87-5aedcf88e8af.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">agent_3.PNG</figcaption><p></p>
</figure>
</div>
<p>Our run has completed successfully and this is confirmed within the Prefect Orion UI:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/DE_Zoomcamp_Week_2_files/figure-html/c2fa7890-1076-4252-a77d-7a530174fece.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">deployment_complete.PNG</figcaption><p></p>
</figure>
</div>
<p>So this completed successfully however it is good practice to make use of <code>Notifications</code>. We can customise these from the UI or build these into our flows using Prefect blocks.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/DE_Zoomcamp_Week_2_files/figure-html/fccc31cf-4035-431c-bfa9-b1f9869adb6d.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">notifications.PNG</figcaption><p></p>
</figure>
</div>
</section>
<section id="schedules-and-docker-storage-with-infrastructure" class="level3">
<h3 class="anchored" data-anchor-id="schedules-and-docker-storage-with-infrastructure">2.2.6 Schedules and Docker Storage with Infrastructure</h3>
<p>Let’s now have a look at <code>scheduling</code> our flows and running our flows in containers in Docker. First let’s look at scheduling. We have a deployment that we ran in the previous section - we have various scheduling options which we can configure via the Prefect UI :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/DE_Zoomcamp_Week_2_files/figure-html/fe1359b9-5b40-4870-b1b1-f5a4f89cd4e3.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">prefect_scheduler.PNG</figcaption><p></p>
</figure>
</div>
<p>The <code>Interval</code> scheduler is fairly self-explanatory, for example every five minutes. Another option is something called <a href="https://en.wikipedia.org/wiki/Cron"><code>Cron</code></a> which allows us to configure period runs on a given schedule based on the following syntax :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/DE_Zoomcamp_Week_2_files/figure-html/54b67c5f-defe-4315-bccf-7d519b7a4526.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">crontab.PNG</figcaption><p></p>
</figure>
</div>
<p>For example, using our Prefect deployment, we can schedule for every minute on day 3 of the month:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/DE_Zoomcamp_Week_2_files/figure-html/4c6d1619-19f8-4e3b-94f5-3710bdddd05e.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">prefect_cron.PNG</figcaption><p></p>
</figure>
</div>
<p>The <code>RRule (recurring rule)</code> feature is more complex and is not currently available from within the Prefect UI, but we can configure these from the command line at the deployment stage :</p>
<pre><code>prefect deployment build ./parameterized_flow.py:etl_parent_flow -n "ETL2" --cron "0 0 * * *" -a</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/DE_Zoomcamp_Week_2_files/figure-html/3982faf3-e3f8-4b7f-aebe-ef3082cfccfd.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">schedule_ETL2.PNG</figcaption><p></p>
</figure>
</div>
<p>We can see this has been scheduled within the Prefect UI to run every day at 12:00am UTC :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/DE_Zoomcamp_Week_2_files/figure-html/605d5aa2-89d4-4f69-aa37-f12f6a96be7e.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">prefect_schedule_ETL2.PNG</figcaption><p></p>
</figure>
</div>
<p>We can find out more using :</p>
<pre><code>prefect deployment build --help</code></pre>
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/DE_Zoomcamp_Week_2_files/figure-html/b013f32d-acc5-489f-a9ca-5a011b199afd.PNG" class="img-fluid" alt="prefect_build_deploy_help_1.PNG"> <img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/DE_Zoomcamp_Week_2_files/figure-html/d1fbb68e-f149-4f77-99ee-41893ee5e31b.PNG" class="img-fluid" alt="prefect_build_deploy_help_2.PNG"></p>
<p>So far we have had our flow code sitting locally on our machine, but if we want to make things a little more production ready and enable other people to access our flow code, we could put our code on <a href="https://github.com/">GitHub</a>, <a href="https://bitbucket.org/product">BitBucket</a>, <a href="https://about.gitlab.com/">GitLab</a>, <a href="https://aws.amazon.com/pm/serv-s3/?trk=518a7bef-5b4f-4462-ad55-80e5c177f12b&amp;sc_channel=ps&amp;s_kwcid=AL!4422!3!645186213301!e!!g!!aws%20s3%20cloud%20storage&amp;ef_id=%7Bgclid%7D:G:s&amp;s_kwcid=AL!4422!3!645186213301!e!!g!!aws%20s3%20cloud%20storage">AWS S3</a>, <a href="https://azure.microsoft.com/en-us/free/search/?&amp;ef_id=%7Bgclid%7D:G:s&amp;OCID=AIDcmm4rphvbww_SEM_%7Bgclid%7D:G:s">MS Azure</a> - any of those version control systems.</p>
<p>Let’s now look at how to store our flow in a <code>Docker</code> image on <a href="https://hub.docker.com/">DockerHub</a> and then when we run a docker container our code will be right there - we will be baking it into the image.</p>
<p>The first thing we need to do is create a Dockerfile :</p>
<pre><code>FROM prefecthq/prefect:2.7.7-python3.9

COPY docker-requirements.txt .

RUN pip install -r docker-requirements.txt --trusted-host pypi.python.org --no-cache-dir

COPY flows /opt/prefect/flows  
RUN mkdir -p /opt/prefect/data/yellow</code></pre>
<p>And we also need to create a requirements file :</p>
<pre><code>pandas==1.5.2
prefect-gcp[cloud_storage]==0.2.4
protobuf==4.21.11
pyarrow==10.0.1
pandas-gbq==0.18.1</code></pre>
<p>Let’s now build our docker image from the command line :</p>
<pre><code>docker image build -t stephen137/prefect:zoomcamp .</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/DE_Zoomcamp_Week_2_files/figure-html/2a5e85f0-cd8f-4295-85cd-06eb73e53797.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">docker_schedule.PNG</figcaption><p></p>
</figure>
</div>
<p>Now we want to push the image to dockerhub :</p>
<pre><code>docker image push stephen137/prefect:zoomcamp</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/DE_Zoomcamp_Week_2_files/figure-html/a3d56968-b4f2-4b2e-85f3-572a02216787.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">docker_schedule_image_push.PNG</figcaption><p></p>
</figure>
</div>
<p>That was successful and we can see our image within the dockerhub UI :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/DE_Zoomcamp_Week_2_files/figure-html/c5207dbe-97c9-473d-b574-cd055cf8ebcc.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">dockerhub.PNG</figcaption><p></p>
</figure>
</div>
<p>It is possible to create a docker block using code - but let’s for now just use:</p>
<pre><code>pip install prefect-docker</code></pre>
<p>and then register the block :</p>
<pre><code>prefect block register -m prefect_docker</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/DE_Zoomcamp_Week_2_files/figure-html/af742231-b2c9-4a11-b080-46f755eb43a1.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">docker_block.PNG</figcaption><p></p>
</figure>
</div>
<p>And then we can do some basic block config (image name being most important - as previously specified at docker build stage) within the Prefect UI :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/DE_Zoomcamp_Week_2_files/figure-html/b489ecb0-d609-4bb8-b692-d5d679fb8115.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">prefect_docker_container_block.PNG</figcaption><p></p>
</figure>
</div>
<p>And the block code that we can add to our flow is :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/DE_Zoomcamp_Week_2_files/figure-html/a32a2015-fbc8-4cfe-95e0-fc045dc5c8a5.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">docker_container_block_code.PNG</figcaption><p></p>
</figure>
</div>
<p>Let’s now create our deployment from a python file (we did this previously from the command line) and include the block code above :</p>
<pre><code>from prefect.deployments import Deployment
from parameterized_flow import etl_parent_flow
from prefect.infrastructure.docker import DockerContainer

docker_block = DockerContainer.load("de-zoomcamp") # as specified on creation of block

docker_dep = Deployment.build_from_flow(
    flow=etl_parent_flow,
    name="docker-flow",
    infrastructure=docker_block,
)


if __name__ == "__main__":
    docker_dep.apply()</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/DE_Zoomcamp_Week_2_files/figure-html/d9574725-fa69-4154-a9d6-54eb0f10498c.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">docker_deploy.PNG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/DE_Zoomcamp_Week_2_files/figure-html/69270363-4c13-4504-abb7-25266b50c69f.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">docker_flow_deployment.PNG</figcaption><p></p>
</figure>
</div>
<p>Before we run this, let’s just take a look at something :</p>
<pre><code>prefect profile ls</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/DE_Zoomcamp_Week_2_files/figure-html/47ef7084-0df8-4f37-9156-ac16525a99cd.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">prefect_profile.PNG</figcaption><p></p>
</figure>
</div>
<p>So we are using default at the moment, but let’s configure to the <a href="https://docs.prefect.io/concepts/settings/">Prefect API url</a> :</p>
<pre><code>prefect config set PREFECT_API_URL="http://127.0.0.1:4200/api"</code></pre>
<p>This will ensure our docker container is able to interface with the Prefect Orion server.</p>
<p>OK, so we are almost ready to start our flow. Let’s fire up an agent :</p>
<pre><code>prefect agent start -q default</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/DE_Zoomcamp_Week_2_files/figure-html/4ebdde0f-772f-4988-8dbb-86af83de73f3.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">prefect_agent.PNG</figcaption><p></p>
</figure>
</div>
<p>And as confirmed from the Orion UI :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/DE_Zoomcamp_Week_2_files/figure-html/19d12390-3143-454d-b590-5c38faddd7ce.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">orion_agent_start.PNG</figcaption><p></p>
</figure>
</div>
<p>And let’s now run our flow from the command line, and override the default parameter :</p>
<pre><code>prefect deployment run etl-parent-flow/docker-flow -p "months=[1,2]"</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/DE_Zoomcamp_Week_2_files/figure-html/63b0adbf-1fcc-4010-a602-05bab48f9236.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">docker_prefect_flow.PNG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/DE_Zoomcamp_Week_2_files/figure-html/5f4f9748-d28e-4697-84ab-48e035750bd5.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">docker_flow_crash.PNG</figcaption><p></p>
</figure>
</div>
<p>According to the course <code>FAQs</code> this error occurs because we are running Prefect locally on our machine at localhost:4200, when we run docker without specifying their network, Docker calls the localhost:4200 inside the container but not the localhost:4200 on our machine.</p>
<p>One suggested solution is to set the network Mode to <code>bridge</code> although that didn’t work for me.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/DE_Zoomcamp_Week_2_files/figure-html/e2306166-18aa-41d4-b069-5601cfa5a88c.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">docker_container_bridge.PNG</figcaption><p></p>
</figure>
</div>
<p>Hopefully I can find a solution to this as I progress with the course, but let’s push on.</p>
</section>
<section id="prefect-cloud---additional-resources" class="level3">
<h3 class="anchored" data-anchor-id="prefect-cloud---additional-resources">2.2.7 Prefect Cloud - Additional Resources</h3>
<p>Further resource in support of the workflow orchestrations we have covered is included in the <a href="https://docs.prefect.io/">Prefect docs</a> which cover the core concepts for <code>flows</code>, <code>tasks</code> and <code>task runners</code>. It also includes getting started tutorials as well as a <code>recipes</code> which are common, extensible examples for setting up Prefect in your execution environment with ready-made ingredients such as Dockerfiles, Terraform files, and GitHub Actions.</p>
<p>Prefect also offers a <a href="https://docs.prefect.io/ui/overview/">hosted cloud</a> solution, instead of having to host the Orion cloud UI yourself, and the cloud version includes some additional features such as <code>Automations</code> and workspaces which can be used collaboratively.</p>
<p>For technical discussions you can visit the <a href="https://discourse.prefect.io/">Prefect Discourse</a> and the <a href="https://github.com/PrefectHQ/prefect">Prefect Github</a>. For blogs and guides it is well worth checking out <a href="https://github.com/anna-geller">Anna Geller’s Github</a>.</p>
</section>
<section id="key-takeaways" class="level3">
<h3 class="anchored" data-anchor-id="key-takeaways">Key Takeaways</h3>
<p>We covered a lot this week! We started off by creating a simple python script that ingested a csv file into a database (<code>postgreSQL</code>).</p>
<p>We then showed how to streamline our data pipeline by leveraging the <code>Prefect</code> workflow orchestration tool. We created an ETL flow which:</p>
<ul>
<li>grabbed a csv file from the web (1.4 million rows)</li>
<li>carried out some preprocessing, converted to a DataFrame</li>
<li>uploaded to a data lake [Google Cloud Storage]</li>
<li>moved it to a data warehouse [BigQuery]</li>
</ul>
<p>In week 3 we will be digging deeper into Biq Query, and taking a look at partitioning, clustering and best practice. We also learn about Machine Learning techniques using Big Query.</p>


</section>
</section>

 ]]></description>
  <category>GCP</category>
  <category>BigQuery</category>
  <category>Data Lakes</category>
  <category>ETL</category>
  <category>Prefect</category>
  <category>DataTalksClub</category>
  <guid>https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/DE_Zoomcamp_Week_2.html</guid>
  <pubDate>Wed, 15 Mar 2023 23:00:00 GMT</pubDate>
  <media:content url="https://stephen137.github.io/posts/DE_Zoomcamp_Week_2/orchestrator.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Data Engineering Zoomcamp - Week 1</title>
  <dc:creator>Stephen Barrie</dc:creator>
  <link>https://stephen137.github.io/posts/DE_Zoomcamp_Week_1/DE_Zoomcamp_Week_1.html</link>
  <description><![CDATA[ 




<section id="week-1---basics-and-set-up" class="level2">
<h2 class="anchored" data-anchor-id="week-1---basics-and-set-up">Week 1 - Basics and Set-up</h2>
<p>This course will cover a number of technologies, including Google Cloud Platform (GCP): Cloud-based auto-scaling platform by Google, Google Cloud Storage (GCS): Data Lake, BigQuery: Data Warehouse, Terraform: Infrastructure-as-Code (IaC), Docker: Containerization, SQL: Data Analysis &amp; Exploration, Prefect: Workflow Orchestration, dbt: Data Transformation, Spark: Distributed Processing, Kafka: Streaming.</p>
<p>An overview of the course architecture is included below:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_1/DE_Zoomcamp_Week_1_files/figure-html/e0d0cb1f-c49f-4b75-945d-377d45e5d0bb.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Architecture.png</figcaption><p></p>
</figure>
</div>
<p>The first thing to do is to navigate to the <a href="https://github.com/DataTalksClub/data-engineering-zoomcamp">course github page</a> and clone the course repo to your local machine :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_1/DE_Zoomcamp_Week_1_files/figure-html/29b602a8-7b8b-4fb0-a07b-95d3cbfa9048.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">clone_repository.PNG</figcaption><p></p>
</figure>
</div>
<p>by running the following command in your terminal. I have a Windows machine but have a Linux environment installed, and use the <a href="https://ubuntu.com/tutorials/install-ubuntu-on-wsl2-on-windows-10#1-overview">Ubuntu on Windows</a> terminal.</p>
<pre><code>git clone https://github.com/DataTalksClub/data-engineering-zoomcamp.git</code></pre>
<p>I have a nifty terminal splitter called <a href="https://github.com/tmux/tmux/wiki">tmux</a> which allows me to have multiple terminals running - which comes in very handy sometimes!!! There’s a handy cheatsheet <a href="https://tmuxcheatsheet.com/">here</a> but basically <code>CTRL+B</code> is the way in to the magic :)</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_1/DE_Zoomcamp_Week_1_files/figure-html/3ff91892-70a4-4737-a25c-e836b1244a8b.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">tmux.PNG</figcaption><p></p>
</figure>
</div>
<p>Other things we can do from the command line:</p>
<pre><code>ls (lists all files in the directory)
exit (self explanatory)
rm -rf / (remove all files from directory)</code></pre>
<p>We can use <code>sudo</code> to execute commands where we don’t have the necessary permissions.</p>
<section id="introduction-to-google-cloud-platform-gcp" class="level3">
<h3 class="anchored" data-anchor-id="introduction-to-google-cloud-platform-gcp">1.1.1 Introduction to Google Cloud Platform (GCP)</h3>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_1/DE_Zoomcamp_Week_1_files/figure-html/2d95e736-04da-4c8f-b8fc-01e23f92f9d5.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">What_is_GCP.PNG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_1/DE_Zoomcamp_Week_1_files/figure-html/8fdc4f46-ecda-4760-a690-2f9b403183c8.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">GCP.PNG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_1/DE_Zoomcamp_Week_1_files/figure-html/a9c4e5d1-c861-4727-8a94-3aabc75a6891.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">GCP_dashboard.PNG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_1/DE_Zoomcamp_Week_1_files/figure-html/f9be03e6-c420-42ec-abb5-80a21f70bd5a.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">GCP_cloud_storage.PNG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_1/DE_Zoomcamp_Week_1_files/figure-html/81ad66d8-518e-4e1c-96b4-13edf15f5ea0.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">GCP_search_bar.PNG</figcaption><p></p>
</figure>
</div>
</section>
<section id="introduction-to-docker" class="level3">
<h3 class="anchored" data-anchor-id="introduction-to-docker">1.2.1 Introduction to Docker</h3>
<p>What is Docker? Why do we need it?</p>
<p>Docker is an open platform for developing, shipping, and running applications. Docker enables you to separate your applications from your infrastructure so you can deliver software quickly. With Docker, you can manage your infrastructure in the same ways you manage your applications. By taking advantage of Docker’s methodologies for shipping, testing, and deploying code quickly, you can significantly reduce the delay between writing code and running it in production.</p>
<p>You can find out more from the <a href="https://docs.docker.com/get-started/overview/">source documentation</a>.</p>
<ul>
<li>Local experiments</li>
<li>Integration tests (Continuous Integraton (CI) / Continuous Development (CD)) - Github Actions, Jenkins</li>
<li>Reproducibility (isolated CONTAINER) ensures environment on local machine can be directly replicated ANYWHERE</li>
<li>Running pipelines on the cloud (AWS Batch, Kubernetes jobs)</li>
<li>Spark</li>
<li>Serverless (AWS Lambda, [Google] Cloud functions)</li>
</ul>
<p>Let’s illustrate how Docker works with a simple example. First let’s create a Dockerfile within <code>Visual Studio Code (VSC)</code>. VSC can be accessed from the command line using :</p>
<pre><code>code .</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_1/DE_Zoomcamp_Week_1_files/figure-html/94927d12-fd68-4768-aa55-4e85724cf139.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">dockerfile.JPG</figcaption><p></p>
</figure>
</div>
<p>Let’s first build an <code>image</code> - we’ll name it <code>test:pandas</code> by running the following command from within the terminal:</p>
<pre><code>docker build -t test:pandas . # this searches in the current directory for a dockerfile and creates an image</code></pre>
<p>and run the image using :</p>
<pre><code>docker run -it test:pandas </code></pre>
<p>This takes us to a bash command prompt, as this is our <code>entrypoint</code> as defined in our Dockerfile. We can then open up Python, import pandas and check which version we have:</p>
<pre><code>python
import pandas as pd
pd.__version__    </code></pre>
<p>The key point about images is that they are as the name suggests a snapshot of all file dependencies at the specific point in time that they are created.</p>
<p>We can automate things further by creating a <code>data pipeline.py</code> file and configuring our Dockerfile to include this :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_1/DE_Zoomcamp_Week_1_files/figure-html/a4c52dd4-e94b-45bc-a40a-2580987453a2.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">pipeline.JPG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_1/DE_Zoomcamp_Week_1_files/figure-html/dd06aca1-1f23-4fb2-8d1b-6f8eef677e17.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">dockerfile_2.JPG</figcaption><p></p>
</figure>
</div>
<p>Let’s run the following commands in the terminal :</p>
<pre><code>docker build -t test:pandas .
docker run -it test:pandas


root@f009333fb3e5:/app# pwd (`pwd` takes us to the CURRENT directory)
/app   </code></pre>
<p>We can see that this is <code>/app</code> as specified in <code>WORKDIR</code> in our Dockefile above. Finally, if we run our <code>pipeline.py</code> file:</p>
<pre><code>python pipeline.py</code></pre>
<p>we get the following output:</p>
<pre><code>job finished successfully</code></pre>
<p>This was the final item in our pipeline.py file :)</p>
<p><code>Fine tuning our Docker container</code></p>
<p>Let’s fine tune the configuration of our <code>pipleline</code> a bit more prior to scheduling a run:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_1/DE_Zoomcamp_Week_1_files/figure-html/f117e157-83eb-46d6-af9f-b9c7313af3f0.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">pipeline_2.JPG</figcaption><p></p>
</figure>
</div>
<p>We first rebuild using our usual command:</p>
<pre><code>docker build -t test:pandas .</code></pre>
<p>Say we want to schedule the run for a particular today - for illustrative purposes let’s use today’s date. We define <code>day</code> as system <em>argument</em> number 1 (argument 0 is the file name). We then pass in that argument (today’s date - 2023-03-05) in our command line prompt:</p>
<pre><code>docker run -it test:pandas 2023-03-05</code></pre>
<p>And we get the following output:</p>
<p>[‘pipeline.py’, ‘2023-03-05’]</p>
<p>job finished successfully for day = 2023-03-05</p>
<p>The items inside [ ] are the <code>arguments</code> - number 0 is the file name <code>pipeline.py</code>, number 1 is the date as configured in our <code>pipepline</code>. We can include further arguments within our command line prompt e.g :</p>
<pre><code>docker run -it test:pandas 2023-02-09 Incoming_137_new_album!</code></pre>
<p>This returns the following output:</p>
<p>[‘pipeline.py’, ‘2023-02-09’, ‘Incoming.’, ‘137’, ‘new’, ‘album!’] job finished successfully for day = 2023-02-09</p>
<p>The additonal arguments specified are listed as we included</p>
<pre><code>print(sys.arg)</code></pre>
<p>in our <code>pipeline.py</code> file</p>
</section>
<section id="ingesting-ny-taxi-data-to-postgres" class="level3">
<h3 class="anchored" data-anchor-id="ingesting-ny-taxi-data-to-postgres">1.2.2 Ingesting NY Taxi Data to Postgres</h3>
<p><code>Downloading our datasets</code></p>
<p>Let’s now go ahead and download the datasets that we will be working with over the next few weeks. We can do this from the command line using :</p>
<pre><code>wget https://github.com/DataTalksClub/nyc-tlc-data/releases/download/yellow/yellow_tripdata_2021-01.csv.gz 

wget https://s3.amazonaws.com/nyc-tlc/misc/taxi+_zone_lookup.csv</code></pre>
<p>We can unzip the <code>.gz</code> file and retain the original using :</p>
<pre><code>gzip -dk &lt;file_name.csv.gz&gt;</code></pre>
<p>We can count number of lines using <code>wc</code> (word count) <code>-l</code> (lines) :</p>
<pre><code>wc -l &lt;file_name&gt;     </code></pre>
<p>We can look at say the first 100 rows:</p>
<pre><code>head -n 100 &lt;file_name&gt;</code></pre>
<p>We can then save this subset to csv using :</p>
<pre><code>head -n 100 yellow_tripdata_2021-01.csv &gt; yellow_head.csv
 </code></pre>
<p>We can copy a file to the current directory using :</p>
<pre><code>cp ~ &lt;/existing/file/path&gt; .     </code></pre>
<p>We can look at a text data file from the command line using:</p>
<pre><code>less &lt;file_name&gt;  </code></pre>
<p>and exit the terminal using <code>CTRL + Z</code></p>
<p><code>Explore our dataset</code></p>
<p>Let’s now take a look at our data within Jupter Notebooks using pandas. We will only carry out limited pre-processing at this stage - the focus is to demonstrate how to take a csv file and ingest it to a database.</p>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span></code></pre></div>
</div>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">pd.__version__</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>'1.5.2'</code></pre>
</div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">df <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(<span class="st" style="color: #20794D;">'Data/yellow_tripdata_2021-01.csv'</span>)</span>
<span id="cb24-2">df</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/tmp/ipykernel_194/843851997.py:1: DtypeWarning: Columns (6) have mixed types. Specify dtype option on import or set low_memory=False.
  df = pd.read_csv('Data/yellow_tripdata_2021-01.csv')</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="5">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>VendorID</th>
      <th>tpep_pickup_datetime</th>
      <th>tpep_dropoff_datetime</th>
      <th>passenger_count</th>
      <th>trip_distance</th>
      <th>RatecodeID</th>
      <th>store_and_fwd_flag</th>
      <th>PULocationID</th>
      <th>DOLocationID</th>
      <th>payment_type</th>
      <th>fare_amount</th>
      <th>extra</th>
      <th>mta_tax</th>
      <th>tip_amount</th>
      <th>tolls_amount</th>
      <th>improvement_surcharge</th>
      <th>total_amount</th>
      <th>congestion_surcharge</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1.0</td>
      <td>2021-01-01 00:30:10</td>
      <td>2021-01-01 00:36:12</td>
      <td>1.0</td>
      <td>2.10</td>
      <td>1.0</td>
      <td>N</td>
      <td>142</td>
      <td>43</td>
      <td>2.0</td>
      <td>8.00</td>
      <td>3.00</td>
      <td>0.5</td>
      <td>0.00</td>
      <td>0.0</td>
      <td>0.3</td>
      <td>11.80</td>
      <td>2.5</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1.0</td>
      <td>2021-01-01 00:51:20</td>
      <td>2021-01-01 00:52:19</td>
      <td>1.0</td>
      <td>0.20</td>
      <td>1.0</td>
      <td>N</td>
      <td>238</td>
      <td>151</td>
      <td>2.0</td>
      <td>3.00</td>
      <td>0.50</td>
      <td>0.5</td>
      <td>0.00</td>
      <td>0.0</td>
      <td>0.3</td>
      <td>4.30</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>1.0</td>
      <td>2021-01-01 00:43:30</td>
      <td>2021-01-01 01:11:06</td>
      <td>1.0</td>
      <td>14.70</td>
      <td>1.0</td>
      <td>N</td>
      <td>132</td>
      <td>165</td>
      <td>1.0</td>
      <td>42.00</td>
      <td>0.50</td>
      <td>0.5</td>
      <td>8.65</td>
      <td>0.0</td>
      <td>0.3</td>
      <td>51.95</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>1.0</td>
      <td>2021-01-01 00:15:48</td>
      <td>2021-01-01 00:31:01</td>
      <td>0.0</td>
      <td>10.60</td>
      <td>1.0</td>
      <td>N</td>
      <td>138</td>
      <td>132</td>
      <td>1.0</td>
      <td>29.00</td>
      <td>0.50</td>
      <td>0.5</td>
      <td>6.05</td>
      <td>0.0</td>
      <td>0.3</td>
      <td>36.35</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>2.0</td>
      <td>2021-01-01 00:31:49</td>
      <td>2021-01-01 00:48:21</td>
      <td>1.0</td>
      <td>4.94</td>
      <td>1.0</td>
      <td>N</td>
      <td>68</td>
      <td>33</td>
      <td>1.0</td>
      <td>16.50</td>
      <td>0.50</td>
      <td>0.5</td>
      <td>4.06</td>
      <td>0.0</td>
      <td>0.3</td>
      <td>24.36</td>
      <td>2.5</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>1369760</th>
      <td>NaN</td>
      <td>2021-01-25 08:32:04</td>
      <td>2021-01-25 08:49:32</td>
      <td>NaN</td>
      <td>8.80</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>135</td>
      <td>82</td>
      <td>NaN</td>
      <td>21.84</td>
      <td>2.75</td>
      <td>0.5</td>
      <td>0.00</td>
      <td>0.0</td>
      <td>0.3</td>
      <td>25.39</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>1369761</th>
      <td>NaN</td>
      <td>2021-01-25 08:34:00</td>
      <td>2021-01-25 09:04:00</td>
      <td>NaN</td>
      <td>5.86</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>42</td>
      <td>161</td>
      <td>NaN</td>
      <td>26.67</td>
      <td>2.75</td>
      <td>0.5</td>
      <td>0.00</td>
      <td>0.0</td>
      <td>0.3</td>
      <td>30.22</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>1369762</th>
      <td>NaN</td>
      <td>2021-01-25 08:37:00</td>
      <td>2021-01-25 08:53:00</td>
      <td>NaN</td>
      <td>4.45</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>14</td>
      <td>106</td>
      <td>NaN</td>
      <td>25.29</td>
      <td>2.75</td>
      <td>0.5</td>
      <td>0.00</td>
      <td>0.0</td>
      <td>0.3</td>
      <td>28.84</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>1369763</th>
      <td>NaN</td>
      <td>2021-01-25 08:28:00</td>
      <td>2021-01-25 08:50:00</td>
      <td>NaN</td>
      <td>10.04</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>175</td>
      <td>216</td>
      <td>NaN</td>
      <td>28.24</td>
      <td>2.75</td>
      <td>0.5</td>
      <td>0.00</td>
      <td>0.0</td>
      <td>0.3</td>
      <td>31.79</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>1369764</th>
      <td>NaN</td>
      <td>2021-01-25 08:38:00</td>
      <td>2021-01-25 08:50:00</td>
      <td>NaN</td>
      <td>4.93</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>248</td>
      <td>168</td>
      <td>NaN</td>
      <td>20.76</td>
      <td>2.75</td>
      <td>0.5</td>
      <td>0.00</td>
      <td>0.0</td>
      <td>0.3</td>
      <td>24.31</td>
      <td>0.0</td>
    </tr>
  </tbody>
</table>
<p>1369765 rows × 18 columns</p>
</div>
</div>
</div>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">df.dtypes</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>VendorID                 float64
tpep_pickup_datetime      object
tpep_dropoff_datetime     object
passenger_count          float64
trip_distance            float64
RatecodeID               float64
store_and_fwd_flag        object
PULocationID               int64
DOLocationID               int64
payment_type             float64
fare_amount              float64
extra                    float64
mta_tax                  float64
tip_amount               float64
tolls_amount             float64
improvement_surcharge    float64
total_amount             float64
congestion_surcharge     float64
dtype: object</code></pre>
</div>
</div>
<p><code>Generate table Schema</code></p>
<p>To generate a schema for use within postgreSQL there is a module within pandas named <code>io</code> to convert to Data Definition Language (DDL) :</p>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="bu" style="color: null;">print</span>(pd.io.sql.get_schema(df, name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'yellow_taxi_data'</span>)) <span class="co" style="color: #5E5E5E;"># name of Table</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>CREATE TABLE "yellow_taxi_data" (
"VendorID" REAL,
  "tpep_pickup_datetime" TEXT,
  "tpep_dropoff_datetime" TEXT,
  "passenger_count" REAL,
  "trip_distance" REAL,
  "RatecodeID" REAL,
  "store_and_fwd_flag" TEXT,
  "PULocationID" INTEGER,
  "DOLocationID" INTEGER,
  "payment_type" REAL,
  "fare_amount" REAL,
  "extra" REAL,
  "mta_tax" REAL,
  "tip_amount" REAL,
  "tolls_amount" REAL,
  "improvement_surcharge" REAL,
  "total_amount" REAL,
  "congestion_surcharge" REAL
)</code></pre>
</div>
</div>
<p>We can see immmediately that pick up and drop off datatype is <code>TEXT</code> but needs to be converted (parsed) to <code>datetime</code>. We can do this using pandas <code>to_datetime</code>:</p>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">pd.to_datetime(df.tpep_pickup_datetime)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>0         2021-01-01 00:30:10
1         2021-01-01 00:51:20
2         2021-01-01 00:43:30
3         2021-01-01 00:15:48
4         2021-01-01 00:31:49
                  ...        
1369760   2021-01-25 08:32:04
1369761   2021-01-25 08:34:00
1369762   2021-01-25 08:37:00
1369763   2021-01-25 08:28:00
1369764   2021-01-25 08:38:00
Name: tpep_pickup_datetime, Length: 1369765, dtype: datetime64[ns]</code></pre>
</div>
</div>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">pd.to_datetime(df.tpep_dropoff_datetime)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>0         2021-01-01 00:36:12
1         2021-01-01 00:52:19
2         2021-01-01 01:11:06
3         2021-01-01 00:31:01
4         2021-01-01 00:48:21
                  ...        
1369760   2021-01-25 08:49:32
1369761   2021-01-25 09:04:00
1369762   2021-01-25 08:53:00
1369763   2021-01-25 08:50:00
1369764   2021-01-25 08:50:00
Name: tpep_dropoff_datetime, Length: 1369765, dtype: datetime64[ns]</code></pre>
</div>
</div>
<p>We now need to update our dataframe:</p>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">df.tpep_pickup_datetime <span class="op" style="color: #5E5E5E;">=</span> pd.to_datetime(df.tpep_pickup_datetime)</span>
<span id="cb34-2">df.tpep_dropoff_datetime <span class="op" style="color: #5E5E5E;">=</span> pd.to_datetime(df.tpep_dropoff_datetime)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1"><span class="bu" style="color: null;">print</span>(pd.io.sql.get_schema(df, name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'yellow_taxi_data'</span>)) <span class="co" style="color: #5E5E5E;"># name of Table</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>CREATE TABLE "yellow_taxi_data" (
"VendorID" REAL,
  "tpep_pickup_datetime" TIMESTAMP,
  "tpep_dropoff_datetime" TIMESTAMP,
  "passenger_count" REAL,
  "trip_distance" REAL,
  "RatecodeID" REAL,
  "store_and_fwd_flag" TEXT,
  "PULocationID" INTEGER,
  "DOLocationID" INTEGER,
  "payment_type" REAL,
  "fare_amount" REAL,
  "extra" REAL,
  "mta_tax" REAL,
  "tip_amount" REAL,
  "tolls_amount" REAL,
  "improvement_surcharge" REAL,
  "total_amount" REAL,
  "congestion_surcharge" REAL
)</code></pre>
</div>
</div>
<p><code>sqlalchemy</code></p>
<p>Note that we have successfully updated our pick up and drop off to <code>Timestamp</code>. Simply copying and pasting the above <em>might</em> work but we need to create the above statement in a way that postgreSQL will understand for sure. For that we need to tell pandas that we want to put this into postgres. For this we can use <code>sqlalchemy</code>.</p>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1"><span class="im" style="color: #00769E;">from</span> sqlalchemy <span class="im" style="color: #00769E;">import</span> create_engine</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">engine <span class="op" style="color: #5E5E5E;">=</span> create_engine(<span class="st" style="color: #20794D;">'postgresql://root:root@localhost:5432/ny_taxi'</span>)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1"><span class="bu" style="color: null;">print</span>(pd.io.sql.get_schema(df, name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'yellow_taxi_data'</span>,con<span class="op" style="color: #5E5E5E;">=</span>engine)) </span></code></pre></div>
</div>
<p>Our dataframe has 1.3m + rows, so it is prudent to break this down into batches for passing into postgreSQL :</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1">df_iter <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(<span class="st" style="color: #20794D;">'Data/yellow_tripdata_2021-01.csv'</span>, iterator<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, chunksize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100000</span>)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1">df <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">next</span>(df_iter)</span>
<span id="cb41-2"><span class="bu" style="color: null;">len</span>(df)</span></code></pre></div>
</div>
<p>We want to set up the data headers first and then insert the data in chunks later :</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1"><span class="co" style="color: #5E5E5E;"># To get our column names</span></span>
<span id="cb42-2">df.head(n<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span></code></pre></div>
</div>
<p>Upload column headers to postgres :</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1">df.head(n<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>).to_sql(name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'yellow_taxi_data'</span>, </span>
<span id="cb43-2">                    con<span class="op" style="color: #5E5E5E;">=</span>engine, </span>
<span id="cb43-3">                    if_exists<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'replace'</span>)         <span class="co" style="color: #5E5E5E;">#if a table name with yellow_taxi_data exists then replace</span></span></code></pre></div>
</div>
<p>Upload first chunk of 100000 rows to postgres :</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1"><span class="op" style="color: #5E5E5E;">%</span>time</span>
<span id="cb44-2">df.to_sql(name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'yellow_taxi_data'</span>, </span>
<span id="cb44-3">                    con<span class="op" style="color: #5E5E5E;">=</span>engine, </span>
<span id="cb44-4">                    if_exists<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'append'</span>)  </span></code></pre></div>
</div>
<div class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1"><span class="im" style="color: #00769E;">from</span> time <span class="im" style="color: #00769E;">import</span> time</span></code></pre></div>
</div>
<p>Upload the rest of the dataframe:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1"><span class="cf" style="color: #003B4F;">while</span> <span class="va" style="color: #111111;">True</span>:</span>
<span id="cb46-2">    t_start <span class="op" style="color: #5E5E5E;">=</span> time() <span class="co" style="color: #5E5E5E;"># returns current timestamp in seconds</span></span>
<span id="cb46-3">    </span>
<span id="cb46-4">    df <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">next</span>(df_iter) </span>
<span id="cb46-5">    </span>
<span id="cb46-6">    df.tpep_pickup_datetime <span class="op" style="color: #5E5E5E;">=</span> pd.to_datetime(df.tpep_pickup_datetime)</span>
<span id="cb46-7">    df.tpep_dropoff_datetime <span class="op" style="color: #5E5E5E;">=</span> pd.to_datetime(df.tpep_dropoff_datetime)</span>
<span id="cb46-8">    </span>
<span id="cb46-9">    df.to_sql(name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'yellow_taxi_data'</span>, </span>
<span id="cb46-10">                    con<span class="op" style="color: #5E5E5E;">=</span>engine, </span>
<span id="cb46-11">                    if_exists<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'append'</span>)  </span>
<span id="cb46-12">    </span>
<span id="cb46-13">    t_end <span class="op" style="color: #5E5E5E;">=</span> time()</span>
<span id="cb46-14">    </span>
<span id="cb46-15">    <span class="bu" style="color: null;">print</span> (<span class="st" style="color: #20794D;">'inserted another chunk, took </span><span class="sc" style="color: #5E5E5E;">%.3f</span><span class="st" style="color: #20794D;"> second'</span> <span class="op" style="color: #5E5E5E;">%</span> (t_end <span class="op" style="color: #5E5E5E;">-</span> t_start)) <span class="co" style="color: #5E5E5E;"># .3f means to 3 decimal places - the % in the text is a variable defined by % outside the text</span></span></code></pre></div>
</div>
<p>The above error can be ignored - it just means there are no more chunks to add our dataframe has been successfully uploaded in full to postgres.</p>
</section>
<section id="connecting-postgresql-and-pgadmin" class="level3">
<h3 class="anchored" data-anchor-id="connecting-postgresql-and-pgadmin">1.2.3 Connecting PostgreSQL and pgAdmin</h3>
<p><code>PostgreSQL</code></p>
<p>PostgreSQL, often simply “Postgres”, is an object-relational database management system (ORDBMS) with an emphasis on extensibility and standards-compliance. As a database server, its primary function is to store data, securely and supporting best practices, and retrieve it later, as requested by other software applications, be it those on the same computer or those running on another computer across a network (including the Internet). It can handle workloads ranging from small single-machine applications to large Internet-facing applications with many concurrent users. Recent versions also provide replication of the database itself for security and scalability.</p>
<p>PostgreSQL implements the majority of the SQL:2011 standard, is ACID-compliant and transactional (including most DDL statements) avoiding locking issues using multiversion concurrency control (MVCC), provides immunity to dirty reads and full serializability; handles complex SQL queries using many indexing methods that are not available in other databases; has updateable views and materialized views, triggers, foreign keys; supports functions and stored procedures, and other expandability, and has a large number of extensions written by third parties. In addition to the possibility of working with the major proprietary and open source databases, PostgreSQL supports migration from them, by its extensive standard SQL support and available migration tools. And if proprietary extensions had been used, by its extensibility that can emulate many through some built-in and third-party open source compatibility extensions, such as for Oracle.</p>
<p>We can run postgreSQL from the terminal :</p>
<pre><code>  docker run -it \
  -e POSTGRES_USER="root" \
  -e POSTGRES_PASSWORD="root" \
  -e POSTGRES_DB="ny_taxi" \
  -v $(pwd)/ny_taxi_postgres_data:/var/lib/postgresql/data \
  -p 5432:5432 \
  --network=pg-network \
  --name pg-database \
  postgres:13</code></pre>
<p>Let’s break this down and explain the configuration :</p>
<pre><code>docker run -it    # -it means interactive terminal - allows us to stop it
postgres:13       # this is our IMAGE   </code></pre>
<p>Configure our environment using <code>-e</code> :</p>
<pre><code> -e POSTGRES_USER="root" \              # user name
 -e POSTGRES_PASSWORD="root" \          # password
 -e POSTGRES_DB="ny_taxi" \             # database name</code></pre>
<p>Configure our VOLUME using <code>-v</code><br>
Note that because I am using Ununtu I need to map full path of existing directory using <code>$(pwd)</code> :</p>
<pre><code> -v $(pwd)/ny_taxi_postgres_data:/var/lib/postgresql/data \</code></pre>
<p>Map a port on our host machine to a port on our CONTAINER using <code>-p</code> :</p>
<pre><code> -p 5432:5432 \</code></pre>
<p>If you get an error:</p>
<blockquote class="blockquote">
<p>initdb: error: directory “/var/lib/postgresql/data” exists but is not empty</p>
</blockquote>
<p>Remove the <code>ny_taxi_postgres_data</code> directory and run the command again.</p>
<p>In Visual Studio Code it looks like there are no files in the directory despite a succesful connection to postgres. But the files are actually just hidden - and can be accessed using the <code>sudo</code> command in Ununtu.</p>
<p>We can then initiate an interface with <code>PostgreSQL</code> via the command line using :</p>
<pre><code>pgcli -h localhost -p 5432 -u root -d ny_taxi</code></pre>
<p>-h = host<br>
-p = port<br>
-u = user<br>
-d = database</p>
<p>and check that our data has been successfully loaded to postgreSQL</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_1/DE_Zoomcamp_Week_1_files/figure-html/c15f2283-899e-4400-af2b-acf37d1bd0c1.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">postgres_dataload.JPG</figcaption><p></p>
</figure>
</div>
<p>We can then run queries from there:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_1/DE_Zoomcamp_Week_1_files/figure-html/a74a9b2d-aa39-4711-ae54-9300bdaf8d98.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">postgres_query.JPG</figcaption><p></p>
</figure>
</div>
<p>however we would be better to make use of a GUI tool which provides an improved visualization.</p>
<p><code>pgAdmin</code></p>
<p>pgAdmin is a web-based GUI tool used to interact with the Postgres database sessions, both locally and remote servers as well. It can be used to perform any sort of database administration required for a Postgres database. Although this is a GUI and can be installed, we don’t need to - we have Docker!</p>
<p>First we create a network to ensure that pgAdmin can talk to postgreSQL.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_1/DE_Zoomcamp_Week_1_files/figure-html/3dde63cf-9f35-4f90-9044-08bdd958b5b8.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">docker_network.JPG</figcaption><p></p>
</figure>
</div>
<p><code>Where's that confounded bridge</code></p>
<p>The bridge network works as a private network internal to the host so containers on it can communicate. External access is granted by exposing ports to containers. Bridge networks are used when your applications run in standalone containers that need to communicate.</p>
<p>In the picture above db and web can communicate with each other on a user created bridge network called mybridge.</p>
<p>We can view the current networks running on our machine using:</p>
<pre><code>docker network ls</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_1/DE_Zoomcamp_Week_1_files/figure-html/8a52ce50-c0d8-48a9-92a0-6aab297d744e.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">docker_network_ls.PNG</figcaption><p></p>
</figure>
</div>
<p>Docker inspect is a great way to retrieve low-level information on Docker objects. We can pick out any field from the returned JSON in a fairly straightforward manner.</p>
<p>So let’s use it to get the IP Address from the <code>2_docker_sql_pgadmin-1</code> container using :</p>
<pre><code>       docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' &lt;network ID&gt;
       </code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_1/DE_Zoomcamp_Week_1_files/figure-html/9f9462e6-3d2c-46a7-b6ae-89209be7cac6.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">container_IP.JPG</figcaption><p></p>
</figure>
</div>
<p>We can then just pull pgAdmin by running the folllowing from the command line :</p>
<pre><code>docker run -it \
  -e PGADMIN_DEFAULT_EMAIL="admin@admin.com" \
  -e PGADMIN_DEFAULT_PASSWORD="root" \
  -p 8080:80 \
  dpage/pgadmin4</code></pre>
<p>We then go to our browser and type:</p>
<pre><code>localhost8080</code></pre>
<p>which takes us to the pgAdmin loginpage</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_1/DE_Zoomcamp_Week_1_files/figure-html/3698bf62-33be-4e9f-8d67-930cbc782298.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">pgadmin.JPG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_1/DE_Zoomcamp_Week_1_files/figure-html/c02d6569-c347-4bdc-bea1-ca11f42251e7.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">pgadmin_2.JPG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_1/DE_Zoomcamp_Week_1_files/figure-html/94d4589c-5404-452b-9397-0988164c1951.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">pgadmin_connection_2.JPG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_1/DE_Zoomcamp_Week_1_files/figure-html/f3f00b8a-be38-411c-af40-7afe5132d050.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">pg_admin_connected.JPG</figcaption><p></p>
</figure>
</div>
<p>As we can see that has successfully loaded the data to postgres : <img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_1/DE_Zoomcamp_Week_1_files/figure-html/2ee6137e-926b-42e8-abd4-b39d6fa99de8.JPG" class="img-fluid" alt="pg_admin_data_ingest.JPG"></p>
</section>
<section id="docker-compose" class="level3">
<h3 class="anchored" data-anchor-id="docker-compose">Docker-compose</h3>
</section>
<section id="docker-container-ip-address" class="level3">
<h3 class="anchored" data-anchor-id="docker-container-ip-address">Docker Container IP Address</h3>
<p>By default, the container is assigned an IP address for every Docker network it connects to. And each network is created with a default subnet mask, using it as a pool later on to give away the IP addresses. Usually Docker uses the default 172.17. 0.0/16 subnet for container networking.</p>
<p>Now to better understand it, we will execute a real use case.</p>
<p>To illustrate this, we will use a postgreSQL and pgADmin environment, containing 2 Docker Containers, configured in the <code>yaml</code> file below:</p>
<pre><code>services:
  pgdatabase:
    image: postgres:13
    environment:
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=root
      - POSTGRES_DB=ny_taxi
    volumes:
      - "./data/ny_taxi_postgres_data:/var/lib/postgresql/data:rw"
    ports:
      - "5432:5432"
  pgadmin:
    image: dpage/pgadmin4
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@admin.com
      - PGADMIN_DEFAULT_PASSWORD=root
    ports:
      - "8080:80"</code></pre>
<p>Now let’s start up those containers using:</p>
<pre><code>docker-compose up -d</code></pre>
<p>and see the two containers by running the command:</p>
<pre><code>docker ps --format "table {{.ID}}\t{{.Status}}\t{{.Names}}"</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_1/DE_Zoomcamp_Week_1_files/figure-html/7c106558-044e-45ec-a6e8-72324ab5352d.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">containers.JPG</figcaption><p></p>
</figure>
</div>
<p>Next let’s check our Docker network using:</p>
<pre><code>docker network ls</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_1/DE_Zoomcamp_Week_1_files/figure-html/aee00ff6-99d2-43c2-9d0b-82dcbd559e94.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">new_network.JPG</figcaption><p></p>
</figure>
</div>
<p>There’s a new network called <code>2_docker_sql_default</code>. By default docker compose sets up a single network for your app. And your app’s network is given a name based on the “project name”, originated from the name of the directory it lives in. So since our directory is named <code>2_docker_sql</code>, this explains the new network.</p>
<p>Next some examples on how to get the Docker IP Address.</p>
<p><code>How to Get A Docker Container IP Address</code></p>
<pre><code>docker network inspect -f '{{range .IPAM.Config}}{{.Subnet}}{{end}}' b7be6c0c20e1</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_1/DE_Zoomcamp_Week_1_files/figure-html/e443c142-9d43-49a1-9b50-0d0c503fb492.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">network_inspect.JPG</figcaption><p></p>
</figure>
</div>
<p>We don’t need to look up each Container’s IP individually:</p>
<pre><code>docker network inspect -f '{{json .Containers}}' b7be6c0c20e1 | jq '.[] | .Name + ":" + .IPv4Address'</code></pre>
<p>Note that we used <code>jq</code> help to parse the Containers map object which you may need to install.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_1/DE_Zoomcamp_Week_1_files/figure-html/d1fc1240-f5b2-4406-a339-0d8412bfc646.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">networked_containers_IP.JPG</figcaption><p></p>
</figure>
</div>
<p>So we can see the IP addresses of our containers :</p>
<ul>
<li>pgdatabase-1 <code>172.20.0.3</code> clear</li>
<li>pgadmin-1 <code>172.20.0.2</code></li>
</ul>
<p>This could prove useful when mapping our database container to pgadmin.</p>
</section>
<section id="dockerizing-our-data-ingestion-file" class="level3">
<h3 class="anchored" data-anchor-id="dockerizing-our-data-ingestion-file">1.2.4 Dockerizing our data ingestion file</h3>
<p>We can introduce further automation by creating a python data ingest script which:</p>
<ul>
<li>downloads the data</li>
<li>does some basic pre-processing</li>
<li>uploads the data in batches to postgresql</li>
</ul>
<p><code>ingest_data.py</code></p>
<pre><code>#!/usr/bin/env python
# coding: utf-8

import os
import argparse

from time import time

import pandas as pd
from sqlalchemy import create_engine


def main(params):
    user = params.user
    password = params.password
    host = params.host 
    port = params.port 
    db = params.db
    table_name = params.table_name
    url = params.url

    # the backup files are gzipped, and it's important to keep the correct extension
    # for pandas to be able to open the file
    if url.endswith('.csv.gz'):
        csv_name = 'output.csv.gz'
    else:
        csv_name = 'output.csv'

os.system(f"wget {url} -O {csv_name}")

engine = create_engine(f'postgresql://{user}:{password}@{host}:{port}/{db}')

df_iter = pd.read_csv(csv_name, iterator=True, chunksize=100000)

df = next(df_iter)

df.tpep_pickup_datetime = pd.to_datetime(df.tpep_pickup_datetime)
df.tpep_dropoff_datetime = pd.to_datetime(df.tpep_dropoff_datetime)

df.head(n=0).to_sql(name=table_name, con=engine, if_exists='replace')

df.to_sql(name=table_name, con=engine, if_exists='append')


while True: 

    try:
        t_start = time()
        
        df = next(df_iter)

        df.tpep_pickup_datetime = pd.to_datetime(df.tpep_pickup_datetime)
        df.tpep_dropoff_datetime = pd.to_datetime(df.tpep_dropoff_datetime)

        df.to_sql(name=table_name, con=engine, if_exists='append')

        t_end = time()

        print('inserted another chunk, took %.3f second' % (t_end - t_start))

    except StopIteration:
        print("Finished ingesting data into the postgres database")
        break

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Ingest CSV data to Postgres')

    parser.add_argument('--user', required=True, help='user name for postgres')
    parser.add_argument('--password', required=True, help='password for postgres')
    parser.add_argument('--host', required=True, help='host for postgres')
    parser.add_argument('--port', required=True, help='port for postgres')
    parser.add_argument('--db', required=True, help='database name for postgres')
    parser.add_argument('--table_name', required=True, help='name of the table where we will write the results to')
    parser.add_argument('--url', required=True, help='url of the csv file')

    args = parser.parse_args()

    main(args)</code></pre>
<p>This command line prompt runs the python data ingest file :</p>
<p>Create our network :</p>
<pre><code>docker network create pg-network     </code></pre>
<p>Run Postgres (change the path) :</p>
<pre><code>  docker run -it \
  -e POSTGRES_USER="root" \
  -e POSTGRES_PASSWORD="root" \
  -e POSTGRES_DB="ny_taxi" \
  -v $(pwd)/ny_taxi_postgres_data:/var/lib/postgresql/data \
  -p 5432:5432 \
  --network=pg-network \
  --name pg-database \
  postgres:13</code></pre>
<p>Run pgAdmin :</p>
<pre><code>docker run -it \
  -e PGADMIN_DEFAULT_EMAIL="admin@admin.com" \
  -e PGADMIN_DEFAULT_PASSWORD="root" \
  -p 8080:80 \
  dpage/pgadmin4

URL="https://github.com/DataTalksClub/nyc-tlc-data/releases/download/yellow/yellow_tripdata_2021-01.csv.gz"

python ingest_data.py \
  --user=root \
  --password=root \
  --host=localhost \
  --port=5432 \
  --db=ny_taxi \
  --table_name=yellow_taxi_trips \
  --url=${URL}</code></pre>
<p><code>Using docker</code></p>
<p>Create the following Dockerfile :</p>
<pre><code>FROM python:3.9.1

RUN apt-get install wget    
RUN pip install pandas sqlalchemy psycopg2  

WORKDIR /app
COPY ingest_data.py ingest_data.py

ENTRYPOINT [ "python", "ingest_data.py" ]</code></pre>
<p>Then run the following command line prompts :</p>
<pre><code>docker build -t taxi_ingest:v001 .</code></pre>
<p>Running this throws up the following error:</p>
<pre><code>Docker - failed to solve with frontend dockerfile.v0: failed to read dockerfile: error from sender: open ny_taxi_postgres_data: permission denied.</code></pre>
<p>This happens on Ubuntu/Linux systems when trying to run the command to build the Docker container again. A folder is created to host the Docker files. When the build command is executed again to rebuild the pipeline or create a new one the error is raised as there are no permissions on this new folder. Grant permissions by running this command :</p>
<pre><code>sudo chmod -R 755 ny_taxi_postgres_data</code></pre>
<p>Now we can run the <code>ingest_data.py</code> script from the command line :</p>
<pre><code>URL="https://github.com/DataTalksClub/nyc-tlc-data/releases/download/yellow/yellow_tripdata_2021-01.csv.gz"

docker run -it \
  --network=pg-network \
  taxi_ingest:v001 \
    --user=root \
    --password=root \
    --host=pg-database \
    --port=5432 \
    --db=ny_taxi \
    --table_name=yellow_taxi_trips \

    --url=${URL}</code></pre>
<p>To get all the files on a <code>localhost</code> directory we can run the following command:</p>
<pre><code>python -m http.server</code></pre>
<p>To get the IP address of your computer you can run :</p>
<pre><code>ifconfig</code></pre>
</section>
<section id="docker-compose-1" class="level3">
<h3 class="anchored" data-anchor-id="docker-compose-1">1.2.5 Docker Compose</h3>
<p>In the previous section we:</p>
<ul>
<li>ran postgres</li>
<li>ran pgAdmin</li>
</ul>
<p>in one network using two docker commands.</p>
<p>This works fine but there is a lot of configuration required. We can streamline the process by pooling everything together in one <code>yaml</code> file where we can configure multiple CONTAINERS. We can then run from the command line using <a href="https://docs.docker.com/compose/">docker-compose</a> :</p>
<p>Let’s try <code>docker-compose</code> from the command line :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_1/DE_Zoomcamp_Week_1_files/figure-html/81983855-aa08-40da-b26c-e2f19a94ce0a.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">docker_compose.JPG</figcaption><p></p>
</figure>
</div>
<p>Docker Compose comes as part of Windows Docker Desktop, but if like me, you are running things in Linux from the Ubuntu command line, then you need to activate the WSL integration:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_1/DE_Zoomcamp_Week_1_files/figure-html/a9cb290a-594d-47c3-b3b4-c17721acd275.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">docker_compose_ubuntu.JPG</figcaption><p></p>
</figure>
</div>
<p>Running <code>docker-compose</code> now works:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_1/DE_Zoomcamp_Week_1_files/figure-html/9b6cf6ea-9441-4954-ac53-35f11e749e2e.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">docker_compose_wsl_integration.JPG</figcaption><p></p>
</figure>
</div>
<p>We can now create our <code>yaml</code> file named <code>docker-compose.yaml</code> :</p>
<pre><code>services:
  pgdatabase:
    image: postgres:13
    environment:
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=root
      - POSTGRES_DB=ny_taxi
    volumes:
      - "./ny_taxi_postgres_data:/var/lib/postgres/data:rw"
    ports:
      - "5432:5432"
  pgadmin:
    image: dpage/pgadmin4
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@admin.com
      - PGADMIN_DEFAULT_PASSWORD=root
    ports:
      - "8080:80"</code></pre>
<p>Ensure all existing containers, volumes and images are cleared and run using :</p>
<pre><code>docker-compose up</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_1/DE_Zoomcamp_Week_1_files/figure-html/f8839838-8838-4a0c-8327-d9bda26ec2a2.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">docker_compose_up.JPG</figcaption><p></p>
</figure>
</div>
<p>Then we go to localhost 8080 and use the pgAdmin login details configured in the yaml file. Unfortunately the yaml file is not configured to ensure persistent state for pgAdmin, so we have to register a server again.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_1/DE_Zoomcamp_Week_1_files/figure-html/4db885ca-f843-40ca-9e3d-ccc77421df23.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">docker_localhost.JPG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_1/DE_Zoomcamp_Week_1_files/figure-html/2880bbff-8777-400e-bf9a-4d4dfda240b9.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">pgdatabase.JPG</figcaption><p></p>
</figure>
</div>
<p>We can close the terminal using <code>CTRL + C</code> but then we should also run <code>docker-compose down</code>.</p>
<p>A better way is to run with <code>docker-compose up -d</code> runs in <em>detached mode</em> which then allows us to bypass <code>CTRL + C</code> and go straight to <code>docker-compose down</code>.</p>
</section>
<section id="sql-refresher" class="level3">
<h3 class="anchored" data-anchor-id="sql-refresher">1.2.6 - SQL Refresher</h3>
<div class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb76" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb76-1">df_zones <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(<span class="st" style="color: #20794D;">'Data/taxi_zone_lookup.csv'</span>)</span></code></pre></div>
</div>
<p>Take a look at the first 5 rows :</p>
<div class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb77" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb77-1">df_zones.head(<span class="dv" style="color: #AD0000;">140</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>LocationID</th>
      <th>Borough</th>
      <th>Zone</th>
      <th>service_zone</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>EWR</td>
      <td>Newark Airport</td>
      <td>EWR</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2</td>
      <td>Queens</td>
      <td>Jamaica Bay</td>
      <td>Boro Zone</td>
    </tr>
    <tr>
      <th>2</th>
      <td>3</td>
      <td>Bronx</td>
      <td>Allerton/Pelham Gardens</td>
      <td>Boro Zone</td>
    </tr>
    <tr>
      <th>3</th>
      <td>4</td>
      <td>Manhattan</td>
      <td>Alphabet City</td>
      <td>Yellow Zone</td>
    </tr>
    <tr>
      <th>4</th>
      <td>5</td>
      <td>Staten Island</td>
      <td>Arden Heights</td>
      <td>Boro Zone</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>135</th>
      <td>136</td>
      <td>Bronx</td>
      <td>Kingsbridge Heights</td>
      <td>Boro Zone</td>
    </tr>
    <tr>
      <th>136</th>
      <td>137</td>
      <td>Manhattan</td>
      <td>Kips Bay</td>
      <td>Yellow Zone</td>
    </tr>
    <tr>
      <th>137</th>
      <td>138</td>
      <td>Queens</td>
      <td>LaGuardia Airport</td>
      <td>Airports</td>
    </tr>
    <tr>
      <th>138</th>
      <td>139</td>
      <td>Queens</td>
      <td>Laurelton</td>
      <td>Boro Zone</td>
    </tr>
    <tr>
      <th>139</th>
      <td>140</td>
      <td>Manhattan</td>
      <td>Lenox Hill East</td>
      <td>Yellow Zone</td>
    </tr>
  </tbody>
</table>
<p>140 rows × 4 columns</p>
</div>
</div>
</div>
<p>Upload to postgres :</p>
<div class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb78" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb78-1"><span class="im" style="color: #00769E;">from</span> sqlalchemy <span class="im" style="color: #00769E;">import</span> create_engine</span></code></pre></div>
</div>
<div class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb79" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb79-1">engine <span class="op" style="color: #5E5E5E;">=</span> create_engine(<span class="st" style="color: #20794D;">'postgresql://root:root@localhost:5432/ny_taxi'</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb80" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb80-1">df_zones.to_sql(name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'zones'</span>, con<span class="op" style="color: #5E5E5E;">=</span>engine, if_exists<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'replace'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="23">
<pre><code>265</code></pre>
</div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_1/DE_Zoomcamp_Week_1_files/figure-html/cf29acd3-607b-4d0a-9250-5770e97ede66.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">taxi_zones.JPG</figcaption><p></p>
</figure>
</div>
<p>Let’s now carry out some SQL queries on our tables:</p>
<ul>
<li>yellow_taxi_trips</li>
<li>zones</li>
</ul>
<section id="joining-tables-in-sql" class="level4">
<h4 class="anchored" data-anchor-id="joining-tables-in-sql">Joining tables in SQL</h4>
<p>It will be useful to join these tables. There are different ways to do this. First let’s look at query which returns specified columns which combine certain information common to both tables - in this case <code>LocationID</code> :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_1/DE_Zoomcamp_Week_1_files/figure-html/22f7276f-0912-4b45-8b2b-24caebcf3b33.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">SQL_join_1.JPG</figcaption><p></p>
</figure>
</div>
<p>Another way to construct the query is to explicitly use the <code>JOIN</code> command:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_1/DE_Zoomcamp_Week_1_files/figure-html/ca20d1e5-dc17-4a82-841e-82a1bf39aa3d.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">SQL_join_2.JPG</figcaption><p></p>
</figure>
</div>
<p>Both queries are equivalent.</p>
<p>Say, we wanted to check for pick up or drop off locations which are in one table but not the other:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_1/DE_Zoomcamp_Week_1_files/figure-html/a29ec724-7b8c-4c01-8e82-154712b405d4.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">pick_up.JPG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_1/DE_Zoomcamp_Week_1_files/figure-html/4f9029b2-c76f-4756-b78b-64c44ffc73ec.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">drop_off.JPG</figcaption><p></p>
</figure>
</div>
<p>Both queries return no records so that means that all the records have pick up and drop off locations and all the IDs in the zones table are present in the taxis table. In some cases there might not be fully matching records. In this case we can use other join methods :</p>
<p>For illustration purposes let’s remove a <code>LocationID</code> record from our <code>zones</code> table:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_1/DE_Zoomcamp_Week_1_files/figure-html/2a9be0d1-0575-4085-93ea-e06f94de8181.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">delete.JPG</figcaption><p></p>
</figure>
</div>
<p>And now when we query records that don’t match :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_1/DE_Zoomcamp_Week_1_files/figure-html/704fb677-99e5-4439-ab94-0a99813f1ab7.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">pulocation_unmatched.JPG</figcaption><p></p>
</figure>
</div>
<p>We can use <code>LEFT JOIN</code> which will still return a record even where <code>LocationID</code> is not available :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_1/DE_Zoomcamp_Week_1_files/figure-html/6c687151-f6e9-4448-90f5-aa0f15ee8a78.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">left_join.JPG</figcaption><p></p>
</figure>
</div>
<p>There are also <code>RIGHT JOIN</code> and <code>OUTER JOIN</code> statements but these will be covered further in <em>Week 4</em> .</p>
</section>
<section id="working-with-dates" class="level4">
<h4 class="anchored" data-anchor-id="working-with-dates">Working with dates</h4>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_1/DE_Zoomcamp_Week_1_files/figure-html/4e0c2be2-5dbe-4fdf-a901-a807f131c607.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">day.JPG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_1/DE_Zoomcamp_Week_1_files/figure-html/7e892f2d-583f-4e91-80b0-dda1ec74d7cf.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">date.JPG</figcaption><p></p>
</figure>
</div>
</section>
<section id="aggregating-in-sql" class="level4">
<h4 class="anchored" data-anchor-id="aggregating-in-sql">Aggregating in SQL</h4>
<p>Say we wanted to find how many records there were for each day. We can build on our date parsing above and use a <code>GROUP BY</code> and <code>ORDER BY</code> query :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_1/DE_Zoomcamp_Week_1_files/figure-html/2cf1bce5-0b8b-4a04-9dac-5c17ba50d9f6.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">group_order.JPG</figcaption><p></p>
</figure>
</div>
<p>If we wanted to see the day with the largest number of records we coud order by count:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_1/DE_Zoomcamp_Week_1_files/figure-html/46bb5285-0315-4e57-842c-fcb4a240c4b1.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">order_count.JPG</figcaption><p></p>
</figure>
</div>
<p>We can use a variety of aggregation methods. Note that we can use numbers to reference the ordering of <code>GROUP BY</code> :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_1/DE_Zoomcamp_Week_1_files/figure-html/d4addb62-1316-4dca-920d-9afc9b9091f6.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">group_by_number_ref.JPG</figcaption><p></p>
</figure>
</div>
<p>We can also include multiple conditions in our <code>ORDER BY</code> clause :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_1/DE_Zoomcamp_Week_1_files/figure-html/08cfb2a3-f855-475b-b1c2-40ed505a59b3.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">order_by_multiple.JPG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_1/DE_Zoomcamp_Week_1_files/figure-html/92f28eee-37a5-4a8d-824e-0da7e6899a28.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">GCP_navigate.JPG</figcaption><p></p>
</figure>
</div>
</section>
</section>
<section id="introduction-to-terraform-concepts-gcp-pre-requisites" class="level3">
<h3 class="anchored" data-anchor-id="introduction-to-terraform-concepts-gcp-pre-requisites">1.3.1 Introduction to Terraform Concepts &amp; GCP Pre-Requisites</h3>
<p><a href="https://www.terraform.io/">Terraform</a> is an open-source infrastructure-as-code software tool created by HashiCorp. Users define and provide data center infrastructure using a declarative configuration language known as HashiCorp Configuration Language, or optionally JSON.</p>
<p>Build, change, and destroy Google Cloud Platform (GCP) infrastructure using Terraform. Step-by-step, command-line tutorials will walk you through the Terraform basics for the first time.</p>
<p>https://learn.hashicorp.com/collections/terraform/gcp-get-started</p>
<p><a href="https://developer.hashicorp.com/terraform/downloads">Terraform</a> can be installed using the following command line prompts in Ubuntu:</p>
<pre><code>wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg \
echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee\ /etc/apt/sources.list.d/hashicorp.list
sudo apt update &amp;&amp; sudo apt install terraform</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_1/DE_Zoomcamp_Week_1_files/figure-html/bf3a068b-5fd2-4a9e-9813-e5e26364d40e.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">gcp_service_accounts.JPG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_1/DE_Zoomcamp_Week_1_files/figure-html/f02202e0-2d8d-4b97-94ac-56b7406fe11c.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">gcp_manage_keys.JPG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_1/DE_Zoomcamp_Week_1_files/figure-html/0399e4d0-b8e8-45bf-adac-7dd07d8e8563.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">gcp_add_key.JPG</figcaption><p></p>
</figure>
</div>
<p>This will download a key in <code>json</code> format</p>
</section>
<section id="cloud-sdk" class="level3">
<h3 class="anchored" data-anchor-id="cloud-sdk">Cloud SDK</h3>
<p><a href="https://cloud.google.com/sdk">Cloud SDK</a> provides language-specific Cloud Client Libraries supporting each language’s natural conventions and styles. This makes it easier for you to interact with Google Cloud APIs in your language of choice. Client libraries also handle authentication, reduce the amount of necessary boilerplate code, and provide helper functions for pagination of large datasets and asynchronous handling of long-running operations.</p>
<p>To check if we have it installed we can run the following prompt at the command line :</p>
<pre><code>gcloud -v</code></pre>
<p>I did not have it so need to install:</p>
<p>https://cloud.google.com/sdk/docs/install-sdk#deb</p>
</section>
<section id="installation-of-gcloud-cli" class="level3">
<h3 class="anchored" data-anchor-id="installation-of-gcloud-cli">Installation of gcloud CLI</h3>
<ol type="1">
<li><p>Add the gcloud CLI distribution URI as a package source. If your distribution supports the signed-by option, run the following command:</p>
<p>echo “deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main” | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list</p></li>
<li><p>Import the Google Cloud public key. If your distribution’s apt-key command supports the –keyring argument, run the following command:</p>
<p>curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key –keyring /usr/share/keyrings/cloud.google.gpg add -</p></li>
<li><p>Update and install the gcloud CLI:</p>
<p>sudo apt-get update &amp;&amp; sudo apt-get install google-cloud-cli</p></li>
<li><p>(Optional) Install any of the <a href="https://cloud.google.com/sdk/docs/components#additional_components">additional components</a>.</p></li>
<li><p>Run gcloud init to get started:</p>
<p>gcloud init</p></li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_1/DE_Zoomcamp_Week_1_files/figure-html/a4cf6088-dcaa-46f0-a008-4c560808ae08.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">gcloud_init.JPG</figcaption><p></p>
</figure>
</div>
<ol start="6" type="1">
<li><p>Say yes to the above, and then in your browser, log in to your Google user account when prompted and click Allow to grant permission to access Google Cloud resources. Copy the verification code to the awaiting command line prompt</p></li>
<li><p>At the command prompt, select a Google Cloud project from the list of projects where you have Owner, Editor or Viewer permissions:</p></li>
<li><p>If you have the Compute Engine API enabled, gcloud init allows you to choose a default Compute Engine zone:</p></li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_1/DE_Zoomcamp_Week_1_files/figure-html/8b2d4359-f2b3-4610-af82-4350a4207064.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">compute_engine_api.JPG</figcaption><p></p>
</figure>
</div>
<ol start="9" type="1">
<li><p>(Optional) To improve the screen reader experience, enable the accessibility/screen_reader property:</p>
<p>gcloud config set accessibility/screen_reader true</p></li>
</ol>
<p>Now we need to export our key credentials from the json file at the command line:</p>
<pre><code>export GOOGLE_APPLICATION_CREDENTIALS=$(pwd)/&lt;json_file_name&gt;.json</code></pre>
<p>Finally, refresh token/session, and verify authentication:</p>
<pre><code>gcloud auth application-default login</code></pre>
<p>Then need to login from the browser to Google account once again and <code>Allow</code> and then copy verification code to terminal:</p>
<p>We are now going to set up the following infrastructures within Google Cloud Platform (GCP):</p>
<pre><code>- Google Cloud Storage (GCS): (a bucket in GCP environment where you can store files) Data Lake - raw data in organised fashion 
- Big Query: Data Warehouse</code></pre>
<p>We need to grant two additional service permissions:</p>
<ul>
<li>Storage Admin (the bucket itself) and Storage Object Admin (the objects within the bucket)</li>
<li>BigQuery Admin</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_1/DE_Zoomcamp_Week_1_files/figure-html/259ea342-2eb8-4348-a7f5-6cfede25831b.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">gcp_additional_permissions.JPG</figcaption><p></p>
</figure>
</div>
<blockquote class="blockquote">
<p>In production there would be custom created access parameters, restricting access by certain people to certain files.</p>
</blockquote>
<p>We still require to enable the APIs:</p>
<p>https://console.cloud.google.com/apis/library/iam.googleapis.com</p>
<p>https://console.cloud.google.com/apis/library/iamcredentials.googleapis.com</p>
</section>
<section id="creating-gcp-infrastructure-with-terraform" class="level3">
<h3 class="anchored" data-anchor-id="creating-gcp-infrastructure-with-terraform">1.3.2 Creating GCP Infrastructure with Terraform</h3>
<p>Now that we have everything set up within GCP let’s get started with the Terraform config. We need two files :</p>
<ul>
<li><code>main.tf</code> (which references the <code>variables.tf</code> file)</li>
<li><code>variables.tf</code></li>
</ul>
<p><code>main.tf</code></p>
<pre><code>terraform {
  required_version = "&gt;= 1.0"
  backend "local" {}  # Can change from "local" to "gcs" (for google) or "s3" (for aws), if you would like to preserve your tf-state online
  required_providers {
    google = {
      source  = "hashicorp/google"
    }
  }
}

provider "google" {
  project = var.project
  region = var.region
  // credentials = file(var.credentials)  # Use this if you do not want to set env-var GOOGLE_APPLICATION_CREDENTIALS
}

# Data Lake Bucket
# Ref: https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/storage_bucket
resource "google_storage_bucket" "data-lake-bucket" {
  name          = "${local.data_lake_bucket}_${var.project}" # Concatenating DL bucket &amp; Project name for unique naming
  location      = var.region

  # Optional, but recommended settings:
  storage_class = var.storage_class
  uniform_bucket_level_access = true

  versioning {
    enabled     = true
  }

      lifecycle_rule {
    action {
      type = "Delete"
    }
    condition {
      age = 30  // days
    }
  }

  force_destroy = true
}

# DWH
# Ref: https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/bigquery_dataset
resource "google_bigquery_dataset" "dataset" {
  dataset_id = var.BQ_DATASET
  project    = var.project
  location   = var.region</code></pre>
<p><code>variables.tf</code></p>
<pre><code>locals {
  data_lake_bucket = "dtc_data_lake"
}

variable "project" {
  description = "data-engineering-377711"
}

variable "region" {
  description = "Region for GCP resources. Choose as per your location: https://cloud.google.com/about/locations"
  default = "europe-west6"
  type = string
}

variable "storage_class" {
  description = "Storage class type for your bucket. Check official docs for more info."
  default = "STANDARD"
}

variable "BQ_DATASET" {
  description = "BigQuery Dataset that raw data (from GCS) will be written to"
  type = string
  default = "trips_data_all"</code></pre>
<p>Once we have configured the above Terraform files, there are only a few execution commands which makes it very convenient to work with.</p>
<p><code>terraform init</code>: - Initializes &amp; configures the backend, installs plugins/providers, &amp; checks out an existing configuration from a version control</p>
<p><code>terraform plan</code>: - Matches/previews local changes against a remote state, and proposes an Execution Plan.</p>
<p><code>terraform apply</code>: - Asks for approval to the proposed plan, and applies changes to cloud</p>
<p><code>!!!terraform destroy!!!</code>: - Removes your stack from the Cloud</p>
<p>Let’s initialize state file (.tfstate) from the command line using</p>
<pre><code>terraform init</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_1/DE_Zoomcamp_Week_1_files/figure-html/8bdadddb-1b0c-478b-a208-3cca846821d1.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">terraform_init.JPG</figcaption><p></p>
</figure>
</div>
<p>Next, propose an execution plan using</p>
<pre><code>terraform plan</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_1/DE_Zoomcamp_Week_1_files/figure-html/75619ae1-56b6-43ea-8e0e-afca74eccfbe.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">terraform_plan.JPG</figcaption><p></p>
</figure>
</div>
<p>We need to enter our GCP Project ID at the command prompt to progress.</p>
<p>Now let’s ask for approval to the proposed plan, and apply the changes to cloud using</p>
<pre><code>terraform apply</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_1/DE_Zoomcamp_Week_1_files/figure-html/8c4cef93-f00e-4d87-8e9e-f2973035a20b.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">terraform apply.JPG</figcaption><p></p>
</figure>
</div>
<p>Once again, we need to enter our GCP Project ID at the command prompt to progress:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_1/DE_Zoomcamp_Week_1_files/figure-html/42c9c978-9780-4a14-a2c9-d6f62c201858.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">terraform apply_2.JPG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_1/DE_Zoomcamp_Week_1_files/figure-html/f2cf590d-b5d3-40c2-8379-0962dc57370c.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">terraform_apply_complete.JPG</figcaption><p></p>
</figure>
</div>
<p>We’re all set! Let’s return to our GCP account and confirm that we do now have a <code>data lake</code> bucket :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_1/DE_Zoomcamp_Week_1_files/figure-html/f5618fa1-446d-4852-bdb5-177acdbb8a8a.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">gcp_bucket.JPG</figcaption><p></p>
</figure>
</div>
<p>And also check that we have our Big Query :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/DE_Zoomcamp_Week_1/DE_Zoomcamp_Week_1_files/figure-html/0a57b3a5-a412-4c75-9c3c-1c9b0fe6449d.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">big_query.PNG</figcaption><p></p>
</figure>
</div>
</section>
<section id="key-takeaways" class="level3">
<h3 class="anchored" data-anchor-id="key-takeaways">Key Takeaways</h3>
<p>The intro video to the course did stress that the set up would take more than a week! I started the set up on my own machine using Ubuntu on Windows 10 but ran into some dependency issues. I then went through the process for setting up a Virtual Machine on Google Cloud, but wasn’t completely comfortable working within that environment so in the end I went full circle and managed to resolve the previous issues I was having. Onwards and upwards! Looking forward to “Week 2” <code>Workflow Orchestration</code>.</p>


</section>
</section>

 ]]></description>
  <category>Docker</category>
  <category>GCP</category>
  <category>Terraform</category>
  <category>PostgreSQL</category>
  <category>DataTalksClub</category>
  <guid>https://stephen137.github.io/posts/DE_Zoomcamp_Week_1/DE_Zoomcamp_Week_1.html</guid>
  <pubDate>Thu, 09 Mar 2023 23:00:00 GMT</pubDate>
  <media:content url="https://stephen137.github.io/posts/DE_Zoomcamp_Week_1/Architecture.png" medium="image" type="image/png" height="157" width="144"/>
</item>
<item>
  <title>Tableau</title>
  <dc:creator>Stephen Barrie</dc:creator>
  <link>https://stephen137.github.io/posts/Tableau/Tableau.html</link>
  <description><![CDATA[ 




<p>Tableau is a widely used business intelligence (BI) and analytics software trusted by companies like Amazon, Experian, and Unilever to explore, visualize, and securely share data in the form of Workbooks and Dashboards. With its user-friendly drag-and-drop functionality it can be used by everyone to quickly clean, analyze, and visualize your team’s data. We’ll learn how to navigate Tableau’s interface and connect and present data using easy-to-understand visualizations. By the end of this training, we’ll have the skills we need to confidently explore Tableau and build impactful data dashboards. Let’s dive in.</p>
<section id="getting-started-with-tableau" class="level2">
<h2 class="anchored" data-anchor-id="getting-started-with-tableau">1. Getting started with Tableau</h2>
<p>We will get an understanding of Tableau’s fundamental concepts and features: how to connect to data sources, use Tableau’s drag-and-drop interface, and create compelling visualizations. We will explore an Airbnb dataset for the city of Amsterdam.</p>
<section id="introduction" class="level3">
<h3 class="anchored" data-anchor-id="introduction">1.1 Introduction</h3>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/eef3fe24-4f6a-4554-8dce-a52ad724ffb1.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">tableau.JPG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/c43ebea0-d665-4858-bb80-c349ed536b0f.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">tableau_versions.JPG</figcaption><p></p>
</figure>
</div>
</section>
<section id="connecting-to-data" class="level3">
<h3 class="anchored" data-anchor-id="connecting-to-data">1.2 Connecting to data</h3>
<section id="loading-workbooks" class="level4">
<h4 class="anchored" data-anchor-id="loading-workbooks">1.2.1 Loading workbooks</h4>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/5a88a1b9-8266-404b-8fdb-bd0687e158b5.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">game_revenue.JPG</figcaption><p></p>
</figure>
</div>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
In which year did mobile games overtake console games in terms of revenue?
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>2015</p>
</div>
</div>
</div>
</section>
<section id="loading-data" class="level4">
<h4 class="anchored" data-anchor-id="loading-data">1.2.2 Loading data</h4>
<p>In this exercise we will start by loading the <code>new_york.csv</code> dataset which we will use throughout this section.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/9da30139-b6b0-4da8-a09e-9b03a82a456c.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">new_york.JPG</figcaption><p></p>
</figure>
</div>
<p>The dashboard gives us an overview of our data - we can see there are 12 <code>fields</code> or columns and we have different data types indicated at the top of each column:</p>
<p><code>#</code> numerical<br>
<code>Abc</code> text<br>
<code>globe</code> geographical</p>
<p>Note that <code>continuous</code> data is green and <code>categorical</code> data is blue.</p>
<p>The displayed column names can be changed although their remote field name will remain unchanged.</p>
<p>We can see that there are 17,614 <code>rows</code> or <code>observations</code>.</p>
</section>
</section>
<section id="navigating-tableau" class="level3">
<h3 class="anchored" data-anchor-id="navigating-tableau">1.3 Navigating Tableau</h3>
<section id="dimensions-and-measures" class="level4">
<h4 class="anchored" data-anchor-id="dimensions-and-measures">1.3.1 Dimensions and measures</h4>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/601c68e1-eb1e-45dc-ad3d-8c56f8a16e27.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">dimensions_measures.JPG</figcaption><p></p>
</figure>
</div>
<p>Now that we have connected our data sources let’s now look at the Worksheets interface, where we will create our visualizations:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/8adcdb45-c517-4416-8d54-ce42db633abc.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">new_york_worksheet.JPG</figcaption><p></p>
</figure>
</div>
<p><code>Dimensions</code> positioned at the top of the data pane contain qualitative values such as names or dates - in our example <code>Id</code> <code>Neighborhood</code> <code>Room Type</code>.</p>
<p><code>Measures</code> positioned below our dimensions contain numerical, quantitative values that can be measured and aggregated - in our example <code>Days Occupied in 2019</code> <code>Minimum Nights</code> <code>Price</code> and so on.</p>
<p>Note that we have <code>Reviews Per Month</code> included here. This data is not qualitative, and should be converted to quantitative as shown below:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/b514540a-c42f-4825-9c44-bfe19aa1cd56.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">convert_to_measure.JPG</figcaption><p></p>
</figure>
</div>
</section>
</section>
<section id="a-tour-of-the-interface" class="level3">
<h3 class="anchored" data-anchor-id="a-tour-of-the-interface">1.4 A tour of the interface</h3>
<section id="new-york-neighbourhood-prices" class="level4">
<h4 class="anchored" data-anchor-id="new-york-neighbourhood-prices">1.4.1 New York neighbourhood prices</h4>
<p>Let’s visualize our data. Start by dragging the <code>Neighborhood</code> field to the <code>Rows</code> shelf :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/7c406748-0633-4e32-88f0-72a04189501f.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">new_york_neighb_prices_1.JPG</figcaption><p></p>
</figure>
</div>
<p>Drag the <code>Price</code> field to the <code>Text Marks</code> card :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/f2fcf29c-6e14-4523-95c0-a8f62d1227d5.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">new_york_neighb_prices_2.JPG</figcaption><p></p>
</figure>
</div>
<p>Getting the ‘SUM’ of prices does not make much sense.</p>
<p>However on <code>SUM(Price)</code> at the bottom of the <code>Marks</code> field, click on the down arrow that appears and instead of <code>SUM</code> select <code>Average</code> as the measure :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/b5dd386b-7578-4824-aff1-96461ca8857b.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">new_york_neighb_prices_3.JPG</figcaption><p></p>
</figure>
</div>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
What is the average price of a listing in the Brooklyn Heights neighbourhood?
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>367</p>
</div>
</div>
</div>
</section>
<section id="segmenting-by-room-type" class="level4">
<h4 class="anchored" data-anchor-id="segmenting-by-room-type">1.4.2 Segmenting by room type</h4>
<p>Previously we found the average price of rooms in each neighbourhood. Now, we want to know the average number of days listings were occupied in 2019 segmented first by neighbourhood, but also by room type.</p>
<p>First we need to replace <code>Price</code> from the <code>Marks</code> field with <code>Days Occupied In 2019</code>. We can do this by dragging <code>Price</code> outwith the <code>Marks</code> pane (until we see a red cross) and then dropping it, and then dragging in <code>Days Occupied In 2019</code> :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/42b18209-e195-485c-8b32-bac9a420b8af.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">nyc_segment_1.JPG</figcaption><p></p>
</figure>
</div>
<p>Then get the <code>AVG</code> instead of the SUM :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/f823c709-9fec-4688-a370-483dd95ba137.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">nyc_segment_2.JPG</figcaption><p></p>
</figure>
</div>
<p>And then segment by room type. We can do this by adding <code>Room Type</code> to the <code>Rows</code> shelf :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/d49e1319-b6fe-405c-9766-bc99d21f98cb.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">nyc_segment_3.JPG</figcaption><p></p>
</figure>
</div>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
How many days on average, were private rooms occupied in Bayside?
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>116.5</p>
</div>
</div>
</div>
</section>
</section>
<section id="how-to-create-visualizations-in-tableau" class="level3">
<h3 class="anchored" data-anchor-id="how-to-create-visualizations-in-tableau">1.5 How to create visualizations in Tableau</h3>
<section id="creating-our-first-visualization" class="level4">
<h4 class="anchored" data-anchor-id="creating-our-first-visualization">1.5.1 Creating our first visualization</h4>
<p>In the previous section we created a table to find out the number of days listings were occupied in 2019 per neighbourhood and rooom type. However a table is tedious to look at, so we would prefer to visualize the results instead.</p>
<p>However, there are 100+ neighbourhoods in New York, which can be challenging to visualize, so let’s use a prefiltered workbook focusing on a few popular areas for illustrative purposes:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/cbda7450-93da-49c5-98d8-a185cac3a3e1.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">NYC_filter_1.JPG</figcaption><p></p>
</figure>
</div>
<p>Click <code>Show Me</code> in the top right and select the stacked barchart option. Note to show numerical values on the face of the bars, click on the <code>T</code> on the dashboard as highlighted below:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/88ea0f13-0e2d-45a8-8b2e-da29a079be14.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">NYC_filter_2.JPG</figcaption><p></p>
</figure>
</div>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
How many days on average, were private rooms occupied in the Bronxdale neighbourhood?
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>106.3</p>
</div>
</div>
</div>
<div class="callout-important callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Important
</div>
</div>
<div class="callout-body-container callout-body">
<p>Note that Tableau shows the visualizations that <em>can</em> be used, but it is up to us to customize based on the question being asked and the type of data.</p>
</div>
</div>
</section>
<section id="bringing-it-all-together" class="level4">
<h4 class="anchored" data-anchor-id="bringing-it-all-together">1.5.2 Bringing it all together</h4>
<p>To close this section, we will build a visualization on our own from scratch. We will compare occupancy and average prices for each neighbourhood and room type combinations. This would be excellent information to have to hand when deciding whether an investment may be worthwhile.</p>
<p>Replace the average <code>Days Occupied In 2019</code> with <code>Price</code> on the bar chart by:</p>
<ul>
<li>dragging <code>Price</code> on top of <code>AVG([Days Occupied In 2019)]</code> in the <code>Rows</code> section</li>
<li>changing the aggregation to <code>Average</code></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/64084ee3-fd3b-4d54-b16e-b5b23e39ae18.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">all_together.JPG</figcaption><p></p>
</figure>
</div>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-6-contents" aria-controls="callout-6" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
What is the highest average price for shared rooms?
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-6" class="callout-6-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>1,250</p>
</div>
</div>
</div>
<p>This value is suspicious - how can a shared room be that expensive and cost more than six times the price of an entire home? This outlier does not necessarily represent an error within our data, and there may a perfectly legitimate reason for the anomaly, however it must be investigated further.</p>
</section>
</section>
</section>
<section id="building-and-customizing-visualizations" class="level2">
<h2 class="anchored" data-anchor-id="building-and-customizing-visualizations">2. Building and Customizing Visualizations</h2>
<p>Let’s take it up a level and review the core concepts required for analyzing and exploring data in Tableau. We’ll learn how to slice and dice data with filters, create new columns using our own calculated fields, and aggregate dimensions and measures in a view. We will be working with education, social and infrastructure data.</p>
<section id="filtering-and-sorting" class="level3">
<h3 class="anchored" data-anchor-id="filtering-and-sorting">2.1 Filtering and sorting</h3>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/3d637e9e-cfad-4c98-bedd-94d9ef478639.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">filtering.JPG</figcaption><p></p>
</figure>
</div>
<section id="the-order-of-filtering" class="level4">
<h4 class="anchored" data-anchor-id="the-order-of-filtering">2.1.1 The order of filtering</h4>
<p>The order of filtering is important when dealing with large datasets. The extract and data source filters are applied prior to loading our data into Tableau but we will focus on the <code>Dimension</code> and <code>Measure</code> filters.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/24ac5212-6503-4bdc-a058-a286e39d06e7.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">filter_types.JPG</figcaption><p></p>
</figure>
</div>
</section>
</section>
<section id="sorting-and-filtering-through-selection" class="level3">
<h3 class="anchored" data-anchor-id="sorting-and-filtering-through-selection">2.2 Sorting and filtering through selection</h3>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/f6c425f0-b46d-4195-a3f9-e0d610c5d447.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">dimension_filters.JPG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/f396c281-69f3-4c13-b5a6-e77b0beb9839.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">measure_filters.JPG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/5224184b-61b5-49dd-a133-be49aa535a2e.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">sorting.JPG</figcaption><p></p>
</figure>
</div>
<section id="sorting-and-excluding-multiple-fields" class="level4">
<h4 class="anchored" data-anchor-id="sorting-and-excluding-multiple-fields">2.2.1 Sorting and excluding multiple fields</h4>
<p>Keep only values for <code>2017</code> and sort <code>Country</code> alphabetically :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/2341497f-1a5a-411e-a7cf-e8fceebb4ac0.jpg" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">sort_1.jpg</figcaption><p></p>
</figure>
</div>
<p>Exclude <code>United Arab Emirates</code> from the list, sort by <code>Cell Phones per 100 people</code> in <em>descending</em> order, and keep only the first 10 countries that are listed:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/86580699-e58f-433c-b732-e6702e95c76a.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">sort_3.JPG</figcaption><p></p>
</figure>
</div>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-7-contents" aria-controls="callout-7" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Which country had the highest number of cell phones per 100 people in 2017?
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-7" class="callout-7-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Maldives</p>
</div>
</div>
</div>
</section>
<section id="comparing-g7-countries" class="level4">
<h4 class="anchored" data-anchor-id="comparing-g7-countries">2.2.2 Comparing G7 countries</h4>
<p>The Group of Seven (G7) is an international organization consisting of Canada, France, Germany, Italy, Japan, the United Kingdom, and the United States. In this exercise we will filter data to look only at countries that are part of the G7 with <code>Broadband Subscribers per 100 people</code> greater than 30.</p>
<p>Navigate to the G7 worksheet :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/01d257f8-a966-42da-b6fe-42c4bac5f0ca.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">G7_1.JPG</figcaption><p></p>
</figure>
</div>
<p>Filter <code>Country</code> to show the countries that make up the G7 :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/c8ca2ca1-2ab5-4e2b-973a-bd2a0e9949af.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">G7_2.JPG</figcaption><p></p>
</figure>
</div>
<p>Filter <code>Broadband Subscribers per 100 ppl</code> to show where the value is at least <code>30</code> :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/81d66053-d37c-4df6-aad6-b964c8ee6a98.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">G7_3.JPG</figcaption><p></p>
</figure>
</div>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-8-contents" aria-controls="callout-8" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Which G7 countries have consistently had at least a value of 30 for <code>Broadband Subscribers per 100 ppl</code> from 2009 onwards?
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-8" class="callout-8-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Canada, France, Germany</p>
</div>
</div>
</div>
</section>
</section>
<section id="filtering-through-the-filter-shelf" class="level3">
<h3 class="anchored" data-anchor-id="filtering-through-the-filter-shelf">2.3 Filtering through the filter shelf</h3>
<p>Notice that often our data includes <code>nulls</code>. This is misleading because it makes it look like the values are zero, but this might not be the case.</p>
<section id="filtering-for-null-values" class="level4">
<h4 class="anchored" data-anchor-id="filtering-for-null-values">2.3.1 Filtering for null values</h4>
<p>Navigate to the <code>Cell vs Broadband</code> worksheet:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/8e6156d4-7d61-4fb3-ac34-edbfae0897d7.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">cell_vs_bband_1.JPG</figcaption><p></p>
</figure>
</div>
<p>We want to know for which countries we lack values for the measures <code>Cell Phones per 100 People</code> and <code>Broadband Subscribers per 100 ppl</code></p>
<p>Add <code>Cell Phones per 100 People</code> to the filters card. Select <code>Next</code> and navigate to the <code>Special</code> option in the pop-u. Select <code>Null Values</code> :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/d2c0578e-4bf9-4a22-8e33-c7f5100a68b4.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">cell_vs_bband_2.JPG</figcaption><p></p>
</figure>
</div>
<p>Repeat the above instruction with the <code>Broadband Subscribers per 100 ppl</code> field :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/aa67a686-5af6-498d-a1c2-e1483ee62892.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">cell_vs_bband_3.JPG</figcaption><p></p>
</figure>
</div>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-9-contents" aria-controls="callout-9" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Which country has null values for both <code>Cell Phones per 100 People</code> and ’Broadband Subscribers per 100 ppl` in 2010?
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-9" class="callout-9-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Marshall Islands</p>
</div>
</div>
</div>
<p>Filtering for null values is a useful feature when cleaning and exploring our data, by identifying missing data for follow up.</p>
</section>
<section id="top-filters-on-tableau" class="level4">
<h4 class="anchored" data-anchor-id="top-filters-on-tableau">2.3.2 Top filters on Tableau</h4>
<p>Now we want to filter countries on their <strong>average</strong> <code>Cell Phones per 100 People</code> across years <code>2006-2015</code>. The <strong>sum</strong> aggregation is set as the default for <code>measures</code> so we’ll have to look out for this.</p>
<p>Navigate to the <code>Top Filters</code> worksheet :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/d8436c6a-5b6a-43f0-8ac6-b28742f51d13.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">top_filter_1.JPG</figcaption><p></p>
</figure>
</div>
<p>Add a filter on <code>Country</code>. Use Tableau’s top filter option on the bottom two countries based on the <code>Cell Phones per 100 People</code> average:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/ad41f657-8df4-4422-9c10-46a4adee35e0.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">top_filter_2.JPG</figcaption><p></p>
</figure>
</div>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-10-contents" aria-controls="callout-10" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Which country has the second lowest average <code>Cell Phones per 100 People</code> ?
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-10" class="callout-10-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Cuba.</p>
</div>
</div>
</div>
<p>As you may have noticed, there are many other aggregation options like median, count, minimum and variance. Let’s have a closer look at these now.</p>
</section>
</section>
<section id="aggregation" class="level3">
<h3 class="anchored" data-anchor-id="aggregation">2.4 Aggregation</h3>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/e54dd3f5-7030-477f-aa33-bb0357502489.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">aggregation.JPG</figcaption><p></p>
</figure>
</div>
<section id="aggregating-measures-and-dimensions" class="level4">
<h4 class="anchored" data-anchor-id="aggregating-measures-and-dimensions">2.4.1 Aggregating measures and dimensions</h4>
<p>Aggregating can be defined as gathering and summarizing data points for analytics. Aggregating <code>measures</code> is more common, but also some <code>dimensions</code> can be aggregated, depending on your use case.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/edae4950-0775-4204-a6e0-f0035aae1690.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">agg_measures.JPG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/7cd76106-f1f7-431c-9cc3-5d5a3b828316.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">agg_dimensions.JPG</figcaption><p></p>
</figure>
</div>
</section>
</section>
<section id="scatter-plots-and-aggregations" class="level3">
<h3 class="anchored" data-anchor-id="scatter-plots-and-aggregations">2.5 Scatter plots and aggregations</h3>
<section id="co2-emmisions-and-gdp-in-sub-regions" class="level4">
<h4 class="anchored" data-anchor-id="co2-emmisions-and-gdp-in-sub-regions">2.5.1 CO2 Emmisions and GDP in Sub Regions</h4>
<p>In this exercise we will create a scatter plot comparing <code>GDP per Capita</code> and <code>CO2 Emissions per Person</code>. The data points in the scatter plot should represent <code>Sub Regions</code>.</p>
<p>Open the workbook <code>2_5_co2emissions_and_gdp_in_sub_regions.twbx</code> and ensure you are in the <code>CO2 and GDP</code> worksheet :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/6131fd63-a87e-48c4-9b4f-c707557425d9.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">CO2_1.JPG</figcaption><p></p>
</figure>
</div>
<p>Create a scatter plot with <strong>average</strong> <code>GDP per Capita</code> on the x-axis and the <strong>average</strong> <code>CO2 Emissions per Person</code> on the y-axis :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/fc961066-0052-43de-9ef5-9a57e2fcc4ba.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">CO2_2.JPG</figcaption><p></p>
</figure>
</div>
<p>Colour the points based on <code>Sub Regions</code> :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/6b1139f7-0b71-406b-b537-5f183f4f4fde.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">CO2_3.JPG</figcaption><p></p>
</figure>
</div>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-11-contents" aria-controls="callout-11" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Based on our scatter plot the values for Eastern Asia and Caribbean sub regions are very different. True or False ?
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-11" class="callout-11-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>False, the values are very similar, the data points overlap on the scatterplot.</p>
</div>
</div>
</div>
</section>
<section id="counting-on-gdp-per-capita" class="level4">
<h4 class="anchored" data-anchor-id="counting-on-gdp-per-capita">2.5.2 Counting on GDP per capita</h4>
<p>The aggregation options <code>Count</code> and <code>Count (Distinct)</code> are useful for analyzing dimensions and whether they have reached certain dimensions.</p>
<p>Open the workbook <code>2_6_counting_on_gdp_per_capita.twbx</code> and navigate to the <code>GDP per Capita</code> :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/24e7f361-e969-4bb0-9484-50ffa1de6936.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">GDP_1.JPG</figcaption><p></p>
</figure>
</div>
<p>Create a chart with <code>GDP per Capita (Grouped)</code> as rows and the distinct count of <code>GDP per Capita (Grouped)</code> as columns :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/5cd335a7-feb2-4ef9-8b0e-d8ca6455969e.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">GDP_2.JPG</figcaption><p></p>
</figure>
</div>
<p>Colour the bars based on <code>Sub Region</code> :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/cefaca22-582e-4eb0-b29f-667c490a03c1.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">GDP_3.JPG</figcaption><p></p>
</figure>
</div>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-12-contents" aria-controls="callout-12" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Which sub-region has been in all six GDP per Capita (Grouped) categories ?
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-12" class="callout-12-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Western Asia.</p>
</div>
</div>
</div>
<p>Western Asia has been in all six categories since 1960 showing that it either had significant growth or a decline in GDP. We would have to see how Western Asia’s GDP has shifted over the years.</p>
</section>
<section id="standard-deviation-of-life-expectancy" class="level4">
<h4 class="anchored" data-anchor-id="standard-deviation-of-life-expectancy">2.5.3 Standard deviation of life expectancy</h4>
<p>Standard deviation is a useful aggregation for analyzing how much data varies. In this exercise we will use standard deviation to see how much life expectancy has varied across the years for different countries.</p>
<p>Load the workbook <code>2_7_std_dev_of_life_expectancy.twbx</code> and navigate to the <code>Life Expectancy</code> worksheet :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/bbc8ec96-abb1-43f8-b01f-9778335f6a78.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">life_expectancy.JPG</figcaption><p></p>
</figure>
</div>
<p>Create a bar chart with the bars representing each country’s standard deviation of life expectancy :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/e21ec0d2-3d1f-491d-ab10-600927cc9abe.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">life_expectancy_2.JPG</figcaption><p></p>
</figure>
</div>
<p>Consider only the years from <code>1980 to 2000</code> :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/d2358057-3307-439f-a70a-1a594b74c88c.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">life_expectancy_3.JPG</figcaption><p></p>
</figure>
</div>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-13-contents" aria-controls="callout-13" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Which country has the highest standard deviation on the <code>Life Expectancy</code> measure ?
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-13" class="callout-13-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Lebanon.</p>
</div>
</div>
</div>
<p>Lebanon has the highest standard deviation between the years 1980 to 2000. We would have to analyze further if this relatively large variation was due to increased or decreased quality of life.</p>
</section>
</section>
<section id="calculated-fields" class="level3">
<h3 class="anchored" data-anchor-id="calculated-fields">2.6 Calculated fields</h3>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/db936c58-348b-452a-8246-3b823aad5cd2.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">calculated_fields.JPG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/2d41f65b-35d2-4c2b-9bc8-2223945ce081.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">image.png</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/1802a201-fe30-4e9b-b075-f9f456183276.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">functions.JPG</figcaption><p></p>
</figure>
</div>
<p>There’s no need to memorize all of the functions because of Tableau’s handy built-in documentation :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/eaaba335-b5b3-4b77-9d15-fab2fa7f0d54.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">function_search.JPG</figcaption><p></p>
</figure>
</div>
</section>
<section id="creating-calculated-fields" class="level3">
<h3 class="anchored" data-anchor-id="creating-calculated-fields">2.7 Creating calculated fields</h3>
<section id="calculated-field-for-rounding" class="level4">
<h4 class="anchored" data-anchor-id="calculated-field-for-rounding">2.7.1 Calculated field for rounding</h4>
<p>Open the workbook <code>2_8_calculated_field_for_rounding.twbx</code> and navigate to the <code>Rounding</code> worksheet :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/27e5f81c-66ad-4ca9-922f-f1d748d918c5.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">rounding.JPG</figcaption><p></p>
</figure>
</div>
<p>Create a new calculated field called <code>Rounded Women 25-34</code> - use the built-in documentation and look up <code>ROUND()</code> and round the new column to whole numbers (0 decimal points) :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/efe076a6-22f5-4f0f-a0e9-c1332b7072aa.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">rounding_2.JPG</figcaption><p></p>
</figure>
</div>
<p>Replace <code>Women 25-34</code> in the <code>Marks</code> field with our newly created field :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/d5d339b5-fc01-4fdc-a2e0-58373651ed7f.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">rounding_3.JPG</figcaption><p></p>
</figure>
</div>
<p>Remove any existing filters and create new filters for <code>Year</code> = 1976 and <code>&gt;=10</code> for our newly created field :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/47fd78fb-ede0-481d-8be3-ced859147122.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">rounding_4.JPG</figcaption><p></p>
</figure>
</div>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-14-contents" aria-controls="callout-14" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
How many countries in 1976 had women in the 25-34 age range spending, on average, ten years or more in school ?
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-14" class="callout-14-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ol start="4" type="1">
<li></li>
</ol>
</div>
</div>
</div>
</section>
<section id="ratio-between-genders" class="level4">
<h4 class="anchored" data-anchor-id="ratio-between-genders">2.7.2 Ratio between genders</h4>
<p>Another useful calculated field to make is a ratio. Ratios are ana excellent way to compare two values. In our case, we can compare the mean years of education between men and women using a ratio. The closer the ratio is to one, the more equal levels of education are between women and men.</p>
<p>Load the workbook <code>2_9_ratio_between_genders.twbx</code> and navigate to the <code>Ratio</code> worksheet :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/3b53898b-8fe9-4754-b126-18a8f9cc06bd.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">ratio_1.JPG</figcaption><p></p>
</figure>
</div>
<p>Create a calculated field called <code>Men:Women (25-34)</code> which calculates the men:women ratio for years spent in school in the 25-34 age group. Add this new field as a column to the table by dragging it to the <code>Text</code> card and change the aggregation from sum to average :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/fbcb053d-93e6-4248-9a88-c64ded2a5458.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">ratio_2.JPG</figcaption><p></p>
</figure>
</div>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-15-contents" aria-controls="callout-15" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
What is Russia’s <code>Men:Women (25-34)</code> ratio for years spent in school?
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-15" class="callout-15-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>0.9821.</p>
</div>
</div>
</div>
<p>Russia has a ratio of ~ 0.98 which means that Russian men have an average of 0.98 years of schooling for every year of schooling that Russian women receive.</p>
<p>Let’s now create a field for the average across women <strong>and</strong> women in the age group <code>25-34</code>.</p>
<p>Navigate to the <code>Average</code> worksheet:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/bfd1a142-9322-4c99-afa9-15d1a01ed197.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">average.JPG</figcaption><p></p>
</figure>
</div>
<p>Create a new field called <code>25-34</code> that sums the values for men and women in the <code>25-34</code> age group and divides them by 2 to get the average:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/95627cf9-7675-4e86-916a-06f3726092a4.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">average_2.JPG</figcaption><p></p>
</figure>
</div>
<p>Add the new field to the table. Make sure to change the aggregation from <code>SUM</code> to <code>AVG</code> :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/c1ccdca6-993d-4e98-8ff0-6e97ba528004.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">average_3.JPG</figcaption><p></p>
</figure>
</div>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-16-contents" aria-controls="callout-16" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
What is the highest <code>25-34</code> average for a country?
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-16" class="callout-16-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>13.40</p>
</div>
</div>
</div>
<p>Remember, this isn’t a weighted average. To make this calculation more accurate, we could add the country’s population data for each gender and age group. Then we could alter the calculated field’s formula to have weighted proportions.</p>
</section>
</section>
</section>
<section id="digging-deeper" class="level2">
<h2 class="anchored" data-anchor-id="digging-deeper">3. Digging Deeper</h2>
<p>Let’s dive deeper into analytics by learning how to visualize geographic data and plot data onto a map visualization. We’ll learn how to work with dates in Tableau and explore how the data changes with time. We will also learn how to add reference, trend, and forecasting lines to our views. We will do all of this exploring health statistics worldwide.</p>
<section id="mapping-our-data" class="level3">
<h3 class="anchored" data-anchor-id="mapping-our-data">3.1 Mapping our data</h3>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/7195602e-ab6c-45db-8f1b-2568b570f9be.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">geog_types.JPG</figcaption><p></p>
</figure>
</div>
<p>Note that Tableau does not geocode territories, as these are customized region/country groupings that are used differently by people and organizations.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/6e79a701-0d19-41a9-820b-edcfeff3b425.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">filled_map.JPG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/6b493bbe-b8b6-42f9-b62d-8be2a2f2444f.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">symbol_maps.JPG</figcaption><p></p>
</figure>
</div>
</section>
<section id="creating-a-symbol-map" class="level3">
<h3 class="anchored" data-anchor-id="creating-a-symbol-map">3.2 Creating a symbol map</h3>
<p>Open the workbook <code>3_1_your_first_symbol_map.twbx</code> and navigate to the <code>Symbol Map</code> worksheet. Initialize a symbol map with a circle in each country:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/2b0728bd-e463-48b8-9d07-6cc18960f55a.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">symbol_map_1.JPG</figcaption><p></p>
</figure>
</div>
<p>Adjust the sizes of the circles based on the country’s number of <code>Stomach Cancer</code> cases :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/952a5f4d-142f-4743-88be-d80b8b479cd0.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">symbol_map_2.JPG</figcaption><p></p>
</figure>
</div>
<p>Increase the size of the circles to make it easier to read the map :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/b0e98f27-f14d-408b-8f53-27f4124a9e0f.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">symbol_map_3.JPG</figcaption><p></p>
</figure>
</div>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-17-contents" aria-controls="callout-17" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
How many people were diagnosed with stomach cancer in the country with the highest stomach cancer cases?
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-17" class="callout-17-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>7,224,000</p>
</div>
</div>
</div>
<p>During the period 7,224,000 people were diagnosed with stomach cancer in China. Using automatically generated latitude and longitude, Tableau lets you quickly generate powerful spatial visualizations.</p>
<p>Let’s add some colour to this map. We are asked to add some information about the countries’ population growth. To make the map clearer, we decide to add the coastline.</p>
<p>Colour the circles based on the <em>average</em> <code>Population Growth</code> :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/7888a3c3-d295-4b2b-b921-e94c9ad28ce5.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">symbol_map_4.JPG</figcaption><p></p>
</figure>
</div>
<p>Add a black border around the circles :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/5e20a038-71ef-4825-9b1d-79c8ed2901c8.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">symbol_map_5.JPG</figcaption><p></p>
</figure>
</div>
<p>Remove the halo :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/2af0852b-c3a4-4319-84c4-27ce2754d338.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">symbol_map_6.JPG</figcaption><p></p>
</figure>
</div>
<p>Add a <code>Map layer</code> responsible for showing the <code>Coastline</code> :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/559d7ce4-ab40-48f5-85b6-51dec1be4aab.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">symbol_map_7.JPG</figcaption><p></p>
</figure>
</div>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-18-contents" aria-controls="callout-18" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Was the population growth of the United Kingdom positive or negative?
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-18" class="callout-18-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Positive. The colour of the circle is blue which represents positive growth. The orange circles represent negative growth.</p>
</div>
</div>
</div>
<p>Lets’ combine everything we’ve learned so far. In this final exercise we will create a symbol map that will make it easy to look at the countries’ population and population growth rates. With this information the World Health Organization can decide on which countries they need to focus on preventing health risks due to overpopulation.</p>
<p>Navigate to the <code>Population</code> worksheet and create a symbol map with varying circle sizes based on <code>Population</code> :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/d9342cfb-25df-4ac8-9fae-9e61e9d97e36.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">population.JPG</figcaption><p></p>
</figure>
</div>
<p>Colour the circles based on <em>average</em> <code>Population Growth</code> :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/7e74c0d8-ad02-458b-b32e-c181dba53c7b.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">population_2.JPG</figcaption><p></p>
</figure>
</div>
<p>Add a black border around the circles, remove the halo, and filter year to include <code>2008</code> data :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/bf9129c1-d217-4c03-acdf-91a6d9477a70.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">population_3.JPG</figcaption><p></p>
</figure>
</div>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-19-contents" aria-controls="callout-19" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
What was the average population growth of the country with the highest population in 2008?
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-19" class="callout-19-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>0.56 - China.</p>
</div>
</div>
</div>
<p>China had a growth rate of 0.56 in 2008. It’s positive but not as high as other countries on the map. India’s growth rate for example is 1.48. India might surpass China in terms of population during the following years. The World Health Organization should make sure that they think about India’s high population and rapid growth.</p>
</section>
<section id="working-with-dates" class="level3">
<h3 class="anchored" data-anchor-id="working-with-dates">3.3 Working with dates</h3>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/0d3651ec-6825-4571-83c0-3bbb9bc9fdb0.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">date_data.JPG</figcaption><p></p>
</figure>
</div>
<section id="date-hierarchies" class="level4">
<h4 class="anchored" data-anchor-id="date-hierarchies">3.3.1 Date hierarchies</h4>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/7e9caa8c-deec-4740-a530-3736f67f3990.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">date_hierarchy.JPG</figcaption><p></p>
</figure>
</div>
</section>
</section>
<section id="visualizing-dates" class="level3">
<h3 class="anchored" data-anchor-id="visualizing-dates">3.4 Visualizing dates</h3>
<section id="our-data-by-year" class="level4">
<h4 class="anchored" data-anchor-id="our-data-by-year">3.4.1 Our data by year</h4>
<p>Our task is to analyze natality in Poland over the past 40 years. The World Health Organization is interested in how the number of births has evolved.</p>
<p>Open workbook <code>3_4_your_data_by_year.twbx</code> and navigate to the <code>Births</code> worksheet. Create a linechart with the date (in years) as columns and the total number of births as rows :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/c0da65be-6ba5-42c5-b3c6-29d12507a8ea.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">births.JPG</figcaption><p></p>
</figure>
</div>
<p>Filter the data on <code>Country</code> to only include <code>Poland</code> :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/89ff95f6-cac1-431d-a4b3-d58ea9ea84b6.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">births_2.JPG</figcaption><p></p>
</figure>
</div>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-20-contents" aria-controls="callout-20" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
What was the total number of births in Poland in 2017 ?
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-20" class="callout-20-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>401,946.</p>
</div>
</div>
</div>
<p>The number of births in Poland declined between 1983 and 2003, increased in the years to 2009, and then dipped and resurfaced, centred around 2009 levels in the period 2009 to 2017. But what if we are interested in the births at a more granular level? Let’s analyze the data on a monthly level next.</p>
</section>
<section id="our-data-by-month" class="level4">
<h4 class="anchored" data-anchor-id="our-data-by-month">3.4.2 Our data by month</h4>
<p>The World Health Organization has asked us to focus specifically on the last five years available data and look at the monthly number of births.</p>
<p>Open the workbook <code>3_5_your_data_by_month.twbx</code> and navigate to the <code>Births</code> worksheet. Display the date as <em>continuous</em> month values :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/637be041-c131-4101-ac58-8ddc35547bdf.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">births_3.JPG</figcaption><p></p>
</figure>
</div>
<p>Filter the data on the <code>Years</code> 2013-2017 :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/102baf09-0255-4b9a-b625-44e90e21fe0d.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">births_4.JPG</figcaption><p></p>
</figure>
</div>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-21-contents" aria-controls="callout-21" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
In what month and year were the most babies born in Poland during the 2013-2017 period ?
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-21" class="callout-21-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>July 2017.</p>
</div>
</div>
</div>
<p>In July 2017, a total number of 35,993 babies were born in Poland. Note how easy Tableau makes changing the granularity level of the date variable.</p>
</section>
<section id="birth-seasonality" class="level4">
<h4 class="anchored" data-anchor-id="birth-seasonality">3.4.3 Birth seasonality</h4>
<p>Let’s combine everything we have learned so far in our final exercise. We will create a line chart that will help the World Health Organization plan how many resources should be sent to Chile to ensure newborn care at birth throughout the year.</p>
<p>Load the workbook <code>3_6_birth_seasonality.twbx</code> and navigate to the <code>Birth Seasonality</code> worksheet. Create a line chart with the date (in years) as columns and the total number of births as rows:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/a40a83d0-eb3a-466e-b76e-9490e2de9776.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">births_5.JPG</figcaption><p></p>
</figure>
</div>
<p>Filter the data on <code>Country</code> to include only Chile :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/ee578118-359e-4882-b9ea-f5fc5dcd98d8.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">births_6.JPG</figcaption><p></p>
</figure>
</div>
<p>Display the date as <em>continuous</em> month values:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/df6d1009-f11c-45f6-ad0c-6cd48f24d202.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">births_7.JPG</figcaption><p></p>
</figure>
</div>
<p>Filter the data on the <code>Years</code> 1995-1999 :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/d4b63755-add8-4403-b9b2-f46792556dbf.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">births_8.JPG</figcaption><p></p>
</figure>
</div>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-22-contents" aria-controls="callout-22" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
During which month were the fewest babies born in Chile during 1995-1999 ?
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-22" class="callout-22-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>February 1999.</p>
</div>
</div>
</div>
<p>It looks like there is some seasonality in the natality data. During the 1995-1999 period, fewer babies were born each February, although note that this is most likely because February is the shortest month.</p>
</section>
</section>
<section id="reference-lines-trend-lines-and-forecasting" class="level3">
<h3 class="anchored" data-anchor-id="reference-lines-trend-lines-and-forecasting">3.5 Reference lines, trend lines, and forecasting</h3>
<section id="reference-lines" class="level4">
<h4 class="anchored" data-anchor-id="reference-lines">3.5.1 Reference lines</h4>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/4e2f875f-f8c7-4ff9-9fce-e6fefd566d26.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">reference_line.JPG</figcaption><p></p>
</figure>
</div>
<p>Our task is to analyze the number of births in Denmark over the last six years. We have been asked to add a <code>reference line</code> to our graph indicating the <code>minimum</code> monthly births over the period.</p>
<p>Open up the workbook <code>3_7_reference_lines.twbx</code> and navigate to the <code>Reference, Trends &amp; Forecasting</code> worksheet. Create a <code>line chart</code> with the date (continuous month values) as columns and the total number of births as rows:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/af8a985a-a0c5-41fe-8999-3fce81cf4016.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">total_births.JPG</figcaption><p></p>
</figure>
</div>
<p>Filter the data on <code>Country</code> to only include <code>Denmark</code>, and <code>Date</code> to only include <code>2012-2017</code> :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/2fc340ee-ef5d-4d9c-85d1-2391901fabbe.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">births_denmark.JPG</figcaption><p></p>
</figure>
</div>
<p>Add a <code>reference line</code> indicating the <code>minimum</code> number of births in the chart :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/caafa1f8-ad22-4950-a4e0-561ae2eb2121.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">denmark_refline_min.png</figcaption><p></p>
</figure>
</div>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-23-contents" aria-controls="callout-23" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
What was the minimum number of monthly births in Denmark during the 2012-2017 period ?
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-23" class="callout-23-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>4,225.</p>
</div>
</div>
</div>
<p>In February 2015, 4,225 babies were born in Denmark. With the reference line chart, we can easily see how the number of births in a certain month compares to the minimum of that period.</p>
</section>
<section id="trend-lines" class="level4">
<h4 class="anchored" data-anchor-id="trend-lines">3.5.2 Trend lines</h4>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/f0bf14d3-7ddb-4e97-8e81-95b6148febc8.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">trend_lines.JPG</figcaption><p></p>
</figure>
</div>
<p>Next, we are asked to investigate the trend in the number of <code>female</code> births during the same period. We can easily spot this by adding a <code>trend line</code>. Load the workbook <code>3_9_trend_lines.twbx</code> and filter to show only <code>female</code> births :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/27a4e87c-2641-4f18-be6d-b38b1a6d6d12.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">denmark_female_births.JPG</figcaption><p></p>
</figure>
</div>
<p>Add a linear trend line for the number of births over time :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/84834b50-b085-4674-84d6-5c937b3a1448.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">denmark_female_trend.JPG</figcaption><p></p>
</figure>
</div>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-24-contents" aria-controls="callout-24" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Is there an upward or downward trend in the number of female births in Denmark during the 2012-2017 period ?
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-24" class="callout-24-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Upward.</p>
</div>
</div>
</div>
<p>Overall, the number of female births in Denmark has been slowly increasing over the last couple of years. This is much easier to spot with the <code>trend line</code> added to our visualization.</p>
</section>
<section id="forecasting" class="level4">
<h4 class="anchored" data-anchor-id="forecasting">3.5.3 Forecasting</h4>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/8f4a82c7-372c-46ac-ad65-1a6ecc40d5f5.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">forecasting.JPG</figcaption><p></p>
</figure>
</div>
<p>Forecasting is a valuable technique that can help us anticipate and make informed decisions for the future. Let’s do some forecasting. This time we are tasked with forecasting the number of female births in Denmark for the next year.</p>
<p>Load the workbook <code>3_9_forecasting.twbx</code> and remove the trend line we created before. Add a <code>forecast</code> for the number of female births during 2018 :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/b790edd0-2117-41bb-a0a2-0268581dbf01.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">denmark_forecast.JPG</figcaption><p></p>
</figure>
</div>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-25-contents" aria-controls="callout-25" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
How many female births do we expect in Denmark in August 2018 ?
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-25" class="callout-25-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>2,890.</p>
</div>
</div>
</div>
<p>The forecast tells us that we can expect 2,890 new baby girls in Denmark in August 2018. Forecasting future events can put us in a position to be <code>proactive</code> instead of <em>reactive</em>.</p>
</section>
<section id="bringing-it-all-together-1" class="level4">
<h4 class="anchored" data-anchor-id="bringing-it-all-together-1">3.5.4 Bringing it all together</h4>
<p>Let’s combine what we’ve learned so far. Let’s create a line chart which that will make it easy to answer the following question:</p>
<blockquote class="blockquote">
<p>Is the forecasted number of births in Japan during December 2019 higher than the average over the last five years?</p>
</blockquote>
<p>Load the workbook <code>3_10_natality_forecast</code> and navigate to the <code>Natality Forecast</code> worksheet. Create a <code>line chart</code> with the date (continuous month values) as columns and the total number of births as rows :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/1bc85696-157b-44d9-9808-6c1c15a4e979.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">japan_births.JPG</figcaption><p></p>
</figure>
</div>
<p>Filter the data on <code>Country</code> to only include Japan and on <code>Date</code> to only include years 2014-2018 :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/59005666-fb3b-4560-909a-63aa82935c69.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">japan_births_filter.JPG</figcaption><p></p>
</figure>
</div>
<p>Add a forecast for the number of births during 2019 :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/91ab44a1-f738-4925-91cb-aaabde6c1f23.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">japan_forecast.JPG</figcaption><p></p>
</figure>
</div>
<p>Add a reference line indicating the average number of births in the chart:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/d7a8534f-e562-4f67-bbd1-d95bbf143e2c.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">japan_refline.JPG</figcaption><p></p>
</figure>
</div>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-26-contents" aria-controls="callout-26" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Is the forecasted number of births in Japan During December 2019 higher than the average over the last five years?
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-26" class="callout-26-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>No.</p>
</div>
</div>
</div>
<p>The number of births in December 2019 is forecast to be lower so the World Health Organization might need to send over fewer resources during that period.</p>
</section>
</section>
</section>
<section id="presenting-our-data" class="level2">
<h2 class="anchored" data-anchor-id="presenting-our-data">4. Presenting Our Data</h2>
<p>Our data is full of interesting stories and insights still waiting to be told. Learn best practices for formatting and presenting visualisations to tell data-driven stories. Using a new dataset on video game sales we’ll be building our first dashboard!</p>
<section id="make-our-data-visually-appealing" class="level3">
<h3 class="anchored" data-anchor-id="make-our-data-visually-appealing">4.1 Make our data visually appealing</h3>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/93c3e272-513c-44d3-bf10-7a340f9e3902.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">formatting.JPG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/a286c83c-7830-4bd4-a4a3-6bc15add6731.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">format_levels.JPG</figcaption><p></p>
</figure>
</div>
</section>
<section id="applying-visual-best-practices" class="level3">
<h3 class="anchored" data-anchor-id="applying-visual-best-practices">4.2 Applying visual best practices</h3>
<section id="create-a-dual-axis-graph" class="level4">
<h4 class="anchored" data-anchor-id="create-a-dual-axis-graph">4.2.1 Create a dual-axis graph</h4>
<p>The video games dataset contains information on video game sales from 1990 until 2010. Our task is to investigate the dataset and uncover insights about the gaming industry. Our first job is to investigate global and European sales of Atari over time - we can do so by creating a <code>dual-axis</code> graph.</p>
<p>Open WorkBook <code>4_1_dual_axis.twbx</code> and rename <code>Sheet 1</code> tab to <code>EU vs Global Sales</code> - drag <code>Release Year</code> to columns, and <code>Global Sales</code> to rows :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/2753490d-9fea-40a7-aa69-3db3e3c3af61.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">games.JPG</figcaption><p></p>
</figure>
</div>
<p>Drag <code>EU sales</code> to the right of the graph until a dotted line appears. Synchronize and hide the right axis :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/0c28e19f-a116-42c6-bcb6-f3264aab57e6.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">games_2.JPG</figcaption><p></p>
</figure>
</div>
<p>Change <code>Global Sales</code> from a line to a <code>bar</code> chart using the <code>Marks card</code>. This will make it more evident <code>Global Sales</code> is the sum of all regions :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/d5459da0-3021-4cac-bfb6-f8229bbdd861.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">games_global_bar.JPG</figcaption><p></p>
</figure>
</div>
<p>Clean up the graph and add a filter:</p>
<ul>
<li>centre the title of the graph</li>
<li>rename the y-axis to <code>Video Game Sales (millions of units)</code></li>
<li>filter <code>Publisher</code> for <code>Atari</code></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/1f3f8dc3-7621-4171-8ad1-1f117dd5e928.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">games_atari.JPG</figcaption><p></p>
</figure>
</div>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-27-contents" aria-controls="callout-27" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
How many video games (million units) from Atari were sold in the release year 2010 ?
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-27" class="callout-27-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>1.44</p>
</div>
</div>
</div>
<p>The visualization shows Atari game sales went downhill fast after a second successful stint in the ear;y 2000s, eventually resulting in their bankruptcy in 2013.</p>
</section>
<section id="expanding-a-dual-axis-graph" class="level4">
<h4 class="anchored" data-anchor-id="expanding-a-dual-axis-graph">4.2.2 Expanding a dual-axis graph</h4>
<p>Breaking video gaame sales down by <code>Genre</code> can reveal many insights. We have been asked to investigate <code>Nintendo's Puzzle</code> video game sales in North America.</p>
<p>Duplicate the <code>EU vs Global Sales</code> worksheet and rename it <code>All Regions - Sales</code>. Next, drag <code>Measure Values</code> on top of <code>EU Sales</code> in the rows section. By doing this, Tableau automatically adds <strong><em>all</em></strong> <code>Measures</code> (highlighted in green) to the graph :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/232d382e-c5c6-4e6c-ade6-d61f224b2f50.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">games_measures.JPG</figcaption><p></p>
</figure>
</div>
<p>Next, remove the following from <code>Measure Values</code> (below the Marks cars) that are not needed:</p>
<ul>
<li><code>Video Games - Sales.csv (count)</code>. This is a count of rows of the database generated by Tableau. In this case, it does not add any info</li>
<li><code>Global Sales</code> The measure is already visualized on the bar chart on the left axis</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/d472cd9f-886b-420d-8157-b64298536c95.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">games_measures_removed.JPG</figcaption><p></p>
</figure>
</div>
<p>Expand the <code>tooltip</code> to allow us to hover over the bar :</p>
<ul>
<li>Add <code>EU Sales</code>, <code>Global Sales</code>, <code>NA Sales</code>, and <code>Other Sales</code> to <code>Tooltips</code> and edit to our liking:</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/260350ce-9dca-4985-9390-d035367fcdaa.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">games_tooltips.JPG</figcaption><p></p>
</figure>
</div>
<p>Include a <code>Genre</code> filter for <code>Puzzle</code> and change <code>Publisher</code> filter to <code>Nintendo</code> :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/6e27cda6-ee2f-4e3e-843b-e0aef37512e2.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">games_nintendo.JPG</figcaption><p></p>
</figure>
</div>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-28-contents" aria-controls="callout-28" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
What is the amount of <code>Puzzle</code> genre video games sold (million units) by <code>Nintendo</code> in North America that were released in 1989 ?
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-28" class="callout-28-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>26.34</p>
</div>
</div>
</div>
<p>The massive spike in the puzzle genre in 1989, is thanks to the success of Tetris. It accounts for almost 90% of sales from that release year!</p>
</section>
<section id="formatting-our-visualization" class="level4">
<h4 class="anchored" data-anchor-id="formatting-our-visualization">4.2.3 Formatting our visualization</h4>
<p>Time to play around with colours. Create a new worksheet and rename it <code>Global Sales Breakdown</code>. Create a bar chart of <code>Global Sales</code> by <code>Release Year</code>, centre the title of the graph, and change its font size to 16 :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/7fc960d1-92b4-4b21-b58e-e6ab595b58f3.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">global_sales.JPG</figcaption><p></p>
</figure>
</div>
<p>Add different <code>Dimensions</code> to the colours pane to see what happens:</p>
<ul>
<li>add <code>Name</code> - ignore the warning and press <code>Add all members</code> :</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/b7779982-9040-4973-a2ef-98086e466e6c.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">global_sales_colour_name.JPG</figcaption><p></p>
</figure>
</div>
<ul>
<li>replace <code>Name</code> with <code>Release Year</code> by dragging it on top :</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/abe31156-15e4-4c04-af61-99166e8fca39.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">global_sales_colour_release_year.JPG</figcaption><p></p>
</figure>
</div>
<ul>
<li>replace <code>Release Year</code> with <code>Genre</code> by dragging it on top :</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/c0cc2b3a-1c1a-4d9d-a274-a082caf9544f.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">global_sales_colour_genre.JPG</figcaption><p></p>
</figure>
</div>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-29-contents" aria-controls="callout-29" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Out of the 3 dimensions (name, release year, genre) we dragged to colour, which one was the most useful ?
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-29" class="callout-29-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Genre.</p>
</div>
</div>
</div>
<p>Genre is the only option that adds extra information to the graph and is thus the most useful.</p>
</section>
</section>
<section id="dashboards-and-stories" class="level3">
<h3 class="anchored" data-anchor-id="dashboards-and-stories">4.3 Dashboards and stories</h3>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/dcd52efa-d142-4c82-b646-13df74c4618e.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">dashboard.JPG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/3a686ab5-0adb-41ca-b5af-4a8e96acee6d.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">dashboards.JPG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/92473ee2-ade6-4957-9244-b062dc231538.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">stories.JPG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/2fb1d6cc-1e75-4b2a-8958-24b6e24e5998.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">story_1.JPG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/73099f5c-5942-4571-80f0-efa42691c152.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">story_2.JPG</figcaption><p></p>
</figure>
</div>
<section id="worksheet-vs.-dashboard-vs.-story" class="level4">
<h4 class="anchored" data-anchor-id="worksheet-vs.-dashboard-vs.-story">4.3.1 Worksheet vs.&nbsp;dashboard vs.&nbsp;story</h4>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/56bca8d2-be7f-4cff-bbb4-47090e12aace.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">worksheet_dashboard_story.JPG</figcaption><p></p>
</figure>
</div>
</section>
</section>
<section id="creating-dashboards-and-stories" class="level3">
<h3 class="anchored" data-anchor-id="creating-dashboards-and-stories">4.4 Creating dashboards and stories</h3>
<p>We have been asked to investigate how Playstation video game sales developed over time, which platform was the most popular, and which were its most popular games and genres. Let’s create a dashboard to answer these questions.</p>
<section id="building-a-dashboard" class="level4">
<h4 class="anchored" data-anchor-id="building-a-dashboard">4.4.1 Building a dashboard</h4>
<p>Load the WorkBook <code>4_4_first_dashboard.twbx</code> and navigate to the empty dashboard <code>Playstation Overview 1994 - 2010</code>.</p>
<p>Make <code>Platform analysis over time</code> visible on the dashboard, make the legend floating, and add the other three sheets so they appear in a 2 x 2 grid clockwise, like so:</p>
<p>[Platform Analysis over Time] [Sales by Platform]</p>
<p>[Top Video Games] [Sales by Genre]</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/d555f181-e834-4d25-90dc-81b5f5eb9f94.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">playstation_dashboard.JPG</figcaption><p></p>
</figure>
</div>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-30-contents" aria-controls="callout-30" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
What is the genre of <code>GTA San Andreas</code>, the top selling Playstation game? Is it equal to the most popular Playstation genre?
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-30" class="callout-30-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Action. Yes.</p>
</div>
</div>
</div>
</section>
<section id="filters-and-dashboards" class="level4">
<h4 class="anchored" data-anchor-id="filters-and-dashboards">4.4.2 Filters and dashboards</h4>
<p>The dashboard is a great start but what if we are only interested in games from a specific publisher (like “Sony Entertainment”) for a particular game? Let’s make this possible by adding a <code>Publisher</code> filter and enabling the <code>Treemap</code> to function as a genre filter.</p>
<p>Display the dashboard title, centre it and change the font size to 20 :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/b1159be1-8b7c-48ae-b113-100d22e21cf7.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">playstation_dashboard_title.JPG</figcaption><p></p>
</figure>
</div>
<p>Add a <code>Publisher</code> filter, click on any graph and click on <code>Analysis</code> in the toolbar, navigate to <code>Filters</code> in the dropdown menu and select <code>Publisher</code> :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/4ed0882d-fcde-4be7-ace6-9f4c7de1d28b.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">playstation_dashboard_filter.JPG</figcaption><p></p>
</figure>
</div>
<p>Change the filter style to <code>Single Value (dropdown)</code> and drag the filter below the title without making it floating :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/1597bdea-c384-4c9d-b9a9-1589aa81afeb.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">playstation_dashboard_filter_edit.JPG</figcaption><p></p>
</figure>
</div>
<p>Enable the option to use the <code>Treemap</code> as a filter. Note that the graph on the TOP RIGHT changes depending on how you select your filter(s) e.g.&nbsp;select the genre by clicking on <code>Racing</code> on the <em>Treemap</em> chart in the bottom right, and select <code>Sony Computer Entertainment</code> from the dropdown <em>Publisher</em> filter under the title :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/26b1e2a5-9898-4226-99ca-17f000fe561b.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">playstation_dashboard_racing.JPG</figcaption><p></p>
</figure>
</div>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-31-contents" aria-controls="callout-31" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
How many video game units (millions) did Sony Computer Entertainment sell for the PS2 in the <code>Racing</code> genre?
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-31" class="callout-31-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>35.41.</p>
</div>
</div>
</div>
<p>Sopny Computer Entertainment sold 35.41 million units thanks to its success with the Gran Turismo series.</p>
</section>
<section id="creating-and-navigating-a-story" class="level4">
<h4 class="anchored" data-anchor-id="creating-and-navigating-a-story">4.4.3 Creating and navigating a story</h4>
<p>Load the WorkBook <code>4_6_first_story</code> and create a new story named <code>Competitor Analysis 1994 - 2010</code>. Centre the story’s title :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/eca20a96-039a-4e36-92cf-231dd59654d3.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">story.JPG</figcaption><p></p>
</figure>
</div>
<p>Add the <code>Playstation</code>, <code>Nintendo</code>, and <code>Xbox</code> dashboards to the story. Rename the captions accordingly :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/9c3148a1-77ea-4ca2-8ca4-6cc363c5916e.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">story_ps_nintendo_xbox.JPG</figcaption><p></p>
</figure>
</div>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
The best selling <code>Shooter</code> on both the Playstation(PS) and the Xbox was <code>Call of Duty:Black Ops</code>. On which platform did it have the highest sales? <code>Playstation</code> or <code>Xbox</code> ?
</div>
</div>
<div class="callout-body-container callout-body">

</div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/0adaf277-1319-4f56-b92b-bcfd38fc80df.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">shooter_playstation.JPG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/b9cf941d-5c0a-49b6-9751-8007398ba4fd.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">shooter_xbox.JPG</figcaption><p></p>
</figure>
</div>
<p>The Playstation version of Call of Duty: Black Ops shifted 39.33 million units. The Xbox version sold 62.13 million.</p>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
What was the name of the best-selling Playstation 2 (PS2) game published by <code>Electronic Arts</code> in the <code>Simulation</code> genre ?
</div>
</div>
<div class="callout-body-container callout-body">

</div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Tableau/Tableau_files/figure-html/a7ecdcd5-05bc-4bb2-b46c-1040f909c4d5.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">ps2_simulation_ea.JPG</figcaption><p></p>
</figure>
</div>
<p>The best selling <code>Simulation</code> genre game on the Playstation 2 (PS2) published by <code>Electronic Arts</code> was <code>The Sims</code> with sales of 2.77 million units globally.</p>
</section>
</section>
</section>
<section id="key-takeaways-and-acknowledgements" class="level2">
<h2 class="anchored" data-anchor-id="key-takeaways-and-acknowledgements">Key Takeaways and Acknowledgements</h2>
<p>Thanks to <a href="https://www.datacamp.com/instructors/maartenvdbroeck">Maarten Van den Broeck</a>, <a href="https://www.datacamp.com/instructors/lis-sulmont">Lis Sulmont</a>, <a href="https://www.datacamp.com/instructors/sara-billen">Sara Billen</a>, and <a href="https://www.datacamp.com/instructors/carlrosseel-73112126-9ed2-4866-942a-96fbf265b088">Carl Rosseel</a> for introducing me to Tableau.</p>
<section id="section-1" class="level3">
<h3 class="anchored" data-anchor-id="section-1">Section 1</h3>
<ul>
<li>load data and workbooks and how to navigate the Tableau interface</li>
<li>build visualizations using stacked bar charts</li>
</ul>
</section>
<section id="section-2" class="level3">
<h3 class="anchored" data-anchor-id="section-2">Section 2</h3>
<ul>
<li>sliced, diced, and ordered data using sorting and filtering, and aggregation</li>
<li>created new columns from existing info (calculated fields)</li>
</ul>
</section>
<section id="section-3" class="level3">
<h3 class="anchored" data-anchor-id="section-3">Section 3</h3>
<ul>
<li>mapped geographical data</li>
<li>worked with dates</li>
<li>enhanced visualisations using reference lines, trend lines, and forecasting</li>
</ul>
</section>
<section id="section-4" class="level3">
<h3 class="anchored" data-anchor-id="section-4">Section 4</h3>
<ul>
<li>how to improve and format our visualizations</li>
<li>convey findings with Dashboards and Stories</li>
</ul>


</section>
</section>

 ]]></description>
  <category>Tableau</category>
  <category>DataCamp</category>
  <guid>https://stephen137.github.io/posts/Tableau/Tableau.html</guid>
  <pubDate>Mon, 06 Feb 2023 23:00:00 GMT</pubDate>
  <media:content url="https://stephen137.github.io/posts/Tableau/blank_canvass.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Credit Risk Modeling in Python</title>
  <dc:creator>Stephen Barrie</dc:creator>
  <link>https://stephen137.github.io/posts/Credit Risk Modelling in Python/Credit_Risk_Modelling.html</link>
  <description><![CDATA[ 




<p>If you’ve ever applied for a credit card or loan, you know that financial firms process your information before making a decision. This is because giving you a loan can have a serious financial impact on their business. But how do they make a decision? In this blog, we will learn how to prepare credit application data. After that, we will apply machine learning and business rules to reduce risk and ensure profitability. We will use two data sets that emulate real credit applications while focusing on business value.</p>
<section id="exploring-and-preparing-loan-data" class="level2">
<h2 class="anchored" data-anchor-id="exploring-and-preparing-loan-data">1. Exploring and Preparing Loan Data</h2>
<p>In this first section, we will discuss the concept of credit risk and define how it is calculated. Using cross tables and plots, we will explore a real-world data set. Before applying machine learning, we will process this data by finding and resolving problems.</p>
<section id="explore-the-credit-data" class="level3">
<h3 class="anchored" data-anchor-id="explore-the-credit-data">1.1 Explore the credit data</h3>
<p>Well begin by loading in the dataset <code>cr_loan</code>.</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># import required packages</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb1-4"><span class="im" style="color: #00769E;">import</span> matplotlib.colors</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;"># load in our dataset</span></span>
<span id="cb1-7">cr_loan <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(<span class="st" style="color: #20794D;">'Data/cr_loan2.csv'</span>)</span>
<span id="cb1-8">cr_loan</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="1">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>person_age</th>
      <th>person_income</th>
      <th>person_home_ownership</th>
      <th>person_emp_length</th>
      <th>loan_intent</th>
      <th>loan_grade</th>
      <th>loan_amnt</th>
      <th>loan_int_rate</th>
      <th>loan_status</th>
      <th>loan_percent_income</th>
      <th>cb_person_default_on_file</th>
      <th>cb_person_cred_hist_length</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>22</td>
      <td>59000</td>
      <td>RENT</td>
      <td>123.0</td>
      <td>PERSONAL</td>
      <td>D</td>
      <td>35000</td>
      <td>16.02</td>
      <td>1</td>
      <td>0.59</td>
      <td>Y</td>
      <td>3</td>
    </tr>
    <tr>
      <th>1</th>
      <td>21</td>
      <td>9600</td>
      <td>OWN</td>
      <td>5.0</td>
      <td>EDUCATION</td>
      <td>B</td>
      <td>1000</td>
      <td>11.14</td>
      <td>0</td>
      <td>0.10</td>
      <td>N</td>
      <td>2</td>
    </tr>
    <tr>
      <th>2</th>
      <td>25</td>
      <td>9600</td>
      <td>MORTGAGE</td>
      <td>1.0</td>
      <td>MEDICAL</td>
      <td>C</td>
      <td>5500</td>
      <td>12.87</td>
      <td>1</td>
      <td>0.57</td>
      <td>N</td>
      <td>3</td>
    </tr>
    <tr>
      <th>3</th>
      <td>23</td>
      <td>65500</td>
      <td>RENT</td>
      <td>4.0</td>
      <td>MEDICAL</td>
      <td>C</td>
      <td>35000</td>
      <td>15.23</td>
      <td>1</td>
      <td>0.53</td>
      <td>N</td>
      <td>2</td>
    </tr>
    <tr>
      <th>4</th>
      <td>24</td>
      <td>54400</td>
      <td>RENT</td>
      <td>8.0</td>
      <td>MEDICAL</td>
      <td>C</td>
      <td>35000</td>
      <td>14.27</td>
      <td>1</td>
      <td>0.55</td>
      <td>Y</td>
      <td>4</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>32576</th>
      <td>57</td>
      <td>53000</td>
      <td>MORTGAGE</td>
      <td>1.0</td>
      <td>PERSONAL</td>
      <td>C</td>
      <td>5800</td>
      <td>13.16</td>
      <td>0</td>
      <td>0.11</td>
      <td>N</td>
      <td>30</td>
    </tr>
    <tr>
      <th>32577</th>
      <td>54</td>
      <td>120000</td>
      <td>MORTGAGE</td>
      <td>4.0</td>
      <td>PERSONAL</td>
      <td>A</td>
      <td>17625</td>
      <td>7.49</td>
      <td>0</td>
      <td>0.15</td>
      <td>N</td>
      <td>19</td>
    </tr>
    <tr>
      <th>32578</th>
      <td>65</td>
      <td>76000</td>
      <td>RENT</td>
      <td>3.0</td>
      <td>HOMEIMPROVEMENT</td>
      <td>B</td>
      <td>35000</td>
      <td>10.99</td>
      <td>1</td>
      <td>0.46</td>
      <td>N</td>
      <td>28</td>
    </tr>
    <tr>
      <th>32579</th>
      <td>56</td>
      <td>150000</td>
      <td>MORTGAGE</td>
      <td>5.0</td>
      <td>PERSONAL</td>
      <td>B</td>
      <td>15000</td>
      <td>11.48</td>
      <td>0</td>
      <td>0.10</td>
      <td>N</td>
      <td>26</td>
    </tr>
    <tr>
      <th>32580</th>
      <td>66</td>
      <td>42000</td>
      <td>RENT</td>
      <td>2.0</td>
      <td>MEDICAL</td>
      <td>B</td>
      <td>6475</td>
      <td>9.99</td>
      <td>0</td>
      <td>0.15</td>
      <td>N</td>
      <td>30</td>
    </tr>
  </tbody>
</table>
<p>32581 rows × 12 columns</p>
</div>
</div>
</div>
<p>In this data set, <code>loan_status</code> shows whether the loan is currently in default with 1 being default and 0 being non-default.</p>
<p>We have eleven other columns within the data, and many could have a relationship with the values in <code>loan_status</code>. We will explore the data and these relationships more with further analysis to understand the impact of the data on credit loan defaults.</p>
<p>Checking the structure of the data as well as seeing a snapshot helps us better understand what’s inside the set. Let’s check what type of data we are dealing with here and then look at the first five rows:</p>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># Check the structure of the data</span></span>
<span id="cb2-2">cr_loan.dtypes</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>person_age                      int64
person_income                   int64
person_home_ownership          object
person_emp_length             float64
loan_intent                    object
loan_grade                     object
loan_amnt                       int64
loan_int_rate                 float64
loan_status                     int64
loan_percent_income           float64
cb_person_default_on_file      object
cb_person_cred_hist_length      int64
dtype: object</code></pre>
</div>
</div>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;"># Check the first five rows of the data</span></span>
<span id="cb4-2">cr_loan.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>person_age</th>
      <th>person_income</th>
      <th>person_home_ownership</th>
      <th>person_emp_length</th>
      <th>loan_intent</th>
      <th>loan_grade</th>
      <th>loan_amnt</th>
      <th>loan_int_rate</th>
      <th>loan_status</th>
      <th>loan_percent_income</th>
      <th>cb_person_default_on_file</th>
      <th>cb_person_cred_hist_length</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>22</td>
      <td>59000</td>
      <td>RENT</td>
      <td>123.0</td>
      <td>PERSONAL</td>
      <td>D</td>
      <td>35000</td>
      <td>16.02</td>
      <td>1</td>
      <td>0.59</td>
      <td>Y</td>
      <td>3</td>
    </tr>
    <tr>
      <th>1</th>
      <td>21</td>
      <td>9600</td>
      <td>OWN</td>
      <td>5.0</td>
      <td>EDUCATION</td>
      <td>B</td>
      <td>1000</td>
      <td>11.14</td>
      <td>0</td>
      <td>0.10</td>
      <td>N</td>
      <td>2</td>
    </tr>
    <tr>
      <th>2</th>
      <td>25</td>
      <td>9600</td>
      <td>MORTGAGE</td>
      <td>1.0</td>
      <td>MEDICAL</td>
      <td>C</td>
      <td>5500</td>
      <td>12.87</td>
      <td>1</td>
      <td>0.57</td>
      <td>N</td>
      <td>3</td>
    </tr>
    <tr>
      <th>3</th>
      <td>23</td>
      <td>65500</td>
      <td>RENT</td>
      <td>4.0</td>
      <td>MEDICAL</td>
      <td>C</td>
      <td>35000</td>
      <td>15.23</td>
      <td>1</td>
      <td>0.53</td>
      <td>N</td>
      <td>2</td>
    </tr>
    <tr>
      <th>4</th>
      <td>24</td>
      <td>54400</td>
      <td>RENT</td>
      <td>8.0</td>
      <td>MEDICAL</td>
      <td>C</td>
      <td>35000</td>
      <td>14.27</td>
      <td>1</td>
      <td>0.55</td>
      <td>Y</td>
      <td>4</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;"># get an overview of the numeric columns</span></span>
<span id="cb5-2">cr_loan.describe()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>person_age</th>
      <th>person_income</th>
      <th>person_emp_length</th>
      <th>loan_amnt</th>
      <th>loan_int_rate</th>
      <th>loan_status</th>
      <th>loan_percent_income</th>
      <th>cb_person_cred_hist_length</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>count</th>
      <td>32581.000000</td>
      <td>3.258100e+04</td>
      <td>31686.000000</td>
      <td>32581.000000</td>
      <td>29465.000000</td>
      <td>32581.000000</td>
      <td>32581.000000</td>
      <td>32581.000000</td>
    </tr>
    <tr>
      <th>mean</th>
      <td>27.734600</td>
      <td>6.607485e+04</td>
      <td>4.789686</td>
      <td>9589.371106</td>
      <td>11.011695</td>
      <td>0.218164</td>
      <td>0.170203</td>
      <td>5.804211</td>
    </tr>
    <tr>
      <th>std</th>
      <td>6.348078</td>
      <td>6.198312e+04</td>
      <td>4.142630</td>
      <td>6322.086646</td>
      <td>3.240459</td>
      <td>0.413006</td>
      <td>0.106782</td>
      <td>4.055001</td>
    </tr>
    <tr>
      <th>min</th>
      <td>20.000000</td>
      <td>4.000000e+03</td>
      <td>0.000000</td>
      <td>500.000000</td>
      <td>5.420000</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>2.000000</td>
    </tr>
    <tr>
      <th>25%</th>
      <td>23.000000</td>
      <td>3.850000e+04</td>
      <td>2.000000</td>
      <td>5000.000000</td>
      <td>7.900000</td>
      <td>0.000000</td>
      <td>0.090000</td>
      <td>3.000000</td>
    </tr>
    <tr>
      <th>50%</th>
      <td>26.000000</td>
      <td>5.500000e+04</td>
      <td>4.000000</td>
      <td>8000.000000</td>
      <td>10.990000</td>
      <td>0.000000</td>
      <td>0.150000</td>
      <td>4.000000</td>
    </tr>
    <tr>
      <th>75%</th>
      <td>30.000000</td>
      <td>7.920000e+04</td>
      <td>7.000000</td>
      <td>12200.000000</td>
      <td>13.470000</td>
      <td>0.000000</td>
      <td>0.230000</td>
      <td>8.000000</td>
    </tr>
    <tr>
      <th>max</th>
      <td>144.000000</td>
      <td>6.000000e+06</td>
      <td>123.000000</td>
      <td>35000.000000</td>
      <td>23.220000</td>
      <td>1.000000</td>
      <td>0.830000</td>
      <td>30.000000</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;"># get an overview of the numeric columns</span></span>
<span id="cb6-2">cr_loan.describe(include<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'object'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>person_home_ownership</th>
      <th>loan_intent</th>
      <th>loan_grade</th>
      <th>cb_person_default_on_file</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>count</th>
      <td>32581</td>
      <td>32581</td>
      <td>32581</td>
      <td>32581</td>
    </tr>
    <tr>
      <th>unique</th>
      <td>4</td>
      <td>6</td>
      <td>7</td>
      <td>2</td>
    </tr>
    <tr>
      <th>top</th>
      <td>RENT</td>
      <td>EDUCATION</td>
      <td>A</td>
      <td>N</td>
    </tr>
    <tr>
      <th>freq</th>
      <td>16446</td>
      <td>6453</td>
      <td>10777</td>
      <td>26836</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>Similarly, visualizations provide a high level view of the data in addition to important trends and patterns. Let’s plot a histogram of <code>loan_amt</code> which will provide us with a visual of the distribution of loan amounts.</p>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;"># Look at the distribution of loan amounts with a histogram</span></span>
<span id="cb7-2">n, bins, patches <span class="op" style="color: #5E5E5E;">=</span> plt.hist(x<span class="op" style="color: #5E5E5E;">=</span>cr_loan[<span class="st" style="color: #20794D;">'loan_amnt'</span>], bins<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'auto'</span>, color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'blue'</span>,alpha<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.7</span>, rwidth<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.85</span>)</span>
<span id="cb7-3">plt.xlabel(<span class="st" style="color: #20794D;">"Loan Amount"</span>)</span>
<span id="cb7-4">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Credit Risk Modelling in Python/Credit_Risk_Modelling_files/figure-html/cell-7-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>Let’s investigate the relationship between income and age, by creating a scatter plot. In this case, <code>income</code> is the <code>independent</code> variable and <code>age</code> is the <code>dependent</code> variable.</p>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"There are over 32 000 rows of data so the scatter plot may take a little while to plot."</span>)</span>
<span id="cb8-2"></span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;"># Plot a scatter plot of income against age</span></span>
<span id="cb8-4">plt.scatter(cr_loan[<span class="st" style="color: #20794D;">'person_income'</span>], cr_loan[<span class="st" style="color: #20794D;">'person_age'</span>],c<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'blue'</span>, alpha<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.5</span>)</span>
<span id="cb8-5">plt.xlabel(<span class="st" style="color: #20794D;">'Personal Income'</span>)</span>
<span id="cb8-6">plt.ylabel(<span class="st" style="color: #20794D;">'Person Age'</span>)</span>
<span id="cb8-7">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>There are over 32 000 rows of data so the scatter plot may take a little while to plot.</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Credit Risk Modelling in Python/Credit_Risk_Modelling_files/figure-html/cell-8-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>Starting with data exploration helps us keep from getting <em>a.head()</em> of ourselves! We can already see a positive correlation with age and income, which could mean these older recipients are further along in their career and therefore earn higher salaries. There also appears to be an outlier in the data.</p>
</section>
<section id="crosstab-and-pivot-tables" class="level3">
<h3 class="anchored" data-anchor-id="crosstab-and-pivot-tables">1.2 Crosstab and pivot tables</h3>
<p>Often, financial data is viewed as a pivot table in spreadsheets like Excel. With <code>cross tables</code>, we can get a high level view of selected columns and even aggregation like a count or average. For most credit risk models, especially for probability of default, columns like <code>person_emp_length</code> and <code>person_home_ownership</code> are common to begin investigating.</p>
<p>We will be able to see how the values are populated throughout the data, and visualize them. For now, we need to check how <code>loan_status</code> is affected by factors like home ownership status, loan grade, and loan percentage of income.</p>
<p>Let’s dive in, and create a cross table of <code>loan_intent</code> and <code>loan_status</code> :</p>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;"># Create a cross table of the loan intent and loan status</span></span>
<span id="cb10-2">pd.crosstab(cr_loan[<span class="st" style="color: #20794D;">'loan_intent'</span>], cr_loan[<span class="st" style="color: #20794D;">'loan_status'</span>], margins <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th>loan_status</th>
      <th>0</th>
      <th>1</th>
      <th>All</th>
    </tr>
    <tr>
      <th>loan_intent</th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>DEBTCONSOLIDATION</th>
      <td>3722</td>
      <td>1490</td>
      <td>5212</td>
    </tr>
    <tr>
      <th>EDUCATION</th>
      <td>5342</td>
      <td>1111</td>
      <td>6453</td>
    </tr>
    <tr>
      <th>HOMEIMPROVEMENT</th>
      <td>2664</td>
      <td>941</td>
      <td>3605</td>
    </tr>
    <tr>
      <th>MEDICAL</th>
      <td>4450</td>
      <td>1621</td>
      <td>6071</td>
    </tr>
    <tr>
      <th>PERSONAL</th>
      <td>4423</td>
      <td>1098</td>
      <td>5521</td>
    </tr>
    <tr>
      <th>VENTURE</th>
      <td>4872</td>
      <td>847</td>
      <td>5719</td>
    </tr>
    <tr>
      <th>All</th>
      <td>25473</td>
      <td>7108</td>
      <td>32581</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>So, the largest number of loan defaults <code>1,621</code> happen when the reason for the loan was to cover medical expenses. That is perhaps not surprising - in some cases the medical conditon might mean that the loan customer is unable to work and therefore might struggle to keep up with the loan repayments.</p>
<p>Let’s now look at home ownership grouped by <code>loan_status</code> and <code>loan_grade</code> :</p>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;"># Create a cross table of home ownership, loan status, and grade</span></span>
<span id="cb11-2">pd.crosstab(cr_loan[<span class="st" style="color: #20794D;">'person_home_ownership'</span>],[cr_loan[<span class="st" style="color: #20794D;">'loan_status'</span>],cr_loan[<span class="st" style="color: #20794D;">'loan_grade'</span>]])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th>loan_status</th>
      <th colspan="7" halign="left">0</th>
      <th colspan="7" halign="left">1</th>
    </tr>
    <tr>
      <th>loan_grade</th>
      <th>A</th>
      <th>B</th>
      <th>C</th>
      <th>D</th>
      <th>E</th>
      <th>F</th>
      <th>G</th>
      <th>A</th>
      <th>B</th>
      <th>C</th>
      <th>D</th>
      <th>E</th>
      <th>F</th>
      <th>G</th>
    </tr>
    <tr>
      <th>person_home_ownership</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>MORTGAGE</th>
      <td>5219</td>
      <td>3729</td>
      <td>1934</td>
      <td>658</td>
      <td>178</td>
      <td>36</td>
      <td>0</td>
      <td>239</td>
      <td>324</td>
      <td>321</td>
      <td>553</td>
      <td>161</td>
      <td>61</td>
      <td>31</td>
    </tr>
    <tr>
      <th>OTHER</th>
      <td>23</td>
      <td>29</td>
      <td>11</td>
      <td>9</td>
      <td>2</td>
      <td>0</td>
      <td>0</td>
      <td>3</td>
      <td>5</td>
      <td>6</td>
      <td>11</td>
      <td>6</td>
      <td>2</td>
      <td>0</td>
    </tr>
    <tr>
      <th>OWN</th>
      <td>860</td>
      <td>770</td>
      <td>464</td>
      <td>264</td>
      <td>26</td>
      <td>7</td>
      <td>0</td>
      <td>66</td>
      <td>34</td>
      <td>31</td>
      <td>18</td>
      <td>31</td>
      <td>8</td>
      <td>5</td>
    </tr>
    <tr>
      <th>RENT</th>
      <td>3602</td>
      <td>4222</td>
      <td>2710</td>
      <td>554</td>
      <td>137</td>
      <td>28</td>
      <td>1</td>
      <td>765</td>
      <td>1338</td>
      <td>981</td>
      <td>1559</td>
      <td>423</td>
      <td>99</td>
      <td>27</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>So the largest amount of loan defaults <code>1,559</code> happen where the customer is a renter, and has taken out a loan grade <code>D</code>. We don’t know what these gradings mean and should find out more to aid our understanding.</p>
<p>Let’s now look at home ownership grouped by <code>loan_status</code> and average <code>loan_percent_income</code> :</p>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;"># Create a cross table of home ownership, loan status, and average percent income</span></span>
<span id="cb12-2">pd.crosstab(cr_loan[<span class="st" style="color: #20794D;">'person_home_ownership'</span>], cr_loan[<span class="st" style="color: #20794D;">'loan_status'</span>],</span>
<span id="cb12-3">              values<span class="op" style="color: #5E5E5E;">=</span>cr_loan[<span class="st" style="color: #20794D;">'loan_percent_income'</span>], aggfunc<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'mean'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th>loan_status</th>
      <th>0</th>
      <th>1</th>
    </tr>
    <tr>
      <th>person_home_ownership</th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>MORTGAGE</th>
      <td>0.146504</td>
      <td>0.184882</td>
    </tr>
    <tr>
      <th>OTHER</th>
      <td>0.143784</td>
      <td>0.300000</td>
    </tr>
    <tr>
      <th>OWN</th>
      <td>0.180013</td>
      <td>0.297358</td>
    </tr>
    <tr>
      <th>RENT</th>
      <td>0.144611</td>
      <td>0.264859</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>Let’s now create a <code>boxplot</code> of the loan’s percent of the person’s income grouped by <code>loan_status</code> :</p>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;"># Create a box plot of percentage income by loan status</span></span>
<span id="cb13-2">cr_loan.boxplot(column <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'loan_percent_income'</span>], by <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'loan_status'</span>)</span>
<span id="cb13-3">plt.title(<span class="st" style="color: #20794D;">'Average Percent Income by Loan Status'</span>)</span>
<span id="cb13-4">plt.suptitle(<span class="st" style="color: #20794D;">''</span>)</span>
<span id="cb13-5">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Credit Risk Modelling in Python/Credit_Risk_Modelling_files/figure-html/cell-12-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>It looks like the average percentage of income for defaults is higher. This could indicate those recipients have a debt-to-income ratio that’s already too high.</p>
</section>
<section id="finding-outliers-with-cross-tables" class="level3">
<h3 class="anchored" data-anchor-id="finding-outliers-with-cross-tables">1.3 Finding outliers with cross tables</h3>
<p>Now we need to find and remove outliers we suspect might be in the data. For this exercise, we can use cross tables and aggregate functions.</p>
<p>Have a look at the person_emp_length column. We used the aggfunc = <code>mean</code> argument to see the average of a numeric column before, but to detect outliers we can use other functions like <code>min</code> and <code>max</code>.</p>
<p>It may not be possible for a person to have an employment length of less than 0 or greater than 60. We can use cross tables to check the data and see if there are any instances of this!</p>
<p>Let’s print the cross table of <code>loan_status</code> and <code>person_home_ownership</code> with the <strong>max</strong> <code>person_emp_length</code> :</p>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;"># Create the cross table for loan status, home ownership, and the max employment length</span></span>
<span id="cb14-2">pd.crosstab(cr_loan[<span class="st" style="color: #20794D;">'loan_status'</span>],cr_loan[<span class="st" style="color: #20794D;">'person_home_ownership'</span>],</span>
<span id="cb14-3">        values<span class="op" style="color: #5E5E5E;">=</span>cr_loan[<span class="st" style="color: #20794D;">'person_emp_length'</span>], aggfunc<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'max'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th>person_home_ownership</th>
      <th>MORTGAGE</th>
      <th>OTHER</th>
      <th>OWN</th>
      <th>RENT</th>
    </tr>
    <tr>
      <th>loan_status</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>123.0</td>
      <td>24.0</td>
      <td>31.0</td>
      <td>41.0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>34.0</td>
      <td>11.0</td>
      <td>17.0</td>
      <td>123.0</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>Let’s now create an array of indices for records with an employment length greater than 60. Store it as indices.</p>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;"># Create an array of indices where employment length is greater than 60</span></span>
<span id="cb15-2">indices <span class="op" style="color: #5E5E5E;">=</span> cr_loan[cr_loan[<span class="st" style="color: #20794D;">'person_emp_length'</span>] <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">60</span>].index</span></code></pre></div>
</div>
<p>And then drop those records from the data :</p>
<div class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="co" style="color: #5E5E5E;"># Drop the records from the data based on the indices and create a new dataframe</span></span>
<span id="cb16-2">cr_loan <span class="op" style="color: #5E5E5E;">=</span> cr_loan.drop(indices)</span>
<span id="cb16-3">cr_loan</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>person_age</th>
      <th>person_income</th>
      <th>person_home_ownership</th>
      <th>person_emp_length</th>
      <th>loan_intent</th>
      <th>loan_grade</th>
      <th>loan_amnt</th>
      <th>loan_int_rate</th>
      <th>loan_status</th>
      <th>loan_percent_income</th>
      <th>cb_person_default_on_file</th>
      <th>cb_person_cred_hist_length</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1</th>
      <td>21</td>
      <td>9600</td>
      <td>OWN</td>
      <td>5.0</td>
      <td>EDUCATION</td>
      <td>B</td>
      <td>1000</td>
      <td>11.14</td>
      <td>0</td>
      <td>0.10</td>
      <td>N</td>
      <td>2</td>
    </tr>
    <tr>
      <th>2</th>
      <td>25</td>
      <td>9600</td>
      <td>MORTGAGE</td>
      <td>1.0</td>
      <td>MEDICAL</td>
      <td>C</td>
      <td>5500</td>
      <td>12.87</td>
      <td>1</td>
      <td>0.57</td>
      <td>N</td>
      <td>3</td>
    </tr>
    <tr>
      <th>3</th>
      <td>23</td>
      <td>65500</td>
      <td>RENT</td>
      <td>4.0</td>
      <td>MEDICAL</td>
      <td>C</td>
      <td>35000</td>
      <td>15.23</td>
      <td>1</td>
      <td>0.53</td>
      <td>N</td>
      <td>2</td>
    </tr>
    <tr>
      <th>4</th>
      <td>24</td>
      <td>54400</td>
      <td>RENT</td>
      <td>8.0</td>
      <td>MEDICAL</td>
      <td>C</td>
      <td>35000</td>
      <td>14.27</td>
      <td>1</td>
      <td>0.55</td>
      <td>Y</td>
      <td>4</td>
    </tr>
    <tr>
      <th>5</th>
      <td>21</td>
      <td>9900</td>
      <td>OWN</td>
      <td>2.0</td>
      <td>VENTURE</td>
      <td>A</td>
      <td>2500</td>
      <td>7.14</td>
      <td>1</td>
      <td>0.25</td>
      <td>N</td>
      <td>2</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>32576</th>
      <td>57</td>
      <td>53000</td>
      <td>MORTGAGE</td>
      <td>1.0</td>
      <td>PERSONAL</td>
      <td>C</td>
      <td>5800</td>
      <td>13.16</td>
      <td>0</td>
      <td>0.11</td>
      <td>N</td>
      <td>30</td>
    </tr>
    <tr>
      <th>32577</th>
      <td>54</td>
      <td>120000</td>
      <td>MORTGAGE</td>
      <td>4.0</td>
      <td>PERSONAL</td>
      <td>A</td>
      <td>17625</td>
      <td>7.49</td>
      <td>0</td>
      <td>0.15</td>
      <td>N</td>
      <td>19</td>
    </tr>
    <tr>
      <th>32578</th>
      <td>65</td>
      <td>76000</td>
      <td>RENT</td>
      <td>3.0</td>
      <td>HOMEIMPROVEMENT</td>
      <td>B</td>
      <td>35000</td>
      <td>10.99</td>
      <td>1</td>
      <td>0.46</td>
      <td>N</td>
      <td>28</td>
    </tr>
    <tr>
      <th>32579</th>
      <td>56</td>
      <td>150000</td>
      <td>MORTGAGE</td>
      <td>5.0</td>
      <td>PERSONAL</td>
      <td>B</td>
      <td>15000</td>
      <td>11.48</td>
      <td>0</td>
      <td>0.10</td>
      <td>N</td>
      <td>26</td>
    </tr>
    <tr>
      <th>32580</th>
      <td>66</td>
      <td>42000</td>
      <td>RENT</td>
      <td>2.0</td>
      <td>MEDICAL</td>
      <td>B</td>
      <td>6475</td>
      <td>9.99</td>
      <td>0</td>
      <td>0.15</td>
      <td>N</td>
      <td>30</td>
    </tr>
  </tbody>
</table>
<p>32579 rows × 12 columns</p>
</div>
</div>
</div>
<p>We now have 32,759 rows - two have been removed following our removal of records with an employment length greater than 60.</p>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;"># Create the cross table from earlier and include minimum employment length</span></span>
<span id="cb17-2">pd.crosstab(cr_loan[<span class="st" style="color: #20794D;">'loan_status'</span>],cr_loan[<span class="st" style="color: #20794D;">'person_home_ownership'</span>],</span>
<span id="cb17-3">            values<span class="op" style="color: #5E5E5E;">=</span>cr_loan[<span class="st" style="color: #20794D;">'person_emp_length'</span>], aggfunc<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'min'</span>,<span class="st" style="color: #20794D;">'max'</span>])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th colspan="4" halign="left">min</th>
      <th colspan="4" halign="left">max</th>
    </tr>
    <tr>
      <th>person_home_ownership</th>
      <th>MORTGAGE</th>
      <th>OTHER</th>
      <th>OWN</th>
      <th>RENT</th>
      <th>MORTGAGE</th>
      <th>OTHER</th>
      <th>OWN</th>
      <th>RENT</th>
    </tr>
    <tr>
      <th>loan_status</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>38.0</td>
      <td>24.0</td>
      <td>31.0</td>
      <td>41.0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>34.0</td>
      <td>11.0</td>
      <td>17.0</td>
      <td>27.0</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>Generally with credit data, key columns like <code>person_emp_length</code> are of high quality, but there is always room for error. With this in mind, we build our intuition for detecting outliers!</p>
</section>
<section id="visualizing-credit-outliers" class="level3">
<h3 class="anchored" data-anchor-id="visualizing-credit-outliers">1.4 Visualizing credit outliers</h3>
<p>We discovered outliers in <code>person_emp_length</code> where values greater than 60 were far above the norm. <code>person_age</code> is another column in which a person can use a common sense approach to say it is very unlikely that a person applying for a loan will be over 100 years old.</p>
<p>Visualizing the data here can be another easy way to detect outliers. We can use other numeric columns like <code>loan_amnt</code> and <code>loan_int_rate</code> to create plots with <code>person_age</code> to search for outliers.</p>
<p>Let’s create a scatter plot of <code>person_age</code> on the x-axis and <code>loan_amnt</code> on the y-axis :</p>
<div class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;"># Create the scatter plot for age and amount</span></span>
<span id="cb18-2">plt.scatter(cr_loan[<span class="st" style="color: #20794D;">'person_age'</span>], cr_loan[<span class="st" style="color: #20794D;">'loan_amnt'</span>], c<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'blue'</span>, alpha<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.5</span>)</span>
<span id="cb18-3">plt.xlabel(<span class="st" style="color: #20794D;">"Person Age"</span>)</span>
<span id="cb18-4">plt.ylabel(<span class="st" style="color: #20794D;">"Loan Amount"</span>)</span>
<span id="cb18-5">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Credit Risk Modelling in Python/Credit_Risk_Modelling_files/figure-html/cell-17-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>Let’s use the <code>.drop()</code> method from Pandas to remove the outliers :</p>
<div class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;"># Use Pandas to drop the record from the data frame and create a new one</span></span>
<span id="cb19-2">cr_loan <span class="op" style="color: #5E5E5E;">=</span> cr_loan.drop(cr_loan[cr_loan[<span class="st" style="color: #20794D;">'person_age'</span>] <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">100</span>].index)</span>
<span id="cb19-3">cr_loan</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="17">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>person_age</th>
      <th>person_income</th>
      <th>person_home_ownership</th>
      <th>person_emp_length</th>
      <th>loan_intent</th>
      <th>loan_grade</th>
      <th>loan_amnt</th>
      <th>loan_int_rate</th>
      <th>loan_status</th>
      <th>loan_percent_income</th>
      <th>cb_person_default_on_file</th>
      <th>cb_person_cred_hist_length</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1</th>
      <td>21</td>
      <td>9600</td>
      <td>OWN</td>
      <td>5.0</td>
      <td>EDUCATION</td>
      <td>B</td>
      <td>1000</td>
      <td>11.14</td>
      <td>0</td>
      <td>0.10</td>
      <td>N</td>
      <td>2</td>
    </tr>
    <tr>
      <th>2</th>
      <td>25</td>
      <td>9600</td>
      <td>MORTGAGE</td>
      <td>1.0</td>
      <td>MEDICAL</td>
      <td>C</td>
      <td>5500</td>
      <td>12.87</td>
      <td>1</td>
      <td>0.57</td>
      <td>N</td>
      <td>3</td>
    </tr>
    <tr>
      <th>3</th>
      <td>23</td>
      <td>65500</td>
      <td>RENT</td>
      <td>4.0</td>
      <td>MEDICAL</td>
      <td>C</td>
      <td>35000</td>
      <td>15.23</td>
      <td>1</td>
      <td>0.53</td>
      <td>N</td>
      <td>2</td>
    </tr>
    <tr>
      <th>4</th>
      <td>24</td>
      <td>54400</td>
      <td>RENT</td>
      <td>8.0</td>
      <td>MEDICAL</td>
      <td>C</td>
      <td>35000</td>
      <td>14.27</td>
      <td>1</td>
      <td>0.55</td>
      <td>Y</td>
      <td>4</td>
    </tr>
    <tr>
      <th>5</th>
      <td>21</td>
      <td>9900</td>
      <td>OWN</td>
      <td>2.0</td>
      <td>VENTURE</td>
      <td>A</td>
      <td>2500</td>
      <td>7.14</td>
      <td>1</td>
      <td>0.25</td>
      <td>N</td>
      <td>2</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>32576</th>
      <td>57</td>
      <td>53000</td>
      <td>MORTGAGE</td>
      <td>1.0</td>
      <td>PERSONAL</td>
      <td>C</td>
      <td>5800</td>
      <td>13.16</td>
      <td>0</td>
      <td>0.11</td>
      <td>N</td>
      <td>30</td>
    </tr>
    <tr>
      <th>32577</th>
      <td>54</td>
      <td>120000</td>
      <td>MORTGAGE</td>
      <td>4.0</td>
      <td>PERSONAL</td>
      <td>A</td>
      <td>17625</td>
      <td>7.49</td>
      <td>0</td>
      <td>0.15</td>
      <td>N</td>
      <td>19</td>
    </tr>
    <tr>
      <th>32578</th>
      <td>65</td>
      <td>76000</td>
      <td>RENT</td>
      <td>3.0</td>
      <td>HOMEIMPROVEMENT</td>
      <td>B</td>
      <td>35000</td>
      <td>10.99</td>
      <td>1</td>
      <td>0.46</td>
      <td>N</td>
      <td>28</td>
    </tr>
    <tr>
      <th>32579</th>
      <td>56</td>
      <td>150000</td>
      <td>MORTGAGE</td>
      <td>5.0</td>
      <td>PERSONAL</td>
      <td>B</td>
      <td>15000</td>
      <td>11.48</td>
      <td>0</td>
      <td>0.10</td>
      <td>N</td>
      <td>26</td>
    </tr>
    <tr>
      <th>32580</th>
      <td>66</td>
      <td>42000</td>
      <td>RENT</td>
      <td>2.0</td>
      <td>MEDICAL</td>
      <td>B</td>
      <td>6475</td>
      <td>9.99</td>
      <td>0</td>
      <td>0.15</td>
      <td>N</td>
      <td>30</td>
    </tr>
  </tbody>
</table>
<p>32574 rows × 12 columns</p>
</div>
</div>
</div>
<p>We now have 32,574 rows - a further five have been removed following our removal of records with an age greater than 100.</p>
<p>Then, let’s create a scatter plot of <code>person_age</code> on the x-axis and <code>loan_int_rate</code> on the y-axis with a label for <code>loan_status</code> :</p>
<div class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="co" style="color: #5E5E5E;"># Create a scatter plot of age and interest rate</span></span>
<span id="cb20-2">colors <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">"blue"</span>,<span class="st" style="color: #20794D;">"red"</span>] <span class="co" style="color: #5E5E5E;"># default is red</span></span>
<span id="cb20-3">plt.scatter(cr_loan[<span class="st" style="color: #20794D;">'person_age'</span>], cr_loan[<span class="st" style="color: #20794D;">'loan_int_rate'</span>],</span>
<span id="cb20-4">            c <span class="op" style="color: #5E5E5E;">=</span> cr_loan[<span class="st" style="color: #20794D;">'loan_status'</span>],</span>
<span id="cb20-5">            cmap <span class="op" style="color: #5E5E5E;">=</span> matplotlib.colors.ListedColormap(colors),</span>
<span id="cb20-6">            alpha<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.5</span>)</span>
<span id="cb20-7">plt.xlabel(<span class="st" style="color: #20794D;">"Person Age"</span>)</span>
<span id="cb20-8">plt.ylabel(<span class="st" style="color: #20794D;">"Loan Interest Rate"</span>)</span>
<span id="cb20-9">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Credit Risk Modelling in Python/Credit_Risk_Modelling_files/figure-html/cell-19-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>Notice that in the last plot we have <code>loan_status</code> as a label for colors. This shows a different color depending on the class (red for default). In this case, it’s loan default and non-default, and it looks like there are more defaults with high interest rates.</p>
</section>
<section id="replacing-missing-credit-data" class="level3">
<h3 class="anchored" data-anchor-id="replacing-missing-credit-data">1.5 Replacing missing credit data</h3>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Credit Risk Modelling in Python/Credit_Risk_Modelling_files/figure-html/ae76b6c7-d527-40d5-b186-e45591e905bd.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">missing_data.JPG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Credit Risk Modelling in Python/Credit_Risk_Modelling_files/figure-html/e6ef49f1-7d30-4031-972f-2c272ce91644.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">missing_data_perf.JPG</figcaption><p></p>
</figure>
</div>
<p>Now, we should check for missing data. If we find missing data within <code>loan_status</code>, we would not be able to use the data for predicting probability of default because we wouldn’t know if the loan was a default or not. Missing data within <code>person_emp_length</code> would not be as damaging, but would still cause training errors.</p>
<p>So, let’s check for missing data in the <code>person_emp_length</code> column and replace any missing values with the median.</p>
<div class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="co" style="color: #5E5E5E;"># Print a null value column array</span></span>
<span id="cb21-2">cr_loan.columns[cr_loan.isnull().<span class="bu" style="color: null;">any</span>()]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="19">
<pre><code>Index(['person_emp_length', 'loan_int_rate'], dtype='object')</code></pre>
</div>
</div>
<div class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="co" style="color: #5E5E5E;"># Print the top five rows with nulls for employment length</span></span>
<span id="cb23-2">cr_loan[cr_loan[<span class="st" style="color: #20794D;">'person_emp_length'</span>].isnull()].head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="20">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>person_age</th>
      <th>person_income</th>
      <th>person_home_ownership</th>
      <th>person_emp_length</th>
      <th>loan_intent</th>
      <th>loan_grade</th>
      <th>loan_amnt</th>
      <th>loan_int_rate</th>
      <th>loan_status</th>
      <th>loan_percent_income</th>
      <th>cb_person_default_on_file</th>
      <th>cb_person_cred_hist_length</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>105</th>
      <td>22</td>
      <td>12600</td>
      <td>MORTGAGE</td>
      <td>NaN</td>
      <td>PERSONAL</td>
      <td>A</td>
      <td>2000</td>
      <td>5.42</td>
      <td>1</td>
      <td>0.16</td>
      <td>N</td>
      <td>4</td>
    </tr>
    <tr>
      <th>222</th>
      <td>24</td>
      <td>185000</td>
      <td>MORTGAGE</td>
      <td>NaN</td>
      <td>EDUCATION</td>
      <td>B</td>
      <td>35000</td>
      <td>12.42</td>
      <td>0</td>
      <td>0.19</td>
      <td>N</td>
      <td>2</td>
    </tr>
    <tr>
      <th>379</th>
      <td>24</td>
      <td>16800</td>
      <td>MORTGAGE</td>
      <td>NaN</td>
      <td>DEBTCONSOLIDATION</td>
      <td>A</td>
      <td>3900</td>
      <td>NaN</td>
      <td>1</td>
      <td>0.23</td>
      <td>N</td>
      <td>3</td>
    </tr>
    <tr>
      <th>407</th>
      <td>25</td>
      <td>52000</td>
      <td>RENT</td>
      <td>NaN</td>
      <td>PERSONAL</td>
      <td>B</td>
      <td>24000</td>
      <td>10.74</td>
      <td>1</td>
      <td>0.46</td>
      <td>N</td>
      <td>2</td>
    </tr>
    <tr>
      <th>408</th>
      <td>22</td>
      <td>17352</td>
      <td>MORTGAGE</td>
      <td>NaN</td>
      <td>EDUCATION</td>
      <td>C</td>
      <td>2250</td>
      <td>15.27</td>
      <td>0</td>
      <td>0.13</td>
      <td>Y</td>
      <td>3</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="co" style="color: #5E5E5E;"># Impute the null values with the median value for all employment lengths</span></span>
<span id="cb24-2">cr_loan[<span class="st" style="color: #20794D;">'person_emp_length'</span>].fillna((cr_loan[<span class="st" style="color: #20794D;">'person_emp_length'</span>].median()), inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb24-3"></span>
<span id="cb24-4"><span class="co" style="color: #5E5E5E;"># Create a histogram of employment length</span></span>
<span id="cb24-5">n, bins, patches <span class="op" style="color: #5E5E5E;">=</span> plt.hist(cr_loan[<span class="st" style="color: #20794D;">'person_emp_length'</span>], bins<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'auto'</span>, color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'blue'</span>)</span>
<span id="cb24-6">plt.xlabel(<span class="st" style="color: #20794D;">"Person Employment Length"</span>)</span>
<span id="cb24-7">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Credit Risk Modelling in Python/Credit_Risk_Modelling_files/figure-html/cell-22-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>We can use several different functions like <code>mean()</code> and <code>median()</code> to replace missing data. The goal here is to keep as much of our data as we can! It’s also important to check the distribution of that feature to see if it changed.</p>
</section>
<section id="removing-missing-data" class="level3">
<h3 class="anchored" data-anchor-id="removing-missing-data">1.6 Removing missing data</h3>
<p>We replaced missing data in <code>person_emp_length</code>, but in the previous section we saw that <code>loan_int_rate</code> has missing data as well.</p>
<p>Similar to having missing data within <code>loan_status</code>, having missing data within <code>loan_int_rate</code> will make predictions difficult.</p>
<p>Because interest rates are set by our company, having missing data in this column is very strange. It’s possible that data ingestion issues created errors, but we cannot know for sure. For now, it’s best to <code>.drop()</code> these records before moving forward.</p>
<div class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="co" style="color: #5E5E5E;"># Print the number of nulls</span></span>
<span id="cb25-2"><span class="bu" style="color: null;">print</span>(cr_loan[<span class="st" style="color: #20794D;">'loan_int_rate'</span>].isnull().<span class="bu" style="color: null;">sum</span>())</span>
<span id="cb25-3"></span>
<span id="cb25-4"><span class="co" style="color: #5E5E5E;"># Store the array on indices</span></span>
<span id="cb25-5">indices <span class="op" style="color: #5E5E5E;">=</span> cr_loan[cr_loan[<span class="st" style="color: #20794D;">'loan_int_rate'</span>].isnull()].index</span>
<span id="cb25-6">                  </span>
<span id="cb25-7"><span class="co" style="color: #5E5E5E;"># Save the new data without missing data</span></span>
<span id="cb25-8">cr_loan_clean <span class="op" style="color: #5E5E5E;">=</span> cr_loan.drop(indices)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>3115</code></pre>
</div>
</div>
<div class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">cr_loan_clean</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="23">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>person_age</th>
      <th>person_income</th>
      <th>person_home_ownership</th>
      <th>person_emp_length</th>
      <th>loan_intent</th>
      <th>loan_grade</th>
      <th>loan_amnt</th>
      <th>loan_int_rate</th>
      <th>loan_status</th>
      <th>loan_percent_income</th>
      <th>cb_person_default_on_file</th>
      <th>cb_person_cred_hist_length</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1</th>
      <td>21</td>
      <td>9600</td>
      <td>OWN</td>
      <td>5.0</td>
      <td>EDUCATION</td>
      <td>B</td>
      <td>1000</td>
      <td>11.14</td>
      <td>0</td>
      <td>0.10</td>
      <td>N</td>
      <td>2</td>
    </tr>
    <tr>
      <th>2</th>
      <td>25</td>
      <td>9600</td>
      <td>MORTGAGE</td>
      <td>1.0</td>
      <td>MEDICAL</td>
      <td>C</td>
      <td>5500</td>
      <td>12.87</td>
      <td>1</td>
      <td>0.57</td>
      <td>N</td>
      <td>3</td>
    </tr>
    <tr>
      <th>3</th>
      <td>23</td>
      <td>65500</td>
      <td>RENT</td>
      <td>4.0</td>
      <td>MEDICAL</td>
      <td>C</td>
      <td>35000</td>
      <td>15.23</td>
      <td>1</td>
      <td>0.53</td>
      <td>N</td>
      <td>2</td>
    </tr>
    <tr>
      <th>4</th>
      <td>24</td>
      <td>54400</td>
      <td>RENT</td>
      <td>8.0</td>
      <td>MEDICAL</td>
      <td>C</td>
      <td>35000</td>
      <td>14.27</td>
      <td>1</td>
      <td>0.55</td>
      <td>Y</td>
      <td>4</td>
    </tr>
    <tr>
      <th>5</th>
      <td>21</td>
      <td>9900</td>
      <td>OWN</td>
      <td>2.0</td>
      <td>VENTURE</td>
      <td>A</td>
      <td>2500</td>
      <td>7.14</td>
      <td>1</td>
      <td>0.25</td>
      <td>N</td>
      <td>2</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>32576</th>
      <td>57</td>
      <td>53000</td>
      <td>MORTGAGE</td>
      <td>1.0</td>
      <td>PERSONAL</td>
      <td>C</td>
      <td>5800</td>
      <td>13.16</td>
      <td>0</td>
      <td>0.11</td>
      <td>N</td>
      <td>30</td>
    </tr>
    <tr>
      <th>32577</th>
      <td>54</td>
      <td>120000</td>
      <td>MORTGAGE</td>
      <td>4.0</td>
      <td>PERSONAL</td>
      <td>A</td>
      <td>17625</td>
      <td>7.49</td>
      <td>0</td>
      <td>0.15</td>
      <td>N</td>
      <td>19</td>
    </tr>
    <tr>
      <th>32578</th>
      <td>65</td>
      <td>76000</td>
      <td>RENT</td>
      <td>3.0</td>
      <td>HOMEIMPROVEMENT</td>
      <td>B</td>
      <td>35000</td>
      <td>10.99</td>
      <td>1</td>
      <td>0.46</td>
      <td>N</td>
      <td>28</td>
    </tr>
    <tr>
      <th>32579</th>
      <td>56</td>
      <td>150000</td>
      <td>MORTGAGE</td>
      <td>5.0</td>
      <td>PERSONAL</td>
      <td>B</td>
      <td>15000</td>
      <td>11.48</td>
      <td>0</td>
      <td>0.10</td>
      <td>N</td>
      <td>26</td>
    </tr>
    <tr>
      <th>32580</th>
      <td>66</td>
      <td>42000</td>
      <td>RENT</td>
      <td>2.0</td>
      <td>MEDICAL</td>
      <td>B</td>
      <td>6475</td>
      <td>9.99</td>
      <td>0</td>
      <td>0.15</td>
      <td>N</td>
      <td>30</td>
    </tr>
  </tbody>
</table>
<p>29459 rows × 12 columns</p>
</div>
</div>
</div>
<p>Our clean dataset now has 29,459 - 3,115 have been removed as these contained nulls.</p>
<p>Now that the missing data and outliers have been processed, the data is ready for modeling! More often than not, financial data is fairly tidy, but it’s always good to practice preparing data for analytical work.</p>
</section>
</section>
<section id="logistic-regression-for-defaults" class="level2">
<h2 class="anchored" data-anchor-id="logistic-regression-for-defaults">2. Logistic Regression for Defaults</h2>
<p>With the loan data fully prepared, we will discuss the <code>logistic regression</code> model which is a standard in risk modeling. We will understand the components of this model as well as how to score its performance. Once we’ve created predictions, we can explore the financial impact of utilizing this model.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Credit Risk Modelling in Python/Credit_Risk_Modelling_files/figure-html/7742599d-26b8-42d0-9b64-567d871f418d.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">deafult_prob.JPG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Credit Risk Modelling in Python/Credit_Risk_Modelling_files/figure-html/bf2d962c-3834-47ca-b393-2ea4221aca1e.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">probabilities.JPG</figcaption><p></p>
</figure>
</div>
<section id="logistic-regression-basics" class="level3">
<h3 class="anchored" data-anchor-id="logistic-regression-basics">2.1 Logistic regression basics</h3>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Credit Risk Modelling in Python/Credit_Risk_Modelling_files/figure-html/d772c79a-8bd8-4f8f-9fb1-e48f7790f152.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">logistic_regression.JPG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Credit Risk Modelling in Python/Credit_Risk_Modelling_files/figure-html/139db9b9-ef43-4785-8f0e-ce9af9225562.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">scikit_learn.JPG</figcaption><p></p>
</figure>
</div>
<p>YWe have now cleaned up the data and created the new data set <code>cr_loan_clean</code>.</p>
<p>Think back to the final scatter plot from section 1 which showed more defaults with high <code>loan_int_rate</code>. Interest rates are easy to understand, but how useful are they for predicting the probability of default?</p>
<p>Since we haven’t tried predicting the probability of default yet, let’s test out creating and training a logistic regression model with <strong>just</strong> <code>loan_int_rate</code>. Also check the model’s internal parameters, which are like settings, to see the structure of the model with this one column.</p>
<div class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="co" style="color: #5E5E5E;">## import required packages</span></span>
<span id="cb28-2"><span class="im" style="color: #00769E;">from</span> sklearn.linear_model <span class="im" style="color: #00769E;">import</span> LogisticRegression</span>
<span id="cb28-3"><span class="im" style="color: #00769E;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;">import</span> train_test_split</span>
<span id="cb28-4"><span class="im" style="color: #00769E;">from</span> sklearn <span class="im" style="color: #00769E;">import</span> metrics</span>
<span id="cb28-5"><span class="im" style="color: #00769E;">from</span> sklearn.metrics <span class="im" style="color: #00769E;">import</span> classification_report</span>
<span id="cb28-6"><span class="im" style="color: #00769E;">from</span> sklearn.metrics <span class="im" style="color: #00769E;">import</span> precision_recall_fscore_support</span>
<span id="cb28-7"><span class="im" style="color: #00769E;">from</span> sklearn.metrics <span class="im" style="color: #00769E;">import</span> roc_curve</span>
<span id="cb28-8"><span class="im" style="color: #00769E;">from</span> sklearn.metrics <span class="im" style="color: #00769E;">import</span> roc_auc_score</span>
<span id="cb28-9"><span class="im" style="color: #00769E;">from</span> sklearn.metrics <span class="im" style="color: #00769E;">import</span> confusion_matrix</span>
<span id="cb28-10"><span class="im" style="color: #00769E;">from</span> sklearn.metrics <span class="im" style="color: #00769E;">import</span> recall_score</span>
<span id="cb28-11"></span>
<span id="cb28-12"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span></code></pre></div>
</div>
<div class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="co" style="color: #5E5E5E;"># Create the X and y data sets</span></span>
<span id="cb29-2">X <span class="op" style="color: #5E5E5E;">=</span> cr_loan_clean[[<span class="st" style="color: #20794D;">'loan_int_rate'</span>]]</span>
<span id="cb29-3">y <span class="op" style="color: #5E5E5E;">=</span> cr_loan_clean[[<span class="st" style="color: #20794D;">'loan_status'</span>]]</span>
<span id="cb29-4"></span>
<span id="cb29-5"><span class="co" style="color: #5E5E5E;"># Create and fit a logistic regression model</span></span>
<span id="cb29-6">clf_logistic_single <span class="op" style="color: #5E5E5E;">=</span> LogisticRegression(solver<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'lbfgs'</span>) <span class="co" style="color: #5E5E5E;"># solver is the optimizer like we have in Excel for gradient descent</span></span>
<span id="cb29-7">clf_logistic_single.fit(X, np.ravel(y))</span>
<span id="cb29-8"></span>
<span id="cb29-9"><span class="co" style="color: #5E5E5E;"># Print the parameters of the model</span></span>
<span id="cb29-10"><span class="bu" style="color: null;">print</span>(clf_logistic_single.get_params())</span>
<span id="cb29-11"></span>
<span id="cb29-12"><span class="co" style="color: #5E5E5E;"># Print the intercept of the model</span></span>
<span id="cb29-13"><span class="bu" style="color: null;">print</span>(clf_logistic_single.intercept_)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{'C': 1.0, 'class_weight': None, 'dual': False, 'fit_intercept': True, 'intercept_scaling': 1, 'l1_ratio': None, 'max_iter': 100, 'multi_class': 'auto', 'n_jobs': None, 'penalty': 'l2', 'random_state': None, 'solver': 'lbfgs', 'tol': 0.0001, 'verbose': 0, 'warm_start': False}
[-4.45785901]</code></pre>
</div>
</div>
<p>Note the <code>solver</code> included within the Logistic Regression model. This is like the solver function within Excel which is used to optimize the randomized initial weightings, a bit like <code>Stochastic Gradient Descent (SGD)</code>. The particular solver or algorithm used here is <code>lbfgs</code> which stands for <a href="https://en.wikipedia.org/wiki/Limited-memory_BFGS">Limited-memory - Broyden–Fletcher–Goldfarb–Shanno</a>.</p>
<p>Note that we use Numpy’s <strong><a href="https://numpy.org/doc/stable/reference/generated/numpy.ravel.html">np.ravel</a></strong> to make our labels a one-dimensional <code>array</code> instead of a DataFrame as this is the format our model requires.</p>
<p>Notice that the model was able to fit to the data, and establish some parameters internally. It’s even produced a y <code>.intercept_</code> value <code>[-4.45785901]</code> which represents the overall <code>log-odds</code> of non-default. What if we use more than one column?</p>
</section>
<section id="multivariate-logistic-regression" class="level3">
<h3 class="anchored" data-anchor-id="multivariate-logistic-regression">2.2 Multivariate logistic regression</h3>
<p>Generally, we won’t use only <code>loan_int_rate</code> to predict the probability of default. We will want to use all the data we have to make predictions.</p>
<p>With this in mind, let’s try training a new model with different columns, called features, from the <code>cr_loan_clean</code> data. Will this model differ from the first one? For this, we can easily check the <code>.intercept_</code> of the logistic regression. Remember that this is the y-intercept of the function and the overall <code>log-odds</code> of non-default.</p>
<p>Let’s add employment length to our features:</p>
<div class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="co" style="color: #5E5E5E;"># Create X data for the model</span></span>
<span id="cb31-2">X_multi <span class="op" style="color: #5E5E5E;">=</span> cr_loan_clean[[<span class="st" style="color: #20794D;">'loan_int_rate'</span>,<span class="st" style="color: #20794D;">'person_emp_length'</span>]]</span>
<span id="cb31-3"></span>
<span id="cb31-4"><span class="co" style="color: #5E5E5E;"># Create a set of y data for training</span></span>
<span id="cb31-5">y <span class="op" style="color: #5E5E5E;">=</span> cr_loan_clean[[<span class="st" style="color: #20794D;">'loan_status'</span>]]</span>
<span id="cb31-6"></span>
<span id="cb31-7"><span class="co" style="color: #5E5E5E;"># Create and train a new logistic regression</span></span>
<span id="cb31-8">clf_logistic_multi <span class="op" style="color: #5E5E5E;">=</span> LogisticRegression(solver<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'lbfgs'</span>).fit(X_multi, np.ravel(y))</span>
<span id="cb31-9"></span>
<span id="cb31-10"><span class="co" style="color: #5E5E5E;"># Print the intercept of the model</span></span>
<span id="cb31-11"><span class="bu" style="color: null;">print</span>(clf_logistic_multi.intercept_)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[-4.21645549]</code></pre>
</div>
</div>
<p>Take a closer look at each model’s <code>.intercept_</code> value. The values have changed! The new <code>clf_logistic_multi model</code> has an <code>.intercept_ value</code> closer to zero. This means the log odds of a non-default is approaching zero.</p>
</section>
<section id="creating-training-and-test-sets" class="level3">
<h3 class="anchored" data-anchor-id="creating-training-and-test-sets">2.3 Creating training and test sets</h3>
<p><img src="https://stephen137.github.io/posts/Credit Risk Modelling in Python/Credit_Risk_Modelling_files/figure-html/99c966fd-5072-4e08-94be-a37eec31bd5f.JPG" class="img-fluid" alt="train_test_split.JPG"><img src="https://stephen137.github.io/posts/Credit Risk Modelling in Python/Credit_Risk_Modelling_files/figure-html/9e878d03-fc72-4bb4-bd30-4a61f6fc73d9.jpg" class="img-fluid" alt="download.jpg"></p>
<p>We’ve just trained LogisticRegression() models on different columns. we know that the data should be separated into training and test sets. <code>test_train_split()</code> is used to create both at the same time. The training set is used to make predictions, while the test set is used for evaluation. Without evaluating the model, we have no way to tell how well it will perform on new loan data.</p>
<p>In addition to the <code>intercept_</code>, which is an attribute of the model, <code>LogisticRegression()</code> models also have the <code>.coef_ attribute</code>. This shows how important each training column is for predicting the probability of default.</p>
<p>Let’s create a data set <code>X</code> using interest rate, employment length, and income. Create the <code>y</code> set as always using our target variable (label) loan status :</p>
<div class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="co" style="color: #5E5E5E;"># Create the X and y data sets</span></span>
<span id="cb33-2">X <span class="op" style="color: #5E5E5E;">=</span> cr_loan_clean[[<span class="st" style="color: #20794D;">'loan_int_rate'</span>,<span class="st" style="color: #20794D;">'person_emp_length'</span>,<span class="st" style="color: #20794D;">'person_income'</span>]]</span>
<span id="cb33-3">y <span class="op" style="color: #5E5E5E;">=</span> cr_loan_clean[[<span class="st" style="color: #20794D;">'loan_status'</span>]]</span>
<span id="cb33-4"></span>
<span id="cb33-5"><span class="co" style="color: #5E5E5E;"># Use test_train_split to create the training and test sets</span></span>
<span id="cb33-6">X_train, X_test, y_train, y_test <span class="op" style="color: #5E5E5E;">=</span> train_test_split(X, y, test_size<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">.4</span>, random_state<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">123</span>)</span>
<span id="cb33-7"></span>
<span id="cb33-8"><span class="co" style="color: #5E5E5E;"># Create and fit the logistic regression model to our training set</span></span>
<span id="cb33-9">clf_logistic <span class="op" style="color: #5E5E5E;">=</span> LogisticRegression(solver<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'lbfgs'</span>).fit(X_train, np.ravel(y_train))</span>
<span id="cb33-10"></span>
<span id="cb33-11"><span class="co" style="color: #5E5E5E;"># Print the model coefficients</span></span>
<span id="cb33-12"><span class="bu" style="color: null;">print</span>(clf_logistic .coef_)</span>
<span id="cb33-13"></span>
<span id="cb33-14"><span class="co" style="color: #5E5E5E;"># Print the model intercept</span></span>
<span id="cb33-15"><span class="bu" style="color: null;">print</span>(clf_logistic.intercept_)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[ 1.28517496e-09 -2.27622202e-09 -2.17211991e-05]]
[-3.30582292e-10]</code></pre>
</div>
</div>
<p>We can see that three columns were used for training and there are three values in .coef_. This tells us how important each column, or feature, was for predicting. The more positive the value, the more it predicts defaults, for example look at the value for <code>loan_int_rate</code> - 1.28517496e-09. This makes sense, the higher the interest rate the higher the loan repayments and therefore an increased risk of default. On the other hand we have negative values for both employment length and income. This also makes sense. A long time in employment suggests stability and the higher a person’s income is the less likely they are to default, as they are more likely to meet the loan repayments.</p>
<p>We can plug these 4 values into our Logistic Regression formula to arrive at the overall prediciton for loan default :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Credit Risk Modelling in Python/Credit_Risk_Modelling_files/figure-html/876fe21e-9d15-4ff4-8448-f75d784b3bd9.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">co_efficients.JPG</figcaption><p></p>
</figure>
</div>
</section>
<section id="changing-coefficients" class="level3">
<h3 class="anchored" data-anchor-id="changing-coefficients">2.4 Changing coefficients</h3>
<p>With this understanding of the coefficients of a <code>LogisticRegression()</code> model, let’s have a closer look at them to see how they change depending on what columns are used for training. Will the column coefficients change from model to model?</p>
<p>We should <code>.fit()</code> two different <code>LogisticRegression()</code> models on different groups of columns to check. We should also consider what the potential impact on the probability of default might be.</p>
<div class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1"><span class="co" style="color: #5E5E5E;"># create X1, X2 and y datasets</span></span>
<span id="cb35-2">X1 <span class="op" style="color: #5E5E5E;">=</span> cr_loan_clean[[<span class="st" style="color: #20794D;">'person_income'</span>,<span class="st" style="color: #20794D;">'person_emp_length'</span>,<span class="st" style="color: #20794D;">'loan_amnt'</span>]]</span>
<span id="cb35-3">X2 <span class="op" style="color: #5E5E5E;">=</span> cr_loan_clean[[<span class="st" style="color: #20794D;">'person_income'</span>,<span class="st" style="color: #20794D;">'loan_percent_income'</span>,<span class="st" style="color: #20794D;">'cb_person_cred_hist_length'</span>]]</span>
<span id="cb35-4">y <span class="op" style="color: #5E5E5E;">=</span> cr_loan_clean[[<span class="st" style="color: #20794D;">'loan_status'</span>]]</span></code></pre></div>
</div>
<div class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1"><span class="co" style="color: #5E5E5E;"># train, test, split</span></span>
<span id="cb36-2">X1_train, X1_test, y_train, y_test <span class="op" style="color: #5E5E5E;">=</span> train_test_split(X1, y, test_size<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">.4</span>, random_state<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">123</span>)</span>
<span id="cb36-3">X2_train, X2_test, y_train, y_test <span class="op" style="color: #5E5E5E;">=</span> train_test_split(X2, y, test_size<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">.4</span>, random_state<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">123</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="30">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1"><span class="co" style="color: #5E5E5E;"># Print the first five rows of each training set</span></span>
<span id="cb37-2"><span class="bu" style="color: null;">print</span>(X1_train.head())</span>
<span id="cb37-3"><span class="bu" style="color: null;">print</span>(X2_train.head())</span>
<span id="cb37-4"></span>
<span id="cb37-5"><span class="co" style="color: #5E5E5E;"># Create and train a model on the first training data</span></span>
<span id="cb37-6">clf_logistic1 <span class="op" style="color: #5E5E5E;">=</span> LogisticRegression(solver<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'lbfgs'</span>).fit(X1_train, np.ravel(y_train))</span>
<span id="cb37-7"></span>
<span id="cb37-8"><span class="co" style="color: #5E5E5E;"># Create and train a model on the second training data</span></span>
<span id="cb37-9">clf_logistic2 <span class="op" style="color: #5E5E5E;">=</span> LogisticRegression(solver<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'lbfgs'</span>).fit(X2_train, np.ravel(y_train))</span>
<span id="cb37-10"></span>
<span id="cb37-11"><span class="co" style="color: #5E5E5E;"># Print the coefficients of each model</span></span>
<span id="cb37-12"><span class="bu" style="color: null;">print</span>(clf_logistic1.coef_)</span>
<span id="cb37-13"><span class="bu" style="color: null;">print</span>(clf_logistic2.coef_)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>       person_income  person_emp_length  loan_amnt
24407          72000                3.0       9000
2528           21000                2.0       3000
15961           4800                0.0       1200
6966           92000                0.0       6000
13832          96000                1.0       7000
       person_income  loan_percent_income  cb_person_cred_hist_length
24407          72000                 0.13                           6
2528           21000                 0.14                           2
15961           4800                 0.25                           2
6966           92000                 0.07                           3
13832          96000                 0.07                           4
[[-4.02643517e-05 -3.06659219e-08  1.06277246e-04]]
[[-2.17213449e-05  5.29012401e-10 -2.80735543e-09]]</code></pre>
</div>
</div>
<p>Notice that the coefficient for the <code>person_income</code> changed when we changed the data from <strong>X1</strong> <code>-4.02643517e-05</code> to <strong>X2</strong> <code>-2.17213449e-05</code>. This is a reason to keep most of the data like we did in section 1, because the models will learn differently depending on what data they’re given!</p>
</section>
<section id="one-hot-encoding-credit-data" class="level3">
<h3 class="anchored" data-anchor-id="one-hot-encoding-credit-data">2.5 One-hot encoding credit data</h3>
<p>Python does not know how to deal with non-numeric columns, and so we have to use <code>one-hot encoding</code> to convert categorical data to a number - either 0 or 1.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Credit Risk Modelling in Python/Credit_Risk_Modelling_files/figure-html/aab85b30-d0f3-478c-a2c7-59824b8de7ec.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">one_hot_encoding.JPG</figcaption><p></p>
</figure>
</div>
<p>We can use <code>get_dummies()</code> from the <code>pandas</code> library to do this.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Credit Risk Modelling in Python/Credit_Risk_Modelling_files/figure-html/2a21da28-1f73-4d0a-b9d4-c4a6a9b9b3a8.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">get_dummies.JPG</figcaption><p></p>
</figure>
</div>
<p>It’s time to prepare the non-numeric columns so they can be added to our <code>LogisticRegression()</code> model. Once the new columns have been created using <strong>one-hot encoding</strong>, we can concatenate them with the numeric columns to create a new data frame which will be used throughout the rest of the course for predicting probability of default.</p>
<p>Remember to only one-hot encode the non-numeric columns. Doing this to the numeric columns would create an incredibly wide data set!</p>
<div class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1"><span class="co" style="color: #5E5E5E;"># Create two data sets for numeric and non-numeric data</span></span>
<span id="cb39-2">cred_num <span class="op" style="color: #5E5E5E;">=</span> cr_loan_clean.select_dtypes(exclude<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'object'</span>])</span>
<span id="cb39-3">cred_str <span class="op" style="color: #5E5E5E;">=</span> cr_loan_clean.select_dtypes(include<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'object'</span>])</span>
<span id="cb39-4"></span>
<span id="cb39-5"><span class="co" style="color: #5E5E5E;"># One-hot encode the non-numeric columns</span></span>
<span id="cb39-6">cred_str_onehot <span class="op" style="color: #5E5E5E;">=</span> pd.get_dummies(cred_str)</span>
<span id="cb39-7"></span>
<span id="cb39-8"><span class="co" style="color: #5E5E5E;"># Union the one-hot encoded columns to the numeric ones</span></span>
<span id="cb39-9">cr_loan_prep <span class="op" style="color: #5E5E5E;">=</span> pd.concat([cred_num, cred_str_onehot], axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb39-10"></span>
<span id="cb39-11"><span class="co" style="color: #5E5E5E;"># Print the columns in the new data set</span></span>
<span id="cb39-12"><span class="bu" style="color: null;">print</span>(cr_loan_prep.columns)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Index(['person_age', 'person_income', 'person_emp_length', 'loan_amnt',
       'loan_int_rate', 'loan_status', 'loan_percent_income',
       'cb_person_cred_hist_length', 'person_home_ownership_MORTGAGE',
       'person_home_ownership_OTHER', 'person_home_ownership_OWN',
       'person_home_ownership_RENT', 'loan_intent_DEBTCONSOLIDATION',
       'loan_intent_EDUCATION', 'loan_intent_HOMEIMPROVEMENT',
       'loan_intent_MEDICAL', 'loan_intent_PERSONAL', 'loan_intent_VENTURE',
       'loan_grade_A', 'loan_grade_B', 'loan_grade_C', 'loan_grade_D',
       'loan_grade_E', 'loan_grade_F', 'loan_grade_G',
       'cb_person_default_on_file_N', 'cb_person_default_on_file_Y'],
      dtype='object')</code></pre>
</div>
</div>
<p>Look at all those columns! If you’ve ever seen a credit scorecard, the <code>column_name_value</code> format should look familiar. If you haven’t seen one, look up some pictures during your next break!</p>
</section>
<section id="predicting-probability-of-default" class="level3">
<h3 class="anchored" data-anchor-id="predicting-probability-of-default">2.6 Predicting probability of default</h3>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Credit Risk Modelling in Python/Credit_Risk_Modelling_files/figure-html/4281aeed-4f49-41d1-b99b-6d9af7f8a94e.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">predict.JPG</figcaption><p></p>
</figure>
</div>
<p>All of the data processing is complete and it’s time to begin creating predictions for probability of default. We want to train a <code>LogisticRegression()</code> model on the data, and examine how it predicts the probability of default.</p>
<p>So that we can better grasp what the model produces with <code>predict_proba</code>, you should look at an example record alongside the predicted probability of default. How do the first five predictions look against the actual values of loan_status?</p>
<div class="cell" data-execution_count="32">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1">cr_loan_prep</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="32">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>person_age</th>
      <th>person_income</th>
      <th>person_emp_length</th>
      <th>loan_amnt</th>
      <th>loan_int_rate</th>
      <th>loan_status</th>
      <th>loan_percent_income</th>
      <th>cb_person_cred_hist_length</th>
      <th>person_home_ownership_MORTGAGE</th>
      <th>person_home_ownership_OTHER</th>
      <th>...</th>
      <th>loan_intent_VENTURE</th>
      <th>loan_grade_A</th>
      <th>loan_grade_B</th>
      <th>loan_grade_C</th>
      <th>loan_grade_D</th>
      <th>loan_grade_E</th>
      <th>loan_grade_F</th>
      <th>loan_grade_G</th>
      <th>cb_person_default_on_file_N</th>
      <th>cb_person_default_on_file_Y</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1</th>
      <td>21</td>
      <td>9600</td>
      <td>5.0</td>
      <td>1000</td>
      <td>11.14</td>
      <td>0</td>
      <td>0.10</td>
      <td>2</td>
      <td>0</td>
      <td>0</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>25</td>
      <td>9600</td>
      <td>1.0</td>
      <td>5500</td>
      <td>12.87</td>
      <td>1</td>
      <td>0.57</td>
      <td>3</td>
      <td>1</td>
      <td>0</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>23</td>
      <td>65500</td>
      <td>4.0</td>
      <td>35000</td>
      <td>15.23</td>
      <td>1</td>
      <td>0.53</td>
      <td>2</td>
      <td>0</td>
      <td>0</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>24</td>
      <td>54400</td>
      <td>8.0</td>
      <td>35000</td>
      <td>14.27</td>
      <td>1</td>
      <td>0.55</td>
      <td>4</td>
      <td>0</td>
      <td>0</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
    </tr>
    <tr>
      <th>5</th>
      <td>21</td>
      <td>9900</td>
      <td>2.0</td>
      <td>2500</td>
      <td>7.14</td>
      <td>1</td>
      <td>0.25</td>
      <td>2</td>
      <td>0</td>
      <td>0</td>
      <td>...</td>
      <td>1</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>32576</th>
      <td>57</td>
      <td>53000</td>
      <td>1.0</td>
      <td>5800</td>
      <td>13.16</td>
      <td>0</td>
      <td>0.11</td>
      <td>30</td>
      <td>1</td>
      <td>0</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
    </tr>
    <tr>
      <th>32577</th>
      <td>54</td>
      <td>120000</td>
      <td>4.0</td>
      <td>17625</td>
      <td>7.49</td>
      <td>0</td>
      <td>0.15</td>
      <td>19</td>
      <td>1</td>
      <td>0</td>
      <td>...</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
    </tr>
    <tr>
      <th>32578</th>
      <td>65</td>
      <td>76000</td>
      <td>3.0</td>
      <td>35000</td>
      <td>10.99</td>
      <td>1</td>
      <td>0.46</td>
      <td>28</td>
      <td>0</td>
      <td>0</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
    </tr>
    <tr>
      <th>32579</th>
      <td>56</td>
      <td>150000</td>
      <td>5.0</td>
      <td>15000</td>
      <td>11.48</td>
      <td>0</td>
      <td>0.10</td>
      <td>26</td>
      <td>1</td>
      <td>0</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
    </tr>
    <tr>
      <th>32580</th>
      <td>66</td>
      <td>42000</td>
      <td>2.0</td>
      <td>6475</td>
      <td>9.99</td>
      <td>0</td>
      <td>0.15</td>
      <td>30</td>
      <td>0</td>
      <td>0</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
    </tr>
  </tbody>
</table>
<p>29459 rows × 27 columns</p>
</div>
</div>
</div>
<div class="cell" data-execution_count="33">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1"><span class="co" style="color: #5E5E5E;"># set features and target variable</span></span>
<span id="cb42-2">X <span class="op" style="color: #5E5E5E;">=</span> cr_loan_prep.drop(<span class="st" style="color: #20794D;">'loan_status'</span>, axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb42-3">y <span class="op" style="color: #5E5E5E;">=</span> cr_loan_prep[[<span class="st" style="color: #20794D;">'loan_status'</span>]]</span>
<span id="cb42-4"></span>
<span id="cb42-5"></span>
<span id="cb42-6"><span class="co" style="color: #5E5E5E;"># train, test, split</span></span>
<span id="cb42-7">X_train, X_test, y_train, y_test <span class="op" style="color: #5E5E5E;">=</span> train_test_split(X, y, test_size<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">.4</span>, random_state<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">123</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="34">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1"><span class="co" style="color: #5E5E5E;"># Train the logistic regression model on the training data</span></span>
<span id="cb43-2">clf_logistic <span class="op" style="color: #5E5E5E;">=</span> LogisticRegression(solver<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'lbfgs'</span>).fit(X_train, np.ravel(y_train))</span>
<span id="cb43-3"></span>
<span id="cb43-4"><span class="co" style="color: #5E5E5E;"># Create predictions of probability for loan status using test data</span></span>
<span id="cb43-5">preds <span class="op" style="color: #5E5E5E;">=</span> clf_logistic.predict_proba(X_test)</span>
<span id="cb43-6"></span>
<span id="cb43-7"><span class="co" style="color: #5E5E5E;"># Create dataframes of first five predictions</span></span>
<span id="cb43-8">preds_df <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(preds[:,<span class="dv" style="color: #AD0000;">1</span>][<span class="dv" style="color: #AD0000;">0</span>:<span class="dv" style="color: #AD0000;">5</span>], columns <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'prob_default'</span>])</span>
<span id="cb43-9"></span>
<span id="cb43-10"><span class="co" style="color: #5E5E5E;"># Create dataframe of first five true labels</span></span>
<span id="cb43-11">true_df <span class="op" style="color: #5E5E5E;">=</span> y_test.head()</span>
<span id="cb43-12"></span>
<span id="cb43-13"><span class="co" style="color: #5E5E5E;"># Concatenate and print the two data frames for comparison</span></span>
<span id="cb43-14"><span class="bu" style="color: null;">print</span>(pd.concat([true_df.reset_index(drop <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">True</span>), preds_df], axis <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   loan_status  prob_default
0            1      0.445779
1            1      0.223447
2            0      0.288558
3            0      0.169358
4            1      0.114182</code></pre>
</div>
</div>
<p>We have some predictions now, but they don’t look very accurate do they? It looks like most of the rows with <code>loan_status</code> at <code>1</code> have a low probability of default. How good are the rest of the predictions? Next, let’s see if we can determine how accurate the entire model is.</p>
</section>
<section id="default-classification-reporting" class="level3">
<h3 class="anchored" data-anchor-id="default-classification-reporting">2.7 Default classification reporting</h3>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Credit Risk Modelling in Python/Credit_Risk_Modelling_files/figure-html/c392bb32-bcd6-4355-90c5-d6dc7409f1c1.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">accuracy.JPG</figcaption><p></p>
</figure>
</div>
<p>It’s time to take a closer look at the evaluation of our model. Here is where setting the threshold for probability of default will help us analyze the model’s performance through classification reporting.</p>
<p>Creating a data frame of the probabilities makes them easier to work with, because we can use all the power of <strong>pandas</strong>. Apply the threshold to the data and check the value counts for both classes of <code>loan_status</code> to see how many predictions of each are being created. This will help with insight into the scores from the classification report.</p>
<div class="cell" data-execution_count="35">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1">preds_df</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="35">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>prob_default</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>0.445779</td>
    </tr>
    <tr>
      <th>1</th>
      <td>0.223447</td>
    </tr>
    <tr>
      <th>2</th>
      <td>0.288558</td>
    </tr>
    <tr>
      <th>3</th>
      <td>0.169358</td>
    </tr>
    <tr>
      <th>4</th>
      <td>0.114182</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="36">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1"><span class="co" style="color: #5E5E5E;"># Create a dataframe for the probabilities of default</span></span>
<span id="cb46-2">preds_df <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(preds[:,<span class="dv" style="color: #AD0000;">1</span>], columns <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'prob_default'</span>])</span>
<span id="cb46-3"></span>
<span id="cb46-4"><span class="co" style="color: #5E5E5E;"># Reassign loan status based on the threshold</span></span>
<span id="cb46-5">preds_df[<span class="st" style="color: #20794D;">'loan_status'</span>] <span class="op" style="color: #5E5E5E;">=</span> preds_df[<span class="st" style="color: #20794D;">'prob_default'</span>].<span class="bu" style="color: null;">apply</span>(<span class="kw" style="color: #003B4F;">lambda</span> x: <span class="dv" style="color: #AD0000;">1</span> <span class="cf" style="color: #003B4F;">if</span> x <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="fl" style="color: #AD0000;">0.5</span> <span class="cf" style="color: #003B4F;">else</span> <span class="dv" style="color: #AD0000;">0</span>) <span class="co" style="color: #5E5E5E;"># lambda alllows us to use a function without defining it using def:</span></span>
<span id="cb46-6"></span>
<span id="cb46-7"><span class="co" style="color: #5E5E5E;"># Print the row counts for each loan status</span></span>
<span id="cb46-8"><span class="bu" style="color: null;">print</span>(preds_df[<span class="st" style="color: #20794D;">'loan_status'</span>].value_counts())</span>
<span id="cb46-9"></span>
<span id="cb46-10"><span class="co" style="color: #5E5E5E;"># Print the classification report</span></span>
<span id="cb46-11">target_names <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'Non-Default'</span>, <span class="st" style="color: #20794D;">'Default'</span>] <span class="co" style="color: #5E5E5E;"># our labels</span></span>
<span id="cb46-12"><span class="bu" style="color: null;">print</span>(classification_report(y_test, preds_df[<span class="st" style="color: #20794D;">'loan_status'</span>], target_names<span class="op" style="color: #5E5E5E;">=</span>target_names))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0    11175
1      609
Name: loan_status, dtype: int64
              precision    recall  f1-score   support

 Non-Default       0.81      0.98      0.89      9198
     Default       0.71      0.17      0.27      2586

    accuracy                           0.80     11784
   macro avg       0.76      0.57      0.58     11784
weighted avg       0.79      0.80      0.75     11784
</code></pre>
</div>
</div>
<p>Well isn’t this a surprise! It looks like almost all of our test set was predicted to be non-default. The recall for defaults is 0.17 meaning 17% of our true defaults were predicted correctly.</p>
</section>
<section id="selecting-report-metrics" class="level3">
<h3 class="anchored" data-anchor-id="selecting-report-metrics">2.8 Selecting report metrics</h3>
<p>The <code>classification_report()</code> has many different metrics within it, but you may not always want to print out the full report. Sometimes you just want specific values to compare models or use for other purposes.</p>
<p>There is a function within scikit-learn that pulls out the values for you. That function is <code>precision_recall_fscore_support()</code> and it takes in the same parameters as <code>classification_report</code>.</p>
<p>It is imported and used like this:</p>
<pre><code># Import function
from sklearn.metrics import precision_recall_fscore_support
# Select all non-averaged values from the report
precision_recall_fscore_support(y_true,predicted_values)</code></pre>
<div class="cell" data-execution_count="37">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1"><span class="co" style="color: #5E5E5E;"># Print the classification report</span></span>
<span id="cb49-2">target_names <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'Non-Default'</span>, <span class="st" style="color: #20794D;">'Default'</span>]</span>
<span id="cb49-3"><span class="bu" style="color: null;">print</span>(classification_report(y_test, preds_df[<span class="st" style="color: #20794D;">'loan_status'</span>], target_names<span class="op" style="color: #5E5E5E;">=</span>target_names))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>              precision    recall  f1-score   support

 Non-Default       0.81      0.98      0.89      9198
     Default       0.71      0.17      0.27      2586

    accuracy                           0.80     11784
   macro avg       0.76      0.57      0.58     11784
weighted avg       0.79      0.80      0.75     11784
</code></pre>
</div>
</div>
<div class="cell" data-execution_count="38">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1"><span class="co" style="color: #5E5E5E;"># Print all the non-average values from the report</span></span>
<span id="cb51-2"><span class="bu" style="color: null;">print</span>(precision_recall_fscore_support(y_test,preds_df[<span class="st" style="color: #20794D;">'loan_status'</span>]))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>(array([0.80742729, 0.71264368]), array([0.98097412, 0.16782676]), array([0.8857802 , 0.27167449]), array([9198, 2586]))</code></pre>
</div>
</div>
<div class="cell" data-execution_count="39">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1"><span class="co" style="color: #5E5E5E;"># Print the first two numbers from the report</span></span>
<span id="cb53-2"><span class="bu" style="color: null;">print</span>(precision_recall_fscore_support(y_test,preds_df[<span class="st" style="color: #20794D;">'loan_status'</span>])[<span class="dv" style="color: #AD0000;">0</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[0.80742729 0.71264368]</code></pre>
</div>
</div>
<p>Now we know how to pull out specific values from the report to either store later for comparison, or use to check against portfolio performance. Remember the impact of recall for defaults? This way, we can store that value for later calculations.</p>
</section>
<section id="visually-scoring-credit-models" class="level3">
<h3 class="anchored" data-anchor-id="visually-scoring-credit-models">2.9 Visually scoring credit models</h3>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Credit Risk Modelling in Python/Credit_Risk_Modelling_files/figure-html/64d45c75-a3b7-442b-bd2b-ac64d5cb3005.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">ROC.JPG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Credit Risk Modelling in Python/Credit_Risk_Modelling_files/figure-html/fce5d618-1f18-44ce-90b2-4b7044a70d91.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">ROC_chart.JPG</figcaption><p></p>
</figure>
</div>
<p>Now, we want to visualize the performance of the model. In ROC charts, the X and Y axes are two metrics we’ve already looked at: the <strong>false positive rate (fall-out)</strong>, and the <strong>true positive rate (sensitivity)</strong>.</p>
<p>We can create a ROC chart of it’s performance with the following code:</p>
<pre><code>fallout, sensitivity, thresholds = roc_curve(y_test, prob_default)
plt.plot(fallout, sensitivity)</code></pre>
<p>To calculate the AUC score, you use <code>roc_auc_score()</code></p>
<div class="cell" data-execution_count="40">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb56-1"><span class="co" style="color: #5E5E5E;"># Create predictions and store them in a variable</span></span>
<span id="cb56-2">preds<span class="op" style="color: #5E5E5E;">=</span> clf_logistic.predict_proba(X_test)</span>
<span id="cb56-3"></span>
<span id="cb56-4"><span class="co" style="color: #5E5E5E;"># Print the accuracy score the model</span></span>
<span id="cb56-5"><span class="bu" style="color: null;">print</span>(clf_logistic.score(X_test, y_test))</span>
<span id="cb56-6"></span>
<span id="cb56-7"><span class="co" style="color: #5E5E5E;"># Plot the ROC curve of the probabilities of default</span></span>
<span id="cb56-8">prob_default <span class="op" style="color: #5E5E5E;">=</span> preds[:, <span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb56-9">fallout, sensitivity, thresholds <span class="op" style="color: #5E5E5E;">=</span> roc_curve(y_test, prob_default)</span>
<span id="cb56-10"></span>
<span id="cb56-11">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb56-12">plt.plot(fallout, sensitivity, color <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'darkorange'</span>)</span>
<span id="cb56-13">plt.plot([<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>], [<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>], linestyle<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'--'</span>)</span>
<span id="cb56-14">ax.set_xlabel(<span class="st" style="color: #20794D;">'False Positive Rate (Fallout)'</span>)</span>
<span id="cb56-15">ax.set_ylabel(<span class="st" style="color: #20794D;">'True Positive Rate (Sensitivity)'</span>)</span>
<span id="cb56-16">plt.show()</span>
<span id="cb56-17"></span>
<span id="cb56-18"><span class="co" style="color: #5E5E5E;"># Compute the AUC and store it in a variable</span></span>
<span id="cb56-19">auc <span class="op" style="color: #5E5E5E;">=</span> roc_auc_score(y_test, prob_default)</span>
<span id="cb56-20">auc</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0.8025288526816021</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Credit Risk Modelling in Python/Credit_Risk_Modelling_files/figure-html/cell-41-output-2.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display" data-execution_count="40">
<pre><code>0.7643248801355148</code></pre>
</div>
</div>
<p>So the accuracy for this model is just over 80.3% and the AUC score is 76.4%. Notice that what the ROC chart above shows us is the tradeoff between all values of our false positive rate (fallout) and true positive rate (sensitivity).</p>
</section>
<section id="thresholds-and-confusion-matrices" class="level3">
<h3 class="anchored" data-anchor-id="thresholds-and-confusion-matrices">2.10 Thresholds and confusion matrices</h3>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Credit Risk Modelling in Python/Credit_Risk_Modelling_files/figure-html/82faa313-393e-4358-9983-1d4b05ae4862.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">thresholds.JPG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Credit Risk Modelling in Python/Credit_Risk_Modelling_files/figure-html/6b2d7310-e334-4fdd-8110-2ffddd205175.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">confusion_matrix.JPG</figcaption><p></p>
</figure>
</div>
<p>The <code>recall</code> score for loan defaults is the number of correctly predicted defaults divided by the total number of defaults. Note that if we were to predict ALL of our loans to default, then our recall score would be 100%!<br>
The <code>recall</code> score for non-defaults is the number of correctly predicted non-defaults, divided by the total number of non-defaults.</p>
<p>The <code>precision</code> score for loan defaults is the number of correctly predicted defaults divided by the total number of predicted defaults.<br>
The <code>precision</code> score for non-loan defaults is the number of correctly predicted non-defaults, divided by the total number of predicted non-defaults.</p>
<p>We’ve looked at setting thresholds for defaults, but how does this impact overall performance? To do this, we can start by looking at the effects with confusion matrices. Set different values for the threshold on probability of default, and use a confusion matrix to see how the changing values affect the model’s performance.</p>
<div class="cell" data-execution_count="41">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb59-1"><span class="co" style="color: #5E5E5E;"># Set the threshold for defaults to 0.5</span></span>
<span id="cb59-2">preds_df[<span class="st" style="color: #20794D;">'loan_status'</span>] <span class="op" style="color: #5E5E5E;">=</span> preds_df[<span class="st" style="color: #20794D;">'prob_default'</span>].<span class="bu" style="color: null;">apply</span>(<span class="kw" style="color: #003B4F;">lambda</span> x: <span class="dv" style="color: #AD0000;">1</span> <span class="cf" style="color: #003B4F;">if</span> x <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="fl" style="color: #AD0000;">0.5</span> <span class="cf" style="color: #003B4F;">else</span> <span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb59-3"></span>
<span id="cb59-4"><span class="co" style="color: #5E5E5E;"># Print the confusion matrix</span></span>
<span id="cb59-5"><span class="bu" style="color: null;">print</span>(confusion_matrix(y_test,preds_df[<span class="st" style="color: #20794D;">'loan_status'</span>]))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[9023  175]
 [2152  434]]</code></pre>
</div>
</div>
<div class="cell" data-execution_count="42">
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb61-1"><span class="bu" style="color: null;">print</span>(recall_score(y_test,preds_df[<span class="st" style="color: #20794D;">'loan_status'</span>]))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0.16782675947409126</code></pre>
</div>
</div>
<div class="cell" data-execution_count="43">
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb63-1"><span class="co" style="color: #5E5E5E;"># Set the threshold for defaults to 0.4</span></span>
<span id="cb63-2">preds_df[<span class="st" style="color: #20794D;">'loan_status'</span>] <span class="op" style="color: #5E5E5E;">=</span> preds_df[<span class="st" style="color: #20794D;">'prob_default'</span>].<span class="bu" style="color: null;">apply</span>(<span class="kw" style="color: #003B4F;">lambda</span> x: <span class="dv" style="color: #AD0000;">1</span> <span class="cf" style="color: #003B4F;">if</span> x <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="fl" style="color: #AD0000;">0.4</span> <span class="cf" style="color: #003B4F;">else</span> <span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb63-3"></span>
<span id="cb63-4"><span class="co" style="color: #5E5E5E;"># Print the confusion matrix</span></span>
<span id="cb63-5">y_test,preds_df[<span class="st" style="color: #20794D;">'loan_status'</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="43">
<pre><code>(       loan_status
 31622            1
 24935            1
 15342            0
 3460             0
 16424            1
 ...            ...
 25231            0
 30380            0
 29849            0
 1780             0
 11446            0
 
 [11784 rows x 1 columns],
 0        1
 1        0
 2        0
 3        0
 4        0
         ..
 11779    0
 11780    0
 11781    1
 11782    0
 11783    0
 Name: loan_status, Length: 11784, dtype: int64)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="44">
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb65-1"><span class="bu" style="color: null;">print</span>(recall_score(y_test,preds_df[<span class="st" style="color: #20794D;">'loan_status'</span>]))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0.46403712296983757</code></pre>
</div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Credit Risk Modelling in Python/Credit_Risk_Modelling_files/figure-html/5c22b3ef-3384-4908-93a9-e23f30bb22ed.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">recall_precision_accuracy.JPG</figcaption><p></p>
</figure>
</div>
</section>
<section id="how-thresholds-affect-performance" class="level3">
<h3 class="anchored" data-anchor-id="how-thresholds-affect-performance">2.11 How thresholds affect performance</h3>
<p>Setting the threshold to <code>0.4</code> shows promising results for model evaluation. Now we can assess the financial impact using the default recall which is selected from the classification reporting using the function <code>precision_recall_fscore_support()</code>.</p>
<p>For this, we will estimate the amount of unexpected loss using the default recall to find what proportion of defaults you did not catch with the new threshold. This will be a dollar amount which tells you how much in losses you would have if all the unfound defaults were to default all at once.</p>
<div class="cell" data-execution_count="45">
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb67-1"><span class="co" style="color: #5E5E5E;"># Reassign the values of loan status based on the new threshold</span></span>
<span id="cb67-2">preds_df[<span class="st" style="color: #20794D;">'loan_status'</span>] <span class="op" style="color: #5E5E5E;">=</span> preds_df[<span class="st" style="color: #20794D;">'prob_default'</span>].<span class="bu" style="color: null;">apply</span>(<span class="kw" style="color: #003B4F;">lambda</span> x: <span class="dv" style="color: #AD0000;">1</span> <span class="cf" style="color: #003B4F;">if</span> x <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="fl" style="color: #AD0000;">0.4</span> <span class="cf" style="color: #003B4F;">else</span> <span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb67-3"></span>
<span id="cb67-4"><span class="co" style="color: #5E5E5E;"># Store the number of loan defaults from the prediction data</span></span>
<span id="cb67-5">num_defaults <span class="op" style="color: #5E5E5E;">=</span> preds_df[<span class="st" style="color: #20794D;">'loan_status'</span>].value_counts()[<span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb67-6"></span>
<span id="cb67-7"><span class="co" style="color: #5E5E5E;"># Store the default recall from the classification report</span></span>
<span id="cb67-8">default_recall <span class="op" style="color: #5E5E5E;">=</span> precision_recall_fscore_support(y_test,preds_df[<span class="st" style="color: #20794D;">'loan_status'</span>])[<span class="dv" style="color: #AD0000;">1</span>][<span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb67-9"></span>
<span id="cb67-10"><span class="co" style="color: #5E5E5E;"># Calculate the estimated impact of the new default recall rate</span></span>
<span id="cb67-11"><span class="bu" style="color: null;">print</span>(cr_loan_prep[<span class="st" style="color: #20794D;">'loan_amnt'</span>].mean() <span class="op" style="color: #5E5E5E;">*</span> num_defaults <span class="op" style="color: #5E5E5E;">*</span> (<span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">-</span> default_recall))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>9872265.223119883</code></pre>
</div>
</div>
<p>By our estimates, this loss would be around $9.8 million. That seems like a lot! Try rerunning this code with threshold values of 0.3 and 0.5. Do you see the estimated losses changing? How do we find a good threshold value based on these metrics alone?</p>
</section>
<section id="threshold-selection" class="level3">
<h3 class="anchored" data-anchor-id="threshold-selection">2.12 Threshold selection</h3>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Credit Risk Modelling in Python/Credit_Risk_Modelling_files/figure-html/2d809438-0708-4ea6-98a4-f7093dab4f76.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">thresholds_apply.JPG</figcaption><p></p>
</figure>
</div>
<p>We know there is a trade off between metrics like <code>default recall</code>, <code>non-default recall</code>, and model <code>accuracy</code>. One easy way to approximate a good starting threshold value is to look at a plot of all three using <code>matplotlib</code>. With this graph, you can see how each of these metrics look as you change the threshold values and find the point at which the performance of all three is good enough to use for the credit data.</p>
<div class="cell" data-execution_count="46">
<div class="sourceCode cell-code" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb69-1"><span class="co" style="color: #5E5E5E;"># Instantiate values</span></span>
<span id="cb69-2">thresh <span class="op" style="color: #5E5E5E;">=</span>  [<span class="fl" style="color: #AD0000;">0.2</span>, <span class="fl" style="color: #AD0000;">0.225</span>, <span class="fl" style="color: #AD0000;">0.25</span>, <span class="fl" style="color: #AD0000;">0.275</span>, <span class="fl" style="color: #AD0000;">0.3</span>, <span class="fl" style="color: #AD0000;">0.325</span>, <span class="fl" style="color: #AD0000;">0.35</span>, <span class="fl" style="color: #AD0000;">0.375</span>, <span class="fl" style="color: #AD0000;">0.4</span>, <span class="fl" style="color: #AD0000;">0.425</span>, <span class="fl" style="color: #AD0000;">0.45</span>, <span class="fl" style="color: #AD0000;">0.475</span>, <span class="fl" style="color: #AD0000;">0.5</span>, <span class="fl" style="color: #AD0000;">0.525</span>, <span class="fl" style="color: #AD0000;">0.55</span>, <span class="fl" style="color: #AD0000;">0.575</span>, <span class="fl" style="color: #AD0000;">0.6</span>, <span class="fl" style="color: #AD0000;">0.625</span>, <span class="fl" style="color: #AD0000;">0.65</span>]</span>
<span id="cb69-3">def_recalls <span class="op" style="color: #5E5E5E;">=</span> [<span class="fl" style="color: #AD0000;">0.7981438515081206</span>, <span class="fl" style="color: #AD0000;">0.7583139984532096</span>, <span class="fl" style="color: #AD0000;">0.7157772621809745</span>, <span class="fl" style="color: #AD0000;">0.6759474091260634</span>, <span class="fl" style="color: #AD0000;">0.6349574632637278</span>, <span class="fl" style="color: #AD0000;">0.594354215003867</span>, <span class="fl" style="color: #AD0000;">0.5467904098994586</span>, <span class="fl" style="color: #AD0000;">0.5054137664346481</span>,</span>
<span id="cb69-4"> <span class="fl" style="color: #AD0000;">0.46403712296983757</span>, <span class="fl" style="color: #AD0000;">0.39984532095901004</span>, <span class="fl" style="color: #AD0000;">0.32211910286156226</span>, <span class="fl" style="color: #AD0000;">0.2354988399071926</span>, <span class="fl" style="color: #AD0000;">0.16782675947409126</span>, <span class="fl" style="color: #AD0000;">0.1148491879350348</span>, <span class="fl" style="color: #AD0000;">0.07733952049497293</span>, <span class="fl" style="color: #AD0000;">0.05529775715390565</span>,</span>
<span id="cb69-5"> <span class="fl" style="color: #AD0000;">0.03750966744006187</span>, <span class="fl" style="color: #AD0000;">0.026295436968290797</span>, <span class="fl" style="color: #AD0000;">0.017788089713843776</span>]</span>
<span id="cb69-6">nondef_recalls <span class="op" style="color: #5E5E5E;">=</span> [<span class="fl" style="color: #AD0000;">0.5342465753424658</span>, <span class="fl" style="color: #AD0000;">0.5973037616873234</span>, <span class="fl" style="color: #AD0000;">0.6552511415525114</span>, <span class="fl" style="color: #AD0000;">0.708306153511633</span>, <span class="fl" style="color: #AD0000;">0.756468797564688</span>, <span class="fl" style="color: #AD0000;">0.8052837573385518</span>, <span class="fl" style="color: #AD0000;">0.8482278756251359</span>, <span class="fl" style="color: #AD0000;">0.8864970645792564</span>,</span>
<span id="cb69-7"> <span class="fl" style="color: #AD0000;">0.9215046749293324</span>, <span class="fl" style="color: #AD0000;">0.9492280930637095</span>, <span class="fl" style="color: #AD0000;">0.9646662317895195</span>, <span class="fl" style="color: #AD0000;">0.9733637747336378</span>, <span class="fl" style="color: #AD0000;">0.9809741248097412</span>, <span class="fl" style="color: #AD0000;">0.9857577734290063</span>, <span class="fl" style="color: #AD0000;">0.9902152641878669</span>, <span class="fl" style="color: #AD0000;">0.992280930637095</span>, <span class="fl" style="color: #AD0000;">0.9948901935203305</span>,</span>
<span id="cb69-8"> <span class="fl" style="color: #AD0000;">0.9966297021091541</span>, <span class="fl" style="color: #AD0000;">0.997499456403566</span>]</span>
<span id="cb69-9">accs <span class="op" style="color: #5E5E5E;">=</span> [<span class="fl" style="color: #AD0000;">0.5921588594704684</span>, <span class="fl" style="color: #AD0000;">0.6326374745417516</span>, <span class="fl" style="color: #AD0000;">0.6685336048879837</span>, <span class="fl" style="color: #AD0000;">0.7012050237610319</span>, <span class="fl" style="color: #AD0000;">0.7298031228784793</span>, <span class="fl" style="color: #AD0000;">0.7589952477936185</span>, <span class="fl" style="color: #AD0000;">0.7820773930753564</span>, <span class="fl" style="color: #AD0000;">0.8028682959945689</span>,</span>
<span id="cb69-10"> <span class="fl" style="color: #AD0000;">0.8211133740665308</span>, <span class="fl" style="color: #AD0000;">0.8286659877800407</span>, <span class="fl" style="color: #AD0000;">0.8236591989137814</span>, <span class="fl" style="color: #AD0000;">0.811439239646979</span>, <span class="fl" style="color: #AD0000;">0.8025288526816021</span>, <span class="fl" style="color: #AD0000;">0.7946367956551256</span>, <span class="fl" style="color: #AD0000;">0.7898845892735913</span>, <span class="fl" style="color: #AD0000;">0.7866598778004074</span>,</span>
<span id="cb69-11"> <span class="fl" style="color: #AD0000;">0.7847929395790902</span>, <span class="fl" style="color: #AD0000;">0.7836897488119484</span>, <span class="fl" style="color: #AD0000;">0.7825016972165648</span>]</span>
<span id="cb69-12">ticks <span class="op" style="color: #5E5E5E;">=</span> [<span class="fl" style="color: #AD0000;">0.2</span>, <span class="fl" style="color: #AD0000;">0.25</span>, <span class="fl" style="color: #AD0000;">0.3</span>, <span class="fl" style="color: #AD0000;">0.35</span>, <span class="fl" style="color: #AD0000;">0.4</span>, <span class="fl" style="color: #AD0000;">0.45</span>, <span class="fl" style="color: #AD0000;">0.5</span>, <span class="fl" style="color: #AD0000;">0.55</span>, <span class="fl" style="color: #AD0000;">0.6</span>, <span class="fl" style="color: #AD0000;">0.65</span>]</span></code></pre></div>
</div>
<p>Note, the above values were pre-loaded within the DataCamp workspace for this lesson, however I have recreated here for reproduceability.</p>
<div class="cell" data-execution_count="47">
<div class="sourceCode cell-code" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb70-1">plt.plot(thresh,def_recalls)</span>
<span id="cb70-2">plt.plot(thresh,nondef_recalls)</span>
<span id="cb70-3">plt.plot(thresh,accs)</span>
<span id="cb70-4">plt.xlabel(<span class="st" style="color: #20794D;">"Probability Threshold"</span>)</span>
<span id="cb70-5">plt.xticks(ticks)</span>
<span id="cb70-6">plt.legend([<span class="st" style="color: #20794D;">"Default Recall"</span>,<span class="st" style="color: #20794D;">"Non-default Recall"</span>,<span class="st" style="color: #20794D;">"Model Accuracy"</span>])</span>
<span id="cb70-7">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Credit Risk Modelling in Python/Credit_Risk_Modelling_files/figure-html/cell-48-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>Have a closer look at this plot. In fact, expand the window to get a really good look. Think about the threshold values from thresh and how they affect each of these three metrics. Approximately what starting threshold value would maximize these scores evenly?</p>
<p>This is the easiest pattern to see on this graph, because it’s the point where all three lines converge. This threshold would make a great starting point, but declaring all loans about <code>0.275</code> to be a default is probably not practical.</p>
</section>
</section>
<section id="gradient-boosted-trees-using-xgboost" class="level2">
<h2 class="anchored" data-anchor-id="gradient-boosted-trees-using-xgboost">3. Gradient Boosted Trees Using XGBoost</h2>
<p>Decision trees are another standard credit risk model. We will go beyond decision trees by using the trendy XGBoost package in Python to create gradient boosted trees. After developing sophisticated models, we will stress test their performance and discuss column selection in unbalanced data.</p>
<section id="trees-for-defaults" class="level3">
<h3 class="anchored" data-anchor-id="trees-for-defaults">3.1 Trees for defaults</h3>
<p>We will now train a <code>Gradient Boosted Tree</code> model on the credit data, and see a sample of some of the predictions. Do you remember when we first looked at the predictions of the <code>logistic Regression</code> model? They didn’t look good. Do you think this model will be different?</p>
<div class="cell" data-execution_count="48">
<div class="sourceCode cell-code" id="cb71" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb71-1"><span class="co" style="color: #5E5E5E;"># Train a model</span></span>
<span id="cb71-2"><span class="op" style="color: #5E5E5E;">!</span>pip install xgboost</span>
<span id="cb71-3"><span class="im" style="color: #00769E;">import</span> xgboost <span class="im" style="color: #00769E;">as</span> xgb</span>
<span id="cb71-4">clf_gbt <span class="op" style="color: #5E5E5E;">=</span> xgb.XGBClassifier().fit(X_train, np.ravel(y_train))</span>
<span id="cb71-5"></span>
<span id="cb71-6"><span class="co" style="color: #5E5E5E;"># Predict with a model</span></span>
<span id="cb71-7">gbt_preds <span class="op" style="color: #5E5E5E;">=</span> clf_gbt.predict_proba(X_test)</span>
<span id="cb71-8"></span>
<span id="cb71-9"><span class="co" style="color: #5E5E5E;"># Create dataframes of first five predictions, and first five true labels</span></span>
<span id="cb71-10">preds_df <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(gbt_preds[:,<span class="dv" style="color: #AD0000;">1</span>][<span class="dv" style="color: #AD0000;">0</span>:<span class="dv" style="color: #AD0000;">5</span>], columns <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'prob_default'</span>])</span>
<span id="cb71-11">true_df <span class="op" style="color: #5E5E5E;">=</span> y_test.head()</span>
<span id="cb71-12"></span>
<span id="cb71-13"><span class="co" style="color: #5E5E5E;"># Concatenate and print the two data frames for comparison</span></span>
<span id="cb71-14"><span class="bu" style="color: null;">print</span>(pd.concat([true_df.reset_index(drop <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">True</span>), preds_df], axis <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Requirement already satisfied: xgboost in /home/stephen137/mambaforge/lib/python3.10/site-packages (1.7.3)
Requirement already satisfied: numpy in /home/stephen137/mambaforge/lib/python3.10/site-packages (from xgboost) (1.22.4)
Requirement already satisfied: scipy in /home/stephen137/mambaforge/lib/python3.10/site-packages (from xgboost) (1.9.1)
   loan_status  prob_default
0            1      0.990942
1            1      0.983987
2            0      0.000807
3            0      0.001239
4            1      0.084892</code></pre>
</div>
</div>
<p>The predictions don’t look the same as with the <code>LogisticRegression()</code>, do they? Notice that this model is already accurately predicting the probability of default for some loans with a true value of 1 in <code>loan_status</code>.</p>
</section>
<section id="gradient-boosted-portfolio-performance" class="level3">
<h3 class="anchored" data-anchor-id="gradient-boosted-portfolio-performance">3.2 Gradient boosted portfolio performance</h3>
<p>At this point we’ve looked at predicting probability of default using both a <code>LogisticRegression()</code> and <code>XGBClassifier()</code>. We’ve looked at some scoring and have seen samples of the predictions, but what is the overall affect on portfolio performance? Try using expected loss as a scenario to express the importance of testing different models.</p>
<p>A data frame called <code>portfolio</code> has been cretaed to combine the probabilities of default for both models, the loss given default (assume 20% for now), and the <code>loan_amnt</code> which will be assumed to be the exposure at default.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb73" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb73-1"><span class="co" style="color: #5E5E5E;"># Print the first five rows of the portfolio data frame</span></span>
<span id="cb73-2"><span class="bu" style="color: null;">print</span>(portfolio.head())</span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Credit Risk Modelling in Python/Credit_Risk_Modelling_files/figure-html/f80b2180-cae2-4052-aadc-e6423e48d87d.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">portfolio_head.JPG</figcaption><p></p>
</figure>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb74-1"><span class="co" style="color: #5E5E5E;"># Create expected loss columns for each model using the formula</span></span>
<span id="cb74-2">portfolio[<span class="st" style="color: #20794D;">'gbt_expected_loss'</span>] <span class="op" style="color: #5E5E5E;">=</span> portfolio[<span class="st" style="color: #20794D;">'gbt_prob_default'</span>] <span class="op" style="color: #5E5E5E;">*</span> portfolio[<span class="st" style="color: #20794D;">'lgd'</span>] <span class="op" style="color: #5E5E5E;">*</span> portfolio[<span class="st" style="color: #20794D;">'loan_amnt'</span>]</span>
<span id="cb74-3">portfolio[<span class="st" style="color: #20794D;">'lr_expected_loss'</span>] <span class="op" style="color: #5E5E5E;">=</span> portfolio[<span class="st" style="color: #20794D;">'lr_prob_default'</span>] <span class="op" style="color: #5E5E5E;">*</span> portfolio[<span class="st" style="color: #20794D;">'lgd'</span>] <span class="op" style="color: #5E5E5E;">*</span> portfolio[<span class="st" style="color: #20794D;">'loan_amnt'</span>]</span>
<span id="cb74-4"></span>
<span id="cb74-5"><span class="co" style="color: #5E5E5E;"># Print the sum of the expected loss for lr</span></span>
<span id="cb74-6"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'LR expected loss: '</span>, np.<span class="bu" style="color: null;">sum</span>(portfolio[<span class="st" style="color: #20794D;">'lr_expected_loss'</span>]))</span>
<span id="cb74-7"></span>
<span id="cb74-8"><span class="co" style="color: #5E5E5E;"># Print the sum of the expected loss for gbt</span></span>
<span id="cb74-9"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'GBT expected loss: '</span>, np.<span class="bu" style="color: null;">sum</span>(portfolio[<span class="st" style="color: #20794D;">'gbt_expected_loss'</span>]))</span></code></pre></div>
</div>
<p>LR expected loss: 5596776.979852879 GBT expected loss: 5383982.809227714</p>
<p>It looks like the total expected loss for the <code>XGBClassifier()</code> model is quite a bit lower. When we talk about accuracy and precision, the goal is to generate models which have a low expected loss. Looking at a <code>classification_report()</code> helps as well.</p>
</section>
<section id="assessing-gradient-boosted-trees" class="level3">
<h3 class="anchored" data-anchor-id="assessing-gradient-boosted-trees">3.3 Assessing gradient boosted trees</h3>
<p>So we’ve now used <code>XGBClassifier()</code> models to predict probability of default. These models can also use the <code>.predict()</code> method for creating predictions that give the actual class for <code>loan_status</code>.</p>
<p>We should check the model’s initial performance by looking at the metrics from the <code>classification_report()</code>. Keep in mind that we have not set thresholds for these models yet.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb75" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb75-1"><span class="co" style="color: #5E5E5E;"># Predict the labels for loan status</span></span>
<span id="cb75-2">gbt_preds<span class="op" style="color: #5E5E5E;">=</span> clf_gbt.predict(X_test)</span>
<span id="cb75-3"></span>
<span id="cb75-4"><span class="co" style="color: #5E5E5E;"># Check the values created by the predict method</span></span>
<span id="cb75-5"><span class="bu" style="color: null;">print</span>(gbt_preds)</span>
<span id="cb75-6"></span>
<span id="cb75-7"><span class="co" style="color: #5E5E5E;"># Print the classification report of the model</span></span>
<span id="cb75-8">target_names <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'Non-Default'</span>, <span class="st" style="color: #20794D;">'Default'</span>]</span>
<span id="cb75-9"><span class="bu" style="color: null;">print</span>(classification_report(y_test, gbt_preds, target_names<span class="op" style="color: #5E5E5E;">=</span>target_names))</span></code></pre></div>
</div>
<p>Have a look at the <code>precision</code> and <code>recall</code> scores! Remember the low default recall values we were getting from the <code>LogisticRegression()</code>? This model already appears to have serious potential.</p>
</section>
<section id="column-importance-and-default-prediction" class="level3">
<h3 class="anchored" data-anchor-id="column-importance-and-default-prediction">3.4 Column importance and default prediction</h3>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Credit Risk Modelling in Python/Credit_Risk_Modelling_files/figure-html/db771536-78b4-4e31-8c7f-f6d578673f3f.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">column_importance.JPG</figcaption><p></p>
</figure>
</div>
<p>When using multiple training sets with many different groups of columns, it’s important to keep an eye on which columns matter and which do not. It can be expensive or time-consuming to maintain a set of columns even though they might not have any impact on <code>loan_status</code>.</p>
<p>The <code>X</code> data for this exercise was created with the following code:</p>
<pre><code>X = cr_loan_prep[['person_income','loan_int_rate',
              'loan_percent_income','loan_amnt',
              'person_home_ownership_MORTGAGE','loan_grade_F']]
              </code></pre>
<p>Train an <code>XGBClassifier()</code> model on this data, and check the column importance to see how each one performs to predict <code>loan_status</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb77" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb77-1"><span class="co" style="color: #5E5E5E;"># redefine our feature columns</span></span>
<span id="cb77-2">X <span class="op" style="color: #5E5E5E;">=</span> cr_loan_prep[[<span class="st" style="color: #20794D;">'person_income'</span>,<span class="st" style="color: #20794D;">'loan_int_rate'</span>,<span class="st" style="color: #20794D;">'loan_percent_income'</span>,<span class="st" style="color: #20794D;">'loan_amnt'</span>,<span class="st" style="color: #20794D;">'person_home_ownership_MORTGAGE'</span>,<span class="st" style="color: #20794D;">'loan_grade_F'</span>]]              </span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb78" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb78-1"><span class="co" style="color: #5E5E5E;"># train, test, split</span></span>
<span id="cb78-2">X_train, X_test, y_train, y_test <span class="op" style="color: #5E5E5E;">=</span> train_test_split(X, y, test_size<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">.4</span>, random_state<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">123</span>)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb79" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb79-1"><span class="co" style="color: #5E5E5E;"># Create and train the model on the training data</span></span>
<span id="cb79-2">gbt <span class="op" style="color: #5E5E5E;">=</span> xgb.XGBClassifier().fit(X_train,np.ravel(y_train))</span>
<span id="cb79-3"></span>
<span id="cb79-4"><span class="co" style="color: #5E5E5E;"># Print the column importances from the model</span></span>
<span id="cb79-5"><span class="bu" style="color: null;">print</span>(gbt.get_booster().get_score(importance_type <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'weight'</span>))</span></code></pre></div>
</div>
<p>So, the importance for <code>loan_grade_F</code> is only 9 in this case. This could be because there are so few of the F-grade loans. While the F-grade loans don’t add much to predictions here, they might affect the importance of other training columns.</p>
</section>
<section id="visualizing-column-importance" class="level3">
<h3 class="anchored" data-anchor-id="visualizing-column-importance">3.5 Visualizing column importance</h3>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Credit Risk Modelling in Python/Credit_Risk_Modelling_files/figure-html/876f2de5-61d6-4701-9408-90067bb33de3.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">column_importance_plot.JPG</figcaption><p></p>
</figure>
</div>
<p>When the model is trained on different sets of columns it changes the performance, but does the importance for the same column change depending on which group it’s in?</p>
<p>The data sets <code>X2</code> and <code>X3</code> have been created with the following code:</p>
<pre><code>X2 = cr_loan_prep[['loan_int_rate','person_emp_length']] \
X3 = cr_loan_prep[['person_income','loan_int_rate','loan_percent_income']]</code></pre>
<div class="cell">
<div class="sourceCode cell-code" id="cb81" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb81-1"><span class="co" style="color: #5E5E5E;"># Redefine feature columns</span></span>
<span id="cb81-2">X2 <span class="op" style="color: #5E5E5E;">=</span> cr_loan_prep[[<span class="st" style="color: #20794D;">'loan_int_rate'</span>,<span class="st" style="color: #20794D;">'person_emp_length'</span>]] </span>
<span id="cb81-3">X3 <span class="op" style="color: #5E5E5E;">=</span> cr_loan_prep[[<span class="st" style="color: #20794D;">'person_income'</span>,<span class="st" style="color: #20794D;">'loan_int_rate'</span>,<span class="st" style="color: #20794D;">'loan_percent_income'</span>]]</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb82" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb82-1"><span class="co" style="color: #5E5E5E;"># train, test, split</span></span>
<span id="cb82-2">X2_train, X2_test, y_train, y_test <span class="op" style="color: #5E5E5E;">=</span> train_test_split(X2, y, test_size<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">.4</span>, random_state<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">123</span>)</span>
<span id="cb82-3">X3_train, X3_test, y_train, y_test <span class="op" style="color: #5E5E5E;">=</span> train_test_split(X3, y, test_size<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">.4</span>, random_state<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">123</span>)</span></code></pre></div>
</div>
<p>Understanding how different columns are used to arrive at a <code>loan_status</code> prediction is very important for model interpretability.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb83" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb83-1"><span class="co" style="color: #5E5E5E;"># Train a model on the X data with 2 columns</span></span>
<span id="cb83-2">gbt2 <span class="op" style="color: #5E5E5E;">=</span> xgb.XGBClassifier().fit(X2_train,np.ravel(y_train))</span>
<span id="cb83-3"></span>
<span id="cb83-4"><span class="co" style="color: #5E5E5E;"># Plot the column importance for this model</span></span>
<span id="cb83-5">xgb.plot_importance(gbt2, importance_type <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'weight'</span>)</span>
<span id="cb83-6">plt.show()</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb84" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb84-1"><span class="co" style="color: #5E5E5E;"># Train a model on the X data with 3 columns</span></span>
<span id="cb84-2">gbt3 <span class="op" style="color: #5E5E5E;">=</span> xgb.XGBClassifier().fit(X3_train,np.ravel(y_train))</span>
<span id="cb84-3"></span>
<span id="cb84-4"><span class="co" style="color: #5E5E5E;"># Plot the column importance for this model</span></span>
<span id="cb84-5">xgb.plot_importance(gbt3, importance_type <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'weight'</span>)</span>
<span id="cb84-6">plt.show()</span></code></pre></div>
</div>
<p>Take a closer look at the plots. Did you notice that the importance of <code>loan_int_rate</code> went from 1490 to 1013? Initially, this was the most important column, but <code>person_income</code> ended up taking the top spot here.</p>
</section>
<section id="column-selection-and-model-performance" class="level3">
<h3 class="anchored" data-anchor-id="column-selection-and-model-performance">3.6 Column selection and model performance</h3>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Credit Risk Modelling in Python/Credit_Risk_Modelling_files/figure-html/874cfea6-b780-45df-a77c-4edcf0399606.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">train_columns.JPG</figcaption><p></p>
</figure>
</div>
<p>Creating the training set from different combinations of columns affects the model and the importance values of the columns. Does a different selection of columns also affect the F-1 scores, the combination of the <code>precision</code> and <code>recall</code>, of the model? You can answer this question by training two different models on two different sets of columns, and checking the performance.</p>
<p>Inaccurately predicting defaults as non-default can result in unexpected losses if the probability of default for these loans was very low. You can use the F-1 score for defaults to see how the models will accurately predict the defaults.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb85" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb85-1"><span class="co" style="color: #5E5E5E;"># Predict the loan_status using each model</span></span>
<span id="cb85-2">gbt_preds <span class="op" style="color: #5E5E5E;">=</span> gbt.predict(X_test)</span>
<span id="cb85-3">gbt2_preds <span class="op" style="color: #5E5E5E;">=</span> gbt2.predict(X2_test)</span>
<span id="cb85-4"></span>
<span id="cb85-5"><span class="co" style="color: #5E5E5E;"># Print the classification report of the first model</span></span>
<span id="cb85-6">target_names <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'Non-Default'</span>, <span class="st" style="color: #20794D;">'Default'</span>]</span>
<span id="cb85-7"><span class="bu" style="color: null;">print</span>(classification_report(y_test,gbt_preds, target_names<span class="op" style="color: #5E5E5E;">=</span>target_names))</span>
<span id="cb85-8"></span>
<span id="cb85-9"><span class="co" style="color: #5E5E5E;"># Print the classification report of the second model</span></span>
<span id="cb85-10"><span class="bu" style="color: null;">print</span>(classification_report(y_test, gbt2_preds, target_names<span class="op" style="color: #5E5E5E;">=</span>target_names))</span></code></pre></div>
</div>
<p>Originally, it looked like the selection of columns affected model <code>accuracy</code> the most, but now we see that the selection of columns also affects <code>recall</code> by quite a bit.</p>
</section>
<section id="cross-validating-credit-models" class="level3">
<h3 class="anchored" data-anchor-id="cross-validating-credit-models">3.7 Cross validating credit models</h3>
<p>We cannot create more loan data to help us to develop our model but we can use <code>cross-validation</code> to simulate how our model will perform on new laon data before it comes in.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Credit Risk Modelling in Python/Credit_Risk_Modelling_files/figure-html/5f721045-b2a9-4b48-be0b-132cb3e4b12a.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">cross_validation.JPG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Credit Risk Modelling in Python/Credit_Risk_Modelling_files/figure-html/457a85e6-cacb-4e22-92a7-ed6d18ec8f96.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">k_fold.JPG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Credit Risk Modelling in Python/Credit_Risk_Modelling_files/figure-html/31461a29-791f-44e7-b880-e905a444ff9c.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">xgb_cross_valid_setup.JPG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Credit Risk Modelling in Python/Credit_Risk_Modelling_files/figure-html/d79dd6e8-81d1-4581-9c82-65f3eaa19bd1.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">xgb_cross_valid_setup_2.JPG</figcaption><p></p>
</figure>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb86" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb86-1"><span class="co" style="color: #5E5E5E;"># Set the values for number of folds and stopping iterations</span></span>
<span id="cb86-2">n_folds <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">5</span></span>
<span id="cb86-3">early_stopping <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">10</span></span>
<span id="cb86-4"></span>
<span id="cb86-5"><span class="co" style="color: #5E5E5E;"># define params dictionary</span></span>
<span id="cb86-6">params <span class="op" style="color: #5E5E5E;">=</span> {<span class="st" style="color: #20794D;">'objective'</span>: <span class="st" style="color: #20794D;">'binary:logistic'</span>, <span class="st" style="color: #20794D;">'seed'</span>: <span class="dv" style="color: #AD0000;">123</span>, <span class="st" style="color: #20794D;">'eval_metric'</span>: <span class="st" style="color: #20794D;">'auc'</span>}</span>
<span id="cb86-7"></span>
<span id="cb86-8"><span class="co" style="color: #5E5E5E;"># Create the DTrain matrix for XGBoost</span></span>
<span id="cb86-9">DTrain <span class="op" style="color: #5E5E5E;">=</span> xgb.DMatrix(X_train, label <span class="op" style="color: #5E5E5E;">=</span> y_train)</span>
<span id="cb86-10"></span>
<span id="cb86-11"><span class="co" style="color: #5E5E5E;"># Create the data frame of cross validations</span></span>
<span id="cb86-12">cv_df <span class="op" style="color: #5E5E5E;">=</span> xgb.cv(params, DTrain, num_boost_round <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">5</span>, nfold<span class="op" style="color: #5E5E5E;">=</span>n_folds,</span>
<span id="cb86-13">            early_stopping_rounds<span class="op" style="color: #5E5E5E;">=</span>early_stopping)</span>
<span id="cb86-14"></span>
<span id="cb86-15"><span class="co" style="color: #5E5E5E;"># Print the cross validations data frame</span></span>
<span id="cb86-16"><span class="bu" style="color: null;">print</span>(cv_df)</span></code></pre></div>
</div>
<p>Looks good! Note how the AUC for both <code>train-auc-mean</code> and <code>test-auc-mean</code> improves at each iteration of cross-validation. The improvements suggest that our model has stability, however if we increase iterations will our scores improve until they eventually reach 1.0 ?</p>
</section>
<section id="limits-to-cross-validation-testing" class="level3">
<h3 class="anchored" data-anchor-id="limits-to-cross-validation-testing">3.8 Limits to cross-validation testing</h3>
<p>We can specify very large numbers for both <code>nfold</code> and <code>num_boost_round</code> if we want to perform an extreme amount of cross-validation. The data frame <code>cv_results_big</code> was created with the following code:</p>
<pre><code>cv = xgb.cv(params, DTrain, num_boost_round = 600, nfold=10,
        shuffle = True)
        </code></pre>
<p>Here, <code>cv()</code> performed 600 iterations of cross-validation! The parameter shuffle tells the function to shuffle the records each time.</p>
<p>Have a look at this data to see what the AUC are, and check to see if they reach 1.0 using cross validation. We should also plot the test AUC score to see the progression.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb88" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb88-1">cv_results_big <span class="op" style="color: #5E5E5E;">=</span> xgb.cv(params, DTrain, num_boost_round <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">600</span>, nfold<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10</span>, shuffle <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb89" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb89-1"><span class="co" style="color: #5E5E5E;"># Print the first five rows of the CV results data frame</span></span>
<span id="cb89-2">cv_results_big.head()</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb90" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb90-1"><span class="co" style="color: #5E5E5E;"># Calculate the mean of the test AUC scores</span></span>
<span id="cb90-2">np.mean(cv_results_big.head()[<span class="st" style="color: #20794D;">'test-auc-mean'</span>]).<span class="bu" style="color: null;">round</span>(<span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb90-3"></span>
<span id="cb90-4"><span class="co" style="color: #5E5E5E;"># Plot the test AUC scores for each iteration</span></span>
<span id="cb90-5">plt.plot(cv_results_big[<span class="st" style="color: #20794D;">'test-auc-mean'</span>])</span>
<span id="cb90-6">plt.title(<span class="st" style="color: #20794D;">'Test AUC Score Over 600 Iterations'</span>)</span>
<span id="cb90-7">plt.xlabel(<span class="st" style="color: #20794D;">'Iteration Number'</span>)</span>
<span id="cb90-8">plt.ylabel(<span class="st" style="color: #20794D;">'Test AUC Score'</span>)</span>
<span id="cb90-9">plt.show()</span></code></pre></div>
</div>
<p>Notice that the test AUC score never quite reaches 1.0 and begins to decrease slightly after 100 iterations. This is because this much cross-validation can actually cause the model to overfit. So, there is a <code>limit</code> to how much cross-validation we should do.</p>
</section>
<section id="cross-validation-scoring" class="level3">
<h3 class="anchored" data-anchor-id="cross-validation-scoring">3.9 Cross-validation scoring</h3>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Credit Risk Modelling in Python/Credit_Risk_Modelling_files/figure-html/e5010ef6-4fbe-444f-956b-6e3fe64072da.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">cross_val_score.JPG</figcaption><p></p>
</figure>
</div>
<p>Now, we should use cross-validation scoring with <code>cross_val_score()</code> to check the overall performance.</p>
<p>This is exercise presents an excellent opportunity to test out the use of the hyperparameters <code>learning_rate</code> and <code>max_depth</code>. Remember, hyperparameters are like settings which can help create optimum performance.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb91" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb91-1">cr_loan_prep</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb92" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb92-1">X <span class="op" style="color: #5E5E5E;">=</span> cr_loan_prep.drop(<span class="st" style="color: #20794D;">'loan_status'</span>, axis <span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb92-2"><span class="co" style="color: #5E5E5E;"># train, test, split</span></span>
<span id="cb92-3">X_train, X_test, y_train, y_test <span class="op" style="color: #5E5E5E;">=</span> train_test_split(X, y, test_size<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">.4</span>, random_state<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">123</span>)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb93" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb93-1">X_train</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb94" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb94-1"><span class="co" style="color: #5E5E5E;"># import</span></span>
<span id="cb94-2"><span class="im" style="color: #00769E;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;">import</span> cross_val_score</span>
<span id="cb94-3"></span>
<span id="cb94-4"><span class="co" style="color: #5E5E5E;"># Create a gradient boosted tree model using two hyperparameters</span></span>
<span id="cb94-5">gbt <span class="op" style="color: #5E5E5E;">=</span> xgb.XGBClassifier(learning_rate <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.1</span>, max_depth <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">7</span>)</span>
<span id="cb94-6"></span>
<span id="cb94-7"><span class="co" style="color: #5E5E5E;"># Calculate the cross validation scores for 4 folds</span></span>
<span id="cb94-8">cv_scores <span class="op" style="color: #5E5E5E;">=</span> cross_val_score(gbt, X_train, np.ravel(y_train), cv<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">4</span>)</span>
<span id="cb94-9"></span>
<span id="cb94-10"><span class="co" style="color: #5E5E5E;"># Print the cross validation scores</span></span>
<span id="cb94-11"><span class="bu" style="color: null;">print</span>(cv_scores)</span>
<span id="cb94-12"></span>
<span id="cb94-13"><span class="co" style="color: #5E5E5E;"># Print the average accuracy and standard deviation of the scores</span></span>
<span id="cb94-14"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Average accuracy: </span><span class="sc" style="color: #5E5E5E;">%0.2f</span><span class="st" style="color: #20794D;"> (+/- </span><span class="sc" style="color: #5E5E5E;">%0.2f</span><span class="st" style="color: #20794D;">)"</span> <span class="op" style="color: #5E5E5E;">%</span> (cv_scores.mean(),</span>
<span id="cb94-15">                                              cv_scores.std() <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">2</span>))</span></code></pre></div>
</div>
<p>Our average cv_score for this model is getting higher! With only a couple of hyperparameters and cross-validation, we can get the average accuracy up to 93%. This is a great way to validate how robust the model is.</p>
</section>
<section id="undersampling-training-data" class="level3">
<h3 class="anchored" data-anchor-id="undersampling-training-data">3.10 Undersampling training data</h3>
<p>We just used <code>cross validation</code> to check the robustness of our model but let’s look at how the data impacts the robustness of our model. In our training dataset there are far more <code>non-defaults</code> than defaults. This is referred to as <code>class imbalance</code> and is a problem.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Credit Risk Modelling in Python/Credit_Risk_Modelling_files/figure-html/7e60e6f9-093f-494b-9609-04f9c5240926.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">imbalance_causes.JPG</figcaption><p></p>
</figure>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb95" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb95-1">y_train[<span class="st" style="color: #20794D;">'loan_status'</span>].value_counts()</span></code></pre></div>
</div>
<p>We have 13,798 non defaults (78%) and 3,877 defaults (22%).</p>
<p>Our tree models use a function called <code>log-loss</code> which our model tries to minimise. Take the example below, where we have one default and one non-default. Each of the predictions is equally far away from the true outcome, and so the log-losss value is the same - however, the financial implications of an incorrect <code>default</code> prediction are much more severe than an incorrect non-default prediction.</p>
<p>One strategy we can adopt to restore the balance of our training data is <code>undersampling</code> :</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Credit Risk Modelling in Python/Credit_Risk_Modelling_files/figure-html/467d7494-6dcf-4f12-9172-42264379b8f6.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">undersampling.JPG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Credit Risk Modelling in Python/Credit_Risk_Modelling_files/figure-html/f44b158b-ed4d-4f6b-ab94-148d1ef3de93.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">undersample_train_test_split_1.JPG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Credit Risk Modelling in Python/Credit_Risk_Modelling_files/figure-html/2cc99b89-b60b-4428-82c8-682cf7960509.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">undersample_train_test_split_2.JPG</figcaption><p></p>
</figure>
</div>
<p>It’s time to undersample the training set with a few lines of code from pandas. Once the undersampling is complete, we can check the value counts for <code>loan_status</code> to verify the results.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb96" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb96-1"><span class="co" style="color: #5E5E5E;"># Concat the training sets</span></span>
<span id="cb96-2">X_y_train <span class="op" style="color: #5E5E5E;">=</span> pd.concat([X_train.reset_index(drop <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">True</span>),</span>
<span id="cb96-3">                       y_train.reset_index(drop <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">True</span>)], axis <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb96-4"></span>
<span id="cb96-5"><span class="co" style="color: #5E5E5E;"># Get counts of non default and defaults</span></span>
<span id="cb96-6">count_nondefault, count_default <span class="op" style="color: #5E5E5E;">=</span> X_y_train[<span class="st" style="color: #20794D;">'loan_status'</span>].value_counts()</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb97" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb97-1"><span class="co" style="color: #5E5E5E;"># Create data sets for defaults and non-defaults</span></span>
<span id="cb97-2">nondefaults <span class="op" style="color: #5E5E5E;">=</span> X_y_train[X_y_train[<span class="st" style="color: #20794D;">'loan_status'</span>] <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb97-3">defaults <span class="op" style="color: #5E5E5E;">=</span>  X_y_train[ X_y_train[<span class="st" style="color: #20794D;">'loan_status'</span>] <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb97-4"></span>
<span id="cb97-5"><span class="co" style="color: #5E5E5E;"># Undersample the non-defaults</span></span>
<span id="cb97-6">nondefaults_under <span class="op" style="color: #5E5E5E;">=</span> nondefaults.sample(count_default)</span>
<span id="cb97-7"></span>
<span id="cb97-8"><span class="co" style="color: #5E5E5E;"># Concatenate the undersampled nondefaults with defaults</span></span>
<span id="cb97-9">X_y_train_under <span class="op" style="color: #5E5E5E;">=</span> pd.concat([nondefaults_under.reset_index(drop <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">True</span>),</span>
<span id="cb97-10">                             defaults.reset_index(drop <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">True</span>)], axis <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb97-11"></span>
<span id="cb97-12"><span class="co" style="color: #5E5E5E;"># Print the value counts for loan status</span></span>
<span id="cb97-13"><span class="bu" style="color: null;">print</span>(X_y_train_under[<span class="st" style="color: #20794D;">'loan_status'</span>].value_counts())</span></code></pre></div>
</div>
<p>Great. We now have a training set with an equal number of defaults and non-defaults. Let’s test out some machine learning models on this new undersampled data set and compare their performance to the models trained on the regular data set.</p>
</section>
<section id="undersampled-tree-performance" class="level3">
<h3 class="anchored" data-anchor-id="undersampled-tree-performance">3.11 Undersampled tree performance</h3>
<p>We’ve undersampled the training set and trained a model on the undersampled set.</p>
<p>The performance of the model’s predictions not only impact the probability of default on the test set, but also on the scoring of new loan applications as they come in. We also now know that it is even more important that the <code>recall</code> of defaults be high, because a default predicted as non-default is more costly.</p>
<p>The next crucial step is to compare the new model’s performance to the original model.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb98" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb98-1"><span class="co" style="color: #5E5E5E;"># Check the classification reports</span></span>
<span id="cb98-2">target_names <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'Non-Default'</span>, <span class="st" style="color: #20794D;">'Default'</span>]</span>
<span id="cb98-3"></span>
<span id="cb98-4"><span class="co" style="color: #5E5E5E;"># print classification report for old model</span></span>
<span id="cb98-5"><span class="bu" style="color: null;">print</span>(classification_report(y_test, gbt_preds, target_names<span class="op" style="color: #5E5E5E;">=</span>target_names))</span></code></pre></div>
</div>
<pre><code>             precision    recall  f1-score   support

 Non-Default       0.93      0.99      0.96      9198
     Default       0.95      0.73      0.83      2586

    accuracy                           0.93     11784
   macro avg       0.94      0.86      0.89     11784
weighted avg       0.93      0.93      0.93     11784 </code></pre>
<div class="cell">
<div class="sourceCode cell-code" id="cb100" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb100-1"><span class="co" style="color: #5E5E5E;"># print classification report for new model</span></span>
<span id="cb100-2"><span class="bu" style="color: null;">print</span>(classification_report(y_test, gbt2_preds, target_names<span class="op" style="color: #5E5E5E;">=</span>target_names))</span></code></pre></div>
</div>
<pre><code>             precision    recall  f1-score   support

 Non-Default       0.95      0.91      0.93      9198
     Default       0.72      0.84      0.77      2586

    accuracy                           0.89     11784
   macro avg       0.83      0.87      0.85     11784
weighted avg       0.90      0.89      0.89     11784</code></pre>
<div class="cell">
<div class="sourceCode cell-code" id="cb102" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb102-1"><span class="co" style="color: #5E5E5E;"># Print the confusion matrix for old model</span></span>
<span id="cb102-2"><span class="bu" style="color: null;">print</span>(confusion_matrix(y_test,gbt_preds))</span></code></pre></div>
</div>
<p>[[9105 93] [ 691 1895]]</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb103" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb103-1"><span class="co" style="color: #5E5E5E;"># Print the confusion matrix for new model</span></span>
<span id="cb103-2"><span class="bu" style="color: null;">print</span>(confusion_matrix(y_test,gbt2_preds))</span></code></pre></div>
</div>
<p>[[8338 860] [ 426 2160]]</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb104" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb104-1"><span class="co" style="color: #5E5E5E;"># Print and compare the AUC scores of the old model</span></span>
<span id="cb104-2"><span class="bu" style="color: null;">print</span>(roc_auc_score(y_test, gbt_preds))</span></code></pre></div>
</div>
<p>0.8613405315086655</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb105" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb105-1"><span class="co" style="color: #5E5E5E;"># Print and compare the AUC scores of the new model</span></span>
<span id="cb105-2"><span class="bu" style="color: null;">print</span>(roc_auc_score(y_test,gbt2_preds))</span></code></pre></div>
</div>
<p>0.870884117348218</p>
<p>Looks like this is classified as a success! Undersampling the training data results in more false positives, but the recall for defaults and the AUC score are both higher than the original model. This means overall it predicts defaults much more accurately.</p>
</section>
<section id="undersampling-intuition" class="level3">
<h3 class="anchored" data-anchor-id="undersampling-intuition">3.12 Undersampling intuition</h3>
<p>Now we’ve seen the effects of undersampling the training set to improve default prediction. We undersampled the training data set X_train, and it had a positive impact on the new model’s AUC score and recall for defaults. The training data had class imbalance which is normal for most credit loan data.</p>
<p>We did not undersample the test data X_test. Why not undersample the test set as well?</p>
<p>The test set represents the type of data that will be seen by the model in the real world, so changing it would test the model on unrealistic data.</p>
</section>
</section>
<section id="model-evaluation-and-implementation" class="level2">
<h2 class="anchored" data-anchor-id="model-evaluation-and-implementation">4. Model evaluation and implementation</h2>
<p>After developing and testing two powerful machine learning models, we use key performance <code>metrics</code> to compare them. Using advanced model selection techniques specifically for financial modeling, we will select one model. With that model, we will:</p>
<ul>
<li>develop a business strategy</li>
<li>estimate portfolio value, and</li>
<li>minimize expected loss</li>
</ul>
<section id="comparing-model-reports" class="level3">
<h3 class="anchored" data-anchor-id="comparing-model-reports">4.1 Comparing model reports</h3>
<p>We’ve used <code>logistic regression</code> models and <code>gradient boosted trees</code>. It’s time to compare these two to see which model will be used to make the final predictions.</p>
<p>One of the easiest first steps for comparing different models’ ability to predict the probability of default is to look at their metrics from the <code>classification_report()</code>. With this, we can see many different scoring <code>metrics</code> side-by-side for each model. Because the data and models are normally unbalanced with few defaults, focus on the metrics for defaults for now.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb106" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb106-1"><span class="co" style="color: #5E5E5E;"># Print the logistic regression classification report</span></span>
<span id="cb106-2">target_names <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'Non-Default'</span>, <span class="st" style="color: #20794D;">'Default'</span>]</span>
<span id="cb106-3"><span class="bu" style="color: null;">print</span>(classification_report(y_test, preds_df_lr[<span class="st" style="color: #20794D;">'loan_status'</span>], target_names<span class="op" style="color: #5E5E5E;">=</span>target_names))</span></code></pre></div>
</div>
<pre><code>               precision    recall  f1-score   support

 Non-Default       0.86      0.92      0.89      9198
     Default       0.62      0.46      0.53      2586

    accuracy                           0.82     11784
   macro avg       0.74      0.69      0.71     11784
weighted avg       0.81      0.82      0.81     11784</code></pre>
<div class="cell">
<div class="sourceCode cell-code" id="cb108" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb108-1"><span class="co" style="color: #5E5E5E;"># Print the gradient boosted tree classification report</span></span>
<span id="cb108-2"><span class="bu" style="color: null;">print</span>(classification_report(y_test, preds_df_gbt[<span class="st" style="color: #20794D;">'loan_status'</span>], target_names<span class="op" style="color: #5E5E5E;">=</span>target_names))</span></code></pre></div>
</div>
<pre><code>              precision    recall  f1-score   support

 Non-Default       0.93      0.99      0.96      9198
     Default       0.94      0.73      0.82      2586

    accuracy                           0.93     11784
   macro avg       0.93      0.86      0.89     11784
weighted avg       0.93      0.93      0.93     11784</code></pre>
<div class="cell">
<div class="sourceCode cell-code" id="cb110" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb110-1"><span class="co" style="color: #5E5E5E;"># Print the default F-1 scores for the logistic regression</span></span>
<span id="cb110-2"><span class="bu" style="color: null;">print</span>(precision_recall_fscore_support(y_test,preds_df_lr[<span class="st" style="color: #20794D;">'loan_status'</span>], average <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'macro'</span>)[<span class="dv" style="color: #AD0000;">2</span>])</span></code></pre></div>
</div>
<p>0.7108943782814463</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb111" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb111-1"><span class="co" style="color: #5E5E5E;"># Print the default F-1 scores for the gradient boosted tree</span></span>
<span id="cb111-2"><span class="bu" style="color: null;">print</span>(precision_recall_fscore_support(y_test,preds_df_gbt[<span class="st" style="color: #20794D;">'loan_status'</span>], average <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'macro'</span>)[<span class="dv" style="color: #AD0000;">2</span>])</span></code></pre></div>
</div>
<p>0.8909014142736051</p>
<p>There is a noticeable difference between these two models. The scores from the <code>classification_report()</code> are all higher for the gradient boosted tree. This means the tree model is better in all of these aspects. Let’s check the ROC curve.</p>
</section>
<section id="comparing-with-rocs-and-aucs" class="level3">
<h3 class="anchored" data-anchor-id="comparing-with-rocs-and-aucs">4.2 Comparing with ROCs and AUCs</h3>
<p>We should use ROC charts and AUC scores to compare the two models. Sometimes, visuals can really help you and potential business users understand the differences between the various models under consideration.</p>
<p>With the graph in mind, we will be more equipped to make a decision. The lift is how far the curve is from the random prediction. The AUC is the area between the curve and the random prediction. The model with more lift, and a higher AUC, is the one that’s better at making predictions accurately.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb112" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb112-1"><span class="co" style="color: #5E5E5E;"># ROC chart components</span></span>
<span id="cb112-2">fallout_lr, sensitivity_lr, thresholds_lr <span class="op" style="color: #5E5E5E;">=</span> roc_curve(y_test, clf_logistic_preds)</span>
<span id="cb112-3">fallout_gbt, sensitivity_gbt, thresholds_gbt <span class="op" style="color: #5E5E5E;">=</span> roc_curve(y_test, clf_gbt_preds)</span>
<span id="cb112-4"></span>
<span id="cb112-5"><span class="co" style="color: #5E5E5E;"># ROC Chart with both</span></span>
<span id="cb112-6">plt.plot(fallout_lr, sensitivity_lr, color <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'blue'</span>, label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'</span><span class="sc" style="color: #5E5E5E;">%s</span><span class="st" style="color: #20794D;">'</span> <span class="op" style="color: #5E5E5E;">%</span> <span class="st" style="color: #20794D;">'Logistic Regression'</span>)</span>
<span id="cb112-7">plt.plot(fallout_gbt, sensitivity_gbt, color <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'green'</span>, label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'</span><span class="sc" style="color: #5E5E5E;">%s</span><span class="st" style="color: #20794D;">'</span> <span class="op" style="color: #5E5E5E;">%</span> <span class="st" style="color: #20794D;">'GBT'</span>)</span>
<span id="cb112-8">plt.plot([<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>], [<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>], linestyle<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'--'</span>, label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'</span><span class="sc" style="color: #5E5E5E;">%s</span><span class="st" style="color: #20794D;">'</span> <span class="op" style="color: #5E5E5E;">%</span> <span class="st" style="color: #20794D;">'Random Prediction'</span>)</span>
<span id="cb112-9">plt.title(<span class="st" style="color: #20794D;">"ROC Chart for LR and GBT on the Probability of Default"</span>)</span>
<span id="cb112-10">plt.xlabel(<span class="st" style="color: #20794D;">'Fall-out'</span>)</span>
<span id="cb112-11">plt.ylabel(<span class="st" style="color: #20794D;">'Sensitivity'</span>)</span>
<span id="cb112-12">plt.legend()</span>
<span id="cb112-13">plt.show()</span></code></pre></div>
</div>
<p><img src="https://stephen137.github.io/posts/Credit Risk Modelling in Python/ROC_lr_gbt.svg" width="600" height="600"></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb113" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb113-1"><span class="co" style="color: #5E5E5E;"># Print the logistic regression AUC with formatting</span></span>
<span id="cb113-2"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Logistic Regression AUC Score: </span><span class="sc" style="color: #5E5E5E;">%0.2f</span><span class="st" style="color: #20794D;">"</span> <span class="op" style="color: #5E5E5E;">%</span> roc_auc_score(y_test, clf_logistic_preds))</span>
<span id="cb113-3"></span>
<span id="cb113-4"><span class="co" style="color: #5E5E5E;"># Print the gradient boosted tree AUC with formatting</span></span>
<span id="cb113-5"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Gradient Boosted Tree AUC Score: </span><span class="sc" style="color: #5E5E5E;">%0.2f</span><span class="st" style="color: #20794D;">"</span> <span class="op" style="color: #5E5E5E;">%</span> roc_auc_score(y_test, clf_gbt_preds))</span></code></pre></div>
</div>
<p>Logistic Regression AUC Score: 0.76 Gradient Boosted Tree AUC Score: 0.94</p>
<p>Look at the ROC curve for the gradient boosted tree. Not only is the lift much higher, the calculated AUC score is also quite a bit higher. It’s beginning to look like the gradient boosted tree is best. Let’s check the calibration to be sure.</p>
</section>
<section id="calibration-curves" class="level3">
<h3 class="anchored" data-anchor-id="calibration-curves">4.3 Calibration curves</h3>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Credit Risk Modelling in Python/Credit_Risk_Modelling_files/figure-html/a84da456-3cf6-481f-83fc-c078323ad14f.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">calibration.JPG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Credit Risk Modelling in Python/Credit_Risk_Modelling_files/figure-html/67ede203-7a31-4063-9059-eb0e9569dba8.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">calibration_calc.JPG</figcaption><p></p>
</figure>
</div>
<p>We now know that the gradient boosted tree <code>clf_gbt</code> has the best overall performance. You need to check the calibration of the two models to see how stable the default prediction performance is across probabilities. We can use a chart of each model’s calibration to check this by calling the <code>calibration_curve()</code> function.</p>
<p>Calibration curves can require many lines of code in python, so we will go through each step slowly to add the different components.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb114" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb114-1"><span class="co" style="color: #5E5E5E;"># Set calibration curve outputs</span></span>
<span id="cb114-2">frac_of_pos_lr <span class="op" style="color: #5E5E5E;">=</span> ([<span class="fl" style="color: #AD0000;">0.07886231</span>, <span class="fl" style="color: #AD0000;">0.06610942</span>, <span class="fl" style="color: #AD0000;">0.10835913</span>, <span class="fl" style="color: #AD0000;">0.13505074</span>, <span class="fl" style="color: #AD0000;">0.16063348</span>, <span class="fl" style="color: #AD0000;">0.18333333</span>, <span class="fl" style="color: #AD0000;">0.21268657</span>, <span class="fl" style="color: #AD0000;">0.24099099</span>, <span class="fl" style="color: #AD0000;">0.48036649</span>, <span class="fl" style="color: #AD0000;">0.72677596</span>,</span>
<span id="cb114-3">       <span class="fl" style="color: #AD0000;">0.73354232</span>, <span class="fl" style="color: #AD0000;">0.70547945</span>, <span class="fl" style="color: #AD0000;">0.68</span> , <span class="fl" style="color: #AD0000;">0.73913043</span>, <span class="fl" style="color: #AD0000;">0.55555556</span>, <span class="fl" style="color: #AD0000;">0.4</span> ])</span>
<span id="cb114-4"></span>
<span id="cb114-5">mean_pred_val_lr <span class="op" style="color: #5E5E5E;">=</span> ([<span class="fl" style="color: #AD0000;">0.02111464</span>, <span class="fl" style="color: #AD0000;">0.07548788</span>, <span class="fl" style="color: #AD0000;">0.12582662</span>, <span class="fl" style="color: #AD0000;">0.17502903</span>, <span class="fl" style="color: #AD0000;">0.22449499</span>, <span class="fl" style="color: #AD0000;">0.27491676</span>, <span class="fl" style="color: #AD0000;">0.32488847</span>, <span class="fl" style="color: #AD0000;">0.37486698</span>, <span class="fl" style="color: #AD0000;">0.42302912</span>, <span class="fl" style="color: #AD0000;">0.47397249</span>,</span>
<span id="cb114-6">       <span class="fl" style="color: #AD0000;">0.52304288</span>, <span class="fl" style="color: #AD0000;">0.57259508</span>, <span class="fl" style="color: #AD0000;">0.62200793</span>, <span class="fl" style="color: #AD0000;">0.67156702</span>, <span class="fl" style="color: #AD0000;">0.71909209</span>, <span class="fl" style="color: #AD0000;">0.77024859</span>])</span>
<span id="cb114-7"></span>
<span id="cb114-8"></span>
<span id="cb114-9">frac_of_pos_gbt <span class="op" style="color: #5E5E5E;">=</span> ([<span class="fl" style="color: #AD0000;">0.01916168</span>, <span class="fl" style="color: #AD0000;">0.06385752</span>, <span class="fl" style="color: #AD0000;">0.12795793</span>, <span class="fl" style="color: #AD0000;">0.17460317</span>, <span class="fl" style="color: #AD0000;">0.21806854</span>, <span class="fl" style="color: #AD0000;">0.32620321</span>, <span class="fl" style="color: #AD0000;">0.32653061</span>, <span class="fl" style="color: #AD0000;">0.33333333</span>, <span class="fl" style="color: #AD0000;">0.40677966</span>, <span class="fl" style="color: #AD0000;">0.43181818</span>,</span>
<span id="cb114-10">       <span class="fl" style="color: #AD0000;">0.6</span>, <span class="fl" style="color: #AD0000;">0.42105263</span>, <span class="fl" style="color: #AD0000;">0.31578947</span>, <span class="fl" style="color: #AD0000;">0.6875</span>, <span class="fl" style="color: #AD0000;">0.78571429</span>, <span class="fl" style="color: #AD0000;">0.83333333</span>, <span class="fl" style="color: #AD0000;">0.90697674</span>, <span class="fl" style="color: #AD0000;">0.95238095</span>, <span class="fl" style="color: #AD0000;">0.98850575</span>, <span class="fl" style="color: #AD0000;">1.</span>])</span>
<span id="cb114-11"></span>
<span id="cb114-12">mean_pred_val_gbt <span class="op" style="color: #5E5E5E;">=</span> ([<span class="fl" style="color: #AD0000;">0.01937249</span>, <span class="fl" style="color: #AD0000;">0.07211534</span>, <span class="fl" style="color: #AD0000;">0.12178284</span>, <span class="fl" style="color: #AD0000;">0.17298488</span>, <span class="fl" style="color: #AD0000;">0.22318428</span>, <span class="fl" style="color: #AD0000;">0.2716055</span>, <span class="fl" style="color: #AD0000;">0.32285183</span>, <span class="fl" style="color: #AD0000;">0.369344</span>, <span class="fl" style="color: #AD0000;">0.42164062</span>, <span class="fl" style="color: #AD0000;">0.47158214</span>,</span>
<span id="cb114-13">       <span class="fl" style="color: #AD0000;">0.52230485</span>, <span class="fl" style="color: #AD0000;">0.57041398</span>, <span class="fl" style="color: #AD0000;">0.62149714</span>, <span class="fl" style="color: #AD0000;">0.67234764</span>, <span class="fl" style="color: #AD0000;">0.72826275</span>, <span class="fl" style="color: #AD0000;">0.77567046</span>, <span class="fl" style="color: #AD0000;">0.82827961</span>, <span class="fl" style="color: #AD0000;">0.87636708</span>, <span class="fl" style="color: #AD0000;">0.92830987</span>, <span class="fl" style="color: #AD0000;">0.98579916</span>])</span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Credit Risk Modelling in Python/Credit_Risk_Modelling_files/figure-html/00451667-5c10-46e5-af24-a07a67f89559.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">calibration_plot.JPG</figcaption><p></p>
</figure>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb115" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb115-1"><span class="co" style="color: #5E5E5E;"># Create the calibration curve plot with the guideline</span></span>
<span id="cb115-2">plt.plot([<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>], [<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>], <span class="st" style="color: #20794D;">'k:'</span>, label<span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"Perfectly calibrated"</span>)    </span>
<span id="cb115-3">plt.ylabel(<span class="st" style="color: #20794D;">'Fraction of positives'</span>)</span>
<span id="cb115-4">plt.xlabel(<span class="st" style="color: #20794D;">'Average Predicted Probability'</span>)</span>
<span id="cb115-5">plt.legend()</span>
<span id="cb115-6">plt.title(<span class="st" style="color: #20794D;">'Calibration Curve'</span>)</span>
<span id="cb115-7">plt.show()</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb116" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb116-1"><span class="co" style="color: #5E5E5E;"># Add the calibration curve for the logistic regression to the plot</span></span>
<span id="cb116-2">plt.plot([<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>], [<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>], <span class="st" style="color: #20794D;">'k:'</span>, label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Perfectly calibrated'</span>)    </span>
<span id="cb116-3">plt.plot(mean_pred_val_lr, frac_of_pos_lr,</span>
<span id="cb116-4">         <span class="st" style="color: #20794D;">'s-'</span>, label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'</span><span class="sc" style="color: #5E5E5E;">%s</span><span class="st" style="color: #20794D;">'</span> <span class="op" style="color: #5E5E5E;">%</span> <span class="st" style="color: #20794D;">'Logistic Regression'</span>)</span>
<span id="cb116-5">plt.ylabel(<span class="st" style="color: #20794D;">'Fraction of positives'</span>)</span>
<span id="cb116-6">plt.xlabel(<span class="st" style="color: #20794D;">'Average Predicted Probability'</span>)</span>
<span id="cb116-7">plt.legend()</span>
<span id="cb116-8">plt.title(<span class="st" style="color: #20794D;">'Calibration Curve'</span>)</span>
<span id="cb116-9">plt.show()</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb117" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb117-1"><span class="co" style="color: #5E5E5E;"># Add the calibration curve for the gradient boosted tree</span></span>
<span id="cb117-2">plt.plot([<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>], [<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>], <span class="st" style="color: #20794D;">'k:'</span>, label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Perfectly calibrated'</span>)    </span>
<span id="cb117-3">plt.plot(mean_pred_val_lr, frac_of_pos_lr,</span>
<span id="cb117-4">         <span class="st" style="color: #20794D;">'s-'</span>, label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'</span><span class="sc" style="color: #5E5E5E;">%s</span><span class="st" style="color: #20794D;">'</span> <span class="op" style="color: #5E5E5E;">%</span> <span class="st" style="color: #20794D;">'Logistic Regression'</span>)</span>
<span id="cb117-5">plt.plot(mean_pred_val_gbt, frac_of_pos_gbt,</span>
<span id="cb117-6">         <span class="st" style="color: #20794D;">'s-'</span>, label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'</span><span class="sc" style="color: #5E5E5E;">%s</span><span class="st" style="color: #20794D;">'</span> <span class="op" style="color: #5E5E5E;">%</span> <span class="st" style="color: #20794D;">'Gradient Boosted tree'</span>)</span>
<span id="cb117-7">plt.ylabel(<span class="st" style="color: #20794D;">'Fraction of positives'</span>)</span>
<span id="cb117-8">plt.xlabel(<span class="st" style="color: #20794D;">'Average Predicted Probability'</span>)</span>
<span id="cb117-9">plt.legend()</span>
<span id="cb117-10">plt.title(<span class="st" style="color: #20794D;">'Calibration Curve'</span>)</span>
<span id="cb117-11">plt.show()</span></code></pre></div>
</div>
<p>Take a good look at this. Notice that for the logistic regression, the calibration for probabilities starts off great but then gets more erratic as it the average probability approaches 0.4. Something similar happens to the gradient boosted tree around 0.5, but the model eventually stabilizes. We will be focusing only on the <code>gbt</code> model from now on.</p>
</section>
<section id="acceptance-rates" class="level3">
<h3 class="anchored" data-anchor-id="acceptance-rates">4.4 Acceptance rates</h3>
<p>Setting an acceptance rate and calculating the threshold for that rate can be used to set the percentage of new loans we want to accept.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Credit Risk Modelling in Python/Credit_Risk_Modelling_files/figure-html/6ddc1852-ff33-4b52-8d3e-4e87d5c49e85.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">acceptance_rate.JPG</figcaption><p></p>
</figure>
</div>
<p>In the above example, the distribution of our loans is represented in terms of their probability of default. 85% of our loans are to the left of the dashed line, with and 15% are to the right of the dashed line. If our policy is to ensure that 15% of loans are rejected, then the dashed line represents the <code>acceptance threshold</code>. We can see by reading off the graph that we should therefore reject any new loan applications with predicted probability of default of around 78% or above.</p>
<p>In our example, the exact <code>acceptance threshold</code> can be calculated using <a href="https://numpy.org/doc/stable/reference/generated/numpy.quantile.html">Numpy quantile</a>.</p>
<pre><code>import numpy as np
threshold = np.quantile(prob_default, 0.85)</code></pre>
<p>We would then reassign our <code>loan_status</code> values as we did before arbitrarily, with the calculated threshold:</p>
<pre><code>preds_df['loan_status'] = preds_df['prob_default'].apply(lambda x: 1 if x &gt; 0.78 else 0)        </code></pre>
<p>Let’s see how this works in more detail by applying to our loan data. For this exercise, assume the test data is a fresh batch of new loans. We will need to use the quantile() function from numpy to calculate the threshold.</p>
<p>The threshold should be used to assign new loan_status values. Does the number of defaults and non-defaults in the data change?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb120" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb120-1"><span class="co" style="color: #5E5E5E;"># Check the statistics of the probabilities of default</span></span>
<span id="cb120-2"><span class="bu" style="color: null;">print</span>(test_pred_df[<span class="st" style="color: #20794D;">'prob_default'</span>].describe())</span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Credit Risk Modelling in Python/Credit_Risk_Modelling_files/figure-html/bdb631d0-35b6-40ec-bbce-1847f469be3e.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">default_stats.JPG</figcaption><p></p>
</figure>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb121" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb121-1"><span class="co" style="color: #5E5E5E;"># Calculate the threshold for a 85% acceptance rate</span></span>
<span id="cb121-2">threshold_85<span class="op" style="color: #5E5E5E;">=</span> np.quantile(test_pred_df[<span class="st" style="color: #20794D;">'prob_default'</span>], <span class="fl" style="color: #AD0000;">0.85</span>)</span></code></pre></div>
</div>
<p>0.8039963573217376</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb122" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb122-1"><span class="co" style="color: #5E5E5E;"># Apply acceptance rate threshold</span></span>
<span id="cb122-2">test_pred_df[<span class="st" style="color: #20794D;">'pred_loan_status'</span>] <span class="op" style="color: #5E5E5E;">=</span> test_pred_df[<span class="st" style="color: #20794D;">'prob_default'</span>].<span class="bu" style="color: null;">apply</span>(<span class="kw" style="color: #003B4F;">lambda</span> x: <span class="dv" style="color: #AD0000;">1</span> <span class="cf" style="color: #003B4F;">if</span> x <span class="op" style="color: #5E5E5E;">&gt;</span> threshold_85 <span class="cf" style="color: #003B4F;">else</span> <span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb122-3"></span>
<span id="cb122-4"><span class="co" style="color: #5E5E5E;"># Print the counts of loan status after the threshold</span></span>
<span id="cb122-5"><span class="bu" style="color: null;">print</span>(test_pred_df[<span class="st" style="color: #20794D;">'pred_loan_status'</span>].value_counts())</span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Credit Risk Modelling in Python/Credit_Risk_Modelling_files/figure-html/2ddd5dbd-1bc4-4a39-ae94-c4b8c739f6e2.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">loan_status_counts.JPG</figcaption><p></p>
</figure>
</div>
<p>In the results of <code>.describe()</code> we can see how it’s not until 75% that we start to see double-digit numbers. That’s because the majority of our test set is non-default loans. Next let’s look at how the acceptance rate and threshold split up the data.</p>
</section>
<section id="visualizing-quantiles-of-acceptance" class="level3">
<h3 class="anchored" data-anchor-id="visualizing-quantiles-of-acceptance">4.5 Visualizing quantiles of acceptance</h3>
<p>We know how <code>quantile()</code> works to compute a threshold, and we’ve seen an example of what it does to split the loans into accepted and rejected. What does this threshold look like for the test set, and how can you visualize it? To check this, we can create a <code>histogram</code> of the probabilities and add a reference line for the threshold. With this, we can visually show where the threshold exists in the distribution.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb123" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb123-1"><span class="co" style="color: #5E5E5E;"># Plot the predicted probabilities of default</span></span>
<span id="cb123-2">plt.hist(clf_gbt_preds, color <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'blue'</span>, bins <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">40</span>)</span>
<span id="cb123-3"></span>
<span id="cb123-4"><span class="co" style="color: #5E5E5E;"># Calculate the threshold with quantile</span></span>
<span id="cb123-5">threshold <span class="op" style="color: #5E5E5E;">=</span> np.quantile(clf_gbt_preds, <span class="fl" style="color: #AD0000;">0.85</span>)</span>
<span id="cb123-6"></span>
<span id="cb123-7"><span class="co" style="color: #5E5E5E;"># Add a reference line to the plot for the threshold</span></span>
<span id="cb123-8">plt.axvline(x <span class="op" style="color: #5E5E5E;">=</span> threshold, color <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'red'</span>)</span>
<span id="cb123-9">plt.show()</span></code></pre></div>
</div>
<p><img src="https://stephen137.github.io/posts/Credit Risk Modelling in Python/acceptance_threshold.svg" width="600" height="600"></p>
<p>Here, we can clearly see where the threshold is on the range of predicted probabilities - 0.804 as calculated in section 4.4 - and indicated by the red line. Not only can we see how many loans will be accepted (left side), but also how many loans will be rejected (right side).</p>
</section>
<section id="bad-rates" class="level3">
<h3 class="anchored" data-anchor-id="bad-rates">4.6 Bad rates</h3>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Credit Risk Modelling in Python/Credit_Risk_Modelling_files/figure-html/a149d043-6d19-4093-a8cf-3a4c2fcf0433.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">bad_rate.JPG</figcaption><p></p>
</figure>
</div>
<p>With acceptance rate in mind, we can now analyze the <code>bad rate</code> within the accepted loans. This way we will be able to see the percentage of defaults that have been accepted. Think about the impact of the <code>acceptance rate</code> and <code>bad rate</code>. We set an acceptance rate to have fewer defaults in the portfolio because defaults are more costly. Will the bad rate be less than the percentage of defaults in the test data?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb124" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb124-1"><span class="co" style="color: #5E5E5E;"># Print the top 5 rows of the new data frame</span></span>
<span id="cb124-2"><span class="bu" style="color: null;">print</span>(test_pred_df.head())</span></code></pre></div>
</div>
<pre><code>    true_loan_status  prob_default  pred_loan_status
0                 1         0.982                 1
1                 1         0.975                 1
2                 0         0.003                 0
3                 0         0.005                 0
4                 1         0.120                 0</code></pre>
<div class="cell">
<div class="sourceCode cell-code" id="cb126" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb126-1"><span class="co" style="color: #5E5E5E;"># Create a subset of only accepted loans</span></span>
<span id="cb126-2">accepted_loans <span class="op" style="color: #5E5E5E;">=</span> test_pred_df[test_pred_df[<span class="st" style="color: #20794D;">'pred_loan_status'</span>] <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb126-3"></span>
<span id="cb126-4"><span class="co" style="color: #5E5E5E;"># Calculate the bad rate</span></span>
<span id="cb126-5"><span class="bu" style="color: null;">print</span>(np.<span class="bu" style="color: null;">sum</span>(accepted_loans[<span class="st" style="color: #20794D;">'true_loan_status'</span>]) <span class="op" style="color: #5E5E5E;">/</span> accepted_loans[<span class="st" style="color: #20794D;">'true_loan_status'</span>].count())</span></code></pre></div>
</div>
<p>0.08256789137380191</p>
<p>This bad rate doesn’t look half bad! The bad rate with the threshold set by the 85% <code>quantile()</code> is just over 8%. This means that of all the loans we’ve decided to accept from the test set, only 8% were actual defaults! If we accepted all loans, the percentage of defaults would be around 22%.</p>
</section>
<section id="acceptance-rate-impact" class="level3">
<h3 class="anchored" data-anchor-id="acceptance-rate-impact">4.7 Acceptance rate impact</h3>
<p>Now, look at the <code>loan_amnt</code> of each loan to understand the impact on the portfolio for the acceptance rates. We can use cross tables with calculated values, like the average loan amount, of the new set of loans <code>X_test</code>. For this, we will multiply the number of each with an average <code>loan_amnt</code> value.</p>
<p>When printing these values, try formatting them as currency so that the numbers look more realistic. After all, credit risk is all about money. This is accomplished with the following code:</p>
<pre><code>pd.options.display.float_format = '${:,.2f}'.format</code></pre>
<div class="cell">
<div class="sourceCode cell-code" id="cb128" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb128-1"><span class="co" style="color: #5E5E5E;"># Print the statistics of the loan amount column</span></span>
<span id="cb128-2"><span class="bu" style="color: null;">print</span>(test_pred_df[<span class="st" style="color: #20794D;">'loan_amnt'</span>].describe())</span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Credit Risk Modelling in Python/Credit_Risk_Modelling_files/figure-html/fdfdf456-c75b-44ef-a961-6e5ee55ccfe4.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">loan_amount_stats.JPG</figcaption><p></p>
</figure>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb129" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb129-1"><span class="co" style="color: #5E5E5E;"># Store the average loan amount</span></span>
<span id="cb129-2">avg_loan <span class="op" style="color: #5E5E5E;">=</span> np.mean(test_pred_df[<span class="st" style="color: #20794D;">'loan_amnt'</span>])</span>
<span id="cb129-3"></span>
<span id="cb129-4"><span class="co" style="color: #5E5E5E;"># Set the formatting for currency, and print the cross tab</span></span>
<span id="cb129-5">pd.options.display.float_format <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'${:,.2f}'</span>.<span class="bu" style="color: null;">format</span></span>
<span id="cb129-6"></span>
<span id="cb129-7"><span class="co" style="color: #5E5E5E;"># print the cross table</span></span>
<span id="cb129-8"><span class="bu" style="color: null;">print</span>(pd.crosstab(test_pred_df[<span class="st" style="color: #20794D;">'true_loan_status'</span>],</span>
<span id="cb129-9">                 test_pred_df[<span class="st" style="color: #20794D;">'pred_loan_status_15'</span>]).<span class="bu" style="color: null;">apply</span>(<span class="kw" style="color: #003B4F;">lambda</span> x: x <span class="op" style="color: #5E5E5E;">*</span> avg_loan, axis <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span>))</span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Credit Risk Modelling in Python/Credit_Risk_Modelling_files/figure-html/28b89639-e7ba-4487-8c0f-7ab9e8208439.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">pred_loan_status.JPG</figcaption><p></p>
</figure>
</div>
<p>With this, we can see that our bad rate of about 8% represents an estimated loan value of about 7.9 million dollars. This may seem like a lot at first, but compare it to the total value of non-default loans! With this, we are ready to start talking about our acceptance strategy going forward.</p>
</section>
<section id="making-the-strategy-table" class="level3">
<h3 class="anchored" data-anchor-id="making-the-strategy-table">4.8 Making the strategy table</h3>
<p>Before we implement a strategy, we should first create a strategy table containing all the possible acceptance rates we wish to look at along with their associated bad rates and threshold values. This way, we can begin to see each part of our strategy and how it affects our portfolio.</p>
<p>Automatically calculating all of these values only requires a for loop, but requires many lines of python code.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Credit Risk Modelling in Python/Credit_Risk_Modelling_files/figure-html/eb96b0a7-aa66-437f-b8f9-32437a99c74a.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">strategy_table_setup.JPG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Credit Risk Modelling in Python/Credit_Risk_Modelling_files/figure-html/f70c6468-7f3f-4758-ba49-38458985472f.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">strategy_table_calcs.JPG</figcaption><p></p>
</figure>
</div>
<div class="cell" data-execution_count="56">
<div class="sourceCode cell-code" id="cb130" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb130-1"><span class="co" style="color: #5E5E5E;"># create empty lists for thresholds and bad rates - to be appended</span></span>
<span id="cb130-2">thresholds <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb130-3">bad_rates <span class="op" style="color: #5E5E5E;">=</span> []</span></code></pre></div>
</div>
<div class="cell" data-execution_count="57">
<div class="sourceCode cell-code" id="cb131" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb131-1"><span class="co" style="color: #5E5E5E;"># let's set the accept rates that we would like to compare calculations for</span></span>
<span id="cb131-2">accept_rates <span class="op" style="color: #5E5E5E;">=</span> [<span class="fl" style="color: #AD0000;">1.0</span>, <span class="fl" style="color: #AD0000;">0.95</span>, <span class="fl" style="color: #AD0000;">0.9</span>, <span class="fl" style="color: #AD0000;">0.85</span>, <span class="fl" style="color: #AD0000;">0.8</span>, <span class="fl" style="color: #AD0000;">0.75</span>, <span class="fl" style="color: #AD0000;">0.7</span>, <span class="fl" style="color: #AD0000;">0.65</span>, <span class="fl" style="color: #AD0000;">0.6</span>, <span class="fl" style="color: #AD0000;">0.55</span>, <span class="fl" style="color: #AD0000;">0.5</span>, <span class="fl" style="color: #AD0000;">0.45</span>, <span class="fl" style="color: #AD0000;">0.4</span>, <span class="fl" style="color: #AD0000;">0.35</span>, <span class="fl" style="color: #AD0000;">0.3</span>, <span class="fl" style="color: #AD0000;">0.25</span>, <span class="fl" style="color: #AD0000;">0.2</span>, <span class="fl" style="color: #AD0000;">0.15</span>, <span class="fl" style="color: #AD0000;">0.1</span>, <span class="fl" style="color: #AD0000;">0.05</span>]</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb132" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb132-1"><span class="co" style="color: #5E5E5E;"># Populate the arrays for the strategy table with a for loop</span></span>
<span id="cb132-2"><span class="cf" style="color: #003B4F;">for</span> rate <span class="kw" style="color: #003B4F;">in</span> accept_rates:</span>
<span id="cb132-3">    </span>
<span id="cb132-4">    <span class="co" style="color: #5E5E5E;"># Calculate the threshold for the acceptance rate</span></span>
<span id="cb132-5">    thresh <span class="op" style="color: #5E5E5E;">=</span> np.quantile(preds_df_gbt[<span class="st" style="color: #20794D;">'prob_default'</span>], rate).<span class="bu" style="color: null;">round</span>(<span class="dv" style="color: #AD0000;">3</span>)</span>
<span id="cb132-6">    </span>
<span id="cb132-7">    <span class="co" style="color: #5E5E5E;"># Add the threshold value to the list of thresholds</span></span>
<span id="cb132-8">    thresholds.append(np.quantile(preds_df_gbt[<span class="st" style="color: #20794D;">'prob_default'</span>], rate).<span class="bu" style="color: null;">round</span>(<span class="dv" style="color: #AD0000;">3</span>))</span>
<span id="cb132-9">    </span>
<span id="cb132-10">    <span class="co" style="color: #5E5E5E;"># Reassign the loan_status value using the threshold</span></span>
<span id="cb132-11">    test_pred_df[<span class="st" style="color: #20794D;">'pred_loan_status'</span>] <span class="op" style="color: #5E5E5E;">=</span> test_pred_df[<span class="st" style="color: #20794D;">'prob_default'</span>].<span class="bu" style="color: null;">apply</span>(<span class="kw" style="color: #003B4F;">lambda</span> x: <span class="dv" style="color: #AD0000;">1</span> <span class="cf" style="color: #003B4F;">if</span> x <span class="op" style="color: #5E5E5E;">&gt;</span> thresh <span class="cf" style="color: #003B4F;">else</span> <span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb132-12">    </span>
<span id="cb132-13">    <span class="co" style="color: #5E5E5E;"># Create a set of accepted loans using this acceptance rate</span></span>
<span id="cb132-14">    accepted_loans <span class="op" style="color: #5E5E5E;">=</span> test_pred_df[test_pred_df[<span class="st" style="color: #20794D;">'pred_loan_status'</span>] <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb132-15">    </span>
<span id="cb132-16">    <span class="co" style="color: #5E5E5E;"># Calculate and append the bad rate using the acceptance rate</span></span>
<span id="cb132-17">    bad_rates.append(np.<span class="bu" style="color: null;">sum</span>((accepted_loans[<span class="st" style="color: #20794D;">'true_loan_status'</span>]) <span class="op" style="color: #5E5E5E;">/</span> <span class="bu" style="color: null;">len</span>(accepted_loans[<span class="st" style="color: #20794D;">'true_loan_status'</span>])).<span class="bu" style="color: null;">round</span>(<span class="dv" style="color: #AD0000;">3</span>))</span></code></pre></div>
</div>
<div class="cell" data-execution_count="60">
<div class="sourceCode cell-code" id="cb133" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb133-1"><span class="co" style="color: #5E5E5E;"># Instantiate the values for thresholds and bad rates</span></span>
<span id="cb133-2">thresholds <span class="op" style="color: #5E5E5E;">=</span> [<span class="fl" style="color: #AD0000;">1.0</span>, <span class="fl" style="color: #AD0000;">0.992</span>, <span class="fl" style="color: #AD0000;">0.976</span>, <span class="fl" style="color: #AD0000;">0.804</span>, <span class="fl" style="color: #AD0000;">0.254</span>, <span class="fl" style="color: #AD0000;">0.178</span>, <span class="fl" style="color: #AD0000;">0.138</span>, <span class="fl" style="color: #AD0000;">0.111</span>, <span class="fl" style="color: #AD0000;">0.093</span>, <span class="fl" style="color: #AD0000;">0.078</span>, <span class="fl" style="color: #AD0000;">0.066</span>, <span class="fl" style="color: #AD0000;">0.055</span>, <span class="fl" style="color: #AD0000;">0.045</span>, <span class="fl" style="color: #AD0000;">0.037</span>, <span class="fl" style="color: #AD0000;">0.03</span>, <span class="fl" style="color: #AD0000;">0.022</span>, <span class="fl" style="color: #AD0000;">0.015</span>, <span class="fl" style="color: #AD0000;">0.008</span>, <span class="fl" style="color: #AD0000;">0.004</span>, <span class="fl" style="color: #AD0000;">0.002</span>]</span>
<span id="cb133-3">bad_rates <span class="op" style="color: #5E5E5E;">=</span> [<span class="fl" style="color: #AD0000;">0.219</span>, <span class="fl" style="color: #AD0000;">0.179</span>, <span class="fl" style="color: #AD0000;">0.132</span>, <span class="fl" style="color: #AD0000;">0.083</span>, <span class="fl" style="color: #AD0000;">0.061</span>, <span class="fl" style="color: #AD0000;">0.052</span>, <span class="fl" style="color: #AD0000;">0.043</span>, <span class="fl" style="color: #AD0000;">0.036</span>, <span class="fl" style="color: #AD0000;">0.03</span>, <span class="fl" style="color: #AD0000;">0.027</span>, <span class="fl" style="color: #AD0000;">0.023</span>, <span class="fl" style="color: #AD0000;">0.02</span>, <span class="fl" style="color: #AD0000;">0.017</span>, <span class="fl" style="color: #AD0000;">0.014</span>, <span class="fl" style="color: #AD0000;">0.01</span>, <span class="fl" style="color: #AD0000;">0.008</span>, <span class="fl" style="color: #AD0000;">0.005</span>, <span class="fl" style="color: #AD0000;">0.001</span>, <span class="fl" style="color: #AD0000;">0.0</span>, <span class="fl" style="color: #AD0000;">0.0</span>]</span></code></pre></div>
</div>
<div class="cell" data-execution_count="68">
<div class="sourceCode cell-code" id="cb134" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb134-1"><span class="co" style="color: #5E5E5E;"># Create a data frame of the strategy table</span></span>
<span id="cb134-2">strat_df <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(<span class="bu" style="color: null;">zip</span>(accept_rates, thresholds, bad_rates),</span>
<span id="cb134-3">                        columns <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'Acceptance Rate'</span>,<span class="st" style="color: #20794D;">'Threshold'</span>,<span class="st" style="color: #20794D;">'Bad Rate'</span>])</span>
<span id="cb134-4"></span>
<span id="cb134-5"><span class="co" style="color: #5E5E5E;"># Print the entire table</span></span>
<span id="cb134-6">strat_df</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="68">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>Acceptance Rate</th>
      <th>Threshold</th>
      <th>Bad Rate</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1.00</td>
      <td>1.000</td>
      <td>0.219</td>
    </tr>
    <tr>
      <th>1</th>
      <td>0.95</td>
      <td>0.992</td>
      <td>0.179</td>
    </tr>
    <tr>
      <th>2</th>
      <td>0.90</td>
      <td>0.976</td>
      <td>0.132</td>
    </tr>
    <tr>
      <th>3</th>
      <td>0.85</td>
      <td>0.804</td>
      <td>0.083</td>
    </tr>
    <tr>
      <th>4</th>
      <td>0.80</td>
      <td>0.254</td>
      <td>0.061</td>
    </tr>
    <tr>
      <th>5</th>
      <td>0.75</td>
      <td>0.178</td>
      <td>0.052</td>
    </tr>
    <tr>
      <th>6</th>
      <td>0.70</td>
      <td>0.138</td>
      <td>0.043</td>
    </tr>
    <tr>
      <th>7</th>
      <td>0.65</td>
      <td>0.111</td>
      <td>0.036</td>
    </tr>
    <tr>
      <th>8</th>
      <td>0.60</td>
      <td>0.093</td>
      <td>0.030</td>
    </tr>
    <tr>
      <th>9</th>
      <td>0.55</td>
      <td>0.078</td>
      <td>0.027</td>
    </tr>
    <tr>
      <th>10</th>
      <td>0.50</td>
      <td>0.066</td>
      <td>0.023</td>
    </tr>
    <tr>
      <th>11</th>
      <td>0.45</td>
      <td>0.055</td>
      <td>0.020</td>
    </tr>
    <tr>
      <th>12</th>
      <td>0.40</td>
      <td>0.045</td>
      <td>0.017</td>
    </tr>
    <tr>
      <th>13</th>
      <td>0.35</td>
      <td>0.037</td>
      <td>0.014</td>
    </tr>
    <tr>
      <th>14</th>
      <td>0.30</td>
      <td>0.030</td>
      <td>0.010</td>
    </tr>
    <tr>
      <th>15</th>
      <td>0.25</td>
      <td>0.022</td>
      <td>0.008</td>
    </tr>
    <tr>
      <th>16</th>
      <td>0.20</td>
      <td>0.015</td>
      <td>0.005</td>
    </tr>
    <tr>
      <th>17</th>
      <td>0.15</td>
      <td>0.008</td>
      <td>0.001</td>
    </tr>
    <tr>
      <th>18</th>
      <td>0.10</td>
      <td>0.004</td>
      <td>0.000</td>
    </tr>
    <tr>
      <th>19</th>
      <td>0.05</td>
      <td>0.002</td>
      <td>0.000</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>That for loop was a lot of code, but look at the strategy table we have now. This uses our specific predictions on the credit data, and can be used to see the acceptance rates, bad rates, and financial impact all at once. One of these values has the highest estimated value.</p>
</section>
<section id="visualizing-the-strategy" class="level3">
<h3 class="anchored" data-anchor-id="visualizing-the-strategy">4.9 Visualizing the strategy</h3>
<p>Now we have the extended strategy table <code>strat_df</code>. The table is not so big that it’s difficult to analyze, but visuals can help us see the overview all at once.</p>
<p>We should check the distribution of each column with a box plot. If the distribution of <code>Acceptance Rate</code> looks the same as the <code>Bad Rate</code> column, that could be a problem. That means that the model’s calibration is likely much worse than we thought.</p>
<p>We can also visualize the strategy curve with a line plot. The <code>Acceptance Rate</code> would be the <code>independent</code> variable with the <code>Bad Rate</code> as the <code>dependent</code> variable.</p>
<div class="cell" data-execution_count="69">
<div class="sourceCode cell-code" id="cb135" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb135-1"><span class="co" style="color: #5E5E5E;"># Visualize the distributions in the strategy table with a boxplot</span></span>
<span id="cb135-2">strat_df.boxplot()</span>
<span id="cb135-3">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Credit Risk Modelling in Python/Credit_Risk_Modelling_files/figure-html/cell-101-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>The boxplots above show us the distribution for each column.</p>
<div class="cell" data-execution_count="73">
<div class="sourceCode cell-code" id="cb136" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb136-1"><span class="co" style="color: #5E5E5E;"># Plot the strategy curve</span></span>
<span id="cb136-2">plt.plot(strat_df[<span class="st" style="color: #20794D;">'Acceptance Rate'</span>], strat_df[<span class="st" style="color: #20794D;">'Bad Rate'</span>]) </span>
<span id="cb136-3">plt.plot()</span>
<span id="cb136-4">plt.xlabel(<span class="st" style="color: #20794D;">'Acceptance Rate'</span>)</span>
<span id="cb136-5">plt.ylabel(<span class="st" style="color: #20794D;">'Bad Rate'</span>)</span>
<span id="cb136-6">plt.title(<span class="st" style="color: #20794D;">'Acceptance and Bad Rates'</span>)</span>
<span id="cb136-7">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Credit Risk Modelling in Python/Credit_Risk_Modelling_files/figure-html/cell-102-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>The bad rates are very low up until the acceptance rate 0.6 where they suddenly increase. This suggests that many of the accepted defaults may have a prob_default value between 0.6 and 0.8.</p>
</section>
<section id="estimated-value-profiling" class="level3">
<h3 class="anchored" data-anchor-id="estimated-value-profiling">4.10 Estimated value profiling</h3>
<p>The strategy table, <code>strat_df</code>, can be used to maximize the estimated portfolio value and minimize expected loss. Extending this table and creating some plots can be very helpful to this end.</p>
<p>The strat_df data frame is loaded and has been enhanced already with the following columns:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Credit Risk Modelling in Python/Credit_Risk_Modelling_files/figure-html/799515b6-2467-421f-a536-a0f13e026eb8.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">strategy_table_prepop.JPG</figcaption><p></p>
</figure>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb137" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb137-1"><span class="co" style="color: #5E5E5E;"># Create a line plot of estimated value</span></span>
<span id="cb137-2">plt.plot(strat_df[<span class="st" style="color: #20794D;">'Acceptance Rate'</span>],strat_df[<span class="st" style="color: #20794D;">'Estimated Value'</span>])</span>
<span id="cb137-3">plt.title(<span class="st" style="color: #20794D;">'Estimated Value by Acceptance Rate'</span>)</span>
<span id="cb137-4">plt.xlabel(<span class="st" style="color: #20794D;">'Acceptance Rate'</span>)</span>
<span id="cb137-5">plt.ylabel(<span class="st" style="color: #20794D;">'Estimated Value'</span>)</span>
<span id="cb137-6">plt.show()</span></code></pre></div>
</div>
<p><img src="https://stephen137.github.io/posts/Credit Risk Modelling in Python/estimated_value_plot.svg" width="600" height="600"></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb138" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb138-1"><span class="co" style="color: #5E5E5E;"># Print the row with the max estimated value</span></span>
<span id="cb138-2"><span class="bu" style="color: null;">print</span>(strat_df.loc[strat_df[<span class="st" style="color: #20794D;">'Estimated Value'</span>] <span class="op" style="color: #5E5E5E;">==</span> np.<span class="bu" style="color: null;">max</span>(strat_df[<span class="st" style="color: #20794D;">'Estimated Value'</span>])])</span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Credit Risk Modelling in Python/Credit_Risk_Modelling_files/figure-html/db10abe3-2d9d-4bfc-9c70-78aeb85a1a45.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">max_est_value.JPG</figcaption><p></p>
</figure>
</div>
<p>Interesting! With our credit data and our estimated averag loan value, we clearly see that the acceptance rate 0.85 has the highest potential estimated value. Normally, the allowable bad rate is set, but we can use analyses like this to explore other options.</p>
</section>
<section id="total-expected-loss" class="level3">
<h3 class="anchored" data-anchor-id="total-expected-loss">4.11 Total expected loss</h3>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Credit Risk Modelling in Python/Credit_Risk_Modelling_files/figure-html/67a6780f-028b-45ed-9aea-526cd0ce3993.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">total_expected_loss.JPG</figcaption><p></p>
</figure>
</div>
<p>It’s time to estimate the total expected loss given all our decisions. The data frame <code>test_pred_df</code> has the probability of default for each loan and that loan’s value. Use these two values to calculate the expected loss for each loan. Then, we can sum those values and get the total expected loss.</p>
<p>For this exercise, we will assume that the exposure is the full value of the loan, and the loss given default is 100%. This means that a default on each the loan is a loss of the entire amount.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb139" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb139-1"><span class="co" style="color: #5E5E5E;"># Print the first five rows of the data frame</span></span>
<span id="cb139-2"><span class="bu" style="color: null;">print</span>(test_pred_df.head())</span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Credit Risk Modelling in Python/Credit_Risk_Modelling_files/figure-html/a74628a3-6509-40aa-8a26-7a6197e090c4.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">test_pred_df.JPG</figcaption><p></p>
</figure>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb140" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb140-1"><span class="co" style="color: #5E5E5E;"># Calculate the bank's expected loss and assign it to a new column</span></span>
<span id="cb140-2">test_pred_df[<span class="st" style="color: #20794D;">'expected_loss'</span>] <span class="op" style="color: #5E5E5E;">=</span> test_pred_df[<span class="st" style="color: #20794D;">'prob_default'</span>] <span class="op" style="color: #5E5E5E;">*</span> test_pred_df[<span class="st" style="color: #20794D;">'loss_given_default'</span>] <span class="op" style="color: #5E5E5E;">*</span> test_pred_df[<span class="st" style="color: #20794D;">'loan_amnt'</span>]</span>
<span id="cb140-3"></span>
<span id="cb140-4"><span class="co" style="color: #5E5E5E;"># Calculate the total expected loss to two decimal places</span></span>
<span id="cb140-5">tot_exp_loss<span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">round</span>(np.<span class="bu" style="color: null;">sum</span>(test_pred_df[<span class="st" style="color: #20794D;">'expected_loss'</span>]),<span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb140-6"></span>
<span id="cb140-7"><span class="co" style="color: #5E5E5E;"># Print the total expected loss</span></span>
<span id="cb140-8"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Total expected loss: '</span>, <span class="st" style="color: #20794D;">'${:,.2f}'</span>.<span class="bu" style="color: null;">format</span>(tot_exp_loss))</span></code></pre></div>
</div>
<p>Total expected loss: $27,084,153.38</p>
<p>This is the total expected loss for the entire portfolio using the gradient boosted tree. 27 million US dollars may seem like a lot, but the total expected loss would have been over 28 million US dollars with the <code>logistic regression</code>. Some losses are unavoidable, but our work here might have saved the company a million dollars!</p>
</section>
</section>
<section id="key-takeaways" class="level2">
<h2 class="anchored" data-anchor-id="key-takeaways">Key takeaways</h2>
<p>Our first step was to prepare credit data for machine learning models:</p>
<ul>
<li>important to understand the data</li>
<li>improving the data allows for high performing simple models</li>
</ul>
<p>We then developed, scored and now understand <code>Logistic Regression</code> and <code>Gradient Boosted Trees</code>:</p>
<ul>
<li>these models are simple and explainable</li>
<li>their performance on probabilities is acceptable</li>
</ul>
<p>We then analyzed the performance of models by changing the data, and now understand the financial impact of results.</p>
<p>We implemented the model with an understanding of strategy. The models and framework covered:</p>
<ul>
<li>discrete-time hazard model (point in time): the probability of default is a point-in-time event</li>
<li>structural model framework: the model explains the default even based on other factors</li>
</ul>
<p>Many financial sectors prefer model interpretability:</p>
<ul>
<li><p>complex or black-box models are a risk because the business cannot explain their decisions fully. This is important, particularly when considering loan applications. The customer has a right to know on which basis their application was rejected</p></li>
<li><p>deep neural networks are often too complex</p></li>
</ul>
</section>
<section id="leaving-thoughts-and-acknowledgements" class="level2">
<h2 class="anchored" data-anchor-id="leaving-thoughts-and-acknowledgements">Leaving thoughts and acknowledgements</h2>
<p>Focus on the data:</p>
<ul>
<li>gather as much data as possible</li>
<li>use many different techniques to prepare and enhance data</li>
<li>learn about the business</li>
<li>increase value through data</li>
</ul>
<p>Model complexity can be a double-edged sword:</p>
<ul>
<li>really complex models may perform well, but are seen as a <code>black box</code></li>
<li>in many cases, business users will not accept a model they cannot understand</li>
<li>complex models can be very large and difficult to put into production</li>
</ul>
<p>Thanks to <a href="https://www.linkedin.com/in/mikecrabtree2/">Michael Crabtree</a> for creating this course on <strong>DataCamp</strong>. It explains how to interpret the <em>coefficients</em> and <em>intercepts</em> of a <code>Logistic Regression</code> model particularly well in my view.</p>


</section>

 ]]></description>
  <category>XGBoost</category>
  <category>Logistic Regression</category>
  <category>DataCamp</category>
  <guid>https://stephen137.github.io/posts/Credit Risk Modelling in Python/Credit_Risk_Modelling.html</guid>
  <pubDate>Sun, 22 Jan 2023 23:00:00 GMT</pubDate>
  <media:content url="https://stephen137.github.io/posts/Credit Risk Modelling in Python/credit_risk.png" medium="image" type="image/png" height="96" width="144"/>
</item>
<item>
  <title>Financial Forecasting in Python</title>
  <dc:creator>Stephen Barrie</dc:creator>
  <link>https://stephen137.github.io/posts/Financial Forecasting/Financial Forecasting.html</link>
  <description><![CDATA[ 




<p>In <strong>Financial Forecasting in Python</strong>, we will step into the role of CFO and learn how to advise a board of directors on key metrics while building a financial forecast, the basics of income statements and Balance Sheets, and cleaning messy financial data. During this blog we will examine real-life datasets from Netflix, Tesla, and Ford, using the <code>pandas</code> package. Following this blog we will be able to calculate financial metrics, work with assumptions and variances, and build our own forecast in Python.</p>
<section id="income-statements" class="level2">
<h2 class="anchored" data-anchor-id="income-statements">1. Income statements</h2>
<section id="tesla-motors-inc." class="level3">
<h3 class="anchored" data-anchor-id="tesla-motors-inc.">1.1 Tesla Motors Inc.</h3>
<p>In this example we have chosen to download the latest Income Statemet from Tesla Motors Inc.&nbsp;as a csv file. Let’s have a look at our raw data:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Financial Forecasting/Financial%20Forecasting_files/figure-html/5835c733-56e4-4d0f-b089-9939502a13fe.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">tesla_raw.JPG</figcaption><p></p>
</figure>
</div>
<p>Tesla has a financial year end of 31 December and we have the results for the financial years 2017 to 2021, as well as an additional column headed <code>TTM</code> which stands for <code>trailing twelve months</code> which is the most recent 12 months of data available. We will be using this column together with the historical information to produce a forecast for the 2022 financial year. .</p>
<p>There are some problems with the data. We need to ensure the data is in the desire format and eliminate any headers we don’t want to use. This could be done manually of course but this would require editing the file every time we have new data. Much better to make use of Python, in particular the <code>pandas</code> library.</p>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># get required packages</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span></code></pre></div>
</div>
<div class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># load in our financials</span></span>
<span id="cb2-2">income_statement <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(<span class="st" style="color: #20794D;">'Data/Income Statement_Annual_As Originally Reported.csv'</span>)</span></code></pre></div>
</div>
<p>Let’s focus our atttention on four key <code>metrics</code> - ‘Gross Profit’, ‘Total Revenue, ’Operating expenses’, and ‘Net Income’. To do this we’ll create a filtered income statement to only show these rows. The filtering code uses the following pattern.</p>
<pre><code>dataframe[dataframe.columnname.isin(list_of_categories)]</code></pre>
<div class="cell" data-execution_count="36">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;"># Choose some interesting metrics</span></span>
<span id="cb4-2">interesting_metrics <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'Total Revenue'</span>, <span class="st" style="color: #20794D;">'Operating Expenses'</span>, <span class="st" style="color: #20794D;">'Gross Profit'</span>, <span class="st" style="color: #20794D;">'Net Income'</span>]</span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;"># Filter for rows containing these metrics</span></span>
<span id="cb4-5">filtered_income_statement <span class="op" style="color: #5E5E5E;">=</span> income_statement[income_statement.metric.isin(interesting_metrics)]</span>
<span id="cb4-6"></span>
<span id="cb4-7"><span class="co" style="color: #5E5E5E;"># See the result</span></span>
<span id="cb4-8">filtered_income_statement</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="36">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>metric</th>
      <th>2017</th>
      <th>2018</th>
      <th>2019</th>
      <th>2020</th>
      <th>2021</th>
      <th>TTM</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>Gross Profit</td>
      <td>2222.0</td>
      <td>4042.0</td>
      <td>4069.0</td>
      <td>6630.0</td>
      <td>13606.0</td>
      <td>19923.0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>Total Revenue</td>
      <td>11759.0</td>
      <td>21461.0</td>
      <td>24578.0</td>
      <td>31536.0</td>
      <td>53823.0</td>
      <td>74863.0</td>
    </tr>
    <tr>
      <th>5</th>
      <td>Operating Expenses</td>
      <td>-3855.0</td>
      <td>-4295.0</td>
      <td>-3989.0</td>
      <td>-4636.0</td>
      <td>-7110.0</td>
      <td>-7413.0</td>
    </tr>
    <tr>
      <th>19</th>
      <td>Net Income</td>
      <td>-2241.0</td>
      <td>-1063.0</td>
      <td>-775.0</td>
      <td>862.0</td>
      <td>5644.0</td>
      <td>11223.0</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
</section>
<section id="forecasting-revenue-for-tesla" class="level3">
<h3 class="anchored" data-anchor-id="forecasting-revenue-for-tesla">1.2 Forecasting revenue for Tesla</h3>
<p>Let’s now append a new column with 2022 Forecast data, which we will assign the header “Forecast”. For this exercise, we would like to set the filtered_income_statement to only show the row ‘Revenue’.</p>
<p>Remember, the TTM column is the most recent 12-month value that we will use for the 2022 forecast. Thus far, we have the following information for 2022:</p>
<p>Total revenues for the 9 months to 30 September 2022 are 57,144 USD millions, up 58% on the 9 months to September 2021, so let’s ignore any seasonality and make a very crude estimate of revenue for 2022 for illustrative purposes of say 80,000 USD millions:</p>
<div class="cell" data-execution_count="42">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">revenue_metric <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'Total Revenue'</span>]</span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;"># Filter for rows containing the revenue metric</span></span>
<span id="cb5-4">filtered_income_statement <span class="op" style="color: #5E5E5E;">=</span> income_statement[income_statement.metric.isin(revenue_metric)]</span>
<span id="cb5-5"></span>
<span id="cb5-6"><span class="co" style="color: #5E5E5E;"># Get the number of columns in filtered_income_statement</span></span>
<span id="cb5-7">n_cols <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">len</span>(filtered_income_statement.columns)</span>
<span id="cb5-8"></span>
<span id="cb5-9"><span class="co" style="color: #5E5E5E;"># Insert a column in the correct position containing the column 'Forecast'</span></span>
<span id="cb5-10">filtered_income_statement.insert(n_cols, <span class="st" style="color: #20794D;">'Forecast'</span>, <span class="dv" style="color: #AD0000;">80000</span>) </span>
<span id="cb5-11"></span>
<span id="cb5-12">filtered_income_statement</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="42">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>metric</th>
      <th>2017</th>
      <th>2018</th>
      <th>2019</th>
      <th>2020</th>
      <th>2021</th>
      <th>TTM</th>
      <th>Forecast</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1</th>
      <td>Total Revenue</td>
      <td>11759.0</td>
      <td>21461.0</td>
      <td>24578.0</td>
      <td>31536.0</td>
      <td>53823.0</td>
      <td>74863.0</td>
      <td>80000</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>Excellent, we successfully built a new table to include the 2022 forecast from a raw dataset.</p>
</section>
</section>
<section id="balance-sheet-and-forecast-ratios" class="level2">
<h2 class="anchored" data-anchor-id="balance-sheet-and-forecast-ratios">2. Balance Sheet and forecast ratios</h2>
<section id="calculating-accounts-receivable-debtors" class="level3">
<h3 class="anchored" data-anchor-id="calculating-accounts-receivable-debtors">2.1 Calculating accounts receivable (debtors)</h3>
<p>When we sell something on credit, the credit portion is in the balance sheet under ‘Accounts Receivable’ or ‘Debtors’. For example, if credit sales are made in January with a 60-day payback period, they would be recorded in our ‘Debtors’ account in January, but only be paid (released) in March, and so on.</p>
<p>In this exercise, we will create the following lists:</p>
<ul>
<li>The credit sales in the month <code>credits</code>, which in this exercise is 60% of the sale value.</li>
<li>The total accounts receivable <code>debtors</code>, to be calculated as the credits for the current month, plus the credits of the month before, minus the credits of two months before (as we assume the credits from 2 months ago or 60 days, will be repaid by then).</li>
</ul>
<p>We have set an index for the variable <code>month</code>. The <code>month</code> value is set at 0.</p>
<div class="cell" data-execution_count="45">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;"># Create the list for sales, and empty lists for debtors and credits</span></span>
<span id="cb6-2">month <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb6-3">sales <span class="op" style="color: #5E5E5E;">=</span> [<span class="dv" style="color: #AD0000;">500</span>, <span class="dv" style="color: #AD0000;">350</span>, <span class="dv" style="color: #AD0000;">700</span>]</span>
<span id="cb6-4">debtors <span class="op" style="color: #5E5E5E;">=</span> [] </span>
<span id="cb6-5">credits <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb6-6"></span>
<span id="cb6-7"><span class="co" style="color: #5E5E5E;"># Create the statement to append the calculated figures to the debtors and credits lists</span></span>
<span id="cb6-8"><span class="cf" style="color: #003B4F;">for</span> mvalue <span class="kw" style="color: #003B4F;">in</span> sales: </span>
<span id="cb6-9">    credits.append(mvalue <span class="op" style="color: #5E5E5E;">*</span> <span class="fl" style="color: #AD0000;">0.6</span>)</span>
<span id="cb6-10">    <span class="cf" style="color: #003B4F;">if</span> month <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span>:</span>
<span id="cb6-11">        debtors.append(credits[month] <span class="op" style="color: #5E5E5E;">+</span> credits[month<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb6-12">    <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb6-13">        debtors.append(credits[month]) </span>
<span id="cb6-14">    month <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb6-15"><span class="co" style="color: #5E5E5E;"># Print the result</span></span>
<span id="cb6-16"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"The ‘Debtors’ are </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">."</span>.<span class="bu" style="color: null;">format</span>(debtors))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>The ‘Debtors’ are [300.0, 510.0, 630.0].</code></pre>
</div>
</div>
</section>
<section id="bad-debts" class="level3">
<h3 class="anchored" data-anchor-id="bad-debts">2.2 Bad debts</h3>
<p>When offering credit terms to customers, there is always a risk that the customer does not pay their debt. In the finance world, this is known as “bad debts”.</p>
<p>As we have already recorded sales, we need to record the loss of sales now, as we never received the payment.</p>
<p>This affects both the income statement and the balance sheet. In the income statement, we record a negative value in the sales for the month we write off the debt. In the balance sheet, we need to reduce our debtor’s asset.</p>
<p>The following variables have been defined for January: <code>debtors_jan = 1500</code></p>
<p>In February, we received news that a customer has gone into liquidation. This customer currently owes 500 USD.</p>
<p>We expect to recover 70% of this amount; the rest has to be written off as bad debts.</p>
<div class="cell" data-execution_count="47">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">debtors_jan <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1500</span></span>
<span id="cb8-2"></span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;"># Calculate the bad debts for February</span></span>
<span id="cb8-4">bad_debts_feb <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">500</span> <span class="op" style="color: #5E5E5E;">*</span> <span class="fl" style="color: #AD0000;">0.3</span></span>
<span id="cb8-5"></span>
<span id="cb8-6"><span class="co" style="color: #5E5E5E;"># Calculate the feb debtors amount</span></span>
<span id="cb8-7">debtors_feb <span class="op" style="color: #5E5E5E;">=</span> (debtors_jan<span class="op" style="color: #5E5E5E;">-</span> bad_debts_feb)</span>
<span id="cb8-8"></span>
<span id="cb8-9"><span class="co" style="color: #5E5E5E;"># Print the debtors for January and the bad debts and the debtors for February</span></span>
<span id="cb8-10"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"The debtors are </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;"> in January, </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;"> in February. February's bad debts are </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;"> USD."</span>.<span class="bu" style="color: null;">format</span>(debtors_jan, debtors_feb, bad_debts_feb))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>The debtors are 1500 in January, 1350.0 in February. February's bad debts are 150.0 USD.</code></pre>
</div>
</div>
<p>You can see that our debtors amount is reduced by the amount of bad debts.</p>
</section>
<section id="calculating-accounts-payable-creditors" class="level3">
<h3 class="anchored" data-anchor-id="calculating-accounts-payable-creditors">2.3 Calculating accounts payable (creditors)</h3>
<p>Now we will look at a scenario where we are the ones being granted credit. This means that we can buy something, but only have to pay for this amount later.</p>
<p>In this exercise, T-Z needs to buy nuts and bolts to produce 1000 units in January and 1200 units in February. The cost of nuts and bolts per unit is 0.25 USD. The credit terms are 50% cash upfront and 50% in 30 days.</p>
<p>Therefore, the creditors’ value, in this case, would be paid the month directly after. This means that the creditors’ value would only reflect the current month’s credit purchases.</p>
<div class="cell" data-execution_count="48">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;"># Set the cost per unit</span></span>
<span id="cb10-2">unit_cost <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.25</span></span>
<span id="cb10-3"></span>
<span id="cb10-4"><span class="co" style="color: #5E5E5E;"># Create the list for production units and empty list for creditors</span></span>
<span id="cb10-5">production <span class="op" style="color: #5E5E5E;">=</span> [<span class="dv" style="color: #AD0000;">1000</span>,<span class="dv" style="color: #AD0000;">1200</span>]</span>
<span id="cb10-6">creditors <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb10-7"></span>
<span id="cb10-8"><span class="co" style="color: #5E5E5E;"># Calculate the accounts payable for January and February</span></span>
<span id="cb10-9"><span class="cf" style="color: #003B4F;">for</span> mvalue <span class="kw" style="color: #003B4F;">in</span> production: </span>
<span id="cb10-10">    creditors.append(mvalue <span class="op" style="color: #5E5E5E;">*</span> unit_cost <span class="op" style="color: #5E5E5E;">*</span> <span class="fl" style="color: #AD0000;">0.5</span>)</span>
<span id="cb10-11">    </span>
<span id="cb10-12"><span class="co" style="color: #5E5E5E;"># Print the creditors balance for January and February</span></span>
<span id="cb10-13"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"The creditors balance for January and February are </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;"> and </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;"> USD."</span>.<span class="bu" style="color: null;">format</span>(creditors[<span class="dv" style="color: #AD0000;">0</span>], creditors[<span class="dv" style="color: #AD0000;">1</span>]))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>The creditors balance for January and February are 125.0 and 150.0 USD.</code></pre>
</div>
</div>
<p>As we can see, the Balance Sheet shows us what our real cash situation looks like, as just because we made a sale does not mean money in the bank, and incurring an expense also does not mean we have to pay it right away!</p>
</section>
<section id="debtor-days-ratio" class="level3">
<h3 class="anchored" data-anchor-id="debtor-days-ratio">2.4 Debtor days ratio</h3>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Financial Forecasting/Financial%20Forecasting_files/figure-html/cf709952-3233-4304-a146-4a8a9c464373.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">debtors_days_ratio.JPG</figcaption><p></p>
</figure>
</div>
<p>The first ratio we will look at is debtor days. This ratio looks at how many days it takes to receive our money from our debtors. It is usually calculated over a period of 1 financial year.</p>
<p>The following information is available to you:</p>
<ul>
<li>Sales for the year: 12,500 USD</li>
<li>Ending Debtors balance: 650</li>
</ul>
<div class="cell" data-execution_count="49">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;"># Create the variables</span></span>
<span id="cb12-2">debtors_end <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">650</span></span>
<span id="cb12-3">sales_tot <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">12500</span></span>
<span id="cb12-4"></span>
<span id="cb12-5"><span class="co" style="color: #5E5E5E;"># Calculate the debtor days variable</span></span>
<span id="cb12-6">ddays_ratio <span class="op" style="color: #5E5E5E;">=</span> (debtors_end<span class="op" style="color: #5E5E5E;">/</span>sales_tot) <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">365</span></span>
<span id="cb12-7"></span>
<span id="cb12-8"><span class="co" style="color: #5E5E5E;"># Print the result</span></span>
<span id="cb12-9"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"The debtor days ratio is </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">."</span>.<span class="bu" style="color: null;">format</span>(ddays_ratio))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>The debtor days ratio is 18.98.</code></pre>
</div>
</div>
</section>
<section id="days-payable-outstanding" class="level3">
<h3 class="anchored" data-anchor-id="days-payable-outstanding">2.5 Days payable outstanding</h3>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Financial Forecasting/Financial%20Forecasting_files/figure-html/93e97b27-ed58-4484-822a-fcd31bdf35be.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">creditors_days_ratio.JPG</figcaption><p></p>
</figure>
</div>
<p>We will now have a look at our accounts payable, or creditors, and a ratio called the Days Payable Outstanding (DPO).</p>
<p>This ratio is an efficiency ratio that measures the average number of days a company takes to pay its suppliers.</p>
<p>T-Z wants to know its days payable outstanding and has asked you to calculate it.</p>
<div class="cell" data-execution_count="51">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;"># Get the variables</span></span>
<span id="cb14-2">cogs_tot <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">4000</span></span>
<span id="cb14-3">creditors_end <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">650</span></span>
<span id="cb14-4"></span>
<span id="cb14-5"><span class="co" style="color: #5E5E5E;"># Calculate the days payable outstanding</span></span>
<span id="cb14-6">dpo <span class="op" style="color: #5E5E5E;">=</span> (creditors_end<span class="op" style="color: #5E5E5E;">/</span>cogs_tot)<span class="op" style="color: #5E5E5E;">*</span><span class="dv" style="color: #AD0000;">365</span></span>
<span id="cb14-7"></span>
<span id="cb14-8"><span class="co" style="color: #5E5E5E;"># Print the days payable outstanding</span></span>
<span id="cb14-9"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"The days payable outstanding is </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">."</span>.<span class="bu" style="color: null;">format</span>(dpo))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>The days payable outstanding is 59.3125.</code></pre>
</div>
</div>
</section>
<section id="days-in-inventory" class="level3">
<h3 class="anchored" data-anchor-id="days-in-inventory">2.6 Days in inventory</h3>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Financial Forecasting/Financial%20Forecasting_files/figure-html/3d8b2a0a-dd5f-4357-8a29-11653949b71d.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">days_in_inventory.JPG</figcaption><p></p>
</figure>
</div>
<p>In this exercise, we will calculate the time it takes for a company to turn inventory into sales (days in inventory or DII ratio) based on the following information:</p>
<div class="cell" data-execution_count="52">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">cogs_total <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">4000</span></span>
<span id="cb16-2">av_inv <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1900</span></span>
<span id="cb16-3">sales_tot <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">10000</span></span>
<span id="cb16-4">ob_assets <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">2000</span></span>
<span id="cb16-5">cb_assets <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">7000</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="53">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;"># Calculate the dii ratio </span></span>
<span id="cb17-2">dii_ratio <span class="op" style="color: #5E5E5E;">=</span> (av_inv<span class="op" style="color: #5E5E5E;">/</span>cogs_tot)<span class="op" style="color: #5E5E5E;">*</span><span class="dv" style="color: #AD0000;">365</span></span>
<span id="cb17-3"></span>
<span id="cb17-4"><span class="co" style="color: #5E5E5E;"># Print the result</span></span>
<span id="cb17-5"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"The DII ratio is </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">."</span>.<span class="bu" style="color: null;">format</span>(dii_ratio))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>The DII ratio is 173.375.</code></pre>
</div>
</div>
</section>
<section id="asset-turnover" class="level3">
<h3 class="anchored" data-anchor-id="asset-turnover">2.7 Asset Turnover</h3>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Financial Forecasting/Financial%20Forecasting_files/figure-html/5bd1ef99-6bcf-4c89-9977-3aeee7d4f888.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">asset_turnover.JPG</figcaption><p></p>
</figure>
</div>
<p>In this exercise, we will calculate the efficiency of a company’s assets by seeing how the company uses its assets to generate sales (asset turnover ratio):</p>
<div class="cell" data-execution_count="54">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;"># Calculate the Average Assets</span></span>
<span id="cb19-2">av_assets <span class="op" style="color: #5E5E5E;">=</span> (ob_assets <span class="op" style="color: #5E5E5E;">+</span> cb_assets)<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb19-3"></span>
<span id="cb19-4"><span class="co" style="color: #5E5E5E;"># Calculate the Asset Turnover Ratio</span></span>
<span id="cb19-5">at_ratio <span class="op" style="color: #5E5E5E;">=</span> sales_tot<span class="op" style="color: #5E5E5E;">/</span>av_assets</span>
<span id="cb19-6"></span>
<span id="cb19-7"><span class="co" style="color: #5E5E5E;"># Print the Asset Turnover Ratio</span></span>
<span id="cb19-8"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"The asset turnover ratio is </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">."</span>.<span class="bu" style="color: null;">format</span>(at_ratio))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>The asset turnover ratio is 2.2222222222222223.</code></pre>
</div>
</div>
<p>Let’s test our understanding of Balance Sheet ratios:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Financial Forecasting/Financial%20Forecasting_files/figure-html/aa6a673d-c16f-4f62-9b24-a8639abecd22.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">understanding_ratios.JPG</figcaption><p></p>
</figure>
</div>
</section>
</section>
<section id="balance-sheet" class="level2">
<h2 class="anchored" data-anchor-id="balance-sheet">3. Balance Sheet</h2>
<section id="calculating-balance-sheet-ratios-for-ford" class="level3">
<h3 class="anchored" data-anchor-id="calculating-balance-sheet-ratios-for-ford">3.1 Calculating Balance Sheet ratios for Ford</h3>
<p>Now we will look at a real life example, Ford Inc, a company producing motor vehicles. We will first upload a dataset: <code>balance_sheet</code> with the data for Ford Inc’s Balance Sheet as at 31 December 2017. The sales and cost of sales figures have been provided for 2017 within the <code>Key_Figures_Memo</code> dataset.</p>
<p>We are only interested in one line on the balance sheet, the <code>Receivables</code> (another name for Debtors), and therefore need to create a filter for this. In this exercise, we will use <em>boolean indexing</em> to filter our dataset for Receivables in the <code>metric</code> column. We will first specify our metric of interest (<code>'Receivables'</code>), and then check whether the column of interest has this value in each row. This will generate a boolean series of <code>True</code> and <code>False</code> values. With this series, we can then filter our existing dataset.</p>
<p>Once we have filtered our dataset, we can retrieve the receivables values from the most recent time period and calculate the debtor days ratio.</p>
<div class="cell" data-execution_count="68">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="co" style="color: #5E5E5E;"># read in the Ford Balance Sheet data</span></span>
<span id="cb21-2">balance_sheet <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(<span class="st" style="color: #20794D;">'Data/F-Balance-Sheet.csv'</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="70">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="co" style="color: #5E5E5E;"># Create the filter metric for Receivables</span></span>
<span id="cb22-2">receivables_metric <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'Receivables'</span>]</span>
<span id="cb22-3"></span>
<span id="cb22-4"><span class="co" style="color: #5E5E5E;"># Create a boolean series with your metric</span></span>
<span id="cb22-5">receivables_filter <span class="op" style="color: #5E5E5E;">=</span> balance_sheet.metric.isin(receivables_metric)</span>
<span id="cb22-6"></span>
<span id="cb22-7"><span class="co" style="color: #5E5E5E;"># Use the series to filter the dataset</span></span>
<span id="cb22-8">filtered_balance_sheet <span class="op" style="color: #5E5E5E;">=</span> balance_sheet[receivables_filter]</span>
<span id="cb22-9">filtered_balance_sheet </span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="70">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>metric</th>
      <th>2013-12</th>
      <th>2014-12</th>
      <th>2015-12</th>
      <th>2016-12</th>
      <th>2017-12</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>6</th>
      <td>Receivables</td>
      <td>87309.0</td>
      <td>92819.0</td>
      <td>101975.0</td>
      <td>57368.0</td>
      <td>62809.0</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="72">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="co" style="color: #5E5E5E;"># bring in values for Sales and Cost of Sales</span></span>
<span id="cb23-2">sales<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">156776</span></span>
<span id="cb23-3">cogs<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">131332</span> </span></code></pre></div>
</div>
<div class="cell" data-execution_count="73">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="co" style="color: #5E5E5E;"># From previous step</span></span>
<span id="cb24-2">receivables_metric <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'Receivables'</span>]</span>
<span id="cb24-3">receivables_filter <span class="op" style="color: #5E5E5E;">=</span> balance_sheet.metric.isin(receivables_metric)</span>
<span id="cb24-4">filtered_balance_sheet <span class="op" style="color: #5E5E5E;">=</span> balance_sheet[receivables_filter]</span>
<span id="cb24-5"></span>
<span id="cb24-6"><span class="co" style="color: #5E5E5E;"># Extract the zeroth value from the last time period (2017-12)</span></span>
<span id="cb24-7">debtors_end <span class="op" style="color: #5E5E5E;">=</span> filtered_balance_sheet[<span class="st" style="color: #20794D;">'2017-12'</span>].iloc[<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb24-8"></span>
<span id="cb24-9"><span class="co" style="color: #5E5E5E;"># Calculate the debtor days ratio</span></span>
<span id="cb24-10">ddays <span class="op" style="color: #5E5E5E;">=</span> (debtors_end<span class="op" style="color: #5E5E5E;">/</span>sales) <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">365</span></span>
<span id="cb24-11"></span>
<span id="cb24-12"><span class="co" style="color: #5E5E5E;"># Print the debtor days ratio</span></span>
<span id="cb24-13"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"The debtor day ratio is </span><span class="sc" style="color: #5E5E5E;">{:.0f}</span><span class="st" style="color: #20794D;">. A higher debtors days ratio means it takes longer to collect cash from debtors."</span>.<span class="bu" style="color: null;">format</span>(ddays))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>The debtor day ratio is 146. A higher debtors days ratio means it takes longer to collect cash from debtors.</code></pre>
</div>
</div>
<p>Next, we will learn how to append this information into our forecast.</p>
</section>
<section id="forecasting-the-balance-sheet-for-ford" class="level3">
<h3 class="anchored" data-anchor-id="forecasting-the-balance-sheet-for-ford">3.2 Forecasting the Balance Sheet for Ford</h3>
<p>Now that we have the ratios for Ford, the management wishes to improve them for the 2018 financial year.</p>
<p>There is one ratio in particular that management would like to be improved – the <code>debtor days</code> ratio, which is currently sitting at 146 days, while better than Nissan (244 days), is still much higher than Toyota, the industry leader (31 days).</p>
<p>Management would like to bring the debtor days down to below 100 days.</p>
<div class="cell" data-execution_count="74">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="co" style="color: #5E5E5E;"># set target debtor days</span></span>
<span id="cb26-2">ddays <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">99</span></span></code></pre></div>
</div>
<p>Sales are expected to increase by 10%. Calculate these forecasted sales, <code>f_sales</code> from the existing <code>sales</code> :</p>
<div class="cell" data-execution_count="76">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="co" style="color: #5E5E5E;"># Calculate the forecasted sales </span></span>
<span id="cb27-2">f_sales <span class="op" style="color: #5E5E5E;">=</span> sales <span class="op" style="color: #5E5E5E;">*</span> <span class="fl" style="color: #AD0000;">1.10</span></span>
<span id="cb27-3">f_sales</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="76">
<pre><code>172453.6</code></pre>
</div>
</div>
<p>We can rearrange the debtor days formula to calculate the closing balance of debtors needed to achieve 99 debtor days :</p>
<div class="cell" data-execution_count="77">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="co" style="color: #5E5E5E;"># Solve for the forecasted debtors' ending balance</span></span>
<span id="cb29-2">f_debtors_end <span class="op" style="color: #5E5E5E;">=</span> f_sales <span class="op" style="color: #5E5E5E;">*</span> ddays<span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">365</span></span>
<span id="cb29-3"></span>
<span id="cb29-4"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"If sales rise by 10% and the debtor days decrease to </span><span class="sc" style="color: #5E5E5E;">{:.0f}</span><span class="st" style="color: #20794D;"> then the forecasted closing balance for debtors will be </span><span class="sc" style="color: #5E5E5E;">{:.0f}</span><span class="st" style="color: #20794D;">."</span>.<span class="bu" style="color: null;">format</span>(ddays, f_debtors_end))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>If sales rise by 10% and the debtor days decrease to 99 then the forecasted closing balance for debtors will be 46775.</code></pre>
</div>
</div>
<p>Let’s now append a column to include the forecasted debtors:</p>
<div class="cell" data-execution_count="78">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="co" style="color: #5E5E5E;"># Get the number of columns in the filtered balance sheet</span></span>
<span id="cb31-2">n_cols <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">len</span>(filtered_balance_sheet.columns)</span>
<span id="cb31-3"></span>
<span id="cb31-4"><span class="co" style="color: #5E5E5E;"># Append a Forecast column of the forecasted debtors' end balance</span></span>
<span id="cb31-5">filtered_balance_sheet.insert(n_cols, <span class="st" style="color: #20794D;">'Forecast'</span>, f_debtors_end)</span>
<span id="cb31-6"></span>
<span id="cb31-7"><span class="co" style="color: #5E5E5E;"># See the result</span></span>
<span id="cb31-8">filtered_balance_sheet</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="78">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>metric</th>
      <th>2013-12</th>
      <th>2014-12</th>
      <th>2015-12</th>
      <th>2016-12</th>
      <th>2017-12</th>
      <th>Forecast</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>6</th>
      <td>Receivables</td>
      <td>87309.0</td>
      <td>92819.0</td>
      <td>101975.0</td>
      <td>57368.0</td>
      <td>62809.0</td>
      <td>46775.086027</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
</section>
</section>
<section id="financial-periods-and-how-to-work-with-them" class="level2">
<h2 class="anchored" data-anchor-id="financial-periods-and-how-to-work-with-them">4. Financial periods and how to work with them</h2>
<section id="converting-quarters-into-months" class="level3">
<h3 class="anchored" data-anchor-id="converting-quarters-into-months">4.1 Converting quarters into months</h3>
<p>A company has a challenge in separating data into months. It has received the following data:</p>
<ul>
<li>Quarter 1 = 700</li>
<li>Quarter 2 = 650</li>
</ul>
<p>The split across the months within each quarter is equal. Our goal is to separate this data into a list format containing the amounts per month for the first two quarters.</p>
<div class="cell" data-execution_count="79">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="co" style="color: #5E5E5E;"># Create a list for quarters and initialize an empty list qrtlist</span></span>
<span id="cb32-2">quarters <span class="op" style="color: #5E5E5E;">=</span> [<span class="dv" style="color: #AD0000;">700</span>, <span class="dv" style="color: #AD0000;">650</span>]</span>
<span id="cb32-3">qrtlist <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb32-4"></span>
<span id="cb32-5"><span class="co" style="color: #5E5E5E;"># Create a for loop to split the quarters into months and add to qrtlist</span></span>
<span id="cb32-6"><span class="cf" style="color: #003B4F;">for</span> qrt <span class="kw" style="color: #003B4F;">in</span> quarters:</span>
<span id="cb32-7"> month <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">round</span>(qrt <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb32-8"> qrtlist <span class="op" style="color: #5E5E5E;">=</span> qrtlist <span class="op" style="color: #5E5E5E;">+</span> [month, month, month]</span>
<span id="cb32-9"> </span>
<span id="cb32-10"><span class="co" style="color: #5E5E5E;"># Print the result</span></span>
<span id="cb32-11"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"The values per month for the first two quarters are </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">."</span>.<span class="bu" style="color: null;">format</span>(qrtlist))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>The values per month for the first two quarters are [233.33, 233.33, 233.33, 216.67, 216.67, 216.67].</code></pre>
</div>
</div>
</section>
<section id="merging-months-into-quarters" class="level3">
<h3 class="anchored" data-anchor-id="merging-months-into-quarters">4.2 Merging months into quarters</h3>
<p>Now we saw what to do when we wanted to split quarters into months for more detailed monthly information. But what happens when the opposite is true and we wish to combine data into fewer columns? This is typical when dealing with historical data, when monthly details may not be necessary, or when we need a highly consolidated version of the data for a report.</p>
<p>The key here is to create an index, and then only add to the quarter total <code>quarter</code> in cycles of 3, or until the length of the list. We can do this with the following code:</p>
<pre><code>if index % 3 == 0 or index == len(months):</code></pre>
<p>This code checks whether the index divided by three yields a remainder of 0, or if the index is at the end of the list months. Thus, in a loop it will execute the specified code every three months or when it reaches the end of the list.</p>
<p>The monthly sales are already provided in the code as months, containing the sales from the first two quarters, as well as the first month of Q3. Our task is to generate a new list called quarters that contains the quarterly totals from the first three months (which includes the partial total of Q3).</p>
<div class="cell" data-execution_count="80">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1"><span class="co" style="color: #5E5E5E;"># Create a months list, as well as an index, and set the quarter to 0</span></span>
<span id="cb35-2">months <span class="op" style="color: #5E5E5E;">=</span> [<span class="dv" style="color: #AD0000;">100</span>, <span class="dv" style="color: #AD0000;">100</span>, <span class="dv" style="color: #AD0000;">150</span>, <span class="dv" style="color: #AD0000;">250</span>, <span class="dv" style="color: #AD0000;">300</span>, <span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">20</span>]</span>
<span id="cb35-3">quarter <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb35-4">quarters <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb35-5">index <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb35-6"></span>
<span id="cb35-7"><span class="co" style="color: #5E5E5E;"># Create for loop for quarter, print result, and increment the index</span></span>
<span id="cb35-8"><span class="cf" style="color: #003B4F;">for</span> sales <span class="kw" style="color: #003B4F;">in</span> months:</span>
<span id="cb35-9">    quarter <span class="op" style="color: #5E5E5E;">+=</span> sales</span>
<span id="cb35-10">    <span class="cf" style="color: #003B4F;">if</span> index <span class="op" style="color: #5E5E5E;">%</span> <span class="dv" style="color: #AD0000;">3</span> <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span> <span class="kw" style="color: #003B4F;">or</span> index <span class="op" style="color: #5E5E5E;">==</span> <span class="bu" style="color: null;">len</span>(months):</span>
<span id="cb35-11">        quarters.append(quarter)</span>
<span id="cb35-12">        quarter <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb35-13">    index <span class="op" style="color: #5E5E5E;">=</span> index <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb35-14">    </span>
<span id="cb35-15"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"The quarter totals are Q1: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">, Q2: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">, Q3: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">"</span>.<span class="bu" style="color: null;">format</span>(quarters[<span class="dv" style="color: #AD0000;">0</span>], quarters[<span class="dv" style="color: #AD0000;">1</span>], quarters[<span class="dv" style="color: #AD0000;">2</span>]))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>The quarter totals are Q1: 350, Q2: 560, Q3: 20</code></pre>
</div>
</div>
<p>Let’s have a look at a library that can help us more when working with dates.</p>
</section>
<section id="the-datetime-library" class="level3">
<h3 class="anchored" data-anchor-id="the-datetime-library">4.3 The datetime library</h3>
<p>Sales area A in Europe and Sales area B in Australia have different date formats.</p>
<ul>
<li>Sale A: 4000 on 14/02/2018</li>
<li>Sale B: 3000 on 2 March 2018</li>
</ul>
<p>If we want to consolidate or compare sales periods, we need to convert to the same date format. We can easily do this by using the datetime library and the datetime.strptime(date_string, format) method, using the following directives:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Financial Forecasting/Financial%20Forecasting_files/figure-html/0b6b67bc-e665-430c-80eb-a8a0f3ebb1bb.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">date_time.JPG</figcaption><p></p>
</figure>
</div>
<div class="cell" data-execution_count="81">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1"><span class="co" style="color: #5E5E5E;"># Import the datetime python library</span></span>
<span id="cb37-2"><span class="im" style="color: #00769E;">from</span> datetime <span class="im" style="color: #00769E;">import</span> datetime</span>
<span id="cb37-3"></span>
<span id="cb37-4"><span class="co" style="color: #5E5E5E;"># Create a dt_object to convert the first date and print the month result</span></span>
<span id="cb37-5">dt_object1 <span class="op" style="color: #5E5E5E;">=</span> datetime.strptime(<span class="st" style="color: #20794D;">'14/02/2018'</span>, <span class="st" style="color: #20794D;">'</span><span class="sc" style="color: #5E5E5E;">%d</span><span class="st" style="color: #20794D;">/%m/%Y'</span>)</span>
<span id="cb37-6"><span class="bu" style="color: null;">print</span>(dt_object1)</span>
<span id="cb37-7"></span>
<span id="cb37-8"><span class="co" style="color: #5E5E5E;"># Create a dt_object to convert the second date and print the month result</span></span>
<span id="cb37-9">dt_object2 <span class="op" style="color: #5E5E5E;">=</span> datetime.strptime(<span class="st" style="color: #20794D;">'2 March 2018'</span>, <span class="st" style="color: #20794D;">'</span><span class="sc" style="color: #5E5E5E;">%d</span><span class="st" style="color: #20794D;"> %B %Y'</span>)</span>
<span id="cb37-10"><span class="bu" style="color: null;">print</span>(dt_object2)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2018-02-14 00:00:00
2018-03-02 00:00:00</code></pre>
</div>
</div>
</section>
<section id="converting-date-formats---explicit" class="level3">
<h3 class="anchored" data-anchor-id="converting-date-formats---explicit">4.4 Converting date formats - explicit</h3>
<p>Let’s revisut one of the dates from the previous exercise.</p>
<ul>
<li>Sale A: 4000 on 14/02/2018</li>
</ul>
<p>We used the <code>datetime</code> library to identify the day <code>d</code>, month <code>m</code>, and year <code>y</code> which could help us to identify data from datasets with different date formats. However, what about a scenario where we want to convert date formats into a specific format?</p>
<p>In this exercise we will convert Sale A from the format 14/02/2018 to the same date format as Sale B (i.e.&nbsp;14 February 2018).</p>
<p>We can do this easily with built-in Python functions. To split a string we can use the .split()method:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Financial Forecasting/Financial%20Forecasting_files/figure-html/353c7c9f-ab42-439a-9304-5faf1e07abb0.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">split_().JPG</figcaption><p></p>
</figure>
</div>
<div class="cell" data-execution_count="82">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1"><span class="co" style="color: #5E5E5E;"># Set the variable for the datetime to convert</span></span>
<span id="cb39-2">dt <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'14/02/2018'</span></span>
<span id="cb39-3"></span>
<span id="cb39-4"><span class="co" style="color: #5E5E5E;"># Create the dictionary for the month values</span></span>
<span id="cb39-5">mm <span class="op" style="color: #5E5E5E;">=</span> {<span class="st" style="color: #20794D;">'01'</span>: <span class="st" style="color: #20794D;">'January'</span>, <span class="st" style="color: #20794D;">'02'</span>: <span class="st" style="color: #20794D;">'February'</span>, <span class="st" style="color: #20794D;">'03'</span>: <span class="st" style="color: #20794D;">'March'</span>}</span>
<span id="cb39-6"></span>
<span id="cb39-7"><span class="co" style="color: #5E5E5E;"># Split the dt string into the different parts</span></span>
<span id="cb39-8">day, month, year <span class="op" style="color: #5E5E5E;">=</span> dt.split(<span class="st" style="color: #20794D;">'/'</span>)</span>
<span id="cb39-9"></span>
<span id="cb39-10"><span class="co" style="color: #5E5E5E;"># Print the concatenated date string</span></span>
<span id="cb39-11"><span class="bu" style="color: null;">print</span>(day <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">' '</span> <span class="op" style="color: #5E5E5E;">+</span> mm[<span class="st" style="color: #20794D;">'02'</span>] <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">' '</span> <span class="op" style="color: #5E5E5E;">+</span> year)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>14 February 2018</code></pre>
</div>
</div>
</section>
</section>
<section id="tips-and-tricks-when-working-with-datasets" class="level2">
<h2 class="anchored" data-anchor-id="tips-and-tricks-when-working-with-datasets">5. Tips and tricks when working with datasets</h2>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Financial Forecasting/Financial%20Forecasting_files/figure-html/a3bb4aee-9eb5-40ab-b130-381ea244b217.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">challenges.JPG</figcaption><p></p>
</figure>
</div>
<section id="working-with-datasets---month-totals" class="level3">
<h3 class="anchored" data-anchor-id="working-with-datasets---month-totals">5.1 Working with datasets - month totals</h3>
<p>In this exercise, we will be exploring a dataset that has multiple sales in one month. We will create a script that will enable us to identify dates within the same month, and combine them into a new month total, and append this to the table.</p>
<p>We will be using the dataset <code>df</code>, which represents data from one of our sales areas. Print it out in the console to have a look at the data. As you can see, there were two sales in March. We will combine these sales into a single month total. We can iterate over the dataset using the <code>.iteritems()</code> method.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Financial Forecasting/Financial%20Forecasting_files/figure-html/b1035f7f-c3e6-4ea1-98a1-75dcdf826da5.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">iteritems().JPG</figcaption><p></p>
</figure>
</div>
<p>We will also be using the .split() method.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Financial Forecasting/Financial%20Forecasting_files/figure-html/2947c5e2-ad41-4d8b-b418-6fd56adb9106.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">split_().JPG</figcaption><p></p>
</figure>
</div>
<div class="cell" data-execution_count="94">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1"><span class="co" style="color: #5E5E5E;"># create a DataFrame to include our sales data</span></span>
<span id="cb41-2">df <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(columns<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'Description'</span>,<span class="st" style="color: #20794D;">'14-Feb'</span>, <span class="st" style="color: #20794D;">'19-Mar'</span>, <span class="st" style="color: #20794D;">'22-Mar'</span>])</span>
<span id="cb41-3"></span>
<span id="cb41-4">df.loc[<span class="dv" style="color: #AD0000;">0</span>] <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'Sales'</span>, <span class="dv" style="color: #AD0000;">3000</span>, <span class="dv" style="color: #AD0000;">1200</span>, <span class="dv" style="color: #AD0000;">1500</span>]</span>
<span id="cb41-5">df</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="94">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>Description</th>
      <th>14-Feb</th>
      <th>19-Mar</th>
      <th>22-Mar</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>Sales</td>
      <td>3000</td>
      <td>1200</td>
      <td>1500</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="107">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1"><span class="co" style="color: #5E5E5E;"># Set the index to start at 0</span></span>
<span id="cb42-2">index <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb42-3"></span>
<span id="cb42-4"><span class="co" style="color: #5E5E5E;"># Create the dictionary for the months</span></span>
<span id="cb42-5">tt <span class="op" style="color: #5E5E5E;">=</span> {<span class="st" style="color: #20794D;">'Jan'</span>: <span class="dv" style="color: #AD0000;">0</span>, <span class="st" style="color: #20794D;">'Feb'</span>: <span class="dv" style="color: #AD0000;">0</span>, <span class="st" style="color: #20794D;">'Mar'</span>: <span class="dv" style="color: #AD0000;">0</span>}</span></code></pre></div>
</div>
<div class="cell" data-execution_count="108">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1"><span class="co" style="color: #5E5E5E;"># Create a for loop that will iterate the date and amount values in the dataset</span></span>
<span id="cb43-2"><span class="cf" style="color: #003B4F;">for</span> date, amount <span class="kw" style="color: #003B4F;">in</span> df.iteritems():</span>
<span id="cb43-3">    <span class="co" style="color: #5E5E5E;"># Create the if statement to split the day and month, then add it to the new tt variable</span></span>
<span id="cb43-4">    <span class="cf" style="color: #003B4F;">if</span> index <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span>: </span>
<span id="cb43-5">        day, month <span class="op" style="color: #5E5E5E;">=</span> date.split(<span class="st" style="color: #20794D;">'-'</span>)</span>
<span id="cb43-6">        tt[month] <span class="op" style="color: #5E5E5E;">+=</span><span class="bu" style="color: null;">float</span>(amount[<span class="dv" style="color: #AD0000;">0</span>])</span>
<span id="cb43-7">    index <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb43-8"></span>
<span id="cb43-9"><span class="bu" style="color: null;">print</span>(tt)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{'Jan': 0, 'Feb': 3000.0, 'Mar': 2700.0}</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>/tmp/ipykernel_127/3317898835.py:2: FutureWarning: iteritems is deprecated and will be removed in a future version. Use .items instead.
  for date, amount in df.iteritems():</code></pre>
</div>
</div>
</section>
<section id="working-with-datasets---combining-datasets" class="level3">
<h3 class="anchored" data-anchor-id="working-with-datasets---combining-datasets">5.2 Working with datasets - combining datasets</h3>
<p>In this example, we will be working with two datasets, df1 and df2. You will notice that they contain different date formatting.</p>
<p>More specifically, df1 specifies the month by the name (e.g.&nbsp;02-Feb-18), whereas df2 specifies the month numerically (e.g.&nbsp;06/01/2018). Additionally, df1 uses a hyphen (-) as a separator, whereas df2 uses a forward slash (/) as a separator.</p>
<p>We will be combining these two datasets to form a consolidated forecast for the quarter. To do this, we will need to parse the different date formats of df1 and df2.</p>
<div class="cell" data-execution_count="109">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1"><span class="co" style="color: #5E5E5E;"># create a DataFrame to include our sales data</span></span>
<span id="cb46-2">df1 <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(columns<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'02-Feb-18'</span>, <span class="st" style="color: #20794D;">'15-Mar-18'</span>])</span>
<span id="cb46-3"></span>
<span id="cb46-4">df1.loc[<span class="dv" style="color: #AD0000;">0</span>] <span class="op" style="color: #5E5E5E;">=</span> [<span class="dv" style="color: #AD0000;">3000</span>, <span class="dv" style="color: #AD0000;">1200</span>]</span>
<span id="cb46-5">df1</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="109">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>02-Feb-18</th>
      <th>15-Mar-18</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>3000</td>
      <td>1200</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="110">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1"><span class="co" style="color: #5E5E5E;"># create an empty dictionary containing total sales for each month initialized to 0</span></span>
<span id="cb47-2">totals <span class="op" style="color: #5E5E5E;">=</span> {<span class="st" style="color: #20794D;">'Jan'</span>: <span class="dv" style="color: #AD0000;">0</span>, <span class="st" style="color: #20794D;">'Feb'</span>: <span class="dv" style="color: #AD0000;">0</span>, <span class="st" style="color: #20794D;">'Mar'</span>: <span class="dv" style="color: #AD0000;">0</span>}</span>
<span id="cb47-3"></span>
<span id="cb47-4"><span class="co" style="color: #5E5E5E;"># create a dictionary containing the months (Jan, Feb, Mar) and corresponding numbers</span></span>
<span id="cb47-5">calendar <span class="op" style="color: #5E5E5E;">=</span> {<span class="st" style="color: #20794D;">'01'</span>: <span class="st" style="color: #20794D;">'Jan'</span>, <span class="st" style="color: #20794D;">'02'</span>: <span class="st" style="color: #20794D;">'Feb'</span>, <span class="st" style="color: #20794D;">'03'</span>: <span class="st" style="color: #20794D;">'Mar'</span>}</span></code></pre></div>
</div>
<div class="cell" data-execution_count="111">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1"><span class="co" style="color: #5E5E5E;"># Create a for loop to iterate over the items in the first dataset df1</span></span>
<span id="cb48-2"><span class="cf" style="color: #003B4F;">for</span> date, amount <span class="kw" style="color: #003B4F;">in</span> df1.iteritems():</span>
<span id="cb48-3">        day, month, year <span class="op" style="color: #5E5E5E;">=</span> date.split(<span class="st" style="color: #20794D;">'-'</span>)</span>
<span id="cb48-4">        totals[month] <span class="op" style="color: #5E5E5E;">+=</span><span class="bu" style="color: null;">float</span>(amount[<span class="dv" style="color: #AD0000;">0</span>]) </span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/tmp/ipykernel_127/1296325721.py:2: FutureWarning: iteritems is deprecated and will be removed in a future version. Use .items instead.
  for date, amount in df1.iteritems():</code></pre>
</div>
</div>
<div class="cell" data-execution_count="112">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1"><span class="co" style="color: #5E5E5E;"># create a DataFrame to include our sales data</span></span>
<span id="cb50-2">df2 <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame(columns<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'06/01/2018'</span>, <span class="st" style="color: #20794D;">'14/02/2018'</span>])</span>
<span id="cb50-3"></span>
<span id="cb50-4">df2.loc[<span class="dv" style="color: #AD0000;">0</span>] <span class="op" style="color: #5E5E5E;">=</span> [<span class="dv" style="color: #AD0000;">1000</span>, <span class="dv" style="color: #AD0000;">1200</span>]</span>
<span id="cb50-5">df2</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="112">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>06/01/2018</th>
      <th>14/02/2018</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1000</td>
      <td>1200</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="114">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1"><span class="co" style="color: #5E5E5E;"># Create a for loop to iterate over the items in the second dataset df2</span></span>
<span id="cb51-2"><span class="co" style="color: #5E5E5E;"># This time month will yield a a numerical reference, so we will need to use our calendar dictionary to add the amount to our totals dictionary.</span></span>
<span id="cb51-3"><span class="cf" style="color: #003B4F;">for</span> date, amount <span class="kw" style="color: #003B4F;">in</span> df2.iteritems():</span>
<span id="cb51-4">        day, month, year <span class="op" style="color: #5E5E5E;">=</span> date.split(<span class="st" style="color: #20794D;">'/'</span>)</span>
<span id="cb51-5">        totals[calendar[month]] <span class="op" style="color: #5E5E5E;">+=</span> <span class="bu" style="color: null;">float</span>(amount[<span class="dv" style="color: #AD0000;">0</span>])</span>
<span id="cb51-6"></span>
<span id="cb51-7"><span class="bu" style="color: null;">print</span>(totals)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{'Jan': 1000.0, 'Feb': 4200.0, 'Mar': 1200.0}</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>/tmp/ipykernel_127/4206160929.py:3: FutureWarning: iteritems is deprecated and will be removed in a future version. Use .items instead.
  for date, amount in df2.iteritems():</code></pre>
</div>
</div>
</section>
<section id="exporting-data" class="level3">
<h3 class="anchored" data-anchor-id="exporting-data">5.3 Exporting data</h3>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Financial Forecasting/Financial%20Forecasting_files/figure-html/f7c32d26-639a-4f8a-8314-48e4b60fbe4b.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">export.JPG</figcaption><p></p>
</figure>
</div>
</section>
</section>
<section id="assumptions-and-variances-in-forecasts" class="level2">
<h2 class="anchored" data-anchor-id="assumptions-and-variances-in-forecasts">6. Assumptions and variances in forecasts</h2>
<section id="building-sensitive-forecast-models" class="level3">
<h3 class="anchored" data-anchor-id="building-sensitive-forecast-models">6.1 Building sensitive forecast models</h3>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Financial Forecasting/Financial%20Forecasting_files/figure-html/7974da6c-52e6-4054-96d0-b2b7fad5dd65.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">forecasting_considerations.JPG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Financial Forecasting/Financial%20Forecasting_files/figure-html/ac3bd82d-b6d1-40e9-8c87-70ffc33aee09.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">assumptions_2.JPG</figcaption><p></p>
</figure>
</div>
</section>
<section id="weighted-probability" class="level3">
<h3 class="anchored" data-anchor-id="weighted-probability">6.2 Weighted probability</h3>
<p>Txs Tools, a company selling hardware tools, is looking to expand out of their home market A into Market B. They have done some market research, and have received the following numeric probabilities:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Financial Forecasting/Financial%20Forecasting_files/figure-html/e1fb2bf1-e1a2-4058-afe1-bb158e3ffb25.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">weighted_prob.JPG</figcaption><p></p>
</figure>
</div>
<p>Txs Tools will only be motivated to expand if they can have reasonable assurance that they will achieve sales of 400 or more. To manage the different forecast sales probabilities, Txs Tools have asked us to calculate the weighted probability.</p>
<div class="cell" data-execution_count="116">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb54-1"><span class="co" style="color: #5E5E5E;"># Create the combined list for sales and probability</span></span>
<span id="cb54-2">sales_probability <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'0|0.05'</span>, <span class="st" style="color: #20794D;">'200|0.10'</span>, <span class="st" style="color: #20794D;">'300|0.40'</span>, <span class="st" style="color: #20794D;">'500|0.2'</span>, <span class="st" style="color: #20794D;">'800|0.25'</span>] </span>
<span id="cb54-3">weighted_probability <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb54-4"></span>
<span id="cb54-5"><span class="co" style="color: #5E5E5E;"># Create a for loop to calculate the weighted probability</span></span>
<span id="cb54-6"><span class="cf" style="color: #003B4F;">for</span> pair <span class="kw" style="color: #003B4F;">in</span> sales_probability:</span>
<span id="cb54-7">    parts <span class="op" style="color: #5E5E5E;">=</span> pair.split(<span class="st" style="color: #20794D;">'|'</span>)</span>
<span id="cb54-8">    weighted_probability <span class="op" style="color: #5E5E5E;">+=</span> <span class="bu" style="color: null;">float</span>(parts[<span class="dv" style="color: #AD0000;">0</span>]) <span class="op" style="color: #5E5E5E;">*</span> <span class="bu" style="color: null;">float</span>(parts[<span class="dv" style="color: #AD0000;">1</span>]) <span class="co" style="color: #5E5E5E;"># float converts to a floating point </span></span>
<span id="cb54-9"></span>
<span id="cb54-10"><span class="co" style="color: #5E5E5E;"># Print the weighted probability result</span></span>
<span id="cb54-11"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"The weighted probability is </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">."</span>.<span class="bu" style="color: null;">format</span>(weighted_probability))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>The weighted probability is 440.0.</code></pre>
</div>
</div>
<p>Have a look at the calculated weighted probability. We can see it reflects a weighted value between the highest and lowest sales figures. The weighted probability is a technique to manage the uncertainty in Txs Tools sales forecasting, and can give a more balanced view on expected sales numbers as opposed to just going for the lowest or highest number.</p>
</section>
<section id="market-sentiment" class="level3">
<h3 class="anchored" data-anchor-id="market-sentiment">6.3 Market sentiment</h3>
<p>Txs Tools has forecast sales of 500 in January, with an expected increase of 5% per month for the rest of the quarter.</p>
<p>However, this is dependent on the market sentiment. Based on historical trends, the following information has been provided:</p>
<ul>
<li>If the market sentiment drops below 0.6 then the sales will only be realized at an increase of 2% per month.</li>
<li>If market sentiment increases above 0.8. then sales are expected to increase by 7%.</li>
</ul>
<div class="cell" data-execution_count="117">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb56-1"><span class="co" style="color: #5E5E5E;"># Create the computevariance function</span></span>
<span id="cb56-2"><span class="kw" style="color: #003B4F;">def</span> computevariance(amount, sentiment):</span>
<span id="cb56-3"> <span class="cf" style="color: #003B4F;">if</span> (sentiment <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="fl" style="color: #AD0000;">0.6</span>):</span>
<span id="cb56-4">  res <span class="op" style="color: #5E5E5E;">=</span> amount <span class="op" style="color: #5E5E5E;">+</span> (amount <span class="op" style="color: #5E5E5E;">*</span> <span class="fl" style="color: #AD0000;">0.02</span>)</span>
<span id="cb56-5"> <span class="cf" style="color: #003B4F;">elif</span> (sentiment <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="fl" style="color: #AD0000;">0.8</span>):</span>
<span id="cb56-6">  res <span class="op" style="color: #5E5E5E;">=</span> amount <span class="op" style="color: #5E5E5E;">+</span> (amount <span class="op" style="color: #5E5E5E;">*</span> <span class="fl" style="color: #AD0000;">0.07</span>)</span>
<span id="cb56-7"> <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb56-8">  res <span class="op" style="color: #5E5E5E;">=</span> amount <span class="op" style="color: #5E5E5E;">+</span> (amount <span class="op" style="color: #5E5E5E;">*</span> <span class="fl" style="color: #AD0000;">0.05</span>)</span>
<span id="cb56-9"> <span class="cf" style="color: #003B4F;">return</span> res</span></code></pre></div>
</div>
<div class="cell" data-execution_count="118">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb57-1"><span class="co" style="color: #5E5E5E;"># Compute the variance for jan, feb and mar</span></span>
<span id="cb57-2">jan <span class="op" style="color: #5E5E5E;">=</span> computevariance(<span class="dv" style="color: #AD0000;">500</span>, <span class="fl" style="color: #AD0000;">0.5</span>)</span>
<span id="cb57-3">feb <span class="op" style="color: #5E5E5E;">=</span> computevariance(<span class="dv" style="color: #AD0000;">500</span>, <span class="fl" style="color: #AD0000;">0.65</span>)</span>
<span id="cb57-4">mar <span class="op" style="color: #5E5E5E;">=</span> computevariance(<span class="dv" style="color: #AD0000;">500</span>, <span class="fl" style="color: #AD0000;">0.85</span>)</span>
<span id="cb57-5"></span>
<span id="cb57-6"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"The forecast sales considering variance due to market sentiment is </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;"> for Jan, </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;"> for Feb, and </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;"> for Mar."</span>.<span class="bu" style="color: null;">format</span>(jan, feb, mar))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>The forecast sales considering variance due to market sentiment is 510.0 for Jan, 525.0 for Feb, and 535.0 for Mar.</code></pre>
</div>
</div>
</section>
<section id="dependencies-and-sensitivity" class="level3">
<h3 class="anchored" data-anchor-id="dependencies-and-sensitivity">6.4 Dependencies and sensitivity</h3>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Financial Forecasting/Financial%20Forecasting_files/figure-html/ad75655e-bde9-49d3-90df-bfbc7044d537.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">dep_sens.JPG</figcaption><p></p>
</figure>
</div>
</section>
<section id="assigning-dependencies-for-sales-and-cogs" class="level3">
<h3 class="anchored" data-anchor-id="assigning-dependencies-for-sales-and-cogs">6.5 Assigning dependencies for sales and COGS</h3>
<p>Txs Tools have built a monthly forecast for their gross profit. This will rely on dependencies for Sales and COGS.</p>
<p>Set the dependencies for <code>sales</code> and <code>cogs</code> based on the information below:</p>
<ul>
<li><p>Sales dependency <code>sales_dep</code>: The sale price is the net price after 1 USD commission. Commissions paid increase from 1 USD per unit to 2 USD per unit for every unit above 350 units sold.</p></li>
<li><p>Cost dependency <code>cost_dep</code>: When sales per unit increase above 500 units, an additional production line needs to be used, causing an increase in the cost per unit above 500 of 2 USD per unit.</p></li>
</ul>
<p>The baseline sale price per unit <code>(base_sales_price)</code> is 15 USD and the baseline cost per unit <code>(base_cost_price)</code> is 7 USD.</p>
<div class="cell" data-execution_count="129">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb59-1"><span class="co" style="color: #5E5E5E;"># instantiate the base sales price</span></span>
<span id="cb59-2">base_sales_price <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">15</span></span>
<span id="cb59-3"></span>
<span id="cb59-4"><span class="co" style="color: #5E5E5E;"># instantiate the sales </span></span>
<span id="cb59-5">sales <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">750</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="130">
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb60-1"><span class="co" style="color: #5E5E5E;"># Set the Sales Dependency</span></span>
<span id="cb60-2"><span class="cf" style="color: #003B4F;">if</span> sales <span class="op" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">350</span>:</span>
<span id="cb60-3">    sales_dep <span class="op" style="color: #5E5E5E;">=</span> (<span class="dv" style="color: #AD0000;">350</span> <span class="op" style="color: #5E5E5E;">*</span> base_sales_price) <span class="op" style="color: #5E5E5E;">+</span> ((sales <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">350</span>) <span class="op" style="color: #5E5E5E;">*</span> (base_sales_price <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span>))</span>
<span id="cb60-4"><span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb60-5">    sales_dep <span class="op" style="color: #5E5E5E;">=</span> sales <span class="op" style="color: #5E5E5E;">*</span> base_sales_price</span>
<span id="cb60-6"></span>
<span id="cb60-7"><span class="co" style="color: #5E5E5E;"># Print the results</span></span>
<span id="cb60-8"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"The sales dependency is </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;"> USD."</span>.<span class="bu" style="color: null;">format</span>(sales_dep))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>The sales dependency is 10850 USD.</code></pre>
</div>
</div>
<div class="cell" data-execution_count="131">
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb62-1"><span class="co" style="color: #5E5E5E;"># instantiate the bases cost price </span></span>
<span id="cb62-2">base_cost_price <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">7</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="132">
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb63-1"><span class="co" style="color: #5E5E5E;"># Set the Cost Dependency</span></span>
<span id="cb63-2"><span class="cf" style="color: #003B4F;">if</span> sales <span class="op" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">500</span>:</span>
<span id="cb63-3">    cost_dep <span class="op" style="color: #5E5E5E;">=</span> (<span class="dv" style="color: #AD0000;">500</span> <span class="op" style="color: #5E5E5E;">*</span> base_cost_price) <span class="op" style="color: #5E5E5E;">+</span> ((sales <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">500</span>) <span class="op" style="color: #5E5E5E;">*</span> (base_cost_price <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">2</span>))</span>
<span id="cb63-4"><span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb63-5">    cost_dep <span class="op" style="color: #5E5E5E;">=</span> sales <span class="op" style="color: #5E5E5E;">*</span> base_cost_price</span>
<span id="cb63-6">    </span>
<span id="cb63-7"><span class="co" style="color: #5E5E5E;"># Print the results</span></span>
<span id="cb63-8"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"The cost dependency is </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;"> USD."</span>.<span class="bu" style="color: null;">format</span>(cost_dep))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>The cost dependency is 5750 USD.</code></pre>
</div>
</div>
</section>
<section id="building-a-sensitivity-analysis-for-gross-profit" class="level3">
<h3 class="anchored" data-anchor-id="building-a-sensitivity-analysis-for-gross-profit">6.6 Building a sensitivity analysis for gross profit</h3>
<p>xs Tools is now ready to use these dependencies in the gross profit forecast.</p>
<p>The following forecast unit sales have been provided:</p>
<pre><code>Jul = 700 Aug = 350 Sep = 650</code></pre>
<p>The dependencies for <code>sales</code> and <code>cogs</code> are based on the following:</p>
<ul>
<li><p>Sales dependency <code>sales_dep</code>: The sale price is the net price after 1 USD commission. Commissions paid increase from 1 USD per unit to 2 USD per unit for every unit above 350 units sold.</p></li>
<li><p>Cost dependency <code>cost_dep</code>: When sales per unit increase above 500 units, an additional production line needs to be used, causing an increase in the cost per unit above 500 of 2 USD per unit.</p></li>
</ul>
<p>The basic cost price <code>base_cost_price</code> = 7 and basic sales price <code>base_sales_price</code> = 15</p>
<div class="cell" data-execution_count="134">
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb66-1"><span class="co" style="color: #5E5E5E;"># Create the sales_usd list</span></span>
<span id="cb66-2">sales_usd <span class="op" style="color: #5E5E5E;">=</span> [<span class="dv" style="color: #AD0000;">700</span>, <span class="dv" style="color: #AD0000;">350</span>, <span class="dv" style="color: #AD0000;">650</span>]</span></code></pre></div>
</div>
<div class="cell" data-execution_count="135">
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb67-1"><span class="co" style="color: #5E5E5E;"># Create the if statement to calculate the forecast_gross_profit</span></span>
<span id="cb67-2"><span class="cf" style="color: #003B4F;">for</span> sales <span class="kw" style="color: #003B4F;">in</span> sales_usd:</span>
<span id="cb67-3">    <span class="cf" style="color: #003B4F;">if</span> sales <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">350</span>:</span>
<span id="cb67-4">        sales_dep <span class="op" style="color: #5E5E5E;">=</span> (<span class="dv" style="color: #AD0000;">350</span> <span class="op" style="color: #5E5E5E;">*</span> base_sales_price) <span class="op" style="color: #5E5E5E;">+</span> ((sales <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">350</span>) <span class="op" style="color: #5E5E5E;">*</span> (base_sales_price <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span>))</span>
<span id="cb67-5">    <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb67-6">        sales_dep <span class="op" style="color: #5E5E5E;">=</span> sales <span class="op" style="color: #5E5E5E;">*</span> base_sales_price</span>
<span id="cb67-7">    <span class="cf" style="color: #003B4F;">if</span> sales <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">500</span>:</span>
<span id="cb67-8">        cost_dep <span class="op" style="color: #5E5E5E;">=</span> (<span class="dv" style="color: #AD0000;">500</span> <span class="op" style="color: #5E5E5E;">*</span> base_cost_price) <span class="op" style="color: #5E5E5E;">+</span> ((sales <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">500</span>) <span class="op" style="color: #5E5E5E;">*</span> (base_cost_price <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">2</span>))</span>
<span id="cb67-9">    <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb67-10">        cost_dep <span class="op" style="color: #5E5E5E;">=</span> sales <span class="op" style="color: #5E5E5E;">*</span> base_cost_price</span>
<span id="cb67-11">    forecast_gross_profit <span class="op" style="color: #5E5E5E;">=</span> sales_dep <span class="op" style="color: #5E5E5E;">-</span> cost_dep</span>
<span id="cb67-12"></span>
<span id="cb67-13">    <span class="co" style="color: #5E5E5E;"># Print the result</span></span>
<span id="cb67-14">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"The gross profit forecast for a sale unit value of </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;"> is </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;"> USD."</span>.<span class="bu" style="color: null;">format</span>(sales, forecast_gross_profit))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>The gross profit forecast for a sale unit value of 700 is 4850 USD.
The gross profit forecast for a sale unit value of 350 is 2800 USD.
The gross profit forecast for a sale unit value of 650 is 4600 USD.</code></pre>
</div>
</div>
</section>
<section id="assigning-dependencies-for-expenses" class="level3">
<h3 class="anchored" data-anchor-id="assigning-dependencies-for-expenses">6.7 Assigning dependencies for expenses</h3>
<p>Txs Tools wants to assign a dependency for its operating expenses, particularly admin salaries.</p>
<p>The conditions are as follows:</p>
<ul>
<li><p>Admin expenses increase in July and August (<code>Jul</code> and <code>Aug</code>) as temporary workers need to be hired to cover the summer holiday.</p></li>
<li><p>The increase is based on the number of employees taking holidays during that time. For the current year, the value for August is <code>emp_leave</code> = 6 (6 employees expected to take leave).</p></li>
<li><p>The cost is 80 USD per temp employee hired.</p></li>
</ul>
<div class="cell" data-execution_count="136">
<div class="sourceCode cell-code" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb69-1"><span class="co" style="color: #5E5E5E;"># instantiate the emp leave value for August</span></span>
<span id="cb69-2">emp_leave <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">6</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="137">
<div class="sourceCode cell-code" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb70-1"><span class="co" style="color: #5E5E5E;"># Set the admin dependency</span></span>
<span id="cb70-2"><span class="cf" style="color: #003B4F;">if</span> emp_leave <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span>:</span>
<span id="cb70-3">    admin_dep <span class="op" style="color: #5E5E5E;">=</span> emp_leave <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">80</span></span>
<span id="cb70-4"></span>
<span id="cb70-5"><span class="co" style="color: #5E5E5E;"># Print the results</span></span>
<span id="cb70-6"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"The admin dependency for August is </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;"> USD."</span>.<span class="bu" style="color: null;">format</span>(admin_dep))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>The admin dependency for August is 480 USD.</code></pre>
</div>
</div>
</section>
<section id="build-a-sensitivity-analysis-for-the-net-profit" class="level3">
<h3 class="anchored" data-anchor-id="build-a-sensitivity-analysis-for-the-net-profit">6.8 Build a sensitivity analysis for the net profit</h3>
<p>Txs Tools has provided the following forecast admin cost in USD based on full-time employees:</p>
<pre><code>Jul = 1500 Aug = 1500 Sep = 1500</code></pre>
<p>Build the forecast net profit <code>forecast_net_profit</code> when <code>emp_leave</code> = [6, 6, 0] and the cost per temp employee is 80 USD.</p>
<div class="cell" data-execution_count="138">
<div class="sourceCode cell-code" id="cb73" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb73-1"><span class="co" style="color: #5E5E5E;"># instantiate our standing data</span></span>
<span id="cb73-2">admin_usd <span class="op" style="color: #5E5E5E;">=</span> [<span class="dv" style="color: #AD0000;">1500</span>, <span class="dv" style="color: #AD0000;">1500</span>, <span class="dv" style="color: #AD0000;">1500</span>]</span>
<span id="cb73-3">emp_leave <span class="op" style="color: #5E5E5E;">=</span> [<span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb73-4">forecast_gross_profit <span class="op" style="color: #5E5E5E;">=</span> [<span class="dv" style="color: #AD0000;">4850</span>, <span class="dv" style="color: #AD0000;">2800</span>, <span class="dv" style="color: #AD0000;">4600</span>]</span></code></pre></div>
</div>
<div class="cell" data-execution_count="141">
<div class="sourceCode cell-code" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb74-1"><span class="co" style="color: #5E5E5E;"># Create an index variable and initialize this index to 0</span></span>
<span id="cb74-2">index <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb74-3"></span>
<span id="cb74-4"></span>
<span id="cb74-5"><span class="co" style="color: #5E5E5E;"># Create the dependency by looping through the admin_usd list, using our index to access the correct month in our lists.</span></span>
<span id="cb74-6"><span class="cf" style="color: #003B4F;">for</span> admin <span class="kw" style="color: #003B4F;">in</span> admin_usd:</span>
<span id="cb74-7">    temp <span class="op" style="color: #5E5E5E;">=</span> emp_leave[index]</span>
<span id="cb74-8">    <span class="cf" style="color: #003B4F;">if</span> temp <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span>:</span>
<span id="cb74-9">        admin_dep <span class="op" style="color: #5E5E5E;">=</span> temp <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">80</span> <span class="op" style="color: #5E5E5E;">+</span> admin</span>
<span id="cb74-10">    <span class="cf" style="color: #003B4F;">else</span>: </span>
<span id="cb74-11">         admin_dep <span class="op" style="color: #5E5E5E;">=</span> admin</span>
<span id="cb74-12">    forecast_net_profit <span class="op" style="color: #5E5E5E;">=</span> forecast_gross_profit[index] <span class="op" style="color: #5E5E5E;">-</span> admin_dep</span>
<span id="cb74-13">    <span class="bu" style="color: null;">print</span>(forecast_net_profit)</span>
<span id="cb74-14">    index <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb74-15"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"The forecast net profit is: </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;"> USD."</span>.<span class="bu" style="color: null;">format</span>(forecast_net_profit))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2870
820
3100
The forecast net profit is: 3100 USD.</code></pre>
</div>
</div>
</section>
<section id="working-with-variances-in-the-forecast" class="level3">
<h3 class="anchored" data-anchor-id="working-with-variances-in-the-forecast">6.9 Working with variances in the forecast</h3>
<p>Identifying, quantifying, and investigating the difference between an old forecast and the new forecast is often referred to as <code>Gap Analysis</code>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Financial Forecasting/Financial%20Forecasting_files/figure-html/1600d6ae-6a85-43ea-84e6-09cfbb5a24df.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">gap_analysis.JPG</figcaption><p></p>
</figure>
</div>
<section id="building-an-alternate-forecast" class="level4">
<h4 class="anchored" data-anchor-id="building-an-alternate-forecast">Building an alternate forecast</h4>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Financial Forecasting/Financial%20Forecasting_files/figure-html/08779f61-11ee-44c7-af63-10f2c0767915.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">alternative_forecasts.JPG</figcaption><p></p>
</figure>
</div>
<p>We will now build an alternative forecast for Txs Tools. The new quarter forecast is based off actual data for Jul - Aug as well as adjusted forecast data for September. The data (units sold) is as follows:</p>
<ul>
<li>Jul = 700</li>
<li>Aug = 220</li>
<li>Sep = 520</li>
</ul>
<p>The dependencies calculations have already been completed from the previous exercise. The following information applies:</p>
<ul>
<li>base_cost_price = 7</li>
<li>base_sales_price = 15</li>
</ul>
<div class="cell" data-execution_count="142">
<div class="sourceCode cell-code" id="cb76" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb76-1"><span class="co" style="color: #5E5E5E;"># create a dependencies() function for sales and costs with the arguments base_cost_price,base_sales_price, and sales_usd</span></span>
<span id="cb76-2"><span class="co" style="color: #5E5E5E;"># Pass the arguments into the function in this order.</span></span>
<span id="cb76-3"></span>
<span id="cb76-4"><span class="kw" style="color: #003B4F;">def</span> dependencies(base_cost_price, base_sales_price, sales_usd):</span>
<span id="cb76-5">    res <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb76-6">    <span class="cf" style="color: #003B4F;">for</span> sales <span class="kw" style="color: #003B4F;">in</span> sales_usd:</span>
<span id="cb76-7">        <span class="cf" style="color: #003B4F;">if</span> sales <span class="op" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">350</span>:</span>
<span id="cb76-8">            sales_dep <span class="op" style="color: #5E5E5E;">=</span> (<span class="dv" style="color: #AD0000;">350</span> <span class="op" style="color: #5E5E5E;">*</span> base_sales_price) <span class="op" style="color: #5E5E5E;">+</span> ((sales <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">350</span>) <span class="op" style="color: #5E5E5E;">*</span> (base_sales_price <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span>))</span>
<span id="cb76-9">        <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb76-10">            sales_dep <span class="op" style="color: #5E5E5E;">=</span> sales <span class="op" style="color: #5E5E5E;">*</span> base_sales_price</span>
<span id="cb76-11">        <span class="cf" style="color: #003B4F;">if</span> sales <span class="op" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">500</span>:</span>
<span id="cb76-12">            cost_dep <span class="op" style="color: #5E5E5E;">=</span> (<span class="dv" style="color: #AD0000;">500</span> <span class="op" style="color: #5E5E5E;">*</span> base_cost_price) <span class="op" style="color: #5E5E5E;">+</span> ((sales <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">500</span>) <span class="op" style="color: #5E5E5E;">*</span> (base_cost_price <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">2</span>))</span>
<span id="cb76-13">        <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb76-14">            cost_dep <span class="op" style="color: #5E5E5E;">=</span> sales <span class="op" style="color: #5E5E5E;">*</span> base_cost_price</span>
<span id="cb76-15">        res.append(sales_dep <span class="op" style="color: #5E5E5E;">-</span> cost_dep)</span>
<span id="cb76-16">    <span class="cf" style="color: #003B4F;">return</span> res</span></code></pre></div>
</div>
<div class="cell" data-execution_count="144">
<div class="sourceCode cell-code" id="cb77" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb77-1"><span class="co" style="color: #5E5E5E;"># Create scenario forecast1 for the original forecast</span></span>
<span id="cb77-2">forecast1 <span class="op" style="color: #5E5E5E;">=</span> dependencies(<span class="dv" style="color: #AD0000;">7</span>, <span class="dv" style="color: #AD0000;">15</span>, [<span class="dv" style="color: #AD0000;">700</span>, <span class="dv" style="color: #AD0000;">350</span>, <span class="dv" style="color: #AD0000;">650</span>])</span>
<span id="cb77-3"></span>
<span id="cb77-4"><span class="co" style="color: #5E5E5E;"># Create scenario forecast2 for the alternative forecast. </span></span>
<span id="cb77-5"><span class="co" style="color: #5E5E5E;"># Use the data provided above to calculate the alternative forecast</span></span>
<span id="cb77-6">forecast2 <span class="op" style="color: #5E5E5E;">=</span> dependencies(<span class="dv" style="color: #AD0000;">7</span>, <span class="dv" style="color: #AD0000;">15</span>, [<span class="dv" style="color: #AD0000;">700</span>, <span class="dv" style="color: #AD0000;">220</span>, <span class="dv" style="color: #AD0000;">520</span>])</span></code></pre></div>
</div>
<div class="cell" data-execution_count="145">
<div class="sourceCode cell-code" id="cb78" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb78-1"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"The original forecast scenario is </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">:"</span>.<span class="bu" style="color: null;">format</span>(forecast1))</span>
<span id="cb78-2"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"The alternative forecast scenario is </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">:"</span>.<span class="bu" style="color: null;">format</span>(forecast2))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>The original forecast scenario is [4850, 2800, 4600]:
The alternative forecast scenario is [4850, 1760, 3950]:</code></pre>
</div>
</div>
</section>
</section>
<section id="building-a-gap-analysis-between-forecasts" class="level3">
<h3 class="anchored" data-anchor-id="building-a-gap-analysis-between-forecasts">6.10 Building a gap analysis between forecasts</h3>
<p>Txs Tools now has two forecasts, the original forecast <code>forecast1</code> and the adjusted forecast <code>forecast2</code>.</p>
<p>The dependencies have already been defined as <code>def dependencies(base_cost_price, base_sales_price, sales_usd)</code>, where <code>base_cost_price</code> = 7 and <code>base_sales_price</code> = 15, with <code>forecast2</code> based off the following adjusted sales unit values:</p>
<ul>
<li>Jul = 700</li>
<li>Aug = 220</li>
<li>Sep = 520</li>
</ul>
<p>In this exercise, we will look at how to use a for loop to cycle between two different lists, <code>forecast1</code> and <code>forecast2</code> and calculate the difference (“gap”) using an incremented index. It is possible to do this simultaneously as both lists have the same length.</p>
<div class="cell" data-execution_count="147">
<div class="sourceCode cell-code" id="cb80" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb80-1"><span class="co" style="color: #5E5E5E;"># Set the two results</span></span>
<span id="cb80-2">forecast1 <span class="op" style="color: #5E5E5E;">=</span> dependencies(<span class="dv" style="color: #AD0000;">7</span>, <span class="dv" style="color: #AD0000;">15</span>, [<span class="dv" style="color: #AD0000;">700</span>, <span class="dv" style="color: #AD0000;">350</span>, <span class="dv" style="color: #AD0000;">650</span>])</span>
<span id="cb80-3">forecast2 <span class="op" style="color: #5E5E5E;">=</span> dependencies(<span class="dv" style="color: #AD0000;">7</span>, <span class="dv" style="color: #AD0000;">15</span>, [<span class="dv" style="color: #AD0000;">700</span>, <span class="dv" style="color: #AD0000;">220</span>, <span class="dv" style="color: #AD0000;">520</span>])</span>
<span id="cb80-4"></span>
<span id="cb80-5"><span class="co" style="color: #5E5E5E;"># Create an index and the gap analysis for the forecast</span></span>
<span id="cb80-6">index <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb80-7"><span class="cf" style="color: #003B4F;">for</span> value <span class="kw" style="color: #003B4F;">in</span> forecast2:</span>
<span id="cb80-8">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"The gap between forecasts is </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">"</span>.<span class="bu" style="color: null;">format</span>(value <span class="op" style="color: #5E5E5E;">-</span> forecast1[index]))</span>
<span id="cb80-9">    index <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">1</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>The gap between forecasts is 0
The gap between forecasts is -1040
The gap between forecasts is -650</code></pre>
</div>
</div>
<p>You can see how easy it is to use a for loop to compare results across different lists.</p>
<p>Note that the gap between forecasts is driven purely by the difference in sales volume - base sales and cost prices are unchanged.</p>
<ul>
<li><p>In July forecast2 sales are as per forecast 1 - so no gap.</p></li>
<li><p>In August forecast2 sales are 220 units against 350 - resulting in a gap of 130 units x profit per unit of 8 (15 - 7) which is 1040</p></li>
<li><p>In September forecast2 sales are 520 units against 650 - resulting in a gap of 130 units x profit per unit of 8 (15 - 7) which is 1040, but we also have a saving of 3 per unit (sales commission 1 and additional production line cost 2) which reduces the gap by 130 x 3 = 390 to 650.</p></li>
</ul>
</section>
<section id="setting-dependencies-for-netflix" class="level3">
<h3 class="anchored" data-anchor-id="setting-dependencies-for-netflix">6.11 Setting dependencies for Netflix</h3>
<p>Netflix compiled a forecast up to the 2019 financial year <code>netflix_f_is</code>, and has based the sales figures in 2019 on the following dependency:</p>
<ul>
<li>Number of active subscriptions, which are based on the success of Netflix original shows.</li>
</ul>
<p>For 2019, the success of original shows (critical and commercial acclaim) are estimated at 78%. The total amount of subscribers per percentage point is 500, and set to the variable <code>n_subscribers_per_pp</code> (i.e there is a calculated correlation between show success and number of subscribers).</p>
<p>In this exercise, we will calculate how dependent sales are on the number of subscribers in the forecast, which we will use in the next exercise.</p>
<div class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb82" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb82-1"><span class="co" style="color: #5E5E5E;"># instantiate subscribers per % point</span></span>
<span id="cb82-2">n_subscribers_per_pp <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">500</span></span>
<span id="cb82-3"></span>
<span id="cb82-4"><span class="co" style="color: #5E5E5E;"># load in Netflix financials</span></span>
<span id="cb82-5">netflix_f_is <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(<span class="st" style="color: #20794D;">'Data/Netflix.csv'</span>)</span>
<span id="cb82-6">netflix_f_is</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>metric</th>
      <th>2014_act</th>
      <th>2015_act</th>
      <th>2016_act</th>
      <th>2017_fc</th>
      <th>2018_fc</th>
      <th>2019_fc</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>Sales</td>
      <td>5505</td>
      <td>6780</td>
      <td>8831</td>
      <td>11688</td>
      <td>14979</td>
      <td>17994</td>
    </tr>
    <tr>
      <th>1</th>
      <td>EBITDA</td>
      <td>528</td>
      <td>493</td>
      <td>611</td>
      <td>1088</td>
      <td>1899</td>
      <td>2943</td>
    </tr>
    <tr>
      <th>2</th>
      <td>Operating profit&nbsp;(EBIT)</td>
      <td>403</td>
      <td>306</td>
      <td>380</td>
      <td>837</td>
      <td>1660</td>
      <td>2702</td>
    </tr>
    <tr>
      <th>3</th>
      <td>Net income</td>
      <td>267</td>
      <td>123</td>
      <td>187</td>
      <td>559</td>
      <td>1024</td>
      <td>1721</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb83" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb83-1"><span class="co" style="color: #5E5E5E;"># Create a filter to select the sales row from the netflix_f_is dataset</span></span>
<span id="cb83-2">sales_metric <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'Sales'</span>]</span>
<span id="cb83-3"></span>
<span id="cb83-4"><span class="co" style="color: #5E5E5E;"># Filter for rows containing the Sales metric</span></span>
<span id="cb83-5">filtered_netflix_f_is <span class="op" style="color: #5E5E5E;">=</span> netflix_f_is[netflix_f_is.metric.isin(sales_metric)]</span>
<span id="cb83-6"></span>
<span id="cb83-7"><span class="co" style="color: #5E5E5E;"># Extract the 2019 Sales forecast value</span></span>
<span id="cb83-8">forecast1 <span class="op" style="color: #5E5E5E;">=</span> netflix_f_is[<span class="st" style="color: #20794D;">'2019_fc'</span>].iloc[<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb83-9"></span>
<span id="cb83-10"><span class="co" style="color: #5E5E5E;"># Print the resulting forecast</span></span>
<span id="cb83-11"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"The sales forecast is </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">."</span>.<span class="bu" style="color: null;">format</span>(forecast1))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>The sales forecast is 17994.</code></pre>
</div>
</div>
<div class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb85" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb85-1"><span class="co" style="color: #5E5E5E;"># Set the success percentage to 78%</span></span>
<span id="cb85-2">pct_success <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.78</span></span>
<span id="cb85-3"></span>
<span id="cb85-4"><span class="co" style="color: #5E5E5E;"># Calculate the dependency for the subscriber base</span></span>
<span id="cb85-5">n_subscribers <span class="op" style="color: #5E5E5E;">=</span> n_subscribers_per_pp <span class="op" style="color: #5E5E5E;">*</span> pct_success</span>
<span id="cb85-6"></span>
<span id="cb85-7"><span class="co" style="color: #5E5E5E;"># See the result</span></span>
<span id="cb85-8"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"The dependency for the subscriber base is </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">."</span>.<span class="bu" style="color: null;">format</span>(n_subscribers))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>The dependency for the subscriber base is 390.0.</code></pre>
</div>
</div>
<div class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb87" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb87-1"><span class="co" style="color: #5E5E5E;"># Calculate the ratio between forecast sales and subscribers</span></span>
<span id="cb87-2">sales_subs_ratio <span class="op" style="color: #5E5E5E;">=</span> forecast1 <span class="op" style="color: #5E5E5E;">/</span> n_subscribers</span>
<span id="cb87-3"></span>
<span id="cb87-4"><span class="co" style="color: #5E5E5E;"># See the result</span></span>
<span id="cb87-5"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"The ratio between subscribers and sales is 1 subscriber equals $</span><span class="sc" style="color: #5E5E5E;">{:.2f}</span><span class="st" style="color: #20794D;">."</span>.<span class="bu" style="color: null;">format</span>(sales_subs_ratio))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>The ratio between subscribers and sales is 1 subscriber equals $46.14.</code></pre>
</div>
</div>
</section>
<section id="calculating-an-alternative-forecast-for-netflix" class="level3">
<h3 class="anchored" data-anchor-id="calculating-an-alternative-forecast-for-netflix">6.12 Calculating an alternative forecast for Netflix</h3>
<p>The original assumptions are as follows: the total amount of subscribers at a 78% success rate results in 39,000 subscribers. We used this to build the forecast numbers.</p>
<p>However, the success rate for 2019 has been recalculated to have a probability of 65%, and the management has asked us to make an adjusted forecast based on this value.</p>
<p>The ratio between the subscribers and sales is 1 subscriber to 0.46 USD sales, set to variable <code>sales_subs_ratio</code>.</p>
<div class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb89" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb89-1"><span class="co" style="color: #5E5E5E;"># instantiate sales subs ratio</span></span>
<span id="cb89-2">sales_subs_ratio <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.46</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb90" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb90-1"><span class="co" style="color: #5E5E5E;"># Set the proportion of successes to 65%</span></span>
<span id="cb90-2">pct_success2 <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">65</span></span>
<span id="cb90-3"></span>
<span id="cb90-4"><span class="co" style="color: #5E5E5E;"># Calculate the number of subscribers</span></span>
<span id="cb90-5">n_subscribers2 <span class="op" style="color: #5E5E5E;">=</span> n_subscribers_per_pp <span class="op" style="color: #5E5E5E;">*</span> pct_success2 </span>
<span id="cb90-6"></span>
<span id="cb90-7"><span class="co" style="color: #5E5E5E;"># Calculate the new forecast</span></span>
<span id="cb90-8">forecast2 <span class="op" style="color: #5E5E5E;">=</span> n_subscribers2  <span class="op" style="color: #5E5E5E;">*</span> sales_subs_ratio</span>
<span id="cb90-9">forecast2</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="24">
<pre><code>14950.0</code></pre>
</div>
</div>
<div class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb92" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb92-1"><span class="co" style="color: #5E5E5E;"># Insert a column named AltForecast, containing forecast2</span></span>
<span id="cb92-2">filtered_netflix_f_is.insert(<span class="bu" style="color: null;">len</span>(filtered_netflix_f_is.columns), <span class="st" style="color: #20794D;">'AltForecast'</span>, forecast2)</span>
<span id="cb92-3"></span>
<span id="cb92-4"><span class="co" style="color: #5E5E5E;"># Insert a column named Gap, containing the difference</span></span>
<span id="cb92-5">filtered_netflix_f_is.insert(<span class="bu" style="color: null;">len</span>(filtered_netflix_f_is.columns), <span class="st" style="color: #20794D;">'Gap'</span>, forecast1 <span class="op" style="color: #5E5E5E;">-</span> forecast2)</span>
<span id="cb92-6"></span>
<span id="cb92-7"><span class="co" style="color: #5E5E5E;"># See the result</span></span>
<span id="cb92-8">filtered_netflix_f_is</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="25">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>metric</th>
      <th>2014_act</th>
      <th>2015_act</th>
      <th>2016_act</th>
      <th>2017_fc</th>
      <th>2018_fc</th>
      <th>2019_fc</th>
      <th>AltForecast</th>
      <th>Gap</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>Sales</td>
      <td>5505</td>
      <td>6780</td>
      <td>8831</td>
      <td>11688</td>
      <td>14979</td>
      <td>17994</td>
      <td>14950.0</td>
      <td>3044.0</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
</section>
</section>
<section id="key-takeaways" class="level2">
<h2 class="anchored" data-anchor-id="key-takeaways">Key takeaways</h2>
<p>We learned how to harnass Python, and in particular the <a href="https://pandas.pydata.org/docs/user_guide/index.html"><code>pandas</code></a> library to wrangle raw financial data, and extract relevant information to calculate key <code>metrics</code>.</p>
<p>We also learned how to handle date inconsistencies using the <a href="https://docs.python.org/3/library/datetime.html#module-datetime"><code>datetime</code></a> library, parse dates using the <code>split()</code> method, and how to automate our work by writing functions and using <code>for loops</code> and <a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.iteritems.html"><code>.iteritems</code></a>.</p>
<p>Automating the financial forecasting process allows fast iterations over different scenarios, saving time and reducing the scope of manual error.</p>


</section>

 ]]></description>
  <category>Forecasting</category>
  <category>DataCamp</category>
  <guid>https://stephen137.github.io/posts/Financial Forecasting/Financial Forecasting.html</guid>
  <pubDate>Wed, 18 Jan 2023 23:00:00 GMT</pubDate>
  <media:content url="https://stephen137.github.io/posts/Financial Forecasting/forecasting.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Convolutional Neural Networks (CNNs)</title>
  <dc:creator>Stephen Barrie</dc:creator>
  <link>https://stephen137.github.io/posts/Convolutional_Neural_Network/CNN.html</link>
  <description><![CDATA[ 




<section id="covolutional-neural-networks-cnns" class="level2">
<h2 class="anchored" data-anchor-id="covolutional-neural-networks-cnns">Covolutional Neural Networks (CNNs)</h2>
<p>This is my follow up to the second half of <a href="https://youtu.be/htiNBPxcXgo?t=2675"><strong><em>Lesson 8: Practical Deep Learning for Coders 2022</em></strong></a> in which Jeremy demonstrates the inner workings of a <a href="https://en.wikipedia.org/wiki/Convolutional_neural_network#Stride">Convolutional Neural Network (CNN)</a> using Excel. In the video, which draws heavily on <a href="https://colab.research.google.com/github/fastai/fastbook/blob/master/13_convolutions.ipynb">Deep Learning for Coders with Fastai and PyTorch: AI Applications Without a PhD : Chapter 13</a>, Jeremy walks through the CNN architecture for a handwritten digit 7 in CSV format taken from the <a href="https://en.wikipedia.org/wiki/MNIST_database">MNIST dataset</a>. To consolidate my understanding I replicated the same process for a sample handwritten digit 3.</p>
<section id="the-magic-of-convolutions" class="level3">
<h3 class="anchored" data-anchor-id="the-magic-of-convolutions">The Magic of Convolutions</h3>
<p>I downloaded the MNIST dataset in csv format from <a href="(https://pjreddie.com/projects/mnist-in-csv/)">here</a>. Each row of the CSV file has 785 columns, the first column specifies which of the ten handwritten digits is represented (between 0 and 9). The remaining 784 columns contain values which lie on the scale 0 (white) to 255 (black). Why 0 to 255 you may ask? Well, it has to do with computer memory. The number 255 is written as <code>11111111</code> in binary form which is 8 bits. In our case we have a grayscale (or 1 channel image) so each pixel takes up 8 bits. Note that a colour image is most commonly represented by 3 channels (Reg, Green, Blue) in which case each pixel requires 24 bits.</p>
<p>To see the digit visually we first have to re-arrange the 784 values into a 28 x 28 square, and then use conditional formatting to match the scale - darker for large values, lighter for low values:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Convolutional_Neural_Network/CNN_files/figure-html/94909380-1e83-489f-ac43-b144e4dfab5b.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">3.JPG</figcaption><p></p>
</figure>
</div>
<p>One of the most powerful tools that machine learning practitioners have at their disposal is feature engineering. A feature is a transformation of the data which is designed to make it easier to model. In the context of an image, a feature is a visually distinctive attribute. For example, the number 7 is characterized by a horizontal edge near the top of the digit, and a top-right to bottom-left diagonal edge underneath that. On the other hand, the <code>number 3</code> is characterized by a diagonal edge in one direction at the top left and bottom right of the digit, the opposite diagonal at the bottom left and top right, horizontal edges at the middle, top, and bottom, and so forth. So what if we could extract information about where the edges occur in each image, and then use that information as our features, instead of raw pixels?</p>
<p>It turns out that finding the edges in an image is a very common task in computer vision, and is surprisingly straightforward. To do it, we use something called a convolution. A convolution requires nothing more than multiplication, and addition—two operations that are responsible for the vast majority of work that we will see in every single deep learning model.</p>
</section>
<section id="how-it-used-to-look-like" class="level3">
<h3 class="anchored" data-anchor-id="how-it-used-to-look-like">How it used to look like</h3>
<p>The underlying concept of CNNs has not changed although there have been architecture modifications. First, let’s look at a traditional CNN - how they generally used to be constructed. A convolution applies a <code>kernel</code> across an image. A kernel is a little matrix, such as the 3×3 matrix in the top right of the image below:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Convolutional_Neural_Network/CNN_files/figure-html/0d02a549-c91c-4803-9a3d-88bef25ded3f.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">kernel.JPG</figcaption><p></p>
</figure>
</div>
<p>We can think of a convolution as a sliding window of little mini dot products of these 3 x 3 matrices or <code>kernels</code>. Note that they don’t have to be of size 3 x 3. We randomly initalize these kernels and then use Stochastic Gradient Descent(SGD) to optimize these parameters. We can repeat the same idea as we add layers.</p>
<p>After the application of the first filter, we now have two <code>channels</code>:</p>
<ul>
<li>Channel 1: which picks out <code>horizontal</code> edges</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Convolutional_Neural_Network/CNN_files/figure-html/bf6ac586-d8c9-4f70-af3b-875a911b734f.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">horizontal_detector.JPG</figcaption><p></p>
</figure>
</div>
<p>Note that we clip the resulting value to zero by taking the maximum of 0 and the mini dot product, and our grid sizes have reduced from 28 x 28 to 26 x 26.</p>
<ul>
<li>Channnel 2: which picks out <code>vertical</code> edges</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Convolutional_Neural_Network/CNN_files/figure-html/50077792-d4bd-4ef0-baaa-68240fe96bdb.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">vertical_detector.JPG</figcaption><p></p>
</figure>
</div>
<p>In the second layer we have 2 kernels applied to each channel:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Convolutional_Neural_Network/CNN_files/figure-html/0a9092a9-b93d-442f-8a0f-2f1ac7fe2d5d.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">conv2.JPG</figcaption><p></p>
</figure>
</div>
<p>Note that our grid sizes have reduced further to 24 x 24 from our original 28 x 28.</p>
<p>At this stage, instead of applying further kernels, we would instead use <code>MaxPool</code> which just takes the maximum value over say 2 x 2 grid areas, with no overlap:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Convolutional_Neural_Network/CNN_files/figure-html/735e7850-7dcd-498d-8297-749469ba1536.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">maxpool.JPG</figcaption><p></p>
</figure>
</div>
<p>In the spreadsheet screenshot above, note that the maximum value of the 2 x 2 grid on the left is 3.54, which is the value returned in the MaxPool layer on the right. Note also that our grid size is now just 12 x 12 compared with our original size of 28 x 28.</p>
<p>The final step would be to apply a <code>dense</code> layer which is just randomized weightings applied as SUMPRODUCT in excel over the Maxpool layer outputs, to give a final activation value for conversion to a probability using <a href="https://en.wikipedia.org/wiki/Softmax_function">Softmax</a>:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Convolutional_Neural_Network/CNN_files/figure-html/e9989b1e-ba56-41f7-ac06-f5c99a099513.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">dense.JPG</figcaption><p></p>
</figure>
</div>
</section>
<section id="how-it-looks-like-now" class="level3">
<h3 class="anchored" data-anchor-id="how-it-looks-like-now">How it looks like now</h3>
<p>As intimated earlier, the architecture of modern CNNs is generally a slight variant of that illustrated above. In the above examples our <code>kernels</code> applied mini dot products across our initial image grid, with <code>no overlap</code>. As a result, it takes a lot of steps (and therfore layers) to reduce our grid into the number of <code>activations</code> that we are interested in - for our handwritten digits problem we would perhaps be interested in 10 activations, the probability for each of the 10 digits, or maybe just 1 - the probability of it being a particular digit.</p>
</section>
<section id="stride-2-convolutions" class="level3">
<h3 class="anchored" data-anchor-id="stride-2-convolutions">Stride 2 convolutions</h3>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Convolutional_Neural_Network/CNN_files/figure-html/58cb6a62-d435-4b2d-96e7-4761bcd32e01.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">stride.png</figcaption><p></p>
</figure>
</div>
<p>It’s all about getting there faster!</p>
<p>Modern approaches tend to apply something called <code>stride 2</code> convolutions. This works by skipping over a column and row when sliding the <code>kernel</code> over our input grid. This effectively reduces the grid feature size by a factor of 4 (2 rows x 2 columns) each convolution, resulting in fewer steps to get down to the required number of activations.</p>
</section>
<section id="drop-out" class="level3">
<h3 class="anchored" data-anchor-id="drop-out">Drop out</h3>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Convolutional_Neural_Network/CNN_files/figure-html/1122cebf-a4aa-41fd-ae7b-d27ebbeeb8a6.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">drop_out.png</figcaption><p></p>
</figure>
</div>
<p>This isn’t our model giving up on the image classification problem! <code>Drop out</code> refers to the removal of different random bits of our image from each batch. Why would we want to do this? It sounds somewhat counter-intuitive - surely we want to give our model the best possible chance of classifying our image? Well, yes and no.</p>
<p>Essentially there is, as with all models, an inherent compromise between a model that generalizes well to new images and getting good training results, with the risk of <code>overfitting</code>. You can think of <code>dropout</code> as a kind of <code>data augmentation</code>, except we are applying the corruption or augmentation to our activations, rather than our original input image. These <code>dropout</code> layers are really helpful for avoiding overfitting. Setting a higher drop out rate will mean that our model generalizes well to new images, but perform less well on the training set.</p>
<p>Here is an example of how it works:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Convolutional_Neural_Network/CNN_files/figure-html/42e260d6-1aa1-408e-8ea5-009f8dfae1b5.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">dropout.JPG</figcaption><p></p>
</figure>
</div>
<p>We generate a grid of random numbers to match the size of our 24 x 24 input layer, and then set our drop our rate (a value between o and 1) to create a <code>mask</code> to be applied to our image. In this case we have chosen a drop out rate of 0.4 - which basically removes 40% of the pixels - thus corrupting our image, forcing our model to interpret the underlying structure of the image, thus reducing the risk of overfitting.</p>
</section>
<section id="average-pooling" class="level3">
<h3 class="anchored" data-anchor-id="average-pooling">Average Pooling</h3>
<p>Nowadays there is no single dense layer matrix multiply at the end as illustrated previously. In addition, once we get down to say a 7 x 7 grid after stride convolutions, instead of doing a <code>Maxpool</code> generally we carry out an <a href="https://paperswithcode.com/method/average-pooling">Average Pooling</a>.</p>
<p>Say, for example we have a bear detector image classifier - the model will basically be asking “Is there a bear in this part of the image?” for each of the say 49 remaining pixels in our final 7 x 7 activation. This works well for a single image that fills the whole grid, but if it is a small image in the corner, or a multi-image image then it might not be classified correctly (maybe only 1 out of the 49 pixels has a bear in it). So we might be better choosing Maxpool in this case.</p>
<p>The key takeaway is that it is very important that we undestand the architecture of our model, especially the final layer, to take account of the specific task at hand and the nature of the data included in our model.</p>
<p>Fast.ai in fact goes for a blend, and concatenates both MaxPool and AvgPool.</p>
</section>
<section id="key-takeaways" class="level3">
<h3 class="anchored" data-anchor-id="key-takeaways">Key takeaways</h3>
<p>This blog does not by any means attempt to understate the complexity of CNNs, but hopefully by simplifying the concept it might help provide a satisfactory overview, and after working through an example of your own, you will have the confidence to dig deeper.</p>
<p>An excellent and comprehensive coverage of CNNs is included in <a href="https://colab.research.google.com/github/fastai/fastbook/blob/master/13_convolutions.ipynb">Deep Learning for Coders with Fastai and PyTorch: AI Applications Without a PhD : Chapter 13</a>.</p>


</section>
</section>

 ]]></description>
  <category>Convolutional Neural Networks</category>
  <category>fastai</category>
  <guid>https://stephen137.github.io/posts/Convolutional_Neural_Network/CNN.html</guid>
  <pubDate>Tue, 17 Jan 2023 23:00:00 GMT</pubDate>
  <media:content url="https://stephen137.github.io/posts/Convolutional_Neural_Network/CNN.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Collaborative Filtering</title>
  <dc:creator>Stephen Barrie</dc:creator>
  <link>https://stephen137.github.io/posts/Collaborative Filtering/collaborative-filtering-deep-dive.html</link>
  <description><![CDATA[ 




<p>This is my follow up to the second part of <a href="https://www.youtube.com/watch?v=p4ZZq0736Po"><strong><em>Lesson 7: Practical Deep Learning for Coders 2022</em></strong></a> in which Jeremy shows how to build a Collaborative Filtering model from scratch, within Excel, and also using PyTorch, and explains <code>latent factors</code> and <code>emdedding</code></p>
<section id="recommendation-systems" class="level2">
<h2 class="anchored" data-anchor-id="recommendation-systems">Recommendation Systems</h2>
<p>One very common problem to solve is when you have a number of users and a number of products, and you want to recommend which products are most likely to be useful for which users. There are many variations of this: for example, recommending movies (such as on Netflix), figuring out what to highlight for a user on a home page, deciding what stories to show in a social media feed, and so forth. There is a general solution to this problem, called <em>collaborative filtering</em>, which works like this: look at what products the current user has used or liked, find other users that have used or liked similar products, and then recommend other products that those users have used or liked.</p>
<p>For example, on Netflix you may have watched lots of movies that are science fiction, full of action, and were made in the 1970s. Netflix may not know these particular properties of the films you have watched, but it will be able to see that other people that have watched the same movies that you watched also tended to watch other movies that are science fiction, full of action, and were made in the 1970s. In other words, to use this approach we don’t necessarily need to know anything about the movies, except who like to watch them.</p>
<p>There is actually a more general class of problems that this approach can solve, not necessarily involving users and products. Indeed, for collaborative filtering we more commonly refer to <em>items</em>, rather than <em>products</em>. Items could be links that people click on, diagnoses that are selected for patients, and so forth.</p>
<p>The key foundational idea is that of <em>latent factors</em>. In the Netflix example, we started with the assumption that you like old, action-packed sci-fi movies. But you never actually told Netflix that you like these kinds of movies. And Netflix never actually needed to add columns to its movies table saying which movies are of these types. Still, there must be some underlying concept of sci-fi, action, and movie age, and these concepts must be relevant for at least some people’s movie watching decisions.</p>
<blockquote class="blockquote">
<p><em>This is chapter 8 of the book <a href="https://www.amazon.com/Deep-Learning-Coders-fastai-PyTorch/dp/1492045527">Practical Deep Learning for Coders</a>, provided courtesy of O’Reilly Media. The full book is <a href="https://github.com/fastai/fastbook/">available as Jupyter Notebooks</a>. A free course that covers the book is <a href="https://course.fast.ai/">available here</a>.</em></p>
</blockquote>
<p>For this chapter we are going to work on this movie recommendation problem. We’ll start by getting some data suitable for a collaborative filtering model.</p>
<section id="a-first-look-at-the-data" class="level3">
<h3 class="anchored" data-anchor-id="a-first-look-at-the-data">A First Look at the Data</h3>
<div class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># load required packages and set seed for reproducibility</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;">from</span> fastai.collab <span class="im" style="color: #00769E;">import</span> <span class="op" style="color: #5E5E5E;">*</span></span>
<span id="cb1-3"><span class="im" style="color: #00769E;">from</span> fastai.tabular.<span class="bu" style="color: null;">all</span> <span class="im" style="color: #00769E;">import</span> <span class="op" style="color: #5E5E5E;">*</span></span>
<span id="cb1-4">set_seed(<span class="dv" style="color: #AD0000;">42</span>)</span></code></pre></div>
</div>
<p>We do not have access to Netflix’s entire dataset of movie watching history, but there is a great dataset that we can use, called <a href="https://grouplens.org/datasets/movielens/">MovieLens</a>. This dataset contains tens of millions of movie rankings (a combination of a movie ID, a user ID, and a numeric rating), although we will just use a subset of 100,000 of them for our example. If you’re interested, it would be a great learning project to try and replicate this approach on the full 25-million recommendation dataset, which you can get from their website.</p>
<p>The dataset is available through the usual fastai function:</p>
<div class="cell" data-tags="[]" data-execution_count="29">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># download data</span></span>
<span id="cb2-2">path <span class="op" style="color: #5E5E5E;">=</span> untar_data(URLs.ML_100k)</span></code></pre></div>
</div>
<p>According to the <em>README</em>, the main table is in the file <em>u.data</em>. It is tab-separated and the columns are, respectively user, movie, rating, and timestamp. Since those names are not encoded, we need to indicate them when reading the file with Pandas. Here is a way to open this table and take a look:</p>
<div class="cell" data-tags="[]" data-execution_count="30">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;"># load in table - specify colums names</span></span>
<span id="cb3-2">ratings <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(path<span class="op" style="color: #5E5E5E;">/</span><span class="st" style="color: #20794D;">'u.data'</span>, delimiter<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'</span><span class="ch" style="color: #20794D;">\t</span><span class="st" style="color: #20794D;">'</span>, header<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>, <span class="co" style="color: #5E5E5E;"># tab(t) separated file, instead of a comma(c) separated file</span></span>
<span id="cb3-3">                      names<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'user'</span>,<span class="st" style="color: #20794D;">'movie'</span>,<span class="st" style="color: #20794D;">'rating'</span>,<span class="st" style="color: #20794D;">'timestamp'</span>]) <span class="co" style="color: #5E5E5E;"># need to specify columns as not encoded</span></span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;"># look at the first 5 rows</span></span>
<span id="cb3-6">ratings.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="30">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>user</th>
      <th>movie</th>
      <th>rating</th>
      <th>timestamp</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>196</td>
      <td>242</td>
      <td>3</td>
      <td>881250949</td>
    </tr>
    <tr>
      <th>1</th>
      <td>186</td>
      <td>302</td>
      <td>3</td>
      <td>891717742</td>
    </tr>
    <tr>
      <th>2</th>
      <td>22</td>
      <td>377</td>
      <td>1</td>
      <td>878887116</td>
    </tr>
    <tr>
      <th>3</th>
      <td>244</td>
      <td>51</td>
      <td>2</td>
      <td>880606923</td>
    </tr>
    <tr>
      <th>4</th>
      <td>166</td>
      <td>346</td>
      <td>1</td>
      <td>886397596</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>Although this has all the information we need, it is not a particularly helpful way for humans to look at this data. Here is the same data cross-tabulated into a human-friendly table:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Collaborative Filtering/collaborative-filtering-deep-dive_files/figure-html/9cbc69a5-40ca-4406-9bde-0db7c9887870.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">image.png</figcaption><p></p>
</figure>
</div>
<p>We have selected just a few of the most popular movies, and users who watch the most movies, for this crosstab example. The empty cells in this table are the things that we would like our model to learn to fill in. Those are the places where a user has not reviewed the movie yet, presumably because they have not watched it. For each user, we would like to figure out which of those movies they might be most likely to enjoy.</p>
<p>If we knew for each user to what degree they liked each important category that a movie might fall into, such as genre, age, preferred directors and actors, and so forth, and we knew the same information about each movie, then a simple way to fill in this table would be to multiply this information together for each movie and use a combination. For instance, assuming these factors range between -1 and +1, with positive numbers indicating stronger matches and negative numbers weaker ones, and the categories are science-fiction, action, and old movies, then we could represent the movie <em>The Last Skywalker</em> as:</p>
<div class="cell" data-tags="[]" data-execution_count="5">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;"># embed features of the movie The Last Skywalker by creating vector of values between -1 and +1</span></span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;"># science fiction 0.98, action 0.9, old movies -0.9</span></span>
<span id="cb4-3">last_skywalker <span class="op" style="color: #5E5E5E;">=</span> np.array([<span class="fl" style="color: #AD0000;">0.98</span>,<span class="fl" style="color: #AD0000;">0.9</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.9</span>])</span></code></pre></div>
</div>
<p>Here, for instance, we are scoring <em>very science-fiction</em> as 0.98, <em>very action</em> as 0.9, and <em>very not old</em> as -0.9. We could represent a user who likes modern sci-fi action movies as:</p>
<div class="cell" data-tags="[]" data-execution_count="6">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;"># embed the features of a user based on their movie preferences by creating vector of values between -1 and +1</span></span>
<span id="cb5-2"><span class="co" style="color: #5E5E5E;"># science fiction 0.9, action 0.8, old movies -0.6</span></span>
<span id="cb5-3">user1 <span class="op" style="color: #5E5E5E;">=</span> np.array([<span class="fl" style="color: #AD0000;">0.9</span>,<span class="fl" style="color: #AD0000;">0.8</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.6</span>])</span></code></pre></div>
</div>
<p>and we can now calculate the match between this combination:</p>
<div class="cell" data-tags="[]" data-execution_count="7">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;"># calculate the dot product of the two vectors to see whether LastSkywalker is a good match for user 1</span></span>
<span id="cb6-2">(user1<span class="op" style="color: #5E5E5E;">*</span>last_skywalker).<span class="bu" style="color: null;">sum</span>()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>2.1420000000000003</code></pre>
</div>
</div>
<p>When we multiply two vectors together and add up the results, this is known as the <em>dot product</em>. It is used a lot in machine learning, and forms the basis of matrix multiplication. We will be looking a lot more at matrix multiplication and dot products later.</p>
<blockquote class="blockquote">
<p>jargon: dot product: The mathematical operation of multiplying the elements of two vectors together, and then summing up the result.</p>
</blockquote>
<p>On the other hand, we might represent the movie <em>Casablanca</em> as:</p>
<div class="cell" data-tags="[]" data-execution_count="8">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;"># embed features of the movie Casablanca by creating vector of values between -1 and +1</span></span>
<span id="cb8-2"><span class="co" style="color: #5E5E5E;"># science fiction 0.98, action 0.9, old movies -0.9</span></span>
<span id="cb8-3">casablanca <span class="op" style="color: #5E5E5E;">=</span> np.array([<span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.99</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">0.3</span>,<span class="fl" style="color: #AD0000;">0.8</span>])</span></code></pre></div>
</div>
<p>The match between this combination is:</p>
<div class="cell" data-tags="[]" data-execution_count="9">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;"># calculate the dot product of the two vectors to see whether Casabalance is a good match for user 1</span></span>
<span id="cb9-2">(user1<span class="op" style="color: #5E5E5E;">*</span>casablanca).<span class="bu" style="color: null;">sum</span>()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>-1.611</code></pre>
</div>
</div>
<p>Since we don’t know what <code>latent factors</code> actually are, and we don’t know how to score them for each user and movie, we should learn them.</p>
</section>
<section id="collaborative-filtering---using-excel" class="level3">
<h3 class="anchored" data-anchor-id="collaborative-filtering---using-excel">Collaborative filtering - using Excel</h3>
<p>The problem is we haven’t been given any information about the users, or the movies, and we might not even know what things about movies actually matter to users. But, not to worry, we can just use Stochastic Gradient Descent (SGD) to find them!</p>
<p>There is surprisingly little difference between specifying the structure of a model, as we did in the last section, and learning one, since we can just use our general <code>gradient descent</code> approach.</p>
<blockquote class="blockquote">
<p>Step 1: randomly initialize some parameters</p>
</blockquote>
<p>These parameters will be a set of <code>latent factors</code> for each user and movie. We will have to decide how many to use. We will discuss how to select this shortly, but for illustrative purposes let’s use 5 for now. Because each user will have a set of these factors and each movie will have a set of these factors, we can show these randomly initialized values right next to the users and movies in our crosstab, and we can then fill in the dot products for each of these combinations in the middle.</p>
<p>So, the initialized latent factors for <code>movieId 27</code> are 0.71, 0.81, 0.74, 0.04, 0.04 and the latent factors for <code>userID 14</code> are 0.19, 0.63, 0.31, 0.44, 0.51. We then multiply these together using the <code>MMULT</code> matrix multiplication function within Excel to obtain our initial predictions.</p>
<p>We don’t know what these factors are, but for example we can interpret that <code>userID 14</code> doesn’t feel very strongly, with a value of <code>0.19</code> about <code>movieID</code> factor 1 which has a value of <code>0.71</code></p>
<p>This is what it looks like in Microsoft Excel:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Collaborative Filtering/collaborative-filtering-deep-dive_files/figure-html/0fb84ac2-fe09-4175-a46e-943bba1ea7f1.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">latent_factors.JPG</figcaption><p></p>
</figure>
</div>
<blockquote class="blockquote">
<p>Step 2: Calculate our predictions using Matrix Multiplication</p>
</blockquote>
<p>As we’ve discussed, we can do this by simply taking the dot product of each movie with each user. If, for instance, the first latent <code>user</code> factor represents how much the user likes action movies, and the first latent <code>movie</code> factor represents if the movie has a lot of action or not, the product of those will be particularly <code>high</code> if either <code>the user likes action movies and the movie has a lot of action in it</code> or <code>the user doesn't like action movies and the movie doesn't have any action in it</code>. On the other hand, if we have a mismatch (a user loves action movies but the movie isn’t an action film, or the user doesn’t like action movies and it is one), the product will be very low.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Collaborative Filtering/collaborative-filtering-deep-dive_files/figure-html/7b668964-a0f6-4e7a-a92b-0cb7782686a1.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">initialized.JPG</figcaption><p></p>
</figure>
</div>
<blockquote class="blockquote">
<p>Step 3: calculate our loss</p>
</blockquote>
<p>We can use any loss function that we wish; let’s pick <code>mean squared error</code> for now, since that is one reasonable way to represent the accuracy of a prediction.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Collaborative Filtering/collaborative-filtering-deep-dive_files/figure-html/f2041a2e-e5f0-480b-b75b-d2a6a5142c3b.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">initialized.JPG</figcaption><p></p>
</figure>
</div>
<blockquote class="blockquote">
<p>Step 4: optimize using Stochastic Gradient Descent(SGD) - the Solver function in Excel approximates this</p>
</blockquote>
<p>That’s all we need. With this in place, we can optimize our parameters (that is, the latent factors) using stochastic gradient descent, such as to minimize the loss. At each step, the stochastic gradient descent optimizer will calculate the match between each movie and each user using the dot product, and will compare it to the actual rating that each user gave to each movie. It will then calculate the derivative of this value and will step the weights by multiplying this by the learning rate. After doing this lots of times, the loss will get better and better, and the recommendations will also get better and better.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Collaborative Filtering/collaborative-filtering-deep-dive_files/figure-html/b9ed0766-c860-44a6-9a09-3e4a3fc86baa.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">optimized.JPG</figcaption><p></p>
</figure>
</div>
<p>The above spreadsheet screenshot shows the updated predictions after applying Stohastic Gradient Descent using Excel’s inbuilt Solver function - note that the movie rating predictions are now much more in line with the actual ratings (with values betwen 0 and 5) and our loss function RMSE has reduced from 2.8 to 0.42.</p>
</section>
<section id="using-pytorch-to-do-the-same-thing" class="level3">
<h3 class="anchored" data-anchor-id="using-pytorch-to-do-the-same-thing">Using PyTorch to do the same thing</h3>
<p>To use the usual <code>Learner.fit</code> function we will need to get our data into a <code>DataLoaders</code>, so let’s focus on that now.</p>
<p>When showing the data, we would rather see movie titles than their IDs. The table <code>u.item</code> contains the correspondence of IDs to titles:</p>
<div class="cell" data-tags="[]" data-execution_count="31">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;"># load in movie titles table</span></span>
<span id="cb11-2">movies <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(path<span class="op" style="color: #5E5E5E;">/</span><span class="st" style="color: #20794D;">'u.item'</span>,  delimiter<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'|'</span>, encoding<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'latin-1'</span>, <span class="co" style="color: #5E5E5E;">#</span></span>
<span id="cb11-3">                     usecols<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">0</span>,<span class="dv" style="color: #AD0000;">1</span>), names<span class="op" style="color: #5E5E5E;">=</span>(<span class="st" style="color: #20794D;">'movie'</span>,<span class="st" style="color: #20794D;">'title'</span>), header<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>)</span>
<span id="cb11-4">movies.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="31">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>movie</th>
      <th>title</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>Toy Story (1995)</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2</td>
      <td>GoldenEye (1995)</td>
    </tr>
    <tr>
      <th>2</th>
      <td>3</td>
      <td>Four Rooms (1995)</td>
    </tr>
    <tr>
      <th>3</th>
      <td>4</td>
      <td>Get Shorty (1995)</td>
    </tr>
    <tr>
      <th>4</th>
      <td>5</td>
      <td>Copycat (1995)</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>We can merge this with our <code>ratings</code> table to get the user ratings by title:</p>
<div class="cell" data-tags="[]" data-execution_count="32">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;"># merge ratings and movie tables</span></span>
<span id="cb12-2">ratings <span class="op" style="color: #5E5E5E;">=</span> ratings.merge(movies)</span>
<span id="cb12-3">ratings.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="32">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>user</th>
      <th>movie</th>
      <th>rating</th>
      <th>timestamp</th>
      <th>title</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>196</td>
      <td>242</td>
      <td>3</td>
      <td>881250949</td>
      <td>Kolya (1996)</td>
    </tr>
    <tr>
      <th>1</th>
      <td>63</td>
      <td>242</td>
      <td>3</td>
      <td>875747190</td>
      <td>Kolya (1996)</td>
    </tr>
    <tr>
      <th>2</th>
      <td>226</td>
      <td>242</td>
      <td>5</td>
      <td>883888671</td>
      <td>Kolya (1996)</td>
    </tr>
    <tr>
      <th>3</th>
      <td>154</td>
      <td>242</td>
      <td>3</td>
      <td>879138235</td>
      <td>Kolya (1996)</td>
    </tr>
    <tr>
      <th>4</th>
      <td>306</td>
      <td>242</td>
      <td>5</td>
      <td>876503793</td>
      <td>Kolya (1996)</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>We can now build a <code>DataLoaders</code> object from this table. By default, it takes the first column for the user, the second column for the item (here our movies), and the third column for the ratings. We need to change the value of <code>item_name</code> in our case to use the titles instead of the IDs:</p>
<div class="cell" data-tags="[]" data-execution_count="33">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;"># build a Collaborative Filtering DataLoaders from out ratings DataFrame</span></span>
<span id="cb13-2"><span class="co" style="color: #5E5E5E;"># needs a user column and an item column - we have a user column called user so don't need to pass in</span></span>
<span id="cb13-3">dls <span class="op" style="color: #5E5E5E;">=</span> CollabDataLoaders.from_df(ratings, item_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'title'</span>, bs<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">64</span>) <span class="co" style="color: #5E5E5E;"># need to pass in item_name to get title</span></span>
<span id="cb13-4">dls.show_batch()</span></code></pre></div>
<div class="cell-output cell-output-display">

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>user</th>
      <th>title</th>
      <th>rating</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>542</td>
      <td>My Left Foot (1989)</td>
      <td>4</td>
    </tr>
    <tr>
      <th>1</th>
      <td>422</td>
      <td>Event Horizon (1997)</td>
      <td>3</td>
    </tr>
    <tr>
      <th>2</th>
      <td>311</td>
      <td>African Queen, The (1951)</td>
      <td>4</td>
    </tr>
    <tr>
      <th>3</th>
      <td>595</td>
      <td>Face/Off (1997)</td>
      <td>4</td>
    </tr>
    <tr>
      <th>4</th>
      <td>617</td>
      <td>Evil Dead II (1987)</td>
      <td>1</td>
    </tr>
    <tr>
      <th>5</th>
      <td>158</td>
      <td>Jurassic Park (1993)</td>
      <td>5</td>
    </tr>
    <tr>
      <th>6</th>
      <td>836</td>
      <td>Chasing Amy (1997)</td>
      <td>3</td>
    </tr>
    <tr>
      <th>7</th>
      <td>474</td>
      <td>Emma (1996)</td>
      <td>3</td>
    </tr>
    <tr>
      <th>8</th>
      <td>466</td>
      <td>Jackie Chan's First Strike (1996)</td>
      <td>3</td>
    </tr>
    <tr>
      <th>9</th>
      <td>554</td>
      <td>Scream (1996)</td>
      <td>3</td>
    </tr>
  </tbody>
</table>
</div>
</div>
<p>To represent collaborative filtering in PyTorch we can’t just use the crosstab representation directly, especially if we want it to fit into our deep learning framework. We can represent our movie and user latent factor tables as simple matrices:</p>
<div class="cell" data-tags="[]" data-execution_count="34">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">n_users  <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">len</span>(dls.classes[<span class="st" style="color: #20794D;">'user'</span>]) <span class="co" style="color: #5E5E5E;"># set number of users = number of rows of users</span></span>
<span id="cb14-2">n_movies <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">len</span>(dls.classes[<span class="st" style="color: #20794D;">'title'</span>]) <span class="co" style="color: #5E5E5E;"># set number of movies = nuumber of rows of movies</span></span>
<span id="cb14-3">n_factors <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">5</span> <span class="co" style="color: #5E5E5E;"># set number of columns (latent factors) to whatever we want</span></span>
<span id="cb14-4"></span>
<span id="cb14-5"><span class="co" style="color: #5E5E5E;"># create initial random weightings for user latent factors</span></span>
<span id="cb14-6"><span class="co" style="color: #5E5E5E;"># user EMBEDDING matrix</span></span>
<span id="cb14-7">user_factors <span class="op" style="color: #5E5E5E;">=</span> torch.randn(n_users, n_factors) <span class="co" style="color: #5E5E5E;"># random tensors </span></span>
<span id="cb14-8"></span>
<span id="cb14-9"></span>
<span id="cb14-10"><span class="co" style="color: #5E5E5E;"># create initial random weightings for movie latent factors</span></span>
<span id="cb14-11"><span class="co" style="color: #5E5E5E;"># movie EMBEDDING matrix</span></span>
<span id="cb14-12">movie_factors <span class="op" style="color: #5E5E5E;">=</span> torch.randn(n_movies, n_factors) <span class="co" style="color: #5E5E5E;"># random tensors </span></span></code></pre></div>
</div>
<p>Note fast.ai has a built in formula for setting an appropriate number of latent factors</p>
<div class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">user_factors</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>tensor([[-1.0827,  0.2138,  0.9310, -0.2739, -0.4359],
        [-0.5195,  0.7613, -0.4365,  0.1365,  1.3300],
        [-1.2804,  0.0705,  0.6489, -1.2110,  1.8266],
        ...,
        [ 0.8009, -0.4734, -0.8962, -0.7348, -0.0246],
        [ 0.3354, -0.8262, -0.1541,  0.4699,  0.4873],
        [ 2.4054, -0.2156, -1.4126, -0.2467,  1.0571]])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">movie_factors</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">
<pre><code>tensor([[-0.3978,  0.4563,  1.2301,  0.3745,  0.9689],
        [-1.1836, -0.5818, -0.5587, -0.4316,  0.2128],
        [ 0.0420,  1.3201, -0.7999,  1.1123, -0.7585],
        ...,
        [ 2.4743,  1.3068,  0.4540,  0.6958,  0.5228],
        [ 2.3970, -0.2559, -1.7196,  1.0440, -0.2662],
        [ 0.2786, -0.6593,  0.5260, -0.3416, -1.3938]])</code></pre>
</div>
</div>
<p>To calculate the result for a particular movie and user combination, we have to look up the index of the movie in our movie latent factor matrix and the index of the user in our user latent factor matrix; then we can do our dot product between the two latent factor vectors. But <code>look up in an index</code> is not an operation our deep learning models know how to do. They know how to do matrix products, and activation functions.</p>
<p>Fortunately, it turns out that we can represent <em>look up in an index</em> as a <code>matrix product</code>. The trick is to <code>replace our indices with one-hot-encoded vectors</code>. Here is an example of what happens if we multiply a vector by a one-hot-encoded vector representing the index 3:</p>
<p>Taking the dot product of a one hot coded vector and something, is the same as looking up the index in an array.</p>
<div class="cell" data-tags="[]" data-execution_count="16">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;"># create a one-hot encoded vector of length n_users, with 2nd element set to 1 and everything else set to 0</span></span>
<span id="cb19-2">one_hot_2 <span class="op" style="color: #5E5E5E;">=</span> one_hot(<span class="dv" style="color: #AD0000;">2</span>, n_users).<span class="bu" style="color: null;">float</span>()</span></code></pre></div>
</div>
<div class="cell" data-tags="[]" data-execution_count="17">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="co" style="color: #5E5E5E;"># matrix multiplication - users</span></span>
<span id="cb20-2"><span class="co" style="color: #5E5E5E;"># .t transposes cols and rows to enable matrix multiplication</span></span>
<span id="cb20-3"><span class="co" style="color: #5E5E5E;"># @ is the symbol for matrix multipy</span></span>
<span id="cb20-4">user_factors.t() <span class="op" style="color: #5E5E5E;">@</span> one_hot_2</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="17">
<pre><code>tensor([-1.2804,  0.0705,  0.6489, -1.2110,  1.8266])</code></pre>
</div>
</div>
<p>It gives us the same vector as the one at index 2 in the <code>user_factor</code> matrix as shown previously.</p>
<div class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="co" style="color: #5E5E5E;"># create a one-hot encoded vector of length n_users, with 1st element set to 1 and everything else set to 0</span></span>
<span id="cb22-2">one_hot_1 <span class="op" style="color: #5E5E5E;">=</span> one_hot(<span class="dv" style="color: #AD0000;">1</span>, n_movies).<span class="bu" style="color: null;">float</span>()</span></code></pre></div>
</div>
<div class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="co" style="color: #5E5E5E;"># matrix multiplication - movie</span></span>
<span id="cb23-2"><span class="co" style="color: #5E5E5E;"># .t transposes cols and rows to enable matrix multiplication</span></span>
<span id="cb23-3"><span class="co" style="color: #5E5E5E;"># @ is the symbol for matrix multipy</span></span>
<span id="cb23-4">movie_factors.t() <span class="op" style="color: #5E5E5E;">@</span> one_hot_1</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="23">
<pre><code>tensor([-1.1836, -0.5818, -0.5587, -0.4316,  0.2128])</code></pre>
</div>
</div>
<p>It gives us the same vector as the one at index 1 in the <code>movie_factors</code> matrix as shown previously.</p>
</section>
<section id="embedding-layer" class="level3">
<h3 class="anchored" data-anchor-id="embedding-layer">Embedding layer</h3>
<p>If we do that for a few indices at once, we will have a matrix of one-hot-encoded vectors, and that operation will be a <code>matrix multiplication</code>! This would be a perfectly acceptable way to build models using this kind of architecture, except that it would use a lot more memory and time than necessary. We know that there is no real underlying reason to store the one-hot-encoded vector, or to search through it to find the occurrence of the number one — <code>we should just be able to index into an array directly with an integer</code>. Therefore, most deep learning libraries, including <code>PyTorch</code>, include a <code>special layer</code> that does just this; it indexes into a vector using an integer, but has its derivative calculated in such a way that it is identical to what it would have been if it had done a matrix multiplication with a one-hot-encoded vector. This is called an <code>embedding</code>.</p>
<blockquote class="blockquote">
<p>jargon: Embedding: Multiplying by a one-hot-encoded matrix, using the computational shortcut that it can be implemented by simply indexing directly. This is quite a fancy word for a very simple concept. The thing that you multiply the one-hot-encoded matrix by (or, using the computational shortcut, index into directly) is called the <code>embedding matrix</code>.</p>
</blockquote>
<p>In computer vision, we have a very easy way to get all the information of a pixel through its RGB values: each pixel in a colored image is represented by three numbers. Those three numbers give us the redness, the greenness and the blueness, which is enough to get our model to work afterward (with values between 0 and 255).</p>
<p>For the problem at hand, we don’t have the same easy way to characterize a user or a movie. There are probably relations with genres: if a given user likes romance, they are likely to give higher scores to romance movies. Other factors might be whether the movie is more action-oriented versus heavy on dialogue, or the presence of a specific actor that a user might particularly like.</p>
<p>How do we determine numbers to characterize those? The answer is, we don’t. We will let our model <code>learn</code> them. By analyzing the existing relations between users and movies, our model can figure out itself the features that seem important or not. This is what <code>embeddings</code> are. We will attribute to each of our users and each of our movies a random vector of a certain length (here, <code>n_factors=5</code>), and we will make those <code>learnable parameters</code>. That means that at each step, when we compute the loss by comparing our predictions to our targets, we will <code>compute the gradients of the loss with respect to those embedding vectors</code> and update them with the rules of SGD (or another optimizer).</p>
<p>At the beginning, those numbers don’t mean anything since we have chosen them randomly, but by the end of training, they will. By learning on existing data about the relations between users and movies, without having any other information, we will see that they still get some important features, and can isolate blockbusters from independent cinema, action movies from romance, and so on.</p>
<p>We are now in a position that we can create our whole model from scratch.</p>
</section>
<section id="creating-a-collaborative-filtering-model-in-pytorch-from-scratch" class="level3">
<h3 class="anchored" data-anchor-id="creating-a-collaborative-filtering-model-in-pytorch-from-scratch">Creating a Collaborative Filtering model in PyTorch from Scratch</h3>
<p>Before we can write a model in PyTorch, we first need to learn the basics of <code>object-oriented programming</code> and Python. If you haven’t done any object-oriented programming before, we will give you a quick introduction here, but we would recommend looking up a tutorial and getting some practice before moving on.</p>
<p>The key idea in object-oriented programming is the <code>class</code>. A model is a <code>class</code>. We have been using classes throughout this book, such as <code>DataLoader</code>, <code>string</code>, and <code>Learner</code>. Python also makes it easy for us to create new classes. Here is an example of a simple class:</p>
<div class="cell" data-tags="[]" data-execution_count="26">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="co" style="color: #5E5E5E;"># example of a simple class</span></span>
<span id="cb25-2"><span class="kw" style="color: #003B4F;">class</span> Example:</span>
<span id="cb25-3">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, a): <span class="va" style="color: #111111;">self</span>.a <span class="op" style="color: #5E5E5E;">=</span> a <span class="co" style="color: #5E5E5E;"># __init__ any method surrounded in double underscores like this is considered special</span></span>
<span id="cb25-4">    <span class="kw" style="color: #003B4F;">def</span> say(<span class="va" style="color: #111111;">self</span>,x): <span class="cf" style="color: #003B4F;">return</span> <span class="ss" style="color: #20794D;">f'Hello </span><span class="sc" style="color: #5E5E5E;">{</span><span class="va" style="color: #111111;">self</span><span class="sc" style="color: #5E5E5E;">.</span>a<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">, </span><span class="sc" style="color: #5E5E5E;">{</span>x<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">.'</span></span></code></pre></div>
</div>
<p>The most important piece of this is the special method called <code>__init__</code> (pronounced <em>dunder init</em>). In Python, any method surrounded in double underscores like this is considered special. It indicates that there is some extra behavior associated with this method name. In the case of <code>__init__</code>, this is the method <code>Python will call when your new object is created</code>. So, this is where you can <code>set up any state that needs to be initialized upon object creation</code>.</p>
<p>Any parameters included when the user constructs an instance of your class will be passed to the <code>__init__</code> method as parameters. Note that the <code>first parameter</code> to any method defined inside a class is <code>self</code>, so you can use this to <code>set and get any attributes that you will need</code>:</p>
<div class="cell" data-tags="[]" data-execution_count="27">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">ex <span class="op" style="color: #5E5E5E;">=</span> Example(<span class="st" style="color: #20794D;">'Sylvain'</span>) <span class="co" style="color: #5E5E5E;"># so self.a now equals Sylvain</span></span>
<span id="cb26-2">ex.say(<span class="st" style="color: #20794D;">'nice to meet you'</span>) <span class="co" style="color: #5E5E5E;"># x is now 'nice to meet you - we can access the say function within the Example class using .say</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="27">
<pre><code>'Hello Sylvain, nice to meet you.'</code></pre>
</div>
</div>
<p>Also note that creating a new PyTorch module requires inheriting from <code>Module</code>. <em>Inheritance</em> is an important object-oriented concept that we will not discuss in detail here—in short, it means that we can add additional behavior to an existing class. PyTorch already provides a <code>Module</code> class, which provides some basic foundations that we want to build on. So, we add the name of this <code>superclass</code> after the name of the class that we are defining, as shown in the following example.</p>
<p>The final thing that you need to know to <code>create a new PyTorch module</code> is that when your module is called, PyTorch will call a method in your class called <code>forward</code>, and will pass along to that any parameters that are included in the call. Here is the class defining our dot product model:</p>
<div class="cell" data-tags="[]" data-execution_count="31">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="co" style="color: #5E5E5E;"># create a class to define our dot product module</span></span>
<span id="cb28-2"><span class="kw" style="color: #003B4F;">class</span> DotProduct(Module): <span class="co" style="color: #5E5E5E;"># putting something in parentheses after a class name creates a SUPERclass</span></span>
<span id="cb28-3">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, n_users, n_movies, n_factors): <span class="co" style="color: #5E5E5E;"># specify number of users, movies, and latent factors</span></span>
<span id="cb28-4">        <span class="va" style="color: #111111;">self</span>.user_factors <span class="op" style="color: #5E5E5E;">=</span> Embedding(n_users, n_factors) <span class="co" style="color: #5E5E5E;"># create Embedding matrix for users - we will cover how to create Embedding Class later</span></span>
<span id="cb28-5">        <span class="va" style="color: #111111;">self</span>.movie_factors <span class="op" style="color: #5E5E5E;">=</span> Embedding(n_movies, n_factors) <span class="co" style="color: #5E5E5E;"># create Embedding matrix for movies - we will cover how to create Embedding Class later</span></span>
<span id="cb28-6">    </span>
<span id="cb28-7">    <span class="co" style="color: #5E5E5E;"># calculation of our model has to be defined in a function called forward</span></span>
<span id="cb28-8">    <span class="kw" style="color: #003B4F;">def</span> forward(<span class="va" style="color: #111111;">self</span>, x):  <span class="co" style="color: #5E5E5E;"># pass the object itself and thing calculating on - user and movie for a batch</span></span>
<span id="cb28-9">                           <span class="co" style="color: #5E5E5E;"># each row will be one user and movie combination, columns will be users and movies</span></span>
<span id="cb28-10">        users <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.user_factors(x[:,<span class="dv" style="color: #AD0000;">0</span>]) <span class="co" style="color: #5E5E5E;"># grab first column i.e every row, and look it up using our user Embedding matrix</span></span>
<span id="cb28-11">        movies <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.movie_factors(x[:,<span class="dv" style="color: #AD0000;">1</span>]) <span class="co" style="color: #5E5E5E;"># grab second column i.e every row, and look it up using our movie Embedding matrix</span></span>
<span id="cb28-12">        <span class="cf" style="color: #003B4F;">return</span> (users <span class="op" style="color: #5E5E5E;">*</span> movies).<span class="bu" style="color: null;">sum</span>(dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>) <span class="co" style="color: #5E5E5E;"># calculate the dot product - # dim = 1 because we are summing across COLUMNS for each row # dim = 0 would sum across ROWS</span></span></code></pre></div>
</div>
<p>If you haven’t seen object-oriented programming before, then don’t worry, you won’t need to use it much in this book. We are just mentioning this approach here, because most online tutorials and documentation will use the object-oriented syntax.</p>
<p>Note that the input of the model is a tensor of shape <code>batch_size x 2</code>, where the first column (<code>x[:, 0]</code>) contains the user IDs and the second column (<code>x[:, 1]</code>) contains the movie IDs. As explained before, we use the <em>embedding</em> layers to represent our matrices of user and movie latent factors:</p>
<div class="cell" data-tags="[]" data-execution_count="30">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="co" style="color: #5E5E5E;"># inputs to the model are 64 rows x 2 columns - column 0 user IDs and column 1 movie IDs</span></span>
<span id="cb29-2">x,y <span class="op" style="color: #5E5E5E;">=</span> dls.one_batch()</span>
<span id="cb29-3">x.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="30">
<pre><code>torch.Size([64, 2])</code></pre>
</div>
</div>
<p>Now that we have defined our architecture, and created our parameter matrices, we need to create a <code>Learner</code> to optimize our model. In the past we have used special functions, such as <code>cnn_learner</code>, which set up everything for us for a particular application. Since we are doing things from scratch here, we will use the plain <code>Learner</code> class:</p>
<div class="cell" data-tags="[]" data-execution_count="32">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="co" style="color: #5E5E5E;"># define our Dot Product model</span></span>
<span id="cb31-2">model <span class="op" style="color: #5E5E5E;">=</span> DotProduct(n_users, n_movies, <span class="dv" style="color: #AD0000;">50</span>)</span>
<span id="cb31-3"></span>
<span id="cb31-4"><span class="co" style="color: #5E5E5E;"># we can pass our Dot Product class to our learner</span></span>
<span id="cb31-5">learn <span class="op" style="color: #5E5E5E;">=</span> Learner(dls, model, loss_func<span class="op" style="color: #5E5E5E;">=</span>MSELossFlat())</span></code></pre></div>
</div>
<p>We are now ready to fit our model:</p>
<div class="cell" data-tags="[]" data-execution_count="33">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="co" style="color: #5E5E5E;"># fit (train) our model</span></span>
<span id="cb32-2">learn.fit_one_cycle(<span class="dv" style="color: #AD0000;">5</span>, <span class="fl" style="color: #AD0000;">5e-3</span>) <span class="co" style="color: #5E5E5E;"># 5 epochs, learning rate 5e^-3</span></span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th>epoch</th>
      <th>train_loss</th>
      <th>valid_loss</th>
      <th>time</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>1.385412</td>
      <td>1.293633</td>
      <td>00:04</td>
    </tr>
    <tr>
      <td>1</td>
      <td>1.061318</td>
      <td>1.070560</td>
      <td>00:04</td>
    </tr>
    <tr>
      <td>2</td>
      <td>0.968811</td>
      <td>0.976037</td>
      <td>00:04</td>
    </tr>
    <tr>
      <td>3</td>
      <td>0.862989</td>
      <td>0.883624</td>
      <td>00:04</td>
    </tr>
    <tr>
      <td>4</td>
      <td>0.797610</td>
      <td>0.869864</td>
      <td>00:04</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</section>
<section id="squeezing-our-predictions-using-sigmoid" class="level3">
<h3 class="anchored" data-anchor-id="squeezing-our-predictions-using-sigmoid">Squeezing our predictions using Sigmoid</h3>
<p>The first thing we can do to make this model a little bit better is to force those predictions to be between 0 and 5. For this, we just need to use <code>sigmoid_range</code>. Sigmoid on its own squeezes values between 0 and 1 but if we multiply by 5 that wil ensure the values are between 0 and 5. One thing we discovered empirically is that it’s better to have the range go a little bit over 5, so we use <code>(0, 5.5)</code>:</p>
<div class="cell" data-tags="[]" data-execution_count="34">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="co" style="color: #5E5E5E;"># tweak our Dot Product Class to squeeze preds between 0 and 5</span></span>
<span id="cb33-2"><span class="kw" style="color: #003B4F;">class</span> DotProduct(Module):</span>
<span id="cb33-3">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, n_users, n_movies, n_factors, y_range<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">0</span>,<span class="fl" style="color: #AD0000;">5.5</span>)): <span class="co" style="color: #5E5E5E;"># set range for predictions between 0 and 5 (with a little bit extra for comfort) </span></span>
<span id="cb33-4">        <span class="va" style="color: #111111;">self</span>.user_factors <span class="op" style="color: #5E5E5E;">=</span> Embedding(n_users, n_factors) <span class="co" style="color: #5E5E5E;"># create Embedding matrix for users - we will cover how to create Embedding Class later</span></span>
<span id="cb33-5">        <span class="va" style="color: #111111;">self</span>.movie_factors <span class="op" style="color: #5E5E5E;">=</span> Embedding(n_movies, n_factors) <span class="co" style="color: #5E5E5E;"># create Embedding matrix for movies - we will cover how to create Embedding Class later</span></span>
<span id="cb33-6">        <span class="va" style="color: #111111;">self</span>.y_range <span class="op" style="color: #5E5E5E;">=</span> y_range <span class="co" style="color: #5E5E5E;"># range of predictions specified</span></span>
<span id="cb33-7">        </span>
<span id="cb33-8">    <span class="kw" style="color: #003B4F;">def</span> forward(<span class="va" style="color: #111111;">self</span>, x):</span>
<span id="cb33-9">        users <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.user_factors(x[:,<span class="dv" style="color: #AD0000;">0</span>]) <span class="co" style="color: #5E5E5E;"># grab first column i.e every row, and look it up using our user Embedding matrix</span></span>
<span id="cb33-10">        movies <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.movie_factors(x[:,<span class="dv" style="color: #AD0000;">1</span>]) <span class="co" style="color: #5E5E5E;"># grab second column i.e every row, and look it up using our movie Embedding matrix</span></span>
<span id="cb33-11">        <span class="cf" style="color: #003B4F;">return</span> sigmoid_range((users <span class="op" style="color: #5E5E5E;">*</span> movies).<span class="bu" style="color: null;">sum</span>(dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>), <span class="op" style="color: #5E5E5E;">*</span><span class="va" style="color: #111111;">self</span>.y_range) <span class="co" style="color: #5E5E5E;"># force predictions to be between 0 and 5 using sigmoid function</span></span></code></pre></div>
</div>
<div class="cell" data-tags="[]" data-execution_count="35">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="co" style="color: #5E5E5E;"># redefine our Dot Product model</span></span>
<span id="cb34-2">model <span class="op" style="color: #5E5E5E;">=</span> DotProduct(n_users, n_movies, <span class="dv" style="color: #AD0000;">50</span>)</span>
<span id="cb34-3"></span>
<span id="cb34-4"><span class="co" style="color: #5E5E5E;"># pass in our Dot Product class to our learner as before</span></span>
<span id="cb34-5">learn <span class="op" style="color: #5E5E5E;">=</span> Learner(dls, model, loss_func<span class="op" style="color: #5E5E5E;">=</span>MSELossFlat())</span>
<span id="cb34-6"></span>
<span id="cb34-7"><span class="co" style="color: #5E5E5E;"># fit (train) our model</span></span>
<span id="cb34-8">learn.fit_one_cycle(<span class="dv" style="color: #AD0000;">5</span>, <span class="fl" style="color: #AD0000;">5e-3</span>) <span class="co" style="color: #5E5E5E;"># 5 epochs, learning rate 5e^-3</span></span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th>epoch</th>
      <th>train_loss</th>
      <th>valid_loss</th>
      <th>time</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>0.991383</td>
      <td>0.971459</td>
      <td>00:04</td>
    </tr>
    <tr>
      <td>1</td>
      <td>0.862119</td>
      <td>0.888047</td>
      <td>00:04</td>
    </tr>
    <tr>
      <td>2</td>
      <td>0.677498</td>
      <td>0.857523</td>
      <td>00:04</td>
    </tr>
    <tr>
      <td>3</td>
      <td>0.464585</td>
      <td>0.863056</td>
      <td>00:04</td>
    </tr>
    <tr>
      <td>4</td>
      <td>0.384263</td>
      <td>0.867252</td>
      <td>00:05</td>
    </tr>
  </tbody>
</table>
</div>
</div>
<p>This is negligibly better, but we cann improve on this.</p>
</section>
<section id="introducing-bias-into-our-model" class="level3">
<h3 class="anchored" data-anchor-id="introducing-bias-into-our-model">Introducing Bias into our model</h3>
<p>One obvious missing piece is that some users are just more positive or negative in their recommendations than others, and some movies are just plain better or worse than others. But in our dot product representation we do not have any way to encode either of these things. If all you can say about a movie is, for instance, that it is very sci-fi, very action-oriented, and very not old, then you don’t really have any way to say whether most people like it.</p>
<p>That’s because at this point we only have weights; we do not have <code>biases</code>. If we have a single number for each user that we can add to our scores, and ditto for each movie, that will handle this missing piece very nicely. Let’s first look at this in Excel - we simply initialize an additional randomized <code>bias factor</code> to add to our existing <code>latent factors</code> and then optimize as before. This results in an improvement - our RMSE drops from 0.42 to 0.35 - see spreadsheet screenshot below:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Collaborative Filtering/collaborative-filtering-deep-dive_files/figure-html/116f9d3a-7fa8-4c06-af73-d5f545c8db8a.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">bias.JPG</figcaption><p></p>
</figure>
</div>
<p>Let’s jump back to Python and adjust our model architecture there to introduce bias into our model:</p>
<div class="cell" data-tags="[]" data-execution_count="36">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1"><span class="co" style="color: #5E5E5E;"># create new Class to include bias </span></span>
<span id="cb35-2"><span class="kw" style="color: #003B4F;">class</span> DotProductBias(Module):</span>
<span id="cb35-3">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, n_users, n_movies, n_factors, y_range<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">0</span>,<span class="fl" style="color: #AD0000;">5.5</span>)): <span class="co" style="color: #5E5E5E;"># set range for predictions between 0 and 5 (with a little bit extra for comfort as sigmoid won't return as high as 1)</span></span>
<span id="cb35-4">        <span class="va" style="color: #111111;">self</span>.user_factors <span class="op" style="color: #5E5E5E;">=</span> Embedding(n_users, n_factors) <span class="co" style="color: #5E5E5E;"># create Embedding matrix for users - we will cover how to create Embedding Class later</span></span>
<span id="cb35-5">        <span class="va" style="color: #111111;">self</span>.user_bias <span class="op" style="color: #5E5E5E;">=</span> Embedding(n_users, <span class="dv" style="color: #AD0000;">1</span>) <span class="co" style="color: #5E5E5E;"># account for user BIAS (other factors outside of our latent factors)</span></span>
<span id="cb35-6">        <span class="va" style="color: #111111;">self</span>.movie_factors <span class="op" style="color: #5E5E5E;">=</span> Embedding(n_movies, n_factors) <span class="co" style="color: #5E5E5E;"># create Embedding matrix for movies - we will cover how to create Embedding Class later</span></span>
<span id="cb35-7">        <span class="va" style="color: #111111;">self</span>.movie_bias <span class="op" style="color: #5E5E5E;">=</span> Embedding(n_movies, <span class="dv" style="color: #AD0000;">1</span>) <span class="co" style="color: #5E5E5E;"># account for movie BIAS (other factors outside of our latent factors)</span></span>
<span id="cb35-8">        <span class="va" style="color: #111111;">self</span>.y_range <span class="op" style="color: #5E5E5E;">=</span> y_range <span class="co" style="color: #5E5E5E;"># range of predictions specified</span></span>
<span id="cb35-9">        </span>
<span id="cb35-10">    <span class="kw" style="color: #003B4F;">def</span> forward(<span class="va" style="color: #111111;">self</span>, x):</span>
<span id="cb35-11">        users <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.user_factors(x[:,<span class="dv" style="color: #AD0000;">0</span>]) <span class="co" style="color: #5E5E5E;"># grab first column i.e every row, and look it up using our user Embedding matrix</span></span>
<span id="cb35-12">        movies <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.movie_factors(x[:,<span class="dv" style="color: #AD0000;">1</span>]) <span class="co" style="color: #5E5E5E;"># grab second column i.e every row, and look it up using our movie Embedding matrix</span></span>
<span id="cb35-13">        res <span class="op" style="color: #5E5E5E;">=</span> (users <span class="op" style="color: #5E5E5E;">*</span> movies).<span class="bu" style="color: null;">sum</span>(dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, keepdim<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>) <span class="co" style="color: #5E5E5E;"># calculate the dot product - # dim = 1 because we are summing across COLUMNS for each row # dim = 0 would sum across ROWS</span></span>
<span id="cb35-14">        res <span class="op" style="color: #5E5E5E;">+=</span> <span class="va" style="color: #111111;">self</span>.user_bias(x[:,<span class="dv" style="color: #AD0000;">0</span>]) <span class="op" style="color: #5E5E5E;">+</span> <span class="va" style="color: #111111;">self</span>.movie_bias(x[:,<span class="dv" style="color: #AD0000;">1</span>]) <span class="co" style="color: #5E5E5E;"># update dor product results for BIAS</span></span>
<span id="cb35-15">        <span class="cf" style="color: #003B4F;">return</span> sigmoid_range(res, <span class="op" style="color: #5E5E5E;">*</span><span class="va" style="color: #111111;">self</span>.y_range) <span class="co" style="color: #5E5E5E;"># force predictions to be between 0 and 5 using sigmoid function</span></span></code></pre></div>
</div>
<p>Let’s try training this and see how it goes:</p>
<div class="cell" data-tags="[]" data-execution_count="37">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1"><span class="co" style="color: #5E5E5E;"># define our Dot Product Bias model</span></span>
<span id="cb36-2">model <span class="op" style="color: #5E5E5E;">=</span> DotProductBias(n_users, n_movies, <span class="dv" style="color: #AD0000;">50</span>)</span>
<span id="cb36-3"></span>
<span id="cb36-4"><span class="co" style="color: #5E5E5E;"># pass in our Dot Product Bias class to our learner as before</span></span>
<span id="cb36-5">learn <span class="op" style="color: #5E5E5E;">=</span> Learner(dls, model, loss_func<span class="op" style="color: #5E5E5E;">=</span>MSELossFlat())</span>
<span id="cb36-6"></span>
<span id="cb36-7"><span class="co" style="color: #5E5E5E;"># fit (train) our model</span></span>
<span id="cb36-8">learn.fit_one_cycle(<span class="dv" style="color: #AD0000;">5</span>, <span class="fl" style="color: #AD0000;">5e-3</span>) <span class="co" style="color: #5E5E5E;"># 5 epochs, learning rate 5e^-3</span></span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th>epoch</th>
      <th>train_loss</th>
      <th>valid_loss</th>
      <th>time</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>0.951611</td>
      <td>0.925811</td>
      <td>00:05</td>
    </tr>
    <tr>
      <td>1</td>
      <td>0.819404</td>
      <td>0.855196</td>
      <td>00:05</td>
    </tr>
    <tr>
      <td>2</td>
      <td>0.616164</td>
      <td>0.856704</td>
      <td>00:05</td>
    </tr>
    <tr>
      <td>3</td>
      <td>0.403988</td>
      <td>0.885035</td>
      <td>00:05</td>
    </tr>
    <tr>
      <td>4</td>
      <td>0.294023</td>
      <td>0.891860</td>
      <td>00:05</td>
    </tr>
  </tbody>
</table>
</div>
</div>
<p>Unlike in Excel, instead of being better, in PyTorch our validation loss has actually gone up (at least by the end of training)! Why is that? If we look at both trainings carefully, we can see the validation loss stopped improving in the middle and started to get worse. As we’ve seen, <code>this is a clear indication of overfitting</code>. In this case, there is no way to use data augmentation, so we will have to use another <code>regularization</code> technique. One way to help avoid overfitting is an approach called <code>weight decay</code>.</p>
</section>
<section id="weight-decay-l2-regularization" class="level3">
<h3 class="anchored" data-anchor-id="weight-decay-l2-regularization">Weight Decay (L2 regularization)</h3>
<p>Weight decay, or <code>L2 regularization</code>, consists in adding to your loss function the sum of all the weights squared. Why do that? Because when we compute the gradients, it will add a contribution to them that will <code>encourage the weights to be as small as possible</code>.</p>
<p>Why would it prevent overfitting? The idea is that the larger the coefficients are, the sharper canyons we will have in the loss function. If we take the basic example of a parabola, <code>y = a * (x**2)</code>, the larger <code>a</code> is, the more <em>narrow</em> the parabola is:</p>
<div class="cell" data-hide_input="true" data-tags="[]" data-execution_count="38">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1"><span class="co" style="color: #5E5E5E;"># example illustrating imapct of using weight decay</span></span>
<span id="cb37-2">x <span class="op" style="color: #5E5E5E;">=</span> np.linspace(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb37-3">a_s <span class="op" style="color: #5E5E5E;">=</span> [<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">5</span>,<span class="dv" style="color: #AD0000;">10</span>,<span class="dv" style="color: #AD0000;">50</span>] </span>
<span id="cb37-4">ys <span class="op" style="color: #5E5E5E;">=</span> [a <span class="op" style="color: #5E5E5E;">*</span> x<span class="op" style="color: #5E5E5E;">**</span><span class="dv" style="color: #AD0000;">2</span> <span class="cf" style="color: #003B4F;">for</span> a <span class="kw" style="color: #003B4F;">in</span> a_s]</span>
<span id="cb37-5">_,ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">8</span>,<span class="dv" style="color: #AD0000;">6</span>))</span>
<span id="cb37-6"><span class="cf" style="color: #003B4F;">for</span> a,y <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">zip</span>(a_s,ys): ax.plot(x,y, label<span class="op" style="color: #5E5E5E;">=</span><span class="ss" style="color: #20794D;">f'a=</span><span class="sc" style="color: #5E5E5E;">{</span>a<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span>
<span id="cb37-7">ax.set_ylim([<span class="dv" style="color: #AD0000;">0</span>,<span class="dv" style="color: #AD0000;">5</span>])</span>
<span id="cb37-8">ax.legend()<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Collaborative Filtering/collaborative-filtering-deep-dive_files/figure-html/cell-30-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>So, letting our model learn high parameters might cause it to fit all the data points in the training set with an overcomplex function that has very sharp changes, which will lead to <code>overfitting</code>.</p>
<p>Limiting our weights from growing too much is going to hinder the training of the model, but it will yield a state where it generalizes better. Going back to the theory briefly, weight decay (or just <code>wd</code>) is a parameter that controls that sum of squares we add to our loss (assuming <code>parameters</code> is a tensor of all parameters):</p>
<div class="sourceCode" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">loss_with_wd <span class="op" style="color: #5E5E5E;">=</span> loss <span class="op" style="color: #5E5E5E;">+</span> wd <span class="op" style="color: #5E5E5E;">*</span> (parameters<span class="op" style="color: #5E5E5E;">**</span><span class="dv" style="color: #AD0000;">2</span>).<span class="bu" style="color: null;">sum</span>()</span></code></pre></div>
<p>In practice, though, it would be very inefficient (and maybe numerically unstable) to compute that big sum and add it to the loss. If you remember a little bit of high school math, you might recall that the derivative of <code>p**2</code> with respect to <code>p</code> is <code>2*p</code>, so adding that big sum to our loss is exactly the same as doing:</p>
<div class="sourceCode" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">parameters.grad <span class="op" style="color: #5E5E5E;">+=</span> wd <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">*</span> parameters</span></code></pre></div>
<p>In practice, since <code>wd</code> is a parameter that we choose, we can just make it twice as big, so we don’t even need the <code>*2</code> in this equation. To use weight decay in fastai, just pass <code>wd</code> in your call to <code>fit</code> or <code>fit_one_cycle</code>:</p>
<p>The whole reason for calculating the loss is to then calculate the gradient of the loss, by taking the derivative. The derivative of parameters^2 is 2*parameters.</p>
<section id="weight-decay-value-0.1" class="level4">
<h4 class="anchored" data-anchor-id="weight-decay-value-0.1">Weight decay value 0.1</h4>
<p>A higher weight decay value forces the weights lower, reducing the capacity of our model to make good prediction, but reducing the risk of overfitting.</p>
<div class="cell" data-tags="[]" data-execution_count="39">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1"><span class="co" style="color: #5E5E5E;"># define our Dot Product Bias model</span></span>
<span id="cb40-2">model <span class="op" style="color: #5E5E5E;">=</span> DotProductBias(n_users, n_movies, <span class="dv" style="color: #AD0000;">50</span>)</span>
<span id="cb40-3"></span>
<span id="cb40-4"><span class="co" style="color: #5E5E5E;"># pass in our Dot Product Bias class to our learner as before</span></span>
<span id="cb40-5">learn <span class="op" style="color: #5E5E5E;">=</span> Learner(dls, model, loss_func<span class="op" style="color: #5E5E5E;">=</span>MSELossFlat())</span>
<span id="cb40-6"></span>
<span id="cb40-7"><span class="co" style="color: #5E5E5E;"># fit (train) our model</span></span>
<span id="cb40-8">learn.fit_one_cycle(<span class="dv" style="color: #AD0000;">5</span>, <span class="fl" style="color: #AD0000;">5e-3</span>, wd<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.1</span>) <span class="co" style="color: #5E5E5E;"># 5 epochs, learning rate 5e^-3, try different wd values, start 0.1 then 0.01, 0.001 etc</span></span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th>epoch</th>
      <th>train_loss</th>
      <th>valid_loss</th>
      <th>time</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>0.976209</td>
      <td>0.929432</td>
      <td>00:05</td>
    </tr>
    <tr>
      <td>1</td>
      <td>0.867723</td>
      <td>0.859258</td>
      <td>00:05</td>
    </tr>
    <tr>
      <td>2</td>
      <td>0.751625</td>
      <td>0.823332</td>
      <td>00:04</td>
    </tr>
    <tr>
      <td>3</td>
      <td>0.580325</td>
      <td>0.811122</td>
      <td>00:05</td>
    </tr>
    <tr>
      <td>4</td>
      <td>0.485529</td>
      <td>0.811769</td>
      <td>00:05</td>
    </tr>
  </tbody>
</table>
</div>
</div>
<p>That’s much better! The key to regularization is to find the right balance of the magnitude of the weights of the coefficients - low enough so we don’t overfit, but high enough so that we can make useful predictions. We can’t reduce them too much (then we end up with underfitting) - but if the weights are increased too much then our model will start to overfit. If there are latent factors in our model that don’t have any influence on overall prediciton, it will just set the co-efficient for that latent factor to zero.</p>
</section>
<section id="weight-decay-value-0.01" class="level4">
<h4 class="anchored" data-anchor-id="weight-decay-value-0.01">Weight decay value 0.01</h4>
<p>A lower weight decay value keeps the weights higher, increasing the capacity of our model to make good predictions, but increasing the risk of overfitting.</p>
<div class="cell" data-execution_count="44">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1"><span class="co" style="color: #5E5E5E;"># define our Dot Product Bias model</span></span>
<span id="cb41-2">model <span class="op" style="color: #5E5E5E;">=</span> DotProductBias(n_users, n_movies, <span class="dv" style="color: #AD0000;">50</span>) <span class="co" style="color: #5E5E5E;"># set number of latent factors = 50</span></span>
<span id="cb41-3"></span>
<span id="cb41-4"><span class="co" style="color: #5E5E5E;"># pass in our Dot Product Bias class to our learner as before</span></span>
<span id="cb41-5">learn <span class="op" style="color: #5E5E5E;">=</span> Learner(dls, model, loss_func<span class="op" style="color: #5E5E5E;">=</span>MSELossFlat())</span>
<span id="cb41-6"></span>
<span id="cb41-7"><span class="co" style="color: #5E5E5E;"># fit (train) our model</span></span>
<span id="cb41-8">learn.fit_one_cycle(<span class="dv" style="color: #AD0000;">5</span>, <span class="fl" style="color: #AD0000;">5e-3</span>, wd<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.01</span>) <span class="co" style="color: #5E5E5E;"># 5 epochs, learning rate 5e^-3, try different wd values, start 0.1 then 0.01, 0.001 etc</span></span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th>epoch</th>
      <th>train_loss</th>
      <th>valid_loss</th>
      <th>time</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>0.937280</td>
      <td>0.919222</td>
      <td>00:05</td>
    </tr>
    <tr>
      <td>1</td>
      <td>0.836111</td>
      <td>0.858221</td>
      <td>00:05</td>
    </tr>
    <tr>
      <td>2</td>
      <td>0.594563</td>
      <td>0.858991</td>
      <td>00:05</td>
    </tr>
    <tr>
      <td>3</td>
      <td>0.416554</td>
      <td>0.887284</td>
      <td>00:05</td>
    </tr>
    <tr>
      <td>4</td>
      <td>0.282974</td>
      <td>0.894385</td>
      <td>00:05</td>
    </tr>
  </tbody>
</table>
</div>
</div>
<p>As we can see we start off with an improvement and then from epoch 2 performance gets worse, suggesting <code>overfitting</code>.</p>
</section>
<section id="weight-decay-value-0.001" class="level4">
<h4 class="anchored" data-anchor-id="weight-decay-value-0.001">Weight decay value 0.001</h4>
<div class="cell" data-execution_count="43">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1"><span class="co" style="color: #5E5E5E;"># define our Dot Product Bias model</span></span>
<span id="cb42-2">model <span class="op" style="color: #5E5E5E;">=</span> DotProductBias(n_users, n_movies, <span class="dv" style="color: #AD0000;">50</span>)</span>
<span id="cb42-3"></span>
<span id="cb42-4"><span class="co" style="color: #5E5E5E;"># pass in our Dot Product Bias class to our learner as before</span></span>
<span id="cb42-5">learn <span class="op" style="color: #5E5E5E;">=</span> Learner(dls, model, loss_func<span class="op" style="color: #5E5E5E;">=</span>MSELossFlat())</span>
<span id="cb42-6"></span>
<span id="cb42-7"><span class="co" style="color: #5E5E5E;"># fit (train) our model</span></span>
<span id="cb42-8">learn.fit_one_cycle(<span class="dv" style="color: #AD0000;">5</span>, <span class="fl" style="color: #AD0000;">5e-3</span>, wd<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.001</span>) <span class="co" style="color: #5E5E5E;"># 5 epochs, learning rate 5e^-3, try different wd values, start 0.1 then 0.01, 0.001 etc</span></span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th>epoch</th>
      <th>train_loss</th>
      <th>valid_loss</th>
      <th>time</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>0.922303</td>
      <td>0.922695</td>
      <td>00:05</td>
    </tr>
    <tr>
      <td>1</td>
      <td>0.856747</td>
      <td>0.854244</td>
      <td>00:05</td>
    </tr>
    <tr>
      <td>2</td>
      <td>0.600128</td>
      <td>0.864396</td>
      <td>00:05</td>
    </tr>
    <tr>
      <td>3</td>
      <td>0.404001</td>
      <td>0.894145</td>
      <td>00:05</td>
    </tr>
    <tr>
      <td>4</td>
      <td>0.283558</td>
      <td>0.902557</td>
      <td>00:04</td>
    </tr>
  </tbody>
</table>
</div>
</div>
<p>Again, we start off with an improvement but then from epoch 2 performance gets worse, suggesting <code>overfitting</code> So, our original weight decay factor of 0.1 looks pretty optimal.</p>
</section>
</section>
<section id="creating-our-own-embedding-module" class="level3">
<h3 class="anchored" data-anchor-id="creating-our-own-embedding-module">Creating Our Own Embedding Module</h3>
<p>If the following section proves to be difficult to follow then it would be a useful exercise to revisit the <a href="https://www.kaggle.com/code/jhoward/linear-model-and-neural-net-from-scratch">Linear model and neural net from scratch</a> NoteBook.</p>
<p>In that Notebook we created functions to set initital weights, added layers, including bias, and created a further function to update the gradients i.e.&nbsp;perform gradient descent by calculating the layer gradients usind <code>layer.grad * learning_rate</code>. When using PyTorch a lot of this functionality is taken care of - PyTorch looks inside our Module and keeps track of anything that looks like a neural network parameter.</p>
<p>So far, we’ve used <code>Embedding</code> without thinking about how it really works. Let’s re-create <code>DotProductBias</code> <em>without</em> using this class. We’ll need a randomly initialized weight matrix for each of the embeddings. We have to be careful, however. Recall that optimizers require that they can get all the parameters of a module from the module’s <code>parameters</code> method. However, this does not happen fully automatically. If we just add a tensor as an attribute to a <code>Module</code>, it will not be included in <code>parameters</code>:</p>
<div class="cell" data-tags="[]" data-execution_count="9">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1"><span class="co" style="color: #5E5E5E;"># create a simple module which only includes a tensor</span></span>
<span id="cb43-2"><span class="kw" style="color: #003B4F;">class</span> T(Module):</span>
<span id="cb43-3">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>): <span class="va" style="color: #111111;">self</span>.a <span class="op" style="color: #5E5E5E;">=</span> torch.ones(<span class="dv" style="color: #AD0000;">3</span>) <span class="co" style="color: #5E5E5E;"># add a tensor as an attribute to our Module</span></span>
<span id="cb43-4"></span>
<span id="cb43-5">L(T().parameters()) <span class="co" style="color: #5E5E5E;"># T() instantiates our Module, capital L in Fastcore returns a list of items</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>(#0) []</code></pre>
</div>
</div>
<p>Note that the tensor is <code>not</code> included in parameters. To tell <code>Module</code> that we want to treat a tensor as a parameter, we have to wrap it in the <code>nn.Parameter</code> class. This class doesn’t actually add any functionality (other than automatically calling <code>requires_grad_</code> for us). It’s only used as a “marker” to show what to include in <code>parameters</code>:</p>
<div class="cell" data-tags="[]" data-execution_count="6">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1"><span class="co" style="color: #5E5E5E;"># create a simple module which only includes a tensor</span></span>
<span id="cb45-2"><span class="kw" style="color: #003B4F;">class</span> T(Module):</span>
<span id="cb45-3">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>): <span class="va" style="color: #111111;">self</span>.a <span class="op" style="color: #5E5E5E;">=</span> nn.Parameter(torch.ones(<span class="dv" style="color: #AD0000;">3</span>)) <span class="co" style="color: #5E5E5E;"># for PyTorch to recognise the parameters, we need to include the nn.Parameter wrapper</span></span>
<span id="cb45-4"></span>
<span id="cb45-5">L(T().parameters()) <span class="co" style="color: #5E5E5E;"># T() instantiates our Module, capital L in Fastcore returns a list of the parameters</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>(#1) [Parameter containing:
tensor([1., 1., 1.], requires_grad=True)]</code></pre>
</div>
</div>
<p>Now that we have included the tensor in an <code>nn.Parameter</code> wrapper, PyTorch can read the parameters and we can return these using Fastcore’s <code>L</code>.</p>
<p>All PyTorch modules use <code>nn.Parameter</code> for any trainable parameters, which is why we haven’t needed to explicitly use this wrapper up until now:</p>
<div class="cell" data-tags="[]" data-execution_count="7">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1"><span class="co" style="color: #5E5E5E;"># create a simple module which only includes a tensor</span></span>
<span id="cb47-2"><span class="kw" style="color: #003B4F;">class</span> T(Module):</span>
<span id="cb47-3">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>): <span class="va" style="color: #111111;">self</span>.a <span class="op" style="color: #5E5E5E;">=</span> nn.Linear(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">3</span>, bias<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>) <span class="co" style="color: #5E5E5E;"># we can create our tensor as before but use nn.Linear which flags that parameters are included </span></span>
<span id="cb47-4">                                                             <span class="co" style="color: #5E5E5E;"># no bias term, nn.Linear returns randomly initialized tensor values, size as defined, 1 x 3 </span></span>
<span id="cb47-5"></span>
<span id="cb47-6">t <span class="op" style="color: #5E5E5E;">=</span> T()</span>
<span id="cb47-7">L(t.parameters())  <span class="co" style="color: #5E5E5E;"># T() instantiates our Module, capital L in Fastcore returns a list of the parameters</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>(#1) [Parameter containing:
tensor([[ 0.7645],
        [ 0.8300],
        [-0.2343]], requires_grad=True)]</code></pre>
</div>
</div>
<p>Now that we have included the tensor in an <code>nn.Linear</code> wrapper, PyTorch can read the parameters and we can return these using Fastcore’s <code>L</code>.</p>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1"><span class="co" style="color: #5E5E5E;"># find out what the attribute a is</span></span>
<span id="cb49-2">t.a</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>Linear(in_features=1, out_features=3, bias=False)</code></pre>
</div>
</div>
<div class="cell" data-tags="[]" data-execution_count="17">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1"><span class="co" style="color: #5E5E5E;"># find out what type the attribute a is </span></span>
<span id="cb51-2"><span class="bu" style="color: null;">type</span>(t.a)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="17">
<pre><code>torch.nn.modules.linear.Linear</code></pre>
</div>
</div>
<div class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1"><span class="co" style="color: #5E5E5E;"># find out what type the attribute a is </span></span>
<span id="cb53-2">t.a.weight</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">
<pre><code>Parameter containing:
tensor([[ 0.7645],
        [ 0.8300],
        [-0.2343]], requires_grad=True)</code></pre>
</div>
</div>
<p>We can create a tensor as a parameter, with random initialization, like so:</p>
<div class="cell" data-tags="[]" data-execution_count="36">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb55-1"><span class="co" style="color: #5E5E5E;"># create params function - poss in size (in case below n_users x n_factors)</span></span>
<span id="cb55-2"><span class="kw" style="color: #003B4F;">def</span> create_params(size):</span>
<span id="cb55-3">    <span class="cf" style="color: #003B4F;">return</span> nn.Parameter(torch.zeros(<span class="op" style="color: #5E5E5E;">*</span>size).normal_(<span class="dv" style="color: #AD0000;">0</span>, <span class="fl" style="color: #AD0000;">0.01</span>)) <span class="co" style="color: #5E5E5E;"># creates a tensor of zeros of requested size, then Gaussian distribution with mean=0 and Std Dev = 0.01</span></span>
<span id="cb55-4"><span class="co" style="color: #5E5E5E;"># normal_ modifies eplaces inline with the values specified in brackets </span></span></code></pre></div>
</div>
<p>Let’s use this to create <code>DotProductBias</code> again, but without <code>Embedding</code> i.e let’s create PyTorch’s Embedding Matrix from scratch:</p>
<div class="cell" data-tags="[]" data-execution_count="37">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb56-1"><span class="co" style="color: #5E5E5E;"># create PyTorch's embedding matrix from scratch</span></span>
<span id="cb56-2"><span class="kw" style="color: #003B4F;">class</span> DotProductBias(Module):</span>
<span id="cb56-3">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, n_users, n_movies, n_factors, y_range<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">0</span>,<span class="fl" style="color: #AD0000;">5.5</span>)):</span>
<span id="cb56-4">        <span class="va" style="color: #111111;">self</span>.user_factors <span class="op" style="color: #5E5E5E;">=</span> create_params([n_users, n_factors]) <span class="co" style="color: #5E5E5E;"># create our user Embedding matrix of normally randomized values of size n_users x n_factors</span></span>
<span id="cb56-5">        <span class="va" style="color: #111111;">self</span>.user_bias <span class="op" style="color: #5E5E5E;">=</span> create_params([n_users]) <span class="co" style="color: #5E5E5E;"># build user bias into our model - vector of size n_users</span></span>
<span id="cb56-6">        <span class="va" style="color: #111111;">self</span>.movie_factors <span class="op" style="color: #5E5E5E;">=</span> create_params([n_movies, n_factors]) <span class="co" style="color: #5E5E5E;"># create our movie Embedding matrix of normally randomized values of size n_users x n_factors</span></span>
<span id="cb56-7">        <span class="va" style="color: #111111;">self</span>.movie_bias <span class="op" style="color: #5E5E5E;">=</span> create_params([n_movies]) <span class="co" style="color: #5E5E5E;"># build movie bias into our model - vector of size n_movies</span></span>
<span id="cb56-8">        <span class="va" style="color: #111111;">self</span>.y_range <span class="op" style="color: #5E5E5E;">=</span> y_range <span class="co" style="color: #5E5E5E;"># range of predictions as set above, between 0 and 5.5</span></span>
<span id="cb56-9">        </span>
<span id="cb56-10">    <span class="kw" style="color: #003B4F;">def</span> forward(<span class="va" style="color: #111111;">self</span>, x):</span>
<span id="cb56-11">        users <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.user_factors[x[:,<span class="dv" style="color: #AD0000;">0</span>]] <span class="co" style="color: #5E5E5E;"># user latent factors - note we can index into it</span></span>
<span id="cb56-12">        movies <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.movie_factors[x[:,<span class="dv" style="color: #AD0000;">1</span>]] <span class="co" style="color: #5E5E5E;"># movie latent factors - note we can index into it</span></span>
<span id="cb56-13">        res <span class="op" style="color: #5E5E5E;">=</span> (users<span class="op" style="color: #5E5E5E;">*</span>movies).<span class="bu" style="color: null;">sum</span>(dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>) <span class="co" style="color: #5E5E5E;"># matrix multiplication</span></span>
<span id="cb56-14">        res <span class="op" style="color: #5E5E5E;">+=</span> <span class="va" style="color: #111111;">self</span>.user_bias[x[:,<span class="dv" style="color: #AD0000;">0</span>]] <span class="op" style="color: #5E5E5E;">+</span> <span class="va" style="color: #111111;">self</span>.movie_bias[x[:,<span class="dv" style="color: #AD0000;">1</span>]] <span class="co" style="color: #5E5E5E;"># add bias - note we ca </span></span>
<span id="cb56-15">        <span class="cf" style="color: #003B4F;">return</span> sigmoid_range(res, <span class="op" style="color: #5E5E5E;">*</span><span class="va" style="color: #111111;">self</span>.y_range) <span class="co" style="color: #5E5E5E;"># force predictions to be between 0 and 5 using sigmoid function</span></span></code></pre></div>
</div>
<p>Then let’s train it again to check we get around the same results we saw in the previous section:</p>
<div class="cell" data-tags="[]" data-execution_count="38">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb57-1"><span class="co" style="color: #5E5E5E;"># define our Dot Product Bias model</span></span>
<span id="cb57-2">model <span class="op" style="color: #5E5E5E;">=</span> DotProductBias(n_users, n_movies, <span class="dv" style="color: #AD0000;">50</span>) <span class="co" style="color: #5E5E5E;"># latent factors set to 50</span></span>
<span id="cb57-3"></span>
<span id="cb57-4"><span class="co" style="color: #5E5E5E;"># # pass in our Dot Product Bias class to our learner as before</span></span>
<span id="cb57-5">learn <span class="op" style="color: #5E5E5E;">=</span> Learner(dls, model, loss_func<span class="op" style="color: #5E5E5E;">=</span>MSELossFlat())</span>
<span id="cb57-6"></span>
<span id="cb57-7"><span class="co" style="color: #5E5E5E;"># train for 5 epochs, lr = 5e^-3, weight decay factor = 0.1</span></span>
<span id="cb57-8">learn.fit_one_cycle(<span class="dv" style="color: #AD0000;">5</span>, <span class="fl" style="color: #AD0000;">5e-3</span>, wd<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.1</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th>epoch</th>
      <th>train_loss</th>
      <th>valid_loss</th>
      <th>time</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>0.960358</td>
      <td>0.956795</td>
      <td>00:04</td>
    </tr>
    <tr>
      <td>1</td>
      <td>0.869042</td>
      <td>0.874685</td>
      <td>00:05</td>
    </tr>
    <tr>
      <td>2</td>
      <td>0.737840</td>
      <td>0.839419</td>
      <td>00:05</td>
    </tr>
    <tr>
      <td>3</td>
      <td>0.589841</td>
      <td>0.823726</td>
      <td>00:05</td>
    </tr>
    <tr>
      <td>4</td>
      <td>0.472334</td>
      <td>0.824282</td>
      <td>00:05</td>
    </tr>
  </tbody>
</table>
</div>
</div>
<p>Now, let’s take a look at what our model has learned.</p>
<div class="cell" data-execution_count="60">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb58-1"><span class="co" style="color: #5E5E5E;"># what's inside movie bias?</span></span>
<span id="cb58-2"><span class="bu" style="color: null;">print</span>(model.movie_bias,<span class="bu" style="color: null;">len</span>(model.movie_bias))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Parameter containing:
tensor([-0.0010, -0.1098, -0.0022,  ..., -0.0443,  0.0685,  0.0255],
       requires_grad=True) 1665</code></pre>
</div>
</div>
<p>Movie bias parameters that have been trained - 1,665 being the number of movies we have.</p>
<div class="cell" data-execution_count="61">
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb60-1"><span class="co" style="color: #5E5E5E;"># what is the shape of our movie bias vector?</span></span>
<span id="cb60-2">model.movie_bias.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="61">
<pre><code>torch.Size([1665])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="49">
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb62-1"><span class="co" style="color: #5E5E5E;"># what's inside movie factors?</span></span>
<span id="cb62-2"><span class="bu" style="color: null;">print</span>(model.movie_factors,<span class="bu" style="color: null;">len</span>(model.movie_factors))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Parameter containing:
tensor([[-0.0039, -0.0022,  0.0021,  ...,  0.0041, -0.0011,  0.0016],
        [-0.1175, -0.1778, -0.0984,  ...,  0.0191,  0.0929,  0.0216],
        [ 0.0109,  0.0653,  0.0031,  ..., -0.0156,  0.0204,  0.0313],
        ...,
        [-0.1234, -0.0363, -0.0474,  ..., -0.0825, -0.0893, -0.1314],
        [ 0.0995,  0.1521,  0.0754,  ...,  0.0901,  0.1230,  0.1518],
        [ 0.0164, -0.0041,  0.0183,  ..., -0.0054,  0.0122, -0.0150]],
       requires_grad=True) 1665</code></pre>
</div>
</div>
<div class="cell" data-execution_count="55">
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb64-1"><span class="co" style="color: #5E5E5E;"># what is the shape of our movie factors Embedding matrix?</span></span>
<span id="cb64-2">model.movie_factors.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="55">
<pre><code>torch.Size([1665, 50])</code></pre>
</div>
</div>
<p>1,665 movies, and 50 latent factors.</p>
<div class="cell" data-execution_count="50">
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb66-1"><span class="co" style="color: #5E5E5E;"># what's inside user factors?</span></span>
<span id="cb66-2"><span class="bu" style="color: null;">print</span>(model.user_factors,<span class="bu" style="color: null;">len</span>(model.user_factors))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Parameter containing:
tensor([[ 1.2866e-03,  7.8120e-04, -7.0611e-04,  ...,  8.2220e-06,
         -3.2568e-03,  2.7836e-03],
        [ 1.6745e-01,  9.3676e-02, -5.2638e-03,  ..., -2.9528e-02,
         -1.1926e-01,  3.1058e-01],
        [ 4.6036e-02, -4.4877e-03,  1.5233e-01,  ...,  9.4287e-02,
          1.1350e-01,  1.4557e-01],
        ...,
        [ 6.7316e-02,  1.0262e-01,  2.9921e-01,  ...,  1.2235e-01,
          4.4754e-02,  2.5394e-01],
        [-8.0669e-03,  1.0943e-01,  2.0522e-01,  ...,  1.6869e-02,
          1.7104e-01,  1.5911e-01],
        [ 7.9618e-02,  2.9292e-01,  2.3172e-01,  ...,  1.1354e-01,
          1.2088e-01,  9.0374e-02]], requires_grad=True) 944</code></pre>
</div>
</div>
<p>A bunch of user parameters (weights) that have been trained - 944 being the number of users we have.</p>
<div class="cell" data-execution_count="59">
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb68-1"><span class="co" style="color: #5E5E5E;"># what is the shape of our user factors Embedding matrix?</span></span>
<span id="cb68-2">model.user_factors.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="59">
<pre><code>torch.Size([944, 50])</code></pre>
</div>
</div>
<p>944 users, and 50 latent factors.</p>
</section>
<section id="interpreting-embeddings-and-biases" class="level3">
<h3 class="anchored" data-anchor-id="interpreting-embeddings-and-biases">Interpreting Embeddings and Biases</h3>
<p>Our model is already useful, in that it can provide us with movie recommendations for our users — but it is also interesting to see what parameters it has discovered. The easiest to interpret are the biases. Here are the movies with the lowest values in the bias vector:</p>
<div class="cell" data-tags="[]" data-execution_count="58">
<div class="sourceCode cell-code" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb70-1"><span class="co" style="color: #5E5E5E;"># get movie_bias values</span></span>
<span id="cb70-2">movie_bias <span class="op" style="color: #5E5E5E;">=</span> learn.model.movie_bias.squeeze() <span class="co" style="color: #5E5E5E;"># </span></span>
<span id="cb70-3"></span>
<span id="cb70-4"><span class="co" style="color: #5E5E5E;"># find out which movie id's have the lowest bias parameters</span></span>
<span id="cb70-5">idxs <span class="op" style="color: #5E5E5E;">=</span> movie_bias.argsort()[:<span class="dv" style="color: #AD0000;">5</span>] <span class="co" style="color: #5E5E5E;"># argsort sorts in ascending order by default - let's grab first 5 </span></span>
<span id="cb70-6"></span>
<span id="cb70-7"><span class="co" style="color: #5E5E5E;"># look inside our DataLoaders to grab the names of those movies from the indexes</span></span>
<span id="cb70-8">[dls.classes[<span class="st" style="color: #20794D;">'title'</span>][i] <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> idxs]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="58">
<pre><code>['Children of the Corn: The Gathering (1996)',
 'Robocop 3 (1993)',
 'Lawnmower Man 2: Beyond Cyberspace (1996)',
 'Amityville 3-D (1983)',
 'Mortal Kombat: Annihilation (1997)']</code></pre>
</div>
</div>
<p>Think about what this means. What it’s saying is that for each of these movies, even when a user is very well matched to its latent factors (which, as we will see in a moment, tend to represent things like level of action, age of movie, and so forth), they still generally don’t like it. We could have simply sorted the movies directly by their average rating, but looking at the learned bias tells us something much more interesting. It tells us not just whether a movie is of a kind that people tend not to enjoy watching, but that people tend not to like watching it even if it is of a kind that they would otherwise enjoy! By the same token, here are the movies with the highest bias:</p>
<div class="cell" data-tags="[]" data-execution_count="64">
<div class="sourceCode cell-code" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb72-1"><span class="co" style="color: #5E5E5E;"># sort indexes by descending will give us movies with highest bias values</span></span>
<span id="cb72-2"><span class="co" style="color: #5E5E5E;"># i.e movies that are popular even amongst users who don't normally like that kind of movie</span></span>
<span id="cb72-3">idxs <span class="op" style="color: #5E5E5E;">=</span> movie_bias.argsort(descending<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)[:<span class="dv" style="color: #AD0000;">5</span>]</span>
<span id="cb72-4">[dls.classes[<span class="st" style="color: #20794D;">'title'</span>][i] <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> idxs]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="64">
<pre><code>['Titanic (1997)',
 'L.A. Confidential (1997)',
 'Silence of the Lambs, The (1991)',
 'Shawshank Redemption, The (1994)',
 'Star Wars (1977)']</code></pre>
</div>
</div>
<p>So, for instance, even if you don’t normally enjoy detective movies, you might enjoy <em>LA Confidential</em>!</p>
<p>It is not quite so easy to directly interpret the embedding matrices. There are just too many factors for a human to look at. But there is a technique that can pull out the most important underlying <em>directions</em> in such a matrix, called <code>principal component analysis (PCA)</code>. If you are interested then we suggest you check out the fast.ai course <a href="https://github.com/fastai/numerical-linear-algebra">Computational Linear Algebra for Coders</a>. Here’s what our movies look like based on two of the strongest PCA components:</p>
<div class="cell" data-execution_count="67">
<div class="sourceCode cell-code" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb74-1">g <span class="op" style="color: #5E5E5E;">=</span> ratings.groupby(<span class="st" style="color: #20794D;">'title'</span>)[<span class="st" style="color: #20794D;">'rating'</span>].count()</span>
<span id="cb74-2">g</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="67">
<pre><code>title
'Til There Was You (1997)                  9
1-900 (1994)                               5
101 Dalmatians (1996)                    109
12 Angry Men (1957)                      125
187 (1997)                                41
                                        ... 
Young Guns II (1990)                      44
Young Poisoner's Handbook, The (1995)     41
Zeus and Roxanne (1997)                    6
unknown                                    9
Á köldum klaka (Cold Fever) (1994)         1
Name: rating, Length: 1664, dtype: int64</code></pre>
</div>
</div>
<div class="cell" data-hide_input="true" data-tags="[]" data-execution_count="68">
<div class="sourceCode cell-code" id="cb76" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb76-1"><span class="co" style="color: #5E5E5E;"># group movies by title and rating </span></span>
<span id="cb76-2">g <span class="op" style="color: #5E5E5E;">=</span> ratings.groupby(<span class="st" style="color: #20794D;">'title'</span>)[<span class="st" style="color: #20794D;">'rating'</span>].count()</span>
<span id="cb76-3"></span>
<span id="cb76-4"><span class="co" style="color: #5E5E5E;"># sort top movies by rating - top 1000</span></span>
<span id="cb76-5">top_movies <span class="op" style="color: #5E5E5E;">=</span> g.sort_values(ascending<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>).index.values[:<span class="dv" style="color: #AD0000;">1000</span>]</span>
<span id="cb76-6"></span>
<span id="cb76-7"><span class="co" style="color: #5E5E5E;"># get the indexes of the sorted top movies using: object to index (o2i)</span></span>
<span id="cb76-8">top_idxs <span class="op" style="color: #5E5E5E;">=</span> tensor([learn.dls.classes[<span class="st" style="color: #20794D;">'title'</span>].o2i[m] <span class="cf" style="color: #003B4F;">for</span> m <span class="kw" style="color: #003B4F;">in</span> top_movies])</span>
<span id="cb76-9"></span>
<span id="cb76-10"><span class="co" style="color: #5E5E5E;"># </span></span>
<span id="cb76-11">movie_w <span class="op" style="color: #5E5E5E;">=</span> learn.model.movie_factors[top_idxs].cpu().detach()</span>
<span id="cb76-12"></span>
<span id="cb76-13"><span class="co" style="color: #5E5E5E;"># Compress our 50 latent factors into just 3 most important factors</span></span>
<span id="cb76-14">movie_pca <span class="op" style="color: #5E5E5E;">=</span> movie_w.pca(<span class="dv" style="color: #AD0000;">3</span>)</span>
<span id="cb76-15"></span>
<span id="cb76-16"><span class="co" style="color: #5E5E5E;"># draw a chart of these features - Visualized Embeddings</span></span>
<span id="cb76-17">fac0,fac1,fac2 <span class="op" style="color: #5E5E5E;">=</span> movie_pca.t() <span class="co" style="color: #5E5E5E;"># .t transposes the array</span></span>
<span id="cb76-18">idxs <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">list</span>(<span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">50</span>)) <span class="co" style="color: #5E5E5E;"># restrict number of movies plotted to 50</span></span>
<span id="cb76-19"></span>
<span id="cb76-20">X <span class="op" style="color: #5E5E5E;">=</span> fac0[idxs]</span>
<span id="cb76-21">Y <span class="op" style="color: #5E5E5E;">=</span> fac2[idxs]</span>
<span id="cb76-22">plt.figure(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">12</span>,<span class="dv" style="color: #AD0000;">12</span>))</span>
<span id="cb76-23">plt.scatter(X, Y)</span>
<span id="cb76-24"><span class="cf" style="color: #003B4F;">for</span> i, x, y <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">zip</span>(top_movies[idxs], X, Y):</span>
<span id="cb76-25">    plt.text(x,y,i, color<span class="op" style="color: #5E5E5E;">=</span>np.random.rand(<span class="dv" style="color: #AD0000;">3</span>)<span class="op" style="color: #5E5E5E;">*</span><span class="fl" style="color: #AD0000;">0.7</span>, fontsize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">11</span>)</span>
<span id="cb76-26">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Collaborative Filtering/collaborative-filtering-deep-dive_files/figure-html/cell-52-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>We can see here that the model seems to have discovered a concept of <em>classic</em> versus <em>pop culture</em> movies, or perhaps it is <em>critically acclaimed</em> that is represented here.</p>
<blockquote class="blockquote">
<p>j: No matter how many models I train, I never stop getting moved and surprised by how these randomly initialized bunches of numbers, trained with such simple mechanics, manage to discover things about my data all by themselves. It almost seems like cheating, that I can create code that does useful things without ever actually telling it how to do those things!</p>
</blockquote>
<p>We defined our model from scratch to teach you what is inside, but you can directly use the fastai library to build it. We’ll look at how to do that next.</p>
</section>
<section id="using-fastai.collab" class="level3">
<h3 class="anchored" data-anchor-id="using-fastai.collab">Using fastai.collab</h3>
<p>We can create and train a <code>collaborative filtering model</code> using the exact structure shown earlier by using fastai’s <code>collab_learner</code>. Let’s have a peek under the hood and see what is going on inside:</p>
<div class="cell" data-execution_count="79">
<div class="sourceCode cell-code" id="cb77" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb77-1"><span class="co" style="color: #5E5E5E;"># let's take a look at what's going on under the hood</span></span>
<span id="cb77-2">collab_learner??</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="ansi-escaped-output">
<pre><span class="ansi-red-fg">Signature:</span>
collab_learner<span class="ansi-blue-fg">(</span>
    dls<span class="ansi-blue-fg">,</span>
    n_factors<span class="ansi-blue-fg">=</span><span class="ansi-cyan-fg">50</span><span class="ansi-blue-fg">,</span>
    use_nn<span class="ansi-blue-fg">=</span><span class="ansi-green-fg">False</span><span class="ansi-blue-fg">,</span>
    emb_szs<span class="ansi-blue-fg">=</span><span class="ansi-green-fg">None</span><span class="ansi-blue-fg">,</span>
    layers<span class="ansi-blue-fg">=</span><span class="ansi-green-fg">None</span><span class="ansi-blue-fg">,</span>
    config<span class="ansi-blue-fg">=</span><span class="ansi-green-fg">None</span><span class="ansi-blue-fg">,</span>
    y_range<span class="ansi-blue-fg">=</span><span class="ansi-green-fg">None</span><span class="ansi-blue-fg">,</span>
    loss_func<span class="ansi-blue-fg">=</span><span class="ansi-green-fg">None</span><span class="ansi-blue-fg">,</span>
    <span class="ansi-blue-fg">*</span><span class="ansi-blue-fg">,</span>
    opt_func<span class="ansi-blue-fg">=</span><span class="ansi-blue-fg">&lt;</span>function Adam at <span class="ansi-cyan-fg">0x7f6f614f4700</span><span class="ansi-blue-fg">&gt;</span><span class="ansi-blue-fg">,</span>
    lr<span class="ansi-blue-fg">=</span><span class="ansi-cyan-fg">0.001</span><span class="ansi-blue-fg">,</span>
    splitter<span class="ansi-blue-fg">:</span> <span class="ansi-blue-fg">'callable'</span> <span class="ansi-blue-fg">=</span> <span class="ansi-blue-fg">&lt;</span>function trainable_params at <span class="ansi-cyan-fg">0x7f6f63949870</span><span class="ansi-blue-fg">&gt;</span><span class="ansi-blue-fg">,</span>
    cbs<span class="ansi-blue-fg">=</span><span class="ansi-green-fg">None</span><span class="ansi-blue-fg">,</span>
    metrics<span class="ansi-blue-fg">=</span><span class="ansi-green-fg">None</span><span class="ansi-blue-fg">,</span>
    path<span class="ansi-blue-fg">=</span><span class="ansi-green-fg">None</span><span class="ansi-blue-fg">,</span>
    model_dir<span class="ansi-blue-fg">=</span><span class="ansi-blue-fg">'models'</span><span class="ansi-blue-fg">,</span>
    wd<span class="ansi-blue-fg">=</span><span class="ansi-green-fg">None</span><span class="ansi-blue-fg">,</span>
    wd_bn_bias<span class="ansi-blue-fg">=</span><span class="ansi-green-fg">False</span><span class="ansi-blue-fg">,</span>
    train_bn<span class="ansi-blue-fg">=</span><span class="ansi-green-fg">True</span><span class="ansi-blue-fg">,</span>
    moms<span class="ansi-blue-fg">=</span><span class="ansi-blue-fg">(</span><span class="ansi-cyan-fg">0.95</span><span class="ansi-blue-fg">,</span> <span class="ansi-cyan-fg">0.85</span><span class="ansi-blue-fg">,</span> <span class="ansi-cyan-fg">0.95</span><span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">,</span>
    default_cbs<span class="ansi-blue-fg">:</span> <span class="ansi-blue-fg">'bool'</span> <span class="ansi-blue-fg">=</span> <span class="ansi-green-fg">True</span><span class="ansi-blue-fg">,</span>
<span class="ansi-blue-fg">)</span>
<span class="ansi-red-fg">Source:</span>   
<span class="ansi-blue-fg">@</span>delegates<span class="ansi-blue-fg">(</span>Learner<span class="ansi-blue-fg">.</span>__init__<span class="ansi-blue-fg">)</span>
<span class="ansi-green-fg">def</span> collab_learner<span class="ansi-blue-fg">(</span>dls<span class="ansi-blue-fg">,</span> n_factors<span class="ansi-blue-fg">=</span><span class="ansi-cyan-fg">50</span><span class="ansi-blue-fg">,</span> use_nn<span class="ansi-blue-fg">=</span><span class="ansi-green-fg">False</span><span class="ansi-blue-fg">,</span> emb_szs<span class="ansi-blue-fg">=</span><span class="ansi-green-fg">None</span><span class="ansi-blue-fg">,</span> layers<span class="ansi-blue-fg">=</span><span class="ansi-green-fg">None</span><span class="ansi-blue-fg">,</span> config<span class="ansi-blue-fg">=</span><span class="ansi-green-fg">None</span><span class="ansi-blue-fg">,</span> y_range<span class="ansi-blue-fg">=</span><span class="ansi-green-fg">None</span><span class="ansi-blue-fg">,</span> loss_func<span class="ansi-blue-fg">=</span><span class="ansi-green-fg">None</span><span class="ansi-blue-fg">,</span> <span class="ansi-blue-fg">**</span>kwargs<span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">:</span>
    <span class="ansi-blue-fg">"Create a Learner for collaborative filtering on `dls`."</span>
    emb_szs <span class="ansi-blue-fg">=</span> get_emb_sz<span class="ansi-blue-fg">(</span>dls<span class="ansi-blue-fg">,</span> ifnone<span class="ansi-blue-fg">(</span>emb_szs<span class="ansi-blue-fg">,</span> <span class="ansi-blue-fg">{</span><span class="ansi-blue-fg">}</span><span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">)</span>
    <span class="ansi-green-fg">if</span> loss_func <span class="ansi-green-fg">is</span> <span class="ansi-green-fg">None</span><span class="ansi-blue-fg">:</span> loss_func <span class="ansi-blue-fg">=</span> MSELossFlat<span class="ansi-blue-fg">(</span><span class="ansi-blue-fg">)</span>
    <span class="ansi-green-fg">if</span> config <span class="ansi-green-fg">is</span> <span class="ansi-green-fg">None</span><span class="ansi-blue-fg">:</span> config <span class="ansi-blue-fg">=</span> tabular_config<span class="ansi-blue-fg">(</span><span class="ansi-blue-fg">)</span>
    <span class="ansi-green-fg">if</span> y_range <span class="ansi-green-fg">is</span> <span class="ansi-green-fg">not</span> <span class="ansi-green-fg">None</span><span class="ansi-blue-fg">:</span> config<span class="ansi-blue-fg">[</span><span class="ansi-blue-fg">'y_range'</span><span class="ansi-blue-fg">]</span> <span class="ansi-blue-fg">=</span> y_range
    <span class="ansi-green-fg">if</span> layers <span class="ansi-green-fg">is</span> <span class="ansi-green-fg">None</span><span class="ansi-blue-fg">:</span> layers <span class="ansi-blue-fg">=</span> <span class="ansi-blue-fg">[</span>n_factors<span class="ansi-blue-fg">]</span>
    <span class="ansi-green-fg">if</span> use_nn<span class="ansi-blue-fg">:</span> model <span class="ansi-blue-fg">=</span> EmbeddingNN<span class="ansi-blue-fg">(</span>emb_szs<span class="ansi-blue-fg">=</span>emb_szs<span class="ansi-blue-fg">,</span> layers<span class="ansi-blue-fg">=</span>layers<span class="ansi-blue-fg">,</span> <span class="ansi-blue-fg">**</span>config<span class="ansi-blue-fg">)</span>
    <span class="ansi-green-fg">else</span><span class="ansi-blue-fg">:</span>      model <span class="ansi-blue-fg">=</span> EmbeddingDotBias<span class="ansi-blue-fg">.</span>from_classes<span class="ansi-blue-fg">(</span>n_factors<span class="ansi-blue-fg">,</span> dls<span class="ansi-blue-fg">.</span>classes<span class="ansi-blue-fg">,</span> y_range<span class="ansi-blue-fg">=</span>y_range<span class="ansi-blue-fg">)</span>
    <span class="ansi-green-fg">return</span> Learner<span class="ansi-blue-fg">(</span>dls<span class="ansi-blue-fg">,</span> model<span class="ansi-blue-fg">,</span> loss_func<span class="ansi-blue-fg">=</span>loss_func<span class="ansi-blue-fg">,</span> <span class="ansi-blue-fg">**</span>kwargs<span class="ansi-blue-fg">)</span>
<span class="ansi-red-fg">File:</span>      ~/mambaforge/lib/python3.10/site-packages/fastai/collab.py
<span class="ansi-red-fg">Type:</span>      function
</pre>
</div>
</div>
</div>
<div class="cell" data-execution_count="81">
<div class="sourceCode cell-code" id="cb78" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb78-1"><span class="co" style="color: #5E5E5E;"># let's take a look at what's going on under the hood</span></span>
<span id="cb78-2">EmbeddingDotBias??</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="ansi-escaped-output">
<pre><span class="ansi-red-fg">Init signature:</span> EmbeddingDotBias<span class="ansi-blue-fg">(</span>n_factors<span class="ansi-blue-fg">,</span> n_users<span class="ansi-blue-fg">,</span> n_items<span class="ansi-blue-fg">,</span> y_range<span class="ansi-blue-fg">=</span><span class="ansi-green-fg">None</span><span class="ansi-blue-fg">)</span>
<span class="ansi-red-fg">Source:</span>        
<span class="ansi-green-fg">class</span> EmbeddingDotBias<span class="ansi-blue-fg">(</span>Module<span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">:</span>
    <span class="ansi-blue-fg">"Base dot model for collaborative filtering."</span>
    <span class="ansi-green-fg">def</span> __init__<span class="ansi-blue-fg">(</span>self<span class="ansi-blue-fg">,</span> n_factors<span class="ansi-blue-fg">,</span> n_users<span class="ansi-blue-fg">,</span> n_items<span class="ansi-blue-fg">,</span> y_range<span class="ansi-blue-fg">=</span><span class="ansi-green-fg">None</span><span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">:</span>
        self<span class="ansi-blue-fg">.</span>y_range <span class="ansi-blue-fg">=</span> y_range
        <span class="ansi-blue-fg">(</span>self<span class="ansi-blue-fg">.</span>u_weight<span class="ansi-blue-fg">,</span> self<span class="ansi-blue-fg">.</span>i_weight<span class="ansi-blue-fg">,</span> self<span class="ansi-blue-fg">.</span>u_bias<span class="ansi-blue-fg">,</span> self<span class="ansi-blue-fg">.</span>i_bias<span class="ansi-blue-fg">)</span> <span class="ansi-blue-fg">=</span> <span class="ansi-blue-fg">[</span>Embedding<span class="ansi-blue-fg">(</span><span class="ansi-blue-fg">*</span>o<span class="ansi-blue-fg">)</span> <span class="ansi-green-fg">for</span> o <span class="ansi-green-fg">in</span> <span class="ansi-blue-fg">[</span>
            <span class="ansi-blue-fg">(</span>n_users<span class="ansi-blue-fg">,</span> n_factors<span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">,</span> <span class="ansi-blue-fg">(</span>n_items<span class="ansi-blue-fg">,</span> n_factors<span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">,</span> <span class="ansi-blue-fg">(</span>n_users<span class="ansi-blue-fg">,</span><span class="ansi-cyan-fg">1</span><span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">,</span> <span class="ansi-blue-fg">(</span>n_items<span class="ansi-blue-fg">,</span><span class="ansi-cyan-fg">1</span><span class="ansi-blue-fg">)</span>
        <span class="ansi-blue-fg">]</span><span class="ansi-blue-fg">]</span>
    <span class="ansi-green-fg">def</span> forward<span class="ansi-blue-fg">(</span>self<span class="ansi-blue-fg">,</span> x<span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">:</span>
        users<span class="ansi-blue-fg">,</span>items <span class="ansi-blue-fg">=</span> x<span class="ansi-blue-fg">[</span><span class="ansi-blue-fg">:</span><span class="ansi-blue-fg">,</span><span class="ansi-cyan-fg">0</span><span class="ansi-blue-fg">]</span><span class="ansi-blue-fg">,</span>x<span class="ansi-blue-fg">[</span><span class="ansi-blue-fg">:</span><span class="ansi-blue-fg">,</span><span class="ansi-cyan-fg">1</span><span class="ansi-blue-fg">]</span>
        dot <span class="ansi-blue-fg">=</span> self<span class="ansi-blue-fg">.</span>u_weight<span class="ansi-blue-fg">(</span>users<span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">*</span> self<span class="ansi-blue-fg">.</span>i_weight<span class="ansi-blue-fg">(</span>items<span class="ansi-blue-fg">)</span>
        res <span class="ansi-blue-fg">=</span> dot<span class="ansi-blue-fg">.</span>sum<span class="ansi-blue-fg">(</span><span class="ansi-cyan-fg">1</span><span class="ansi-blue-fg">)</span> <span class="ansi-blue-fg">+</span> self<span class="ansi-blue-fg">.</span>u_bias<span class="ansi-blue-fg">(</span>users<span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">.</span>squeeze<span class="ansi-blue-fg">(</span><span class="ansi-blue-fg">)</span> <span class="ansi-blue-fg">+</span> self<span class="ansi-blue-fg">.</span>i_bias<span class="ansi-blue-fg">(</span>items<span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">.</span>squeeze<span class="ansi-blue-fg">(</span><span class="ansi-blue-fg">)</span>
        <span class="ansi-green-fg">if</span> self<span class="ansi-blue-fg">.</span>y_range <span class="ansi-green-fg">is</span> <span class="ansi-green-fg">None</span><span class="ansi-blue-fg">:</span> <span class="ansi-green-fg">return</span> res
        <span class="ansi-green-fg">return</span> torch<span class="ansi-blue-fg">.</span>sigmoid<span class="ansi-blue-fg">(</span>res<span class="ansi-blue-fg">)</span> <span class="ansi-blue-fg">*</span> <span class="ansi-blue-fg">(</span>self<span class="ansi-blue-fg">.</span>y_range<span class="ansi-blue-fg">[</span><span class="ansi-cyan-fg">1</span><span class="ansi-blue-fg">]</span><span class="ansi-blue-fg">-</span>self<span class="ansi-blue-fg">.</span>y_range<span class="ansi-blue-fg">[</span><span class="ansi-cyan-fg">0</span><span class="ansi-blue-fg">]</span><span class="ansi-blue-fg">)</span> <span class="ansi-blue-fg">+</span> self<span class="ansi-blue-fg">.</span>y_range<span class="ansi-blue-fg">[</span><span class="ansi-cyan-fg">0</span><span class="ansi-blue-fg">]</span>
    <span class="ansi-blue-fg">@</span>classmethod
    <span class="ansi-green-fg">def</span> from_classes<span class="ansi-blue-fg">(</span>cls<span class="ansi-blue-fg">,</span> n_factors<span class="ansi-blue-fg">,</span> classes<span class="ansi-blue-fg">,</span> user<span class="ansi-blue-fg">=</span><span class="ansi-green-fg">None</span><span class="ansi-blue-fg">,</span> item<span class="ansi-blue-fg">=</span><span class="ansi-green-fg">None</span><span class="ansi-blue-fg">,</span> y_range<span class="ansi-blue-fg">=</span><span class="ansi-green-fg">None</span><span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">:</span>
        <span class="ansi-blue-fg">"Build a model with `n_factors` by inferring `n_users` and  `n_items` from `classes`"</span>
        <span class="ansi-green-fg">if</span> user <span class="ansi-green-fg">is</span> <span class="ansi-green-fg">None</span><span class="ansi-blue-fg">:</span> user <span class="ansi-blue-fg">=</span> list<span class="ansi-blue-fg">(</span>classes<span class="ansi-blue-fg">.</span>keys<span class="ansi-blue-fg">(</span><span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">[</span><span class="ansi-cyan-fg">0</span><span class="ansi-blue-fg">]</span>
        <span class="ansi-green-fg">if</span> item <span class="ansi-green-fg">is</span> <span class="ansi-green-fg">None</span><span class="ansi-blue-fg">:</span> item <span class="ansi-blue-fg">=</span> list<span class="ansi-blue-fg">(</span>classes<span class="ansi-blue-fg">.</span>keys<span class="ansi-blue-fg">(</span><span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">[</span><span class="ansi-cyan-fg">1</span><span class="ansi-blue-fg">]</span>
        res <span class="ansi-blue-fg">=</span> cls<span class="ansi-blue-fg">(</span>n_factors<span class="ansi-blue-fg">,</span> len<span class="ansi-blue-fg">(</span>classes<span class="ansi-blue-fg">[</span>user<span class="ansi-blue-fg">]</span><span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">,</span> len<span class="ansi-blue-fg">(</span>classes<span class="ansi-blue-fg">[</span>item<span class="ansi-blue-fg">]</span><span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">,</span> y_range<span class="ansi-blue-fg">=</span>y_range<span class="ansi-blue-fg">)</span>
        res<span class="ansi-blue-fg">.</span>classes<span class="ansi-blue-fg">,</span>res<span class="ansi-blue-fg">.</span>user<span class="ansi-blue-fg">,</span>res<span class="ansi-blue-fg">.</span>item <span class="ansi-blue-fg">=</span> classes<span class="ansi-blue-fg">,</span>user<span class="ansi-blue-fg">,</span>item
        <span class="ansi-green-fg">return</span> res
    <span class="ansi-green-fg">def</span> _get_idx<span class="ansi-blue-fg">(</span>self<span class="ansi-blue-fg">,</span> arr<span class="ansi-blue-fg">,</span> is_item<span class="ansi-blue-fg">=</span><span class="ansi-green-fg">True</span><span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">:</span>
        <span class="ansi-blue-fg">"Fetch item or user (based on `is_item`) for all in `arr`"</span>
        <span class="ansi-green-fg">assert</span> hasattr<span class="ansi-blue-fg">(</span>self<span class="ansi-blue-fg">,</span> <span class="ansi-blue-fg">'classes'</span><span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">,</span> <span class="ansi-blue-fg">"Build your model with `EmbeddingDotBias.from_classes` to use this functionality."</span>
        classes <span class="ansi-blue-fg">=</span> self<span class="ansi-blue-fg">.</span>classes<span class="ansi-blue-fg">[</span>self<span class="ansi-blue-fg">.</span>item<span class="ansi-blue-fg">]</span> <span class="ansi-green-fg">if</span> is_item <span class="ansi-green-fg">else</span> self<span class="ansi-blue-fg">.</span>classes<span class="ansi-blue-fg">[</span>self<span class="ansi-blue-fg">.</span>user<span class="ansi-blue-fg">]</span>
        c2i <span class="ansi-blue-fg">=</span> <span class="ansi-blue-fg">{</span>v<span class="ansi-blue-fg">:</span>k <span class="ansi-green-fg">for</span> k<span class="ansi-blue-fg">,</span>v <span class="ansi-green-fg">in</span> enumerate<span class="ansi-blue-fg">(</span>classes<span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">}</span>
        <span class="ansi-green-fg">try</span><span class="ansi-blue-fg">:</span> <span class="ansi-green-fg">return</span> tensor<span class="ansi-blue-fg">(</span><span class="ansi-blue-fg">[</span>c2i<span class="ansi-blue-fg">[</span>o<span class="ansi-blue-fg">]</span> <span class="ansi-green-fg">for</span> o <span class="ansi-green-fg">in</span> arr<span class="ansi-blue-fg">]</span><span class="ansi-blue-fg">)</span>
        <span class="ansi-green-fg">except</span> KeyError <span class="ansi-green-fg">as</span> e<span class="ansi-blue-fg">:</span>
            message <span class="ansi-blue-fg">=</span> <span class="ansi-blue-fg">f"You're trying to access {'an item' if is_item else 'a user'} that isn't in the training data. If it was in your original data, it may have been split such that it's only in the validation set now."</span>
            <span class="ansi-green-fg">raise</span> modify_exception<span class="ansi-blue-fg">(</span>e<span class="ansi-blue-fg">,</span> message<span class="ansi-blue-fg">,</span> replace<span class="ansi-blue-fg">=</span><span class="ansi-green-fg">True</span><span class="ansi-blue-fg">)</span>
    <span class="ansi-green-fg">def</span> bias<span class="ansi-blue-fg">(</span>self<span class="ansi-blue-fg">,</span> arr<span class="ansi-blue-fg">,</span> is_item<span class="ansi-blue-fg">=</span><span class="ansi-green-fg">True</span><span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">:</span>
        <span class="ansi-blue-fg">"Bias for item or user (based on `is_item`) for all in `arr`"</span>
        idx <span class="ansi-blue-fg">=</span> self<span class="ansi-blue-fg">.</span>_get_idx<span class="ansi-blue-fg">(</span>arr<span class="ansi-blue-fg">,</span> is_item<span class="ansi-blue-fg">)</span>
        layer <span class="ansi-blue-fg">=</span> <span class="ansi-blue-fg">(</span>self<span class="ansi-blue-fg">.</span>i_bias <span class="ansi-green-fg">if</span> is_item <span class="ansi-green-fg">else</span> self<span class="ansi-blue-fg">.</span>u_bias<span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">.</span>eval<span class="ansi-blue-fg">(</span><span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">.</span>cpu<span class="ansi-blue-fg">(</span><span class="ansi-blue-fg">)</span>
        <span class="ansi-green-fg">return</span> to_detach<span class="ansi-blue-fg">(</span>layer<span class="ansi-blue-fg">(</span>idx<span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">.</span>squeeze<span class="ansi-blue-fg">(</span><span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">,</span>gather<span class="ansi-blue-fg">=</span><span class="ansi-green-fg">False</span><span class="ansi-blue-fg">)</span>
    <span class="ansi-green-fg">def</span> weight<span class="ansi-blue-fg">(</span>self<span class="ansi-blue-fg">,</span> arr<span class="ansi-blue-fg">,</span> is_item<span class="ansi-blue-fg">=</span><span class="ansi-green-fg">True</span><span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">:</span>
        <span class="ansi-blue-fg">"Weight for item or user (based on `is_item`) for all in `arr`"</span>
        idx <span class="ansi-blue-fg">=</span> self<span class="ansi-blue-fg">.</span>_get_idx<span class="ansi-blue-fg">(</span>arr<span class="ansi-blue-fg">,</span> is_item<span class="ansi-blue-fg">)</span>
        layer <span class="ansi-blue-fg">=</span> <span class="ansi-blue-fg">(</span>self<span class="ansi-blue-fg">.</span>i_weight <span class="ansi-green-fg">if</span> is_item <span class="ansi-green-fg">else</span> self<span class="ansi-blue-fg">.</span>u_weight<span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">.</span>eval<span class="ansi-blue-fg">(</span><span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">.</span>cpu<span class="ansi-blue-fg">(</span><span class="ansi-blue-fg">)</span>
        <span class="ansi-green-fg">return</span> to_detach<span class="ansi-blue-fg">(</span>layer<span class="ansi-blue-fg">(</span>idx<span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">,</span>gather<span class="ansi-blue-fg">=</span><span class="ansi-green-fg">False</span><span class="ansi-blue-fg">)</span>
<span class="ansi-red-fg">File:</span>           ~/mambaforge/lib/python3.10/site-packages/fastai/collab.py
<span class="ansi-red-fg">Type:</span>           PrePostInitMeta
<span class="ansi-red-fg">Subclasses:</span>     
</pre>
</div>
</div>
</div>
<p>OK, let’s now reproduce what we did from scratch earlier using the fast.ai functionality with just a few lines of code:</p>
<div class="cell" data-tags="[]" data-execution_count="75">
<div class="sourceCode cell-code" id="cb79" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb79-1"><span class="co" style="color: #5E5E5E;"># create a collaborative filtering model using fastai</span></span>
<span id="cb79-2">learn <span class="op" style="color: #5E5E5E;">=</span> collab_learner(dls, n_factors<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">50</span>, y_range<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="fl" style="color: #AD0000;">5.5</span>)) <span class="co" style="color: #5E5E5E;"># latebt factors =50, predictions between 0 and 5.5</span></span></code></pre></div>
</div>
<div class="cell" data-tags="[]" data-execution_count="76">
<div class="sourceCode cell-code" id="cb80" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb80-1"><span class="co" style="color: #5E5E5E;"># train for 5 epochs, learning rate = 5e^-3, weight decay = 0.1</span></span>
<span id="cb80-2">learn.fit_one_cycle(<span class="dv" style="color: #AD0000;">5</span>, <span class="fl" style="color: #AD0000;">5e-3</span>, wd<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.1</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th>epoch</th>
      <th>train_loss</th>
      <th>valid_loss</th>
      <th>time</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>0.940161</td>
      <td>0.954125</td>
      <td>00:05</td>
    </tr>
    <tr>
      <td>1</td>
      <td>0.845409</td>
      <td>0.871870</td>
      <td>00:04</td>
    </tr>
    <tr>
      <td>2</td>
      <td>0.732785</td>
      <td>0.837964</td>
      <td>00:05</td>
    </tr>
    <tr>
      <td>3</td>
      <td>0.581802</td>
      <td>0.822925</td>
      <td>00:05</td>
    </tr>
    <tr>
      <td>4</td>
      <td>0.483456</td>
      <td>0.823324</td>
      <td>00:04</td>
    </tr>
  </tbody>
</table>
</div>
</div>
<p>The names of the layers can be seen by printing the model:</p>
<div class="cell" data-tags="[]" data-execution_count="77">
<div class="sourceCode cell-code" id="cb81" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb81-1"><span class="co" style="color: #5E5E5E;"># let's look at the layers of our model</span></span>
<span id="cb81-2">learn.model</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="77">
<pre><code>EmbeddingDotBias(
  (u_weight): Embedding(944, 50)
  (i_weight): Embedding(1665, 50)
  (u_bias): Embedding(944, 1)
  (i_bias): Embedding(1665, 1)
)</code></pre>
</div>
</div>
<p>Note the slight difference in terminology. u = users, and i=items. So, we have the user Embedding layer (u_weight), and the movie Embedding layer (i_weight) and our bias layers.</p>
<p>We can use these to replicate any of the analyses we did in the previous section — for instance:</p>
<div class="cell" data-tags="[]" data-execution_count="78">
<div class="sourceCode cell-code" id="cb83" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb83-1"><span class="co" style="color: #5E5E5E;"># we can look at the movie bias and grab the weights</span></span>
<span id="cb83-2">movie_bias <span class="op" style="color: #5E5E5E;">=</span> learn.model.i_bias.weight.squeeze()</span>
<span id="cb83-3"></span>
<span id="cb83-4"><span class="co" style="color: #5E5E5E;"># get indexes of top 5 movies by bias factor</span></span>
<span id="cb83-5">idxs <span class="op" style="color: #5E5E5E;">=</span> movie_bias.argsort(descending<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)[:<span class="dv" style="color: #AD0000;">5</span>]</span>
<span id="cb83-6"></span>
<span id="cb83-7"><span class="co" style="color: #5E5E5E;"># get title of top 5 movies by bias factor</span></span>
<span id="cb83-8">[dls.classes[<span class="st" style="color: #20794D;">'title'</span>][i] <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> idxs]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="78">
<pre><code>['L.A. Confidential (1997)',
 "Schindler's List (1993)",
 'Titanic (1997)',
 'Shawshank Redemption, The (1994)',
 'Silence of the Lambs, The (1991)']</code></pre>
</div>
</div>
<p>We get much the same results as before, that is LA Confidential is watched even by those that don’t normally watch that kind of movie.</p>
<p>Another interesting thing we can do with these learned embeddings is to look at<code>distance</code>.</p>
</section>
<section id="embedding-distance" class="level3">
<h3 class="anchored" data-anchor-id="embedding-distance">Embedding Distance</h3>
<p>On a two-dimensional map we can calculate the distance between two coordinates using the formula of Pythagoras: <img src="https://latex.codecogs.com/png.latex?%5Csqrt%7Bx%5E%7B2%7D+y%5E%7B2%7D%7D"> (assuming that <em>x</em> and <em>y</em> are the distances between the coordinates on each axis). For a 50-dimensional embedding we can do exactly the same thing, except that we add up the squares of all 50 of the coordinate distances.</p>
<p>If there were two movies that were nearly identical, then their embedding vectors would also have to be nearly identical, because the users that would like them would be nearly exactly the same. There is a more general idea here: movie similarity can be defined by the similarity of users that like those movies. And that directly means that the distance between two movies’ embedding vectors can define that similarity. We can use this to find the most similar movie to <em>Silence of the Lambs</em>:</p>
<div class="cell" data-tags="[]" data-execution_count="84">
<div class="sourceCode cell-code" id="cb85" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb85-1">movie_factors <span class="op" style="color: #5E5E5E;">=</span> learn.model.i_weight.weight</span>
<span id="cb85-2"></span>
<span id="cb85-3"><span class="co" style="color: #5E5E5E;"># convert Silence of the Lambs into its class ID using 'object to index' (o2i)</span></span>
<span id="cb85-4">idx <span class="op" style="color: #5E5E5E;">=</span> dls.classes[<span class="st" style="color: #20794D;">'title'</span>].o2i[<span class="st" style="color: #20794D;">'Silence of the Lambs, The (1991)'</span>]</span>
<span id="cb85-5"></span>
<span id="cb85-6"><span class="co" style="color: #5E5E5E;"># calculate the 'distance' betweeen the Silence of the Lambs and other movie vectors</span></span>
<span id="cb85-7">distances <span class="op" style="color: #5E5E5E;">=</span> nn.CosineSimilarity(dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)(movie_factors, movie_factors[idx][<span class="va" style="color: #111111;">None</span>]) <span class="co" style="color: #5E5E5E;"># Cosine Similarity normalizes the angle between the vectors</span></span>
<span id="cb85-8"></span>
<span id="cb85-9"><span class="co" style="color: #5E5E5E;"># sort distances from closes</span></span>
<span id="cb85-10">idx <span class="op" style="color: #5E5E5E;">=</span> distances.argsort(descending<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)[<span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb85-11"></span>
<span id="cb85-12"><span class="co" style="color: #5E5E5E;"># attach movie titles to the movie indexes</span></span>
<span id="cb85-13">dls.classes[<span class="st" style="color: #20794D;">'title'</span>][idx]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="84">
<pre><code>"One Flew Over the Cuckoo's Nest (1975)"</code></pre>
</div>
</div>
<p>Now that we have succesfully trained a model, let’s see how to deal with the situation where we have no data for a user. How can we make recommendations to new users?</p>
</section>
<section id="bootstrapping-a-collaborative-filtering-model" class="level3">
<h3 class="anchored" data-anchor-id="bootstrapping-a-collaborative-filtering-model">Bootstrapping a Collaborative Filtering Model</h3>
<p>The biggest challenge with using collaborative filtering models in practice is the <em>bootstrapping problem</em>. The most extreme version of this problem is when you have no users, and therefore no history to learn from. What products do you recommend to your very first user?</p>
<p>But even if you are a well-established company with a long history of user transactions, you still have the question: what do you do when a new user signs up? And indeed, what do you do when you add a new product to your portfolio? There is no magic solution to this problem, and really the solutions that we suggest are just variations of <em>use your common sense</em>. You could assign new users the mean of all of the embedding vectors of your other users, but this has the problem that that particular combination of latent factors may be not at all common (for instance, the average for the science-fiction factor may be high, and the average for the action factor may be low, but it is not that common to find people who like science-fiction without action). Better would probably be to pick some particular user to represent <em>average taste</em>.</p>
<p>Better still is to use a tabular model based on user meta data to construct your initial embedding vector. When a user signs up, think about what questions you could ask them that could help you to understand their tastes. Then you can create a model where the dependent variable is a user’s embedding vector, and the independent variables are the results of the questions that you ask them, along with their signup metadata. We will see in the next section how to create these kinds of tabular models. (You may have noticed that when you sign up for services such as Pandora and Netflix, they tend to ask you a few questions about what genres of movie or music you like; this is how they come up with your initial collaborative filtering recommendations.)</p>
<p>One thing to be careful of is that a small number of extremely enthusiastic users may end up effectively setting the recommendations for your whole user base. This is a very common problem, for instance, in movie recommendation systems. People that watch anime tend to watch a whole lot of it, and don’t watch very much else, and spend a lot of time putting their ratings on websites. As a result, anime tends to be heavily overrepresented in a lot of <em>best ever movies</em> lists. In this particular case, it can be fairly obvious that you have a problem of representation bias, but if the bias is occurring in the latent factors then it may not be obvious at all.</p>
<p>Such a problem can change the entire makeup of your user base, and the behavior of your system. This is particularly true because of positive feedback loops. If a small number of your users tend to set the direction of your recommendation system, then they are naturally going to end up attracting more people like them to your system. And that will, of course, amplify the original representation bias. This type of bias has a natural tendency to be amplified exponentially. You may have seen examples of company executives expressing surprise at how their online platforms rapidly deteriorated in such a way that they expressed values at odds with the values of the founders. In the presence of these kinds of feedback loops, it is easy to see how such a divergence can happen both quickly and in a way that is hidden until it is too late.</p>
<p>In a self-reinforcing system like this, we should probably expect these kinds of feedback loops to be the norm, not the exception. Therefore, you should assume that you will see them, plan for that, and identify up front how you will deal with these issues. Try to think about all of the ways in which feedback loops may be represented in your system, and how you might be able to identify them in your data. In the end, this is coming back to our original advice about how to avoid disaster when rolling out any kind of machine learning system. It’s all about ensuring that there are humans in the loop; that there is careful monitoring, and a gradual and thoughtful rollout.</p>
<p>Our dot product model works quite well, and it is the basis of many successful real-world recommendation systems. This approach to collaborative filtering is known as <em>probabilistic matrix factorization</em> (PMF). Another approach, which generally works similarly well given the same data, is deep learning.</p>
</section>
<section id="deep-learning-for-collaborative-filtering---from-scratch" class="level3">
<h3 class="anchored" data-anchor-id="deep-learning-for-collaborative-filtering---from-scratch">Deep Learning for Collaborative Filtering - from scratch</h3>
<p>To turn our architecture into a deep learning model, the first step is to take the results of the embedding lookup and concatenate those activations together. This gives us a matrix which we can then pass through linear layers and nonlinearities in the usual way. Since we’ll be concatenating the embeddings, rather than taking their dot product, the two embedding matrices can have different sizes (i.e., different numbers of latent factors). fastai has a function <code>get_emb_sz</code> that returns recommended sizes for embedding matrices for your data, based on a heuristic that fast.ai has found tends to work well in practice:</p>
<div class="cell" data-tags="[]" data-execution_count="85">
<div class="sourceCode cell-code" id="cb87" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb87-1"><span class="co" style="color: #5E5E5E;"># use fast.ai recommended embedding sizes</span></span>
<span id="cb87-2">embs <span class="op" style="color: #5E5E5E;">=</span> get_emb_sz(dls)</span>
<span id="cb87-3">embs</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="85">
<pre><code>[(944, 74), (1665, 102)]</code></pre>
</div>
</div>
<p>So the suggested number of latent factors for our 944 users is 74, and the suggested number of latent factors for our 1,665 movies is 102.</p>
<p>Let’s implement this class:</p>
<div class="cell" data-tags="[]" data-execution_count="88">
<div class="sourceCode cell-code" id="cb89" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb89-1"><span class="co" style="color: #5E5E5E;"># build a Collaborative Filtering neural net from scratch</span></span>
<span id="cb89-2"><span class="kw" style="color: #003B4F;">class</span> CollabNN(Module):</span>
<span id="cb89-3">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, user_sz, item_sz, y_range<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">0</span>,<span class="fl" style="color: #AD0000;">5.5</span>), n_act<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>):</span>
<span id="cb89-4">        <span class="va" style="color: #111111;">self</span>.user_factors <span class="op" style="color: #5E5E5E;">=</span> Embedding(<span class="op" style="color: #5E5E5E;">*</span>user_sz)</span>
<span id="cb89-5">        <span class="va" style="color: #111111;">self</span>.item_factors <span class="op" style="color: #5E5E5E;">=</span> Embedding(<span class="op" style="color: #5E5E5E;">*</span>item_sz)</span>
<span id="cb89-6">        <span class="va" style="color: #111111;">self</span>.layers <span class="op" style="color: #5E5E5E;">=</span> nn.Sequential(</span>
<span id="cb89-7">            nn.Linear(user_sz[<span class="dv" style="color: #AD0000;">1</span>]<span class="op" style="color: #5E5E5E;">+</span>item_sz[<span class="dv" style="color: #AD0000;">1</span>], n_act), <span class="co" style="color: #5E5E5E;"># </span></span>
<span id="cb89-8">            nn.ReLU(), <span class="co" style="color: #5E5E5E;"># Rectified Linear Unit</span></span>
<span id="cb89-9">            nn.Linear(n_act, <span class="dv" style="color: #AD0000;">1</span>)) <span class="co" style="color: #5E5E5E;"># Linear layer at the end to create a single output</span></span>
<span id="cb89-10">        <span class="va" style="color: #111111;">self</span>.y_range <span class="op" style="color: #5E5E5E;">=</span> y_range</span>
<span id="cb89-11">        </span>
<span id="cb89-12">    <span class="kw" style="color: #003B4F;">def</span> forward(<span class="va" style="color: #111111;">self</span>, x):</span>
<span id="cb89-13">        embs <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.user_factors(x[:,<span class="dv" style="color: #AD0000;">0</span>]),<span class="va" style="color: #111111;">self</span>.item_factors(x[:,<span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb89-14">        x <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.layers(torch.cat(embs, dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)) <span class="co" style="color: #5E5E5E;"># concatenate user and item embeddings together</span></span>
<span id="cb89-15">        <span class="cf" style="color: #003B4F;">return</span> sigmoid_range(x, <span class="op" style="color: #5E5E5E;">*</span><span class="va" style="color: #111111;">self</span>.y_range)</span></code></pre></div>
</div>
<p>And use it to create a model:</p>
<div class="cell" data-tags="[]" data-execution_count="89">
<div class="sourceCode cell-code" id="cb90" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb90-1"><span class="co" style="color: #5E5E5E;"># instantiate our model </span></span>
<span id="cb90-2">model <span class="op" style="color: #5E5E5E;">=</span> CollabNN(<span class="op" style="color: #5E5E5E;">*</span>embs)</span></code></pre></div>
</div>
<p><code>CollabNN</code> creates our <code>Embedding</code> layers in the same way as previous classes in this chapter, except that we now use the <code>embs</code> sizes. <code>self.layers</code> is identical to the mini-neural net we created in the chapter for MNIST. Then, in <code>forward</code>, we apply the embeddings, concatenate the results, and pass this through the mini-neural net. Finally, we apply <code>sigmoid_range</code> as we have in previous models.</p>
<p>Let’s see if it trains:</p>
<div class="cell" data-tags="[]" data-execution_count="90">
<div class="sourceCode cell-code" id="cb91" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb91-1">learn <span class="op" style="color: #5E5E5E;">=</span> Learner(dls, model, loss_func<span class="op" style="color: #5E5E5E;">=</span>MSELossFlat())</span>
<span id="cb91-2"></span>
<span id="cb91-3"><span class="co" style="color: #5E5E5E;"># train for 5 epochs, learning rate 5e^-3, weight decay = 0.01</span></span>
<span id="cb91-4">learn.fit_one_cycle(<span class="dv" style="color: #AD0000;">5</span>, <span class="fl" style="color: #AD0000;">5e-3</span>, wd<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.01</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th>epoch</th>
      <th>train_loss</th>
      <th>valid_loss</th>
      <th>time</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>0.960975</td>
      <td>0.944082</td>
      <td>00:06</td>
    </tr>
    <tr>
      <td>1</td>
      <td>0.899966</td>
      <td>0.908818</td>
      <td>00:06</td>
    </tr>
    <tr>
      <td>2</td>
      <td>0.877111</td>
      <td>0.890931</td>
      <td>00:06</td>
    </tr>
    <tr>
      <td>3</td>
      <td>0.791085</td>
      <td>0.869468</td>
      <td>00:06</td>
    </tr>
    <tr>
      <td>4</td>
      <td>0.771323</td>
      <td>0.869940</td>
      <td>00:06</td>
    </tr>
  </tbody>
</table>
</div>
</div>
<p>fastai provides this model in <code>fastai.collab</code> if you pass <code>use_nn=True</code> in your call to <code>collab_learner</code> (including calling <code>get_emb_sz</code> for you), and it lets you easily create more layers. For instance, here we’re creating two hidden layers, of size 100 and 50, respectively:</p>
</section>
<section id="deep-learning-for-collaborative-filtering---using-fast.ai" class="level3">
<h3 class="anchored" data-anchor-id="deep-learning-for-collaborative-filtering---using-fast.ai">Deep Learning for Collaborative Filtering - using fast.ai</h3>
<div class="cell" data-tags="[]" data-execution_count="91">
<div class="sourceCode cell-code" id="cb92" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb92-1"><span class="co" style="color: #5E5E5E;"># create our Collab Filtering learner, define neural net layesr</span></span>
<span id="cb92-2">learn <span class="op" style="color: #5E5E5E;">=</span> collab_learner(dls, use_nn<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, y_range<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="fl" style="color: #AD0000;">5.5</span>), layers<span class="op" style="color: #5E5E5E;">=</span>[<span class="dv" style="color: #AD0000;">100</span>,<span class="dv" style="color: #AD0000;">50</span>]) <span class="co" style="color: #5E5E5E;"># use_nn = True allows us to create a neural network, with 2 hidden layers</span></span>
<span id="cb92-3"></span>
<span id="cb92-4"><span class="co" style="color: #5E5E5E;"># train for 5 epochs, learning rate 5e^-3, weight decay = 0.01</span></span>
<span id="cb92-5">learn.fit_one_cycle(<span class="dv" style="color: #AD0000;">5</span>, <span class="fl" style="color: #AD0000;">5e-3</span>, wd<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.1</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th>epoch</th>
      <th>train_loss</th>
      <th>valid_loss</th>
      <th>time</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>0.957651</td>
      <td>0.987930</td>
      <td>00:07</td>
    </tr>
    <tr>
      <td>1</td>
      <td>0.894093</td>
      <td>0.919895</td>
      <td>00:07</td>
    </tr>
    <tr>
      <td>2</td>
      <td>0.907125</td>
      <td>0.892506</td>
      <td>00:06</td>
    </tr>
    <tr>
      <td>3</td>
      <td>0.863961</td>
      <td>0.864401</td>
      <td>00:06</td>
    </tr>
    <tr>
      <td>4</td>
      <td>0.766643</td>
      <td>0.866521</td>
      <td>00:06</td>
    </tr>
  </tbody>
</table>
</div>
</div>
<p>Deep learning models really come into play when we have a lot of metadata e.g.&nbsp;information about our users, where are they from, when did they sign up, what sex are they etc and for our movies e.g.&nbsp;when was it released, what genre is it etc. In our scenario here where we don’t have this information to hand, the deep learning model scores a bit worse than our dot product model, which is taking advantage of our understanding of the problem domain. In practice we often create a model which has a dot product component and a neural net component.</p>
<p><code>learn.model</code> is an object of type <code>EmbeddingNN</code>. Let’s take a look at fastai’s code for this class:</p>
<div class="cell" data-tags="[]" data-execution_count="92">
<div class="sourceCode cell-code" id="cb93" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb93-1"><span class="at" style="color: #657422;">@delegates</span>(TabularModel)</span>
<span id="cb93-2"><span class="kw" style="color: #003B4F;">class</span> EmbeddingNN(TabularModel):</span>
<span id="cb93-3">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, emb_szs, layers, <span class="op" style="color: #5E5E5E;">**</span>kwargs):</span>
<span id="cb93-4">        <span class="bu" style="color: null;">super</span>().<span class="fu" style="color: #4758AB;">__init__</span>(emb_szs, layers<span class="op" style="color: #5E5E5E;">=</span>layers, n_cont<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>, out_sz<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, <span class="op" style="color: #5E5E5E;">**</span>kwargs) <span class="co" style="color: #5E5E5E;"># n_cont=0 means number of continuous variables is zero</span></span></code></pre></div>
</div>
<p>Wow, that’s not a lot of code! This class <em>inherits</em> from <code>TabularModel</code>, which is where it gets all its functionality from. In <code>__init__</code> it calls the same method in <code>TabularModel</code>, passing <code>n_cont=0</code> and <code>out_sz=1</code>; other than that, it only passes along whatever arguments it received.</p>
<div class="cell" data-execution_count="93">
<div class="sourceCode cell-code" id="cb94" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb94-1">TabularModel??</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="ansi-escaped-output">
<pre><span class="ansi-red-fg">Init signature:</span>
TabularModel<span class="ansi-blue-fg">(</span>
    emb_szs<span class="ansi-blue-fg">:</span> <span class="ansi-blue-fg">'list'</span><span class="ansi-blue-fg">,</span>
    n_cont<span class="ansi-blue-fg">:</span> <span class="ansi-blue-fg">'int'</span><span class="ansi-blue-fg">,</span>
    out_sz<span class="ansi-blue-fg">:</span> <span class="ansi-blue-fg">'int'</span><span class="ansi-blue-fg">,</span>
    layers<span class="ansi-blue-fg">:</span> <span class="ansi-blue-fg">'list'</span><span class="ansi-blue-fg">,</span>
    ps<span class="ansi-blue-fg">:</span> <span class="ansi-blue-fg">'float | list'</span> <span class="ansi-blue-fg">=</span> <span class="ansi-green-fg">None</span><span class="ansi-blue-fg">,</span>
    embed_p<span class="ansi-blue-fg">:</span> <span class="ansi-blue-fg">'float'</span> <span class="ansi-blue-fg">=</span> <span class="ansi-cyan-fg">0.0</span><span class="ansi-blue-fg">,</span>
    y_range<span class="ansi-blue-fg">=</span><span class="ansi-green-fg">None</span><span class="ansi-blue-fg">,</span>
    use_bn<span class="ansi-blue-fg">:</span> <span class="ansi-blue-fg">'bool'</span> <span class="ansi-blue-fg">=</span> <span class="ansi-green-fg">True</span><span class="ansi-blue-fg">,</span>
    bn_final<span class="ansi-blue-fg">:</span> <span class="ansi-blue-fg">'bool'</span> <span class="ansi-blue-fg">=</span> <span class="ansi-green-fg">False</span><span class="ansi-blue-fg">,</span>
    bn_cont<span class="ansi-blue-fg">:</span> <span class="ansi-blue-fg">'bool'</span> <span class="ansi-blue-fg">=</span> <span class="ansi-green-fg">True</span><span class="ansi-blue-fg">,</span>
    act_cls<span class="ansi-blue-fg">=</span>ReLU<span class="ansi-blue-fg">(</span>inplace<span class="ansi-blue-fg">=</span><span class="ansi-green-fg">True</span><span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">,</span>
    lin_first<span class="ansi-blue-fg">:</span> <span class="ansi-blue-fg">'bool'</span> <span class="ansi-blue-fg">=</span> <span class="ansi-green-fg">True</span><span class="ansi-blue-fg">,</span>
<span class="ansi-blue-fg">)</span>
<span class="ansi-red-fg">Source:</span>        
<span class="ansi-green-fg">class</span> TabularModel<span class="ansi-blue-fg">(</span>Module<span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">:</span>
    <span class="ansi-blue-fg">"Basic model for tabular data."</span>
    <span class="ansi-green-fg">def</span> __init__<span class="ansi-blue-fg">(</span>self<span class="ansi-blue-fg">,</span> 
        emb_szs<span class="ansi-blue-fg">:</span>list<span class="ansi-blue-fg">,</span> <span class="ansi-red-fg"># Sequence of (num_embeddings, embedding_dim) for each categorical variable</span>
        n_cont<span class="ansi-blue-fg">:</span>int<span class="ansi-blue-fg">,</span> <span class="ansi-red-fg"># Number of continuous variables</span>
        out_sz<span class="ansi-blue-fg">:</span>int<span class="ansi-blue-fg">,</span> <span class="ansi-red-fg"># Number of outputs for final `LinBnDrop` layer</span>
        layers<span class="ansi-blue-fg">:</span>list<span class="ansi-blue-fg">,</span> <span class="ansi-red-fg"># Sequence of ints used to specify the input and output size of each `LinBnDrop` layer</span>
        ps<span class="ansi-blue-fg">:</span>float<span class="ansi-blue-fg">|</span>list<span class="ansi-blue-fg">=</span><span class="ansi-green-fg">None</span><span class="ansi-blue-fg">,</span> <span class="ansi-red-fg"># Sequence of dropout probabilities for `LinBnDrop`</span>
        embed_p<span class="ansi-blue-fg">:</span>float<span class="ansi-blue-fg">=</span><span class="ansi-cyan-fg">0.</span><span class="ansi-blue-fg">,</span> <span class="ansi-red-fg"># Dropout probability for `Embedding` layer</span>
        y_range<span class="ansi-blue-fg">=</span><span class="ansi-green-fg">None</span><span class="ansi-blue-fg">,</span> <span class="ansi-red-fg"># Low and high for `SigmoidRange` activation </span>
        use_bn<span class="ansi-blue-fg">:</span>bool<span class="ansi-blue-fg">=</span><span class="ansi-green-fg">True</span><span class="ansi-blue-fg">,</span> <span class="ansi-red-fg"># Use `BatchNorm1d` in `LinBnDrop` layers</span>
        bn_final<span class="ansi-blue-fg">:</span>bool<span class="ansi-blue-fg">=</span><span class="ansi-green-fg">False</span><span class="ansi-blue-fg">,</span> <span class="ansi-red-fg"># Use `BatchNorm1d` on final layer</span>
        bn_cont<span class="ansi-blue-fg">:</span>bool<span class="ansi-blue-fg">=</span><span class="ansi-green-fg">True</span><span class="ansi-blue-fg">,</span> <span class="ansi-red-fg"># Use `BatchNorm1d` on continuous variables</span>
        act_cls<span class="ansi-blue-fg">=</span>nn<span class="ansi-blue-fg">.</span>ReLU<span class="ansi-blue-fg">(</span>inplace<span class="ansi-blue-fg">=</span><span class="ansi-green-fg">True</span><span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">,</span> <span class="ansi-red-fg"># Activation type for `LinBnDrop` layers</span>
        lin_first<span class="ansi-blue-fg">:</span>bool<span class="ansi-blue-fg">=</span><span class="ansi-green-fg">True</span> <span class="ansi-red-fg"># Linear layer is first or last in `LinBnDrop` layers</span>
    <span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">:</span>
        ps <span class="ansi-blue-fg">=</span> ifnone<span class="ansi-blue-fg">(</span>ps<span class="ansi-blue-fg">,</span> <span class="ansi-blue-fg">[</span><span class="ansi-cyan-fg">0</span><span class="ansi-blue-fg">]</span><span class="ansi-blue-fg">*</span>len<span class="ansi-blue-fg">(</span>layers<span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">)</span>
        <span class="ansi-green-fg">if</span> <span class="ansi-green-fg">not</span> is_listy<span class="ansi-blue-fg">(</span>ps<span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">:</span> ps <span class="ansi-blue-fg">=</span> <span class="ansi-blue-fg">[</span>ps<span class="ansi-blue-fg">]</span><span class="ansi-blue-fg">*</span>len<span class="ansi-blue-fg">(</span>layers<span class="ansi-blue-fg">)</span>
        self<span class="ansi-blue-fg">.</span>embeds <span class="ansi-blue-fg">=</span> nn<span class="ansi-blue-fg">.</span>ModuleList<span class="ansi-blue-fg">(</span><span class="ansi-blue-fg">[</span>Embedding<span class="ansi-blue-fg">(</span>ni<span class="ansi-blue-fg">,</span> nf<span class="ansi-blue-fg">)</span> <span class="ansi-green-fg">for</span> ni<span class="ansi-blue-fg">,</span>nf <span class="ansi-green-fg">in</span> emb_szs<span class="ansi-blue-fg">]</span><span class="ansi-blue-fg">)</span>
        self<span class="ansi-blue-fg">.</span>emb_drop <span class="ansi-blue-fg">=</span> nn<span class="ansi-blue-fg">.</span>Dropout<span class="ansi-blue-fg">(</span>embed_p<span class="ansi-blue-fg">)</span>
        self<span class="ansi-blue-fg">.</span>bn_cont <span class="ansi-blue-fg">=</span> nn<span class="ansi-blue-fg">.</span>BatchNorm1d<span class="ansi-blue-fg">(</span>n_cont<span class="ansi-blue-fg">)</span> <span class="ansi-green-fg">if</span> bn_cont <span class="ansi-green-fg">else</span> <span class="ansi-green-fg">None</span>
        n_emb <span class="ansi-blue-fg">=</span> sum<span class="ansi-blue-fg">(</span>e<span class="ansi-blue-fg">.</span>embedding_dim <span class="ansi-green-fg">for</span> e <span class="ansi-green-fg">in</span> self<span class="ansi-blue-fg">.</span>embeds<span class="ansi-blue-fg">)</span>
        self<span class="ansi-blue-fg">.</span>n_emb<span class="ansi-blue-fg">,</span>self<span class="ansi-blue-fg">.</span>n_cont <span class="ansi-blue-fg">=</span> n_emb<span class="ansi-blue-fg">,</span>n_cont
        sizes <span class="ansi-blue-fg">=</span> <span class="ansi-blue-fg">[</span>n_emb <span class="ansi-blue-fg">+</span> n_cont<span class="ansi-blue-fg">]</span> <span class="ansi-blue-fg">+</span> layers <span class="ansi-blue-fg">+</span> <span class="ansi-blue-fg">[</span>out_sz<span class="ansi-blue-fg">]</span>
        actns <span class="ansi-blue-fg">=</span> <span class="ansi-blue-fg">[</span>act_cls <span class="ansi-green-fg">for</span> _ <span class="ansi-green-fg">in</span> range<span class="ansi-blue-fg">(</span>len<span class="ansi-blue-fg">(</span>sizes<span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">-</span><span class="ansi-cyan-fg">2</span><span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">]</span> <span class="ansi-blue-fg">+</span> <span class="ansi-blue-fg">[</span><span class="ansi-green-fg">None</span><span class="ansi-blue-fg">]</span>
        _layers <span class="ansi-blue-fg">=</span> <span class="ansi-blue-fg">[</span>LinBnDrop<span class="ansi-blue-fg">(</span>sizes<span class="ansi-blue-fg">[</span>i<span class="ansi-blue-fg">]</span><span class="ansi-blue-fg">,</span> sizes<span class="ansi-blue-fg">[</span>i<span class="ansi-blue-fg">+</span><span class="ansi-cyan-fg">1</span><span class="ansi-blue-fg">]</span><span class="ansi-blue-fg">,</span> bn<span class="ansi-blue-fg">=</span>use_bn <span class="ansi-green-fg">and</span> <span class="ansi-blue-fg">(</span>i<span class="ansi-blue-fg">!=</span>len<span class="ansi-blue-fg">(</span>actns<span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">-</span><span class="ansi-cyan-fg">1</span> <span class="ansi-green-fg">or</span> bn_final<span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">,</span> p<span class="ansi-blue-fg">=</span>p<span class="ansi-blue-fg">,</span> act<span class="ansi-blue-fg">=</span>a<span class="ansi-blue-fg">,</span> lin_first<span class="ansi-blue-fg">=</span>lin_first<span class="ansi-blue-fg">)</span>
                       <span class="ansi-green-fg">for</span> i<span class="ansi-blue-fg">,</span><span class="ansi-blue-fg">(</span>p<span class="ansi-blue-fg">,</span>a<span class="ansi-blue-fg">)</span> <span class="ansi-green-fg">in</span> enumerate<span class="ansi-blue-fg">(</span>zip<span class="ansi-blue-fg">(</span>ps<span class="ansi-blue-fg">+</span><span class="ansi-blue-fg">[</span><span class="ansi-cyan-fg">0.</span><span class="ansi-blue-fg">]</span><span class="ansi-blue-fg">,</span>actns<span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">]</span>
        <span class="ansi-green-fg">if</span> y_range <span class="ansi-green-fg">is</span> <span class="ansi-green-fg">not</span> <span class="ansi-green-fg">None</span><span class="ansi-blue-fg">:</span> _layers<span class="ansi-blue-fg">.</span>append<span class="ansi-blue-fg">(</span>SigmoidRange<span class="ansi-blue-fg">(</span><span class="ansi-blue-fg">*</span>y_range<span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">)</span>
        self<span class="ansi-blue-fg">.</span>layers <span class="ansi-blue-fg">=</span> nn<span class="ansi-blue-fg">.</span>Sequential<span class="ansi-blue-fg">(</span><span class="ansi-blue-fg">*</span>_layers<span class="ansi-blue-fg">)</span>
    <span class="ansi-green-fg">def</span> forward<span class="ansi-blue-fg">(</span>self<span class="ansi-blue-fg">,</span> x_cat<span class="ansi-blue-fg">,</span> x_cont<span class="ansi-blue-fg">=</span><span class="ansi-green-fg">None</span><span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">:</span>
        <span class="ansi-green-fg">if</span> self<span class="ansi-blue-fg">.</span>n_emb <span class="ansi-blue-fg">!=</span> <span class="ansi-cyan-fg">0</span><span class="ansi-blue-fg">:</span>
            x <span class="ansi-blue-fg">=</span> <span class="ansi-blue-fg">[</span>e<span class="ansi-blue-fg">(</span>x_cat<span class="ansi-blue-fg">[</span><span class="ansi-blue-fg">:</span><span class="ansi-blue-fg">,</span>i<span class="ansi-blue-fg">]</span><span class="ansi-blue-fg">)</span> <span class="ansi-green-fg">for</span> i<span class="ansi-blue-fg">,</span>e <span class="ansi-green-fg">in</span> enumerate<span class="ansi-blue-fg">(</span>self<span class="ansi-blue-fg">.</span>embeds<span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">]</span>
            x <span class="ansi-blue-fg">=</span> torch<span class="ansi-blue-fg">.</span>cat<span class="ansi-blue-fg">(</span>x<span class="ansi-blue-fg">,</span> <span class="ansi-cyan-fg">1</span><span class="ansi-blue-fg">)</span>
            x <span class="ansi-blue-fg">=</span> self<span class="ansi-blue-fg">.</span>emb_drop<span class="ansi-blue-fg">(</span>x<span class="ansi-blue-fg">)</span>
        <span class="ansi-green-fg">if</span> self<span class="ansi-blue-fg">.</span>n_cont <span class="ansi-blue-fg">!=</span> <span class="ansi-cyan-fg">0</span><span class="ansi-blue-fg">:</span>
            <span class="ansi-green-fg">if</span> self<span class="ansi-blue-fg">.</span>bn_cont <span class="ansi-green-fg">is</span> <span class="ansi-green-fg">not</span> <span class="ansi-green-fg">None</span><span class="ansi-blue-fg">:</span> x_cont <span class="ansi-blue-fg">=</span> self<span class="ansi-blue-fg">.</span>bn_cont<span class="ansi-blue-fg">(</span>x_cont<span class="ansi-blue-fg">)</span>
            x <span class="ansi-blue-fg">=</span> torch<span class="ansi-blue-fg">.</span>cat<span class="ansi-blue-fg">(</span><span class="ansi-blue-fg">[</span>x<span class="ansi-blue-fg">,</span> x_cont<span class="ansi-blue-fg">]</span><span class="ansi-blue-fg">,</span> <span class="ansi-cyan-fg">1</span><span class="ansi-blue-fg">)</span> <span class="ansi-green-fg">if</span> self<span class="ansi-blue-fg">.</span>n_emb <span class="ansi-blue-fg">!=</span> <span class="ansi-cyan-fg">0</span> <span class="ansi-green-fg">else</span> x_cont
        <span class="ansi-green-fg">return</span> self<span class="ansi-blue-fg">.</span>layers<span class="ansi-blue-fg">(</span>x<span class="ansi-blue-fg">)</span>
<span class="ansi-red-fg">File:</span>           ~/mambaforge/lib/python3.10/site-packages/fastai/tabular/model.py
<span class="ansi-red-fg">Type:</span>           PrePostInitMeta
<span class="ansi-red-fg">Subclasses:</span>     EmbeddingNN, EmbeddingNN
</pre>
</div>
</div>
</div>
</section>
<section id="kwargs-and-delegates" class="level3">
<h3 class="anchored" data-anchor-id="kwargs-and-delegates">kwargs and Delegates</h3>
<blockquote class="blockquote">
<p><code>EmbeddingNN</code> includes <code>**kwargs</code> as a parameter to <code>__init__</code>. In Python <code>**kwargs</code> in a parameter list means “put any additional keyword arguments into a dict called <code>kwargs</code>. And <code>**kwargs</code> in an argument list means”insert all key/value pairs in the <code>kwargs</code> dict as named arguments here”. This approach is used in many popular libraries, such as <code>matplotlib</code>, in which the main <code>plot</code> function simply has the signature <code>plot(*args, **kwargs)</code>. The <a href="https://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.plot"><code>plot</code> documentation</a> says “The <code>kwargs</code> are <code>Line2D</code> properties” and then lists those properties.</p>
</blockquote>
<blockquote class="blockquote">
<p>We’re using <code>**kwargs</code> in <code>EmbeddingNN</code> to avoid having to write all the arguments to <code>TabularModel</code> a second time, and keep them in sync. However, this makes our API quite difficult to work with, because now Jupyter Notebook doesn’t know what parameters are available. Consequently things like tab completion of parameter names and pop-up lists of signatures won’t work.</p>
</blockquote>
<blockquote class="blockquote">
<p>fastai resolves this by providing a special <code>@delegates</code> decorator, which automatically changes the signature of the class or function (<code>EmbeddingNN</code> in this case) to insert all of its keyword arguments into the signature.</p>
</blockquote>
<p>Although the results of <code>EmbeddingNN</code> are a bit worse than the dot product approach (which shows the power of carefully constructing an architecture for a domain), it does allow us to do something very important: we can now directly incorporate other user and movie information, date and time information, or any other information that may be relevant to the recommendation. That’s exactly what <code>TabularModel</code> does. In fact, we’ve now seen that <code>EmbeddingNN</code> is just a <code>TabularModel</code>, with <code>n_cont=0</code> and <code>out_sz=1</code>. So, we’d better spend some time learning about <code>TabularModel</code>, and how to use it to get great results! We’ll do that in the next chapter.</p>
</section>
<section id="natural-language-processing-nlp" class="level3">
<h3 class="anchored" data-anchor-id="natural-language-processing-nlp">Natural Language Processing (NLP)</h3>
<p>It’s possible you may have heard about <code>Embeddings before</code> in the context of <code>Natural Language Processing (NLP)</code>. We can turn words into integers using an embedding matrix. Let’s use the poem [Green Eggs and Ham] to illustrate:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Collaborative Filtering/collaborative-filtering-deep-dive_files/figure-html/05150507-7e20-435c-86ab-c1f520086cba.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">embedding_NLP.JPG</figcaption><p></p>
</figure>
</div>
<p>From the spreadhseet screenshot above, we can see that each word that appears in the poem is given an index which can be arbitrary (in this case alphabetical) and then given 4 randomly initialized latent factors, and a bias factor. This allows the conversion from text to integers in the form of an Embedding matrix, which allows our neural net to interpret the text.</p>
</section>
<section id="key-takeaways" class="level3">
<h3 class="anchored" data-anchor-id="key-takeaways">Key takeaways</h3>
<p>This blog has explored <code>Collaborative Filtering</code> and we have seen how to:</p>
<ul>
<li>build a Collaborative Filtering model from scratch</li>
<li>create Embedding matrices from scratch</li>
<li>replicate the from-scratch model using PyTorch</li>
<li>replicate the from-scratch model using Fast.ai</li>
</ul>
<p>We have also learned how to build a Collaborative Filtering Model using <code>deep learning</code> again, doing this from scratch, using PyTorch’s functionality, and also using the Fast.ai methodology. We saw how gradient descent can learn intrinsic factors or biases about items from a history of ratings, which can then give us information about the data, which can be used to provide e.g.&nbsp;tailored movie recommendations.</p>


</section>
</section>

 ]]></description>
  <category>Collaborative Filtering</category>
  <category>fastai</category>
  <guid>https://stephen137.github.io/posts/Collaborative Filtering/collaborative-filtering-deep-dive.html</guid>
  <pubDate>Thu, 12 Jan 2023 23:00:00 GMT</pubDate>
  <media:content url="https://stephen137.github.io/posts/Collaborative Filtering/filtering.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Multi-label classification</title>
  <dc:creator>Stephen Barrie</dc:creator>
  <link>https://stephen137.github.io/posts/Multi_Label_Classification/Multi_label_classification.html</link>
  <description><![CDATA[ 




<p>This blog further develops the ideas included in the earlier <a href="https://stephen137.github.io/posts/Paddy_Doctor/Paddy_Doctor.html">Paddy Dcotor: Paddy Disease Classification</a> blog. We’re going to build a model that doesn’t just predict what disease the rice paddy has, but also predicts what kind of rice is shown. This might sound like a bad idea. After all, doesn’t that mean that the model has <em>more</em> to do? Mightn’t it get rather distracted from its main task, which is to identify paddy disease?</p>
<p>Perhaps… but in some cases the opposite to be true, especially when training for quite a few epochs. By giving the model more signal about what is present in a picture, it may be able to use this information to find more interesting features that predict our target of interest. For instance, perhaps some of the features of disease change between varieties.</p>
<section id="set-up" class="level3">
<h3 class="anchored" data-anchor-id="set-up">Set up</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># install fastkaggle if not available</span></span>
<span id="cb1-2"><span class="cf" style="color: #003B4F;">try</span>: <span class="im" style="color: #00769E;">import</span> fastkaggle</span>
<span id="cb1-3"><span class="cf" style="color: #003B4F;">except</span> ModuleNotFoundError:</span>
<span id="cb1-4">    <span class="op" style="color: #5E5E5E;">!</span>pip install <span class="op" style="color: #5E5E5E;">-</span>Uq fastkaggle</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="im" style="color: #00769E;">from</span> fastkaggle <span class="im" style="color: #00769E;">import</span> <span class="op" style="color: #5E5E5E;">*</span></span></code></pre></div>
</div>
<p>First we’ll repeat the steps we used last time to access the data and ensure all the latest libraries are installed:</p>
<p>::: {.cell _kg_hide-output=‘true’ tags=‘[]’}</p>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="op" style="color: #5E5E5E;">!</span>pip install fastai</span>
<span id="cb2-2"></span>
<span id="cb2-3"></span>
<span id="cb2-4">comp <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'paddy-disease-classification'</span></span>
<span id="cb2-5">path <span class="op" style="color: #5E5E5E;">=</span> setup_comp(comp, install<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'fastai "timm&gt;=0.6.2.dev0"'</span>)</span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="im" style="color: #00769E;">from</span> fastai.vision.<span class="bu" style="color: null;">all</span> <span class="im" style="color: #00769E;">import</span> <span class="op" style="color: #5E5E5E;">*</span></span>
<span id="cb2-8">set_seed(<span class="dv" style="color: #AD0000;">42</span>)</span>
<span id="cb2-9"></span>
<span id="cb2-10"><span class="im" style="color: #00769E;">from</span> fastcore.parallel <span class="im" style="color: #00769E;">import</span> <span class="op" style="color: #5E5E5E;">*</span></span>
<span id="cb2-11">trn_path <span class="op" style="color: #5E5E5E;">=</span> path<span class="op" style="color: #5E5E5E;">/</span><span class="st" style="color: #20794D;">'train_images'</span></span></code></pre></div>
<p>:::</p>
<p>Here’s the CSV that Kaggle provides, showing the variety of rice contained in each image – we’ll make <code>image_id</code> the index of our data frame so that we can look up images directly to grab their variety:</p>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;"># load in our training dataset - set index as image_id column</span></span>
<span id="cb3-2">df <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(path<span class="op" style="color: #5E5E5E;">/</span><span class="st" style="color: #20794D;">'train.csv'</span>, index_col<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'image_id'</span>)</span>
<span id="cb3-3">df.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>label</th>
      <th>variety</th>
      <th>age</th>
    </tr>
    <tr>
      <th>image_id</th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>100330.jpg</th>
      <td>bacterial_leaf_blight</td>
      <td>ADT45</td>
      <td>45</td>
    </tr>
    <tr>
      <th>100365.jpg</th>
      <td>bacterial_leaf_blight</td>
      <td>ADT45</td>
      <td>45</td>
    </tr>
    <tr>
      <th>100382.jpg</th>
      <td>bacterial_leaf_blight</td>
      <td>ADT45</td>
      <td>45</td>
    </tr>
    <tr>
      <th>100632.jpg</th>
      <td>bacterial_leaf_blight</td>
      <td>ADT45</td>
      <td>45</td>
    </tr>
    <tr>
      <th>101918.jpg</th>
      <td>bacterial_leaf_blight</td>
      <td>ADT45</td>
      <td>45</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>Pandas uses the <code>loc</code> attribute to look up rows by index. Here’s how we can get the variety of image <code>100330.jpg</code>, for instance:</p>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">df.loc[<span class="st" style="color: #20794D;">'100330.jpg'</span>, <span class="st" style="color: #20794D;">'variety'</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>'ADT45'</code></pre>
</div>
</div>
<p>Our DataBlock will be using <code>get_image_files</code> to get the list of training images, which returns <code>Path</code> objects. Therefore, to look up an item to get its variety, we’ll need to pass its <code>name</code>. Here’s a function which does just that:</p>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;"># create a function that looks up an item and gets its variety</span></span>
<span id="cb6-2"><span class="kw" style="color: #003B4F;">def</span> get_variety(p): <span class="cf" style="color: #003B4F;">return</span> df.loc[p.name, <span class="st" style="color: #20794D;">'variety'</span>]</span></code></pre></div>
</div>
<p>We’re now ready to create our <code>DataLoaders</code>. To do this, we’ll use the <code>DataBlock</code> API, which is a flexible and convenient way to plug pieces of a data processing pipeline together:</p>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;"># Create our DataLoaders</span></span>
<span id="cb7-2">dls <span class="op" style="color: #5E5E5E;">=</span> DataBlock(</span>
<span id="cb7-3">    blocks<span class="op" style="color: #5E5E5E;">=</span>(ImageBlock,CategoryBlock,CategoryBlock), <span class="co" style="color: #5E5E5E;"># these are inputs and outputs - specify which on line below</span></span>
<span id="cb7-4">    n_inp<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, <span class="co" style="color: #5E5E5E;"># specify number of inputs included above - so first argument above is ImageBlock which is our inputs, and the 2 outputs are CategoryBlocks - disease and variety</span></span>
<span id="cb7-5">    get_items<span class="op" style="color: #5E5E5E;">=</span>get_image_files, <span class="co" style="color: #5E5E5E;"># grab input images</span></span>
<span id="cb7-6">    get_y <span class="op" style="color: #5E5E5E;">=</span> [parent_label,get_variety], <span class="co" style="color: #5E5E5E;"># grab labels - parent_label is disease, get_variety from function we defined earlier</span></span>
<span id="cb7-7">    splitter<span class="op" style="color: #5E5E5E;">=</span>RandomSplitter(<span class="fl" style="color: #AD0000;">0.2</span>, seed<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">42</span>), <span class="co" style="color: #5E5E5E;"># split training set 80% validation 20%</span></span>
<span id="cb7-8">    item_tfms<span class="op" style="color: #5E5E5E;">=</span>Resize(<span class="dv" style="color: #AD0000;">192</span>, method<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'squish'</span>), <span class="co" style="color: #5E5E5E;"># image augmentation</span></span>
<span id="cb7-9">    batch_tfms<span class="op" style="color: #5E5E5E;">=</span>aug_transforms(size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">128</span>, min_scale<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.75</span>) <span class="co" style="color: #5E5E5E;"># batch augmentation</span></span>
<span id="cb7-10">).dataloaders(trn_path)</span></code></pre></div>
</div>
<p>Here’s an explanation of each line:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">blocks<span class="op" style="color: #5E5E5E;">=</span>(ImageBlock,CategoryBlock,CategoryBlock),</span></code></pre></div>
<p>The <code>DataBlock</code> will create 3 things from each file: an image (the contents of the file), and 2 categorical variables (the disease and the variety).</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">n_inp<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>,</span></code></pre></div>
<p>There is <code>1</code> input (the image) – and therefore the other two variables (the two categories) are outputs.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">get_items<span class="op" style="color: #5E5E5E;">=</span>get_image_files,</span></code></pre></div>
<p>Use <code>get_image_files</code> to get a list of inputs.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">get_y <span class="op" style="color: #5E5E5E;">=</span> [parent_label,get_variety],</span></code></pre></div>
<p>To create the two outputs for each file, call two functions: <code>parent_label</code> (from fastai) and <code>get_variety</code> (defined above).</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">splitter<span class="op" style="color: #5E5E5E;">=</span>RandomSplitter(<span class="fl" style="color: #AD0000;">0.2</span>, seed<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">42</span>),</span></code></pre></div>
<p>Randomly split the input into 80% train and 20% validation sets.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">item_tfms<span class="op" style="color: #5E5E5E;">=</span>Resize(<span class="dv" style="color: #AD0000;">192</span>, method<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'squish'</span>),</span>
<span id="cb13-2">batch_tfms<span class="op" style="color: #5E5E5E;">=</span>aug_transforms(size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">128</span>, min_scale<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.75</span>)</span></code></pre></div>
<p>These are the same item and batch transforms we’ve used in previous notebooks.</p>
<p>Let’s take a look at part of a batch of this data:</p>
<div class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">dls.show_batch(max_n<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">6</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Multi_Label_Classification/Multi_label_classification_files/figure-html/cell-8-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>We can see that fastai has created both the image input and two categorical outputs that we requested!</p>
</section>
<section id="replicating-the-disease-model" class="level3">
<h3 class="anchored" data-anchor-id="replicating-the-disease-model">Replicating the disease model</h3>
<p>Now we’ll replicate the same disease model we’ve made before, but have it work with this new data.</p>
<p>The key difference is that our metrics and loss will now receive three things instead of two: the model outputs (i.e.&nbsp;the metric and loss function inputs), and the two targets (disease and variety). Therefore, we need to define slight variations of our metric (<code>error_rate</code>) and loss function (<code>cross_entropy</code>) to pass on just the <code>disease</code> target:</p>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;"># modify our error function to accomodate two targets</span></span>
<span id="cb15-2"><span class="kw" style="color: #003B4F;">def</span> disease_err(inp,disease,variety): <span class="cf" style="color: #003B4F;">return</span> error_rate(inp,disease)</span>
<span id="cb15-3"></span>
<span id="cb15-4"><span class="co" style="color: #5E5E5E;"># modify our loss function to accomodate two targets</span></span>
<span id="cb15-5"><span class="kw" style="color: #003B4F;">def</span> disease_loss(inp,disease,variety): <span class="cf" style="color: #003B4F;">return</span> F.cross_entropy(inp,disease) <span class="co" style="color: #5E5E5E;"># cross entropy function is what fastai picked for us when we just had a single outout category</span></span></code></pre></div>
</div>
</section>
<section id="cross-entropy" class="level3">
<h3 class="anchored" data-anchor-id="cross-entropy">Cross-Entropy</h3>
<p>Note that all of the loss functions in PyTorch have two versions. There is a <a href="https://pytorch.org/docs/stable/generated/torch.nn.CrossEntropyLoss.html">class</a> which you can <code>instantiate</code> passing in various tweaks, and there is also a version that is a <a href="https://pytorch.org/docs/stable/generated/torch.nn.functional.cross_entropy.html#torch.nn.functional.cross_entropy">function</a> but everyone, including PyTorch official docs refers to this by <code>F</code>.</p>
<p>Let’s take some time out to firm up on <a href="https://pytorch.org/docs/stable/generated/torch.nn.CrossEntropyLoss.html">Cross-Entropy</a>. To illustrate, let’s use a 5 class classification task where an image is classified as either a cat, dog, plane, fish or building.</p>
<p>The first step is:</p>
<ol type="1">
<li>convert raw outputs of our model (which at this stage are just numbers based on inital random weights applied) to <code>probabilities</code> using the <code>SOFTMAX</code> function.</li>
</ol>
<p>We do this by first taking our raw outputs(z) and calculating <code>e to the power of (z)</code> for each prediction <code>i</code>. We then convert to probabilities by pro-rating the results between 0 and 1 - to give us our probabilities which sum to 1 - as illustrated below:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Multi_Label_Classification/Multi_label_classification_files/figure-html/26bbd40b-7c78-4b0f-8a70-f6b17174475d.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Softmax.JPG</figcaption><p></p>
</figure>
</div>
<p>The second step is:</p>
<ol start="2" type="1">
<li>calculate Cross-Entropy loss</li>
</ol>
<p>For the purposes of this example, the rather terrifying looking equation below, can effectively be reduced to simply taking the log of <code>output probabilities</code>:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Multi_Label_Classification/Multi_label_classification_files/figure-html/971ad5f1-466f-4989-a55f-0b262b5b271b.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">X_Entropy.JPG</figcaption><p></p>
</figure>
</div>
<p>The mathematical image included above in my screenshotted spreadsheet are taken from <strong><a href="https://chris-said.io/2020/12/26/two-things-that-confused-me-about-cross-entropy/">Things that confused me about cross-entropy</a></strong> by <em><a href="https://chris-said.io/">Chris Said</a></em>.</p>
<p>We’re now ready to create our learner. There’s just one wrinkle to be aware of. Now that our <code>DataLoaders</code> is returning multiple targets, fastai doesn’t know how many outputs our model will need. Therefore we have to pass <code>n_out</code> when we create our <code>Learner</code> – we need <code>10</code> outputs, one for each possible disease:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="op" style="color: #5E5E5E;">!</span>pip3 install <span class="op" style="color: #5E5E5E;">--</span>upgrade fastai</span>
<span id="cb16-2"><span class="im" style="color: #00769E;">from</span> fastai.vision.<span class="bu" style="color: null;">all</span> <span class="im" style="color: #00769E;">import</span> vision_learner</span>
<span id="cb16-3"></span>
<span id="cb16-4"><span class="op" style="color: #5E5E5E;">!</span>pip install timm</span>
<span id="cb16-5"><span class="im" style="color: #00769E;">import</span> timm</span>
<span id="cb16-6"></span>
<span id="cb16-7"><span class="co" style="color: #5E5E5E;"># replicate our disease model</span></span>
<span id="cb16-8">arch <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'convnext_small_in22k'</span></span>
<span id="cb16-9">learn <span class="op" style="color: #5E5E5E;">=</span> vision_learner(dls, arch, loss_func<span class="op" style="color: #5E5E5E;">=</span>disease_loss, metrics<span class="op" style="color: #5E5E5E;">=</span>disease_err, n_out<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10</span>).to_fp16() <span class="co" style="color: #5E5E5E;"># note we now have to specify which loss_func to use and number of outputs n_out</span></span>
<span id="cb16-10">lr <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.01</span></span></code></pre></div>
</div>
<p>When we train this model we should get similar results to what we’ve seen with similar models before:</p>
<div class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;"># train our model</span></span>
<span id="cb17-2">learn.fine_tune(<span class="dv" style="color: #AD0000;">5</span>, lr)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th>epoch</th>
      <th>train_loss</th>
      <th>valid_loss</th>
      <th>disease_err</th>
      <th>time</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>1.234077</td>
      <td>0.826925</td>
      <td>0.270062</td>
      <td>03:03</td>
    </tr>
  </tbody>
</table>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th>epoch</th>
      <th>train_loss</th>
      <th>valid_loss</th>
      <th>disease_err</th>
      <th>time</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>0.603252</td>
      <td>0.421769</td>
      <td>0.135031</td>
      <td>05:13</td>
    </tr>
    <tr>
      <td>1</td>
      <td>0.470395</td>
      <td>0.415115</td>
      <td>0.125420</td>
      <td>05:12</td>
    </tr>
    <tr>
      <td>2</td>
      <td>0.303026</td>
      <td>0.212930</td>
      <td>0.071120</td>
      <td>05:13</td>
    </tr>
    <tr>
      <td>3</td>
      <td>0.179699</td>
      <td>0.146253</td>
      <td>0.042287</td>
      <td>05:13</td>
    </tr>
    <tr>
      <td>4</td>
      <td>0.142097</td>
      <td>0.138253</td>
      <td>0.041326</td>
      <td>05:13</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</section>
<section id="multi-label-classification" class="level3">
<h3 class="anchored" data-anchor-id="multi-label-classification">Multi-label classification</h3>
<p>In order to predict both the probability of each disease, and of each variety, we’ll now need the model to output a tensor of length 20, since there are 10 possible diseases, and 10 possible varieties. We can do this by setting <code>n_out=20</code>:</p>
<div class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;"># set model outputs to 20 - 10 diseases and 10 varieties</span></span>
<span id="cb18-2">learn <span class="op" style="color: #5E5E5E;">=</span> vision_learner(dls, arch, n_out<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">20</span>).to_fp16()</span></code></pre></div>
</div>
<p>We can define <code>disease_loss</code> just like we did previously, but with one important change: the input tensor is now length 20, not 10, so it doesn’t match the number of possible diseases. We can pick whatever part of the input we want to be used to predict disease. Let’s use the first 10 values:</p>
<div class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;"># we need to specify which part of inputs are for use in disease loss function </span></span>
<span id="cb19-2"><span class="kw" style="color: #003B4F;">def</span> disease_loss(inp,disease,variety): <span class="cf" style="color: #003B4F;">return</span> F.cross_entropy(inp[:,:<span class="dv" style="color: #AD0000;">10</span>],disease)</span></code></pre></div>
</div>
<p>That means we can do the same thing for predicting variety, but use the last 10 values of the input, and set the target to <code>variety</code> instead of <code>disease</code>:</p>
<div class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="co" style="color: #5E5E5E;"># we need to specify which part of inputs are for use in variety loss function </span></span>
<span id="cb20-2"><span class="kw" style="color: #003B4F;">def</span> variety_loss(inp,disease,variety): <span class="cf" style="color: #003B4F;">return</span> F.cross_entropy(inp[:,<span class="dv" style="color: #AD0000;">10</span>:],variety)</span></code></pre></div>
</div>
<p>Our overall loss will then be the sum of these two losses:</p>
<div class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="co" style="color: #5E5E5E;"># overall loss - just add together loss functions for disease and variety</span></span>
<span id="cb21-2"><span class="kw" style="color: #003B4F;">def</span> combine_loss(inp,disease,variety): <span class="cf" style="color: #003B4F;">return</span> disease_loss(inp,disease,variety)<span class="op" style="color: #5E5E5E;">+</span>variety_loss(inp,disease,variety)</span></code></pre></div>
</div>
<p>It would be useful to view the error rate for each of the outputs too, so let’s do the same thing for out metrics:</p>
<div class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="co" style="color: #5E5E5E;"># function to include the error_rate for disease</span></span>
<span id="cb22-2"><span class="kw" style="color: #003B4F;">def</span> disease_err(inp,disease,variety): <span class="cf" style="color: #003B4F;">return</span> error_rate(inp[:,:<span class="dv" style="color: #AD0000;">10</span>],disease)</span>
<span id="cb22-3"></span>
<span id="cb22-4"><span class="co" style="color: #5E5E5E;"># function to include the error_rate for disease</span></span>
<span id="cb22-5"><span class="kw" style="color: #003B4F;">def</span> variety_err(inp,disease,variety): <span class="cf" style="color: #003B4F;">return</span> error_rate(inp[:,<span class="dv" style="color: #AD0000;">10</span>:],variety)</span>
<span id="cb22-6"></span>
<span id="cb22-7"><span class="co" style="color: #5E5E5E;"># combine disease error and variety error within variable err_metrics</span></span>
<span id="cb22-8">err_metrics <span class="op" style="color: #5E5E5E;">=</span> (disease_err,variety_err)</span></code></pre></div>
</div>
<p>It’s useful to see the loss for each of the outputs too, so we’ll add those as metrics:</p>
<div class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="co" style="color: #5E5E5E;"># combine error metrics and loss metrics within variable all_metrics </span></span>
<span id="cb23-2">all_metrics <span class="op" style="color: #5E5E5E;">=</span> err_metrics<span class="op" style="color: #5E5E5E;">+</span>(disease_loss,variety_loss)</span></code></pre></div>
</div>
<p>We’re now ready to create and train our <code>Learner</code>:</p>
<div class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="co" style="color: #5E5E5E;"># pulling it all together into our Learner</span></span>
<span id="cb24-2">learn <span class="op" style="color: #5E5E5E;">=</span> vision_learner(dls, arch, loss_func<span class="op" style="color: #5E5E5E;">=</span>combine_loss, metrics<span class="op" style="color: #5E5E5E;">=</span>all_metrics, n_out<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">20</span>).to_fp16()</span></code></pre></div>
</div>
<div class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="co" style="color: #5E5E5E;"># train the model</span></span>
<span id="cb25-2">learn.fine_tune(<span class="dv" style="color: #AD0000;">5</span>, lr)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th>epoch</th>
      <th>train_loss</th>
      <th>valid_loss</th>
      <th>disease_err</th>
      <th>variety_err</th>
      <th>disease_loss</th>
      <th>variety_loss</th>
      <th>time</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>2.286528</td>
      <td>1.215683</td>
      <td>0.265257</td>
      <td>0.113407</td>
      <td>0.845696</td>
      <td>0.369987</td>
      <td>03:09</td>
    </tr>
  </tbody>
</table>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th>epoch</th>
      <th>train_loss</th>
      <th>valid_loss</th>
      <th>disease_err</th>
      <th>variety_err</th>
      <th>disease_loss</th>
      <th>variety_loss</th>
      <th>time</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>1.015679</td>
      <td>0.607585</td>
      <td>0.133109</td>
      <td>0.062951</td>
      <td>0.421834</td>
      <td>0.185751</td>
      <td>05:13</td>
    </tr>
    <tr>
      <td>1</td>
      <td>0.745607</td>
      <td>0.412463</td>
      <td>0.087938</td>
      <td>0.043729</td>
      <td>0.286902</td>
      <td>0.125561</td>
      <td>05:14</td>
    </tr>
    <tr>
      <td>2</td>
      <td>0.483214</td>
      <td>0.263229</td>
      <td>0.058626</td>
      <td>0.025949</td>
      <td>0.179259</td>
      <td>0.083970</td>
      <td>05:14</td>
    </tr>
    <tr>
      <td>3</td>
      <td>0.282286</td>
      <td>0.204188</td>
      <td>0.047093</td>
      <td>0.017299</td>
      <td>0.154198</td>
      <td>0.049990</td>
      <td>05:13</td>
    </tr>
    <tr>
      <td>4</td>
      <td>0.202148</td>
      <td>0.174338</td>
      <td>0.043248</td>
      <td>0.013455</td>
      <td>0.133468</td>
      <td>0.040870</td>
      <td>05:13</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</section>
<section id="key-takeaways" class="level3">
<h3 class="anchored" data-anchor-id="key-takeaways">Key takeaways</h3>
<p>So, is this useful?</p>
<p>Well… if we actually want a model that predicts multiple things, then yes, definitely! But as to whether it’s going to help us better predict rice disease, that is unknown. I haven’t come across any research that tackles this important question: when can a multi-target model improve the accuracy of the individual targets compared to a single target model? (That doesn’t mean it doesn’t exist of course – perhaps it does and I haven’t found it yet…)</p>
<p>Jeremy found that in previous projects there are cases where improvements to single targets can be made by using a multi-target model. It’ll be most useful when we’re having problems with overfitting and so try doing this with more epochs.</p>


</section>

 ]]></description>
  <category>TIL</category>
  <category>Multi-Label</category>
  <category>Cross-Entropy</category>
  <category>fastai</category>
  <guid>https://stephen137.github.io/posts/Multi_Label_Classification/Multi_label_classification.html</guid>
  <pubDate>Wed, 11 Jan 2023 23:00:00 GMT</pubDate>
  <media:content url="https://stephen137.github.io/posts/Multi_Label_Classification/cross_entropy.png" medium="image" type="image/png" height="90" width="144"/>
</item>
<item>
  <title>Scaling up</title>
  <dc:creator>Stephen Barrie</dc:creator>
  <link>https://stephen137.github.io/posts/Scaling up/Scaling_up.html</link>
  <description><![CDATA[ 




<p>This is my follow up to the first part of <a href="https://www.youtube.com/watch?v=p4ZZq0736Po"><strong><em>Lesson 7: Practical Deep Learning for Coders 2022</em></strong></a> in which Jeremy introduces a technique known as <code>Gradient Accumulation</code> which allows us to train larger models, despite apparent GPU constraints.</p>
<section id="overview" class="level3">
<h3 class="anchored" data-anchor-id="overview">Overview</h3>
<p>In this analysis our goal will be to train an ensemble of larger models with larger inputs. The challenge when training such models is generally GPU memory. Kaggle GPUs have 16280MiB of memory available, as at the time of writing. I like to try out my notebooks on my home PC, then upload them – but we still need them to run OK on Kaggle (especially if it’s a code competition, where this is required). Just because it runs OK at home doesn’t mean it’ll run OK on Kaggle.</p>
<p>I’m using PaperSpace (I recently upgraded to a ‘Pro’ subscription but capacity for GPUs is still quite limited.</p>
<p>It’s really helpful to be able to quickly try a few models and image sizes and find out what will run successfully. To make this quick, we can just grab a small subset of the data for running short epochs – the memory use will still be the same, but it’ll be much faster.</p>
<p>One easy way to do this is to simply pick a category with few files in it. Here’s our options:</p>
<p>First we’ll repeat the steps we used last time to access the data and ensure all the latest libraries are installed, and we’ll also grab the files we’ll need for the test set:</p>
<p>::: {.cell _kg_hide-input=‘true’ _kg_hide-output=‘true’ tags=‘[]’}</p>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># install fastkaggle if not available</span></span>
<span id="cb1-2"><span class="cf" style="color: #003B4F;">try</span>: <span class="im" style="color: #00769E;">import</span> fastkaggle</span>
<span id="cb1-3"><span class="cf" style="color: #003B4F;">except</span> ModuleNotFoundError:</span>
<span id="cb1-4">    <span class="op" style="color: #5E5E5E;">!</span>pip install <span class="op" style="color: #5E5E5E;">-</span>Uq fastkaggle</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="im" style="color: #00769E;">from</span> fastkaggle <span class="im" style="color: #00769E;">import</span> <span class="op" style="color: #5E5E5E;">*</span></span>
<span id="cb1-7"><span class="op" style="color: #5E5E5E;">!</span>pip install timm</span>
<span id="cb1-8"><span class="im" style="color: #00769E;">import</span> timm</span></code></pre></div>
<p>:::</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="op" style="color: #5E5E5E;">!</span>pip install <span class="op" style="color: #5E5E5E;">-</span>q kaggle</span>
<span id="cb2-2"></span>
<span id="cb2-3">comp <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'paddy-disease-classification'</span></span>
<span id="cb2-4">path <span class="op" style="color: #5E5E5E;">=</span> setup_comp(comp, install<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'fastai "timm&gt;=0.6.2.dev0"'</span>)</span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="im" style="color: #00769E;">from</span> fastai.vision.<span class="bu" style="color: null;">all</span> <span class="im" style="color: #00769E;">import</span> <span class="op" style="color: #5E5E5E;">*</span></span>
<span id="cb2-7">set_seed(<span class="dv" style="color: #AD0000;">42</span>)</span>
<span id="cb2-8"></span>
<span id="cb2-9">tst_files <span class="op" style="color: #5E5E5E;">=</span> get_image_files(path<span class="op" style="color: #5E5E5E;">/</span><span class="st" style="color: #20794D;">'test_images'</span>).<span class="bu" style="color: null;">sorted</span>()</span></code></pre></div>
</div>
<div class="cell" data-tags="[]" data-execution_count="6">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;"># load dataset</span></span>
<span id="cb3-2">df <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(path<span class="op" style="color: #5E5E5E;">/</span><span class="st" style="color: #20794D;">'train.csv'</span>)</span>
<span id="cb3-3">df.label.value_counts()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>normal                      1764
blast                       1738
hispa                       1594
dead_heart                  1442
tungro                      1088
brown_spot                   965
downy_mildew                 620
bacterial_leaf_blight        479
bacterial_leaf_streak        380
bacterial_panicle_blight     337
Name: label, dtype: int64</code></pre>
</div>
</div>
</section>
<section id="memory-and-gradient-accumulation" class="level3">
<h3 class="anchored" data-anchor-id="memory-and-gradient-accumulation">Memory and gradient accumulation</h3>
<p><strong><em>Gradient accumulation</em></strong> refers to a very simple trick: rather than updating the model weights after every batch based on that batch’s gradients, instead keep <em>accumulating</em> (adding up) the gradients for a few batches, and them update the model weights with those accumulated gradients. In fastai, the parameter you pass to <code>GradientAccumulation</code> defines how many batches of gradients are accumulated. Since we’re adding up the gradients over <code>accum</code> batches, we therefore need to divide the batch size by that same number. The resulting training loop is nearly mathematically identical to using the original batch size, but the amount of memory used is the same as using a batch size <code>accum</code> times smaller!</p>
<p>For instance, here’s a basic example of a single epoch of a training loop without gradient accumulation:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="cf" style="color: #003B4F;">for</span> x,y <span class="kw" style="color: #003B4F;">in</span> dl:</span>
<span id="cb5-2">    calc_loss(coeffs, x, y).backward()</span>
<span id="cb5-3">    coeffs.data.sub_(coeffs.grad <span class="op" style="color: #5E5E5E;">*</span> lr)</span>
<span id="cb5-4">    coeffs.grad.zero_()</span></code></pre></div>
<p>Here’s the same thing, but with gradient accumulation added (assuming a target effective batch size of 64):</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">count <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span>            <span class="co" style="color: #5E5E5E;"># track count of items seen since last weight update</span></span>
<span id="cb6-2"><span class="cf" style="color: #003B4F;">for</span> x,y <span class="kw" style="color: #003B4F;">in</span> dl:</span>
<span id="cb6-3">    count <span class="op" style="color: #5E5E5E;">+=</span> <span class="bu" style="color: null;">len</span>(x)  <span class="co" style="color: #5E5E5E;"># update count based on this minibatch size</span></span>
<span id="cb6-4">    calc_loss(coeffs, x, y).backward()</span>
<span id="cb6-5">    <span class="cf" style="color: #003B4F;">if</span> count<span class="op" style="color: #5E5E5E;">&gt;</span><span class="dv" style="color: #AD0000;">64</span>:     <span class="co" style="color: #5E5E5E;"># count is greater than accumulation target, so do weight update</span></span>
<span id="cb6-6">        coeffs.data.sub_(coeffs.grad <span class="op" style="color: #5E5E5E;">*</span> lr)</span>
<span id="cb6-7">        coeffs.grad.zero_()</span>
<span id="cb6-8">        count<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>      <span class="co" style="color: #5E5E5E;"># reset count</span></span></code></pre></div>
<p>The full implementation in fastai is only a few lines of code – here’s the <a href="https://github.com/fastai/fastai/blob/master/fastai/callback/training.py#L26">source code</a>. To see the impact of gradient accumulation, consider this small model:</p>
<p>Let’s use <em>bacterial_panicle_blight</em> since it’s the smallest:</p>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;"># create a susbset to include only the smallest disease dataset </span></span>
<span id="cb7-2"><span class="co" style="color: #5E5E5E;"># we don't really care about this model, we just want to know how much memory it uses</span></span>
<span id="cb7-3">trn_path <span class="op" style="color: #5E5E5E;">=</span> path<span class="op" style="color: #5E5E5E;">/</span><span class="st" style="color: #20794D;">'train_images'</span><span class="op" style="color: #5E5E5E;">/</span><span class="st" style="color: #20794D;">'bacterial_panicle_blight'</span></span></code></pre></div>
</div>
<p>Now we’ll set up a <code>train</code> function which is very similar to the steps we used for training in the last notebook. But there’s a few significant differences…</p>
<p>The first is that I’m using a <code>finetune</code> argument to pick whether we are going to run the <code>fine_tune()</code> method, or the <code>fit_one_cycle()</code> method – the latter is faster since it doesn’t do an initial fine-tuning of the head. When we fine tune in this function I also have it calculate and return the TTA predictions on the test set, since later on we’ll be ensembling the TTA results of a number of models. Note also that we no longer have <code>seed=42</code> in the <code>ImageDataLoaders</code> line – that means we’ll have different training and validation sets each time we call this. That’s what we’ll want for ensembling, since it means that each model will use slightly different data.</p>
<p>The more important change is that I’ve added an <code>accum</code> argument to implement <em>gradient accumulation</em>. As you’ll see in the code below, this does two things:</p>
<ol type="1">
<li>Divide the batch size by <code>accum</code></li>
<li>Add the <code>GradientAccumulation</code> callback, passing in <code>accum</code>.</li>
</ol>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;"># create a function to train a model which includes a gradient accumulation (accum) argument, when set to 1 no impact on batch size</span></span>
<span id="cb8-2"><span class="co" style="color: #5E5E5E;"># note no seed set so different training &amp; validation sets each time we call it</span></span>
<span id="cb8-3"><span class="kw" style="color: #003B4F;">def</span> train(arch, size, item<span class="op" style="color: #5E5E5E;">=</span>Resize(<span class="dv" style="color: #AD0000;">480</span>, method<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'squish'</span>), accum<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, finetune<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, epochs<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">12</span>):</span>
<span id="cb8-4">    dls <span class="op" style="color: #5E5E5E;">=</span> ImageDataLoaders.from_folder(trn_path, valid_pct<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.2</span>, item_tfms<span class="op" style="color: #5E5E5E;">=</span>item,</span>
<span id="cb8-5">        batch_tfms<span class="op" style="color: #5E5E5E;">=</span>aug_transforms(size<span class="op" style="color: #5E5E5E;">=</span>size, min_scale<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.75</span>), bs<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">64</span><span class="op" style="color: #5E5E5E;">//</span>accum)</span>
<span id="cb8-6">    cbs <span class="op" style="color: #5E5E5E;">=</span> GradientAccumulation(<span class="dv" style="color: #AD0000;">64</span>) <span class="cf" style="color: #003B4F;">if</span> accum <span class="cf" style="color: #003B4F;">else</span> []</span>
<span id="cb8-7">    learn <span class="op" style="color: #5E5E5E;">=</span> vision_learner(dls, arch, metrics<span class="op" style="color: #5E5E5E;">=</span>error_rate, cbs<span class="op" style="color: #5E5E5E;">=</span>cbs).to_fp16()</span>
<span id="cb8-8">    <span class="cf" style="color: #003B4F;">if</span> finetune:</span>
<span id="cb8-9">        learn.fine_tune(epochs, <span class="fl" style="color: #AD0000;">0.01</span>)</span>
<span id="cb8-10">        <span class="cf" style="color: #003B4F;">return</span> learn.tta(dl<span class="op" style="color: #5E5E5E;">=</span>dls.test_dl(tst_files))</span>
<span id="cb8-11">    <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb8-12">        learn.unfreeze()</span>
<span id="cb8-13">        learn.fit_one_cycle(epochs, <span class="fl" style="color: #AD0000;">0.01</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;"># try out our new training function on a small model</span></span>
<span id="cb9-2">train(<span class="st" style="color: #20794D;">'convnext_small_in22k'</span>, <span class="dv" style="color: #AD0000;">128</span>, epochs<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, accum<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, finetune<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th>epoch</th>
      <th>train_loss</th>
      <th>valid_loss</th>
      <th>error_rate</th>
      <th>time</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>00:13</td>
    </tr>
  </tbody>
</table>
</div>
</div>
<p>Let’s create a function to find out how much memory it used, and also to then clear out the memory for the next run:</p>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="im" style="color: #00769E;">import</span> gc</span>
<span id="cb10-2"><span class="co" style="color: #5E5E5E;"># create a function that tells us how much memory model uses</span></span>
<span id="cb10-3"><span class="kw" style="color: #003B4F;">def</span> report_gpu():</span>
<span id="cb10-4">    <span class="bu" style="color: null;">print</span>(torch.cuda.list_gpu_processes())</span>
<span id="cb10-5">    gc.collect()</span>
<span id="cb10-6">    torch.cuda.empty_cache() <span class="co" style="color: #5E5E5E;"># clear out memory for next run</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="op" style="color: #5E5E5E;">!</span>pip install pynvml</span>
<span id="cb11-2">report_gpu()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Requirement already satisfied: pynvml in /usr/local/lib/python3.9/dist-packages (11.4.1)
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv
GPU:0
process      26004 uses     3768.625 MB GPU memory</code></pre>
</div>
</div>
<p>So with <code>accum=1</code> the GPU used around 3.8GB RAM. Let’s try <code>accum=2</code>:</p>
<div class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;"># try out our new training function on a model</span></span>
<span id="cb13-2">train(<span class="st" style="color: #20794D;">'convnext_small_in22k'</span>, <span class="dv" style="color: #AD0000;">128</span>, epochs<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, accum<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>, finetune<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span>
<span id="cb13-3">report_gpu()</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th>epoch</th>
      <th>train_loss</th>
      <th>valid_loss</th>
      <th>error_rate</th>
      <th>time</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>00:12</td>
    </tr>
  </tbody>
</table>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>GPU:0
process      26004 uses     2750.625 MB GPU memory</code></pre>
</div>
</div>
<p>As you see, the RAM usage has now gone down to 2.75GB. It’s not halved since there’s other overhead involved (for larger models this overhead is likely to be relatively lower).</p>
<p>Let’s try <code>4</code>:</p>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;"># try out our new training function on a model</span></span>
<span id="cb15-2">train(<span class="st" style="color: #20794D;">'convnext_small_in22k'</span>, <span class="dv" style="color: #AD0000;">128</span>, epochs<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, accum<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">4</span>, finetune<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span>
<span id="cb15-3">report_gpu()</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th>epoch</th>
      <th>train_loss</th>
      <th>valid_loss</th>
      <th>error_rate</th>
      <th>time</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>00:12</td>
    </tr>
  </tbody>
</table>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>GPU:0
process      26004 uses     2216.625 MB GPU memory</code></pre>
</div>
</div>
<p>The memory use is even lower!</p>
</section>
<section id="checking-memory-use" class="level3">
<h3 class="anchored" data-anchor-id="checking-memory-use">Checking memory use</h3>
<p>We’ll now check the memory use for each of the architectures and sizes we’ll be training later, to ensure they all fit in 8GB RAM. For each of these, I tried <code>accum=1</code> first, and then doubled it any time the resulting memory use was over 8GB. As it turns out, <code>accum=32</code> covered most of what I needed. <code>swin_large_patch4_window7_224</code> and <code>vit_large_patch16_224</code> were too large.</p>
<p>First, <code>convnext_large</code>:</p>
<div class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;"># number 1</span></span>
<span id="cb17-2">train(<span class="st" style="color: #20794D;">'convnext_large_in22k'</span>, <span class="dv" style="color: #AD0000;">224</span>, epochs<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, accum<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">16</span>, finetune<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span>
<span id="cb17-3">report_gpu()</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th>epoch</th>
      <th>train_loss</th>
      <th>valid_loss</th>
      <th>error_rate</th>
      <th>time</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>01:55</td>
    </tr>
  </tbody>
</table>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>GPU:0
process      26004 uses     5168.625 MB GPU memory</code></pre>
</div>
</div>
<div class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;"># number 2</span></span>
<span id="cb19-2">train(<span class="st" style="color: #20794D;">'convnext_large_in22k'</span>, (<span class="dv" style="color: #AD0000;">320</span>,<span class="dv" style="color: #AD0000;">240</span>), epochs<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, accum<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">32</span>, finetune<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span>
<span id="cb19-3">report_gpu()</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th>epoch</th>
      <th>train_loss</th>
      <th>valid_loss</th>
      <th>error_rate</th>
      <th>time</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>03:37</td>
    </tr>
  </tbody>
</table>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>GPU:0
process      26004 uses     4996.625 MB GPU memory</code></pre>
</div>
</div>
<p>Here’s <code>vit_large</code>. Not able to run this one, even when setting accum to 64!</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="co" style="color: #5E5E5E;"># number 3</span></span>
<span id="cb21-2">train(<span class="st" style="color: #20794D;">'vit_large_patch16_224'</span>, <span class="dv" style="color: #AD0000;">224</span>, epochs<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, accum<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">64</span>, finetune<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span>
<span id="cb21-3">report_gpu()</span></code></pre></div>
</div>
<p>Then finally our <code>swinv2</code> and <code>swin</code> models:</p>
<div class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="co" style="color: #5E5E5E;"># number 4</span></span>
<span id="cb22-2">train(<span class="st" style="color: #20794D;">'swinv2_large_window12_192_22k'</span>, <span class="dv" style="color: #AD0000;">192</span>, epochs<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, accum<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">32</span>, finetune<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span>
<span id="cb22-3">report_gpu()</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th>epoch</th>
      <th>train_loss</th>
      <th>valid_loss</th>
      <th>error_rate</th>
      <th>time</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>01:03</td>
    </tr>
  </tbody>
</table>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>GPU:0
process      26004 uses     7780.625 MB GPU memory</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="co" style="color: #5E5E5E;">#number 5</span></span>
<span id="cb24-2">train(<span class="st" style="color: #20794D;">'swin_large_patch4_window7_224'</span>, <span class="dv" style="color: #AD0000;">224</span>, epochs<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>, accum<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">64</span>, finetune<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span>
<span id="cb24-3">report_gpu()</span></code></pre></div>
</div>
</section>
<section id="running-the-models" class="level3">
<h3 class="anchored" data-anchor-id="running-the-models">Running the models</h3>
<p>In my <a href="https://stephen137.github.io/posts/Kaggle_Comp/Paddy_Doctor.html">previous blog</a>, we tried a bunch of different architectures and preprocessing approaches on small models, and picked a few which looked good. We can use a <code>dict</code> to list the preprocessing approaches we’ll use for each architecture of interest based on that analysis:</p>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">res <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">640</span>,<span class="dv" style="color: #AD0000;">480</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="co" style="color: #5E5E5E;"># create a dictionary of model preprocessing</span></span>
<span id="cb26-2">models <span class="op" style="color: #5E5E5E;">=</span> {</span>
<span id="cb26-3">    <span class="st" style="color: #20794D;">'convnext_large_in22k'</span>: {</span>
<span id="cb26-4">        (Resize(res), (<span class="dv" style="color: #AD0000;">320</span>,<span class="dv" style="color: #AD0000;">224</span>)),</span>
<span id="cb26-5">    }, <span class="st" style="color: #20794D;">'vit_large_patch16_224'</span>: {</span>
<span id="cb26-6">        (Resize(<span class="dv" style="color: #AD0000;">480</span>, method<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'squish'</span>), <span class="dv" style="color: #AD0000;">224</span>),</span>
<span id="cb26-7">        (Resize(res), <span class="dv" style="color: #AD0000;">224</span>),</span>
<span id="cb26-8">    }, <span class="st" style="color: #20794D;">'swinv2_large_window12_192_22k'</span>: {</span>
<span id="cb26-9">        (Resize(<span class="dv" style="color: #AD0000;">480</span>, method<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'squish'</span>), <span class="dv" style="color: #AD0000;">192</span>),</span>
<span id="cb26-10">        (Resize(res), <span class="dv" style="color: #AD0000;">192</span>),</span>
<span id="cb26-11">    }, <span class="st" style="color: #20794D;">'swin_large_patch4_window7_224'</span>: {</span>
<span id="cb26-12">        (Resize(res), <span class="dv" style="color: #AD0000;">224</span>),</span>
<span id="cb26-13">    }</span>
<span id="cb26-14">}</span></code></pre></div>
</div>
<p>We’ll need to switch to using the full training set of course!</p>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="co" style="color: #5E5E5E;"># set training set</span></span>
<span id="cb27-2">trn_path <span class="op" style="color: #5E5E5E;">=</span> path<span class="op" style="color: #5E5E5E;">/</span><span class="st" style="color: #20794D;">'train_images'</span></span></code></pre></div>
</div>
<p>Now we’re ready to train all these models. Remember that each is using a different training and validation set, so the results aren’t directly comparable.</p>
<p>We’ll append each set of TTA predictions on the test set into a list called <code>tta_res</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="co" style="color: #5E5E5E;"># display for each model in our above dictionary</span></span>
<span id="cb28-2"><span class="co" style="color: #5E5E5E;"># architecture, data augmentations, loss and error rates</span></span>
<span id="cb28-3">tta_res <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb28-4"></span>
<span id="cb28-5"><span class="cf" style="color: #003B4F;">for</span> arch,details <span class="kw" style="color: #003B4F;">in</span> models.items():</span>
<span id="cb28-6">    <span class="cf" style="color: #003B4F;">for</span> item,size <span class="kw" style="color: #003B4F;">in</span> details:</span>
<span id="cb28-7">        <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'---'</span>,arch)</span>
<span id="cb28-8">        <span class="bu" style="color: null;">print</span>(size)</span>
<span id="cb28-9">        <span class="bu" style="color: null;">print</span>(item.name)</span>
<span id="cb28-10">        tta_res.append(train(arch, size, item<span class="op" style="color: #5E5E5E;">=</span>item, accum<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">32</span>)) <span class="co" style="color: #5E5E5E;">#, epochs=1))</span></span>
<span id="cb28-11">        gc.collect()</span>
<span id="cb28-12">        torch.cuda.empty_cache()</span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Scaling up/Scaling_up_files/figure-html/8bd4b82a-65f4-4cf8-a7ba-527bb2b5295d.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">convnext_large_in22k.JPG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Scaling up/Scaling_up_files/figure-html/12d7011c-ad59-4c87-aa25-66e038ffed48.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">vit_large_patch16_224.JPG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Scaling up/Scaling_up_files/figure-html/84da7335-df83-491c-9439-acc3c6563593.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">vit_large_patch16_224_square.JPG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Scaling up/Scaling_up_files/figure-html/a28219f9-3c43-4f6f-8499-cb0f72c43baf.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">swinv2_large_window12_192_22k_square.JPG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Scaling up/Scaling_up_files/figure-html/81c93fca-4893-41dc-a384-9c1beeaf3873.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">swinv2_large_window12_192_22k.JPG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Scaling up/Scaling_up_files/figure-html/d4255ada-ecd2-498e-8c88-cd48eee29888.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">swin_large_patch4_window7_224.JPG</figcaption><p></p>
</figure>
</div>
<p>Since this has taken quite a while to run, let’s save the results, just in case something goes wrong!</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="co" style="color: #5E5E5E;"># pickle the results for future use</span></span>
<span id="cb29-2">save_pickle(<span class="st" style="color: #20794D;">'tta_res.pkl'</span>, tta_res)</span></code></pre></div>
</div>
</section>
<section id="ensembling" class="level3">
<h3 class="anchored" data-anchor-id="ensembling">Ensembling</h3>
<p>As you can see from the above, each of the individual models score well, but an <em>ensemble</em> (which simply refers to a model which is itself the result of combining a number of other models) can produce even better results. The simplest way to do ensembling is to take the <code>average</code> of the predictions of each model:</p>
<p><code>Learner.tta</code> returns predictions and targets for each rows. We just want the predictions:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">tta_prs <span class="op" style="color: #5E5E5E;">=</span> first(<span class="bu" style="color: null;">zip</span>(<span class="op" style="color: #5E5E5E;">*</span>tta_res))</span></code></pre></div>
</div>
<p>Originally I just used the above predictions, but later I realised in my experiments on smaller models that <code>vit</code> was a bit better than everything else, so I decided to give those double the weight in my ensemble. I did that by simply adding to the list a second time (we could also do this by using a weighted average):</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">tta_prs <span class="op" style="color: #5E5E5E;">+=</span> tta_prs[<span class="dv" style="color: #AD0000;">1</span>:<span class="dv" style="color: #AD0000;">3</span>]</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="co" style="color: #5E5E5E;"># calculate average predictions of our ensemble of models</span></span>
<span id="cb32-2">avg_pr <span class="op" style="color: #5E5E5E;">=</span> torch.stack(tta_prs).mean(<span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb32-3">avg_pr.shape</span></code></pre></div>
</div>
<p>torch.Size([3469, 10])</p>
<p>That’s all that’s needed to create an ensemble! Finally, we copy the steps we used in the last notebook to create a submission file:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">dls <span class="op" style="color: #5E5E5E;">=</span> ImageDataLoaders.from_folder(trn_path, valid_pct<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.2</span>, item_tfms<span class="op" style="color: #5E5E5E;">=</span>Resize(<span class="dv" style="color: #AD0000;">480</span>, method<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'squish'</span>),</span>
<span id="cb33-2">    batch_tfms<span class="op" style="color: #5E5E5E;">=</span>aug_transforms(size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">224</span>, min_scale<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.75</span>))</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">idxs <span class="op" style="color: #5E5E5E;">=</span> avg_pr.argmax(dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb34-2">vocab <span class="op" style="color: #5E5E5E;">=</span> np.array(dls.vocab)</span>
<span id="cb34-3">ss <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(path<span class="op" style="color: #5E5E5E;">/</span><span class="st" style="color: #20794D;">'sample_submission.csv'</span>)</span>
<span id="cb34-4">ss[<span class="st" style="color: #20794D;">'label'</span>] <span class="op" style="color: #5E5E5E;">=</span> vocab[idxs]</span>
<span id="cb34-5">ss.to_csv(<span class="st" style="color: #20794D;">'subm.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</div>
</section>
<section id="submit-to-kaggle" class="level3">
<h3 class="anchored" data-anchor-id="submit-to-kaggle">Submit to Kaggle</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1"><span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">not</span> iskaggle:</span>
<span id="cb35-2">    <span class="im" style="color: #00769E;">from</span> kaggle <span class="im" style="color: #00769E;">import</span> api</span>
<span id="cb35-3">    api.competition_submit_cli(<span class="st" style="color: #20794D;">'subm.csv'</span>, <span class="st" style="color: #20794D;">'part 3 v2'</span>, comp)</span></code></pre></div>
</div>
<p>That’s it – at the time of creating this analysis, that got easily to the top of the leaderboard! Here are the four submissions Jeremy entered, each of which was better than the last, and each of which was ranked #1:</p>
<p><img src="https://stephen137.github.io/posts/Scaling up/https:/user-images.githubusercontent.com/346999/174503966-65005151-8f28-4f8b-b3c3-212cf74014f1.png" width="400"></p>
<p><em>Edit: Actually the one that got to the top of the leaderboard timed out when Jeremy ran it on Kaggle Notebooks, so he had to remove four of the runs from the ensemble. There’s only a small difference in accuracy however.</em></p>
<p>Going from bottom to top, here’s what each one was:</p>
<ol type="1">
<li><code>convnext_small</code> trained for 12 epochs, with TTA</li>
<li><code>convnext_large</code> trained the same way</li>
<li>The ensemble in this notebook, with <code>vit</code> models not over-weighted</li>
<li>The ensemble in this notebook, with <code>vit</code> models over-weighted.</li>
</ol>
</section>
<section id="conclusion" class="level3">
<h3 class="anchored" data-anchor-id="conclusion">Conclusion</h3>
<blockquote class="blockquote">
<p>RuntimeError: CUDA error: out of memory</p>
</blockquote>
<p>We all know how frustrating the above error is, and the inevitable lament - “if only I had a better GPU spec :(”</p>
<p>The key takeaway from this blog is to remain calm when faced with the above error, and resist the temptation to go and splash out on an expensive new GPU card! It is often possible to scale up and train large models using a technique called <code>gradient accumulation</code> (despite apparent GPU constraints). We can then use a further technique called <code>ensembling</code> which involvees averaging the results of models with different architectures, and varying performance, to achieve an overall performance which is better than any of the models on their own.</p>


</section>

 ]]></description>
  <category>Gradient Accumulation</category>
  <category>fastai</category>
  <category>Ensembling</category>
  <guid>https://stephen137.github.io/posts/Scaling up/Scaling_up.html</guid>
  <pubDate>Tue, 10 Jan 2023 23:00:00 GMT</pubDate>
  <media:content url="https://stephen137.github.io/posts/Scaling up/scale_up.png" medium="image" type="image/png" height="111" width="144"/>
</item>
<item>
  <title>Paddy Doctor: Paddy Disease Classification</title>
  <dc:creator>Stephen Barrie</dc:creator>
  <link>https://stephen137.github.io/posts/Paddy_Doctor/Paddy_Doctor.html</link>
  <description><![CDATA[ 




<p>This is my follow up to the second part of <a href="https://www.youtube.com/watch?v=AdhG64NF76E"><strong><em>Lesson 6: Practical Deep Learning for Coders 2022</em></strong></a> in which Jeremy walks us through his approach to obtaining the top score on the Paddy Doctor: Paddy Disease Classification Kaggle competition.</p>
<section id="problem-statement---identify-the-type-of-disease-present-in-paddy-leaf-images" class="level3">
<h3 class="anchored" data-anchor-id="problem-statement---identify-the-type-of-disease-present-in-paddy-leaf-images">Problem Statement - identify the type of disease present in paddy leaf images</h3>
<p>Rice (Oryza sativa) is one of the staple foods worldwide. Paddy, the raw grain before removal of husk, is cultivated in tropical climates, mainly in Asian countries. Paddy cultivation requires consistent supervision because several diseases and pests might affect the paddy crops, leading to up to 70% yield loss. Expert supervision is usually necessary to mitigate these diseases and prevent crop loss. With the limited availability of crop protection experts, manual disease diagnosis is tedious and expensive. Thus, it is increasingly important to automate the disease identification process by leveraging computer vision-based techniques that achieved promising results in various domains.</p>
</section>
<section id="objective" class="level3">
<h3 class="anchored" data-anchor-id="objective">Objective</h3>
<p>The main objective of the competition is to develop a machine or deep learning-based model to classify the given paddy leaf images accurately. A training dataset of 10,407 (75%) labeled images across ten classes (nine disease categories and normal leaf) is provided. Moreover, also provided is additional metadata for each image, such as the paddy variety and age. Our task is to classify each paddy image in the given test dataset of 3,469 (25%) images into one of the nine disease categories or a normal leaf.</p>
</section>
<section id="approach" class="level3">
<h3 class="anchored" data-anchor-id="approach">Approach</h3>
<p>In <a href="https://www.kaggle.com/code/jhoward/iterate-like-a-grandmaster">Iterate Like a Grandmaster</a> Jeremy Howard explained that when working on a Kaggle project:</p>
<blockquote class="blockquote">
<p>…the focus generally should be two things:</p>
<ol type="1">
<li>Creating an effective validation set</li>
<li>Iterating rapidly to find changes which improve results on the validation set</li>
</ol>
</blockquote>
<p>Here we’re going to go further, showing the process he used to tackle the <a href="https://www.kaggle.com/competitions/paddy-disease-classification">Paddy Doctor</a> competition, leading to four submissions in a row which all were (at the time of submission) in 1st place, each one more accurate than the last. You might be surprised to discover that the process of doing this was nearly entirely mechanistic and didn’t involve any consideration of the actual data or evaluation details at all.</p>
<p>This notebook shows every step of the process. At the start of this notebook we’ll make a basic submission; by the end we’ll see how he got to the top of the table!:</p>
<p><img src="https://stephen137.github.io/posts/Paddy_Doctor/https:/user-images.githubusercontent.com/346999/174389920-60d67ead-0f36-41d0-9649-e23b08720c8a.png" width="600"></p>
<p>As a special extra, also included is a selection of “walkthru” videos that were prepared for the new fast.ai course, and cover this competition:</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=-Scs4gbwWXg">Walkthru 8</a></li>
<li><a href="https://www.youtube.com/watch?v=EK5wJRzffas">Walkthru 9</a></li>
<li><a href="https://youtu.be/zhBRynq9Yvo">Walkthru 10</a></li>
<li><a href="https://youtu.be/j-zMF2VirA8">Walkthru 11</a></li>
<li><a href="https://youtu.be/GuCkpjXHdTc">Walkthru 12</a></li>
<li><a href="https://youtu.be/INrkhUGCXHg">Walkthru 13</a></li>
</ul>
</section>
<section id="getting-set-up" class="level3">
<h3 class="anchored" data-anchor-id="getting-set-up">Getting set up</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># install fastkaggle if not available</span></span>
<span id="cb1-2"><span class="cf" style="color: #003B4F;">try</span>: <span class="im" style="color: #00769E;">import</span> fastkaggle</span>
<span id="cb1-3"><span class="cf" style="color: #003B4F;">except</span> ModuleNotFoundError:</span>
<span id="cb1-4">    <span class="op" style="color: #5E5E5E;">!</span>pip install <span class="op" style="color: #5E5E5E;">-</span>Uq fastkaggle</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="im" style="color: #00769E;">from</span> fastkaggle <span class="im" style="color: #00769E;">import</span> <span class="op" style="color: #5E5E5E;">*</span></span></code></pre></div>
</div>
<p>First, we’ll get the data. There’s a new library called <a href="https://fastai.github.io/fastkaggle/">fastkaggle</a> which has a few handy features, including getting the data for a competition correctly regardless of whether we’re running on Kaggle or elsewhere. Note we’ll need to first accept the competition rules and join the competition, and we’ll need our kaggle API key file <code>kaggle.json</code> downloaded if you’re running this somewhere other than on Kaggle. <code>setup_comp</code> is the function we use in <code>fastkaggle</code> to grab the data, and install or upgrade our needed python modules when we’re running on Kaggle:</p>
<p>::: {.cell _kg_hide-output=‘true’ execution_count=10}</p>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">comp <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'paddy-disease-classification'</span></span>
<span id="cb2-2"></span>
<span id="cb2-3">path <span class="op" style="color: #5E5E5E;">=</span> setup_comp(comp, install<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'fastai "timm&gt;=0.6.2.dev0"'</span>)</span></code></pre></div>
<p>:::</p>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">path</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>Path('paddy-disease-classification')</code></pre>
</div>
</div>
<p>Now we can import the stuff we’ll need from fastai, set a seed (for reproducibility – just for the purposes of making this notebook easier to write; It’s not recommended to do that in your own analysis however) and check what’s in the data:</p>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;">from</span> fastai.vision.<span class="bu" style="color: null;">all</span> <span class="im" style="color: #00769E;">import</span> <span class="op" style="color: #5E5E5E;">*</span></span>
<span id="cb5-2">set_seed(<span class="dv" style="color: #AD0000;">42</span>)</span>
<span id="cb5-3"></span>
<span id="cb5-4">path.ls()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>(#4) [Path('paddy-disease-classification/sample_submission.csv'),Path('paddy-disease-classification/test_images'),Path('paddy-disease-classification/train_images'),Path('paddy-disease-classification/train.csv')]</code></pre>
</div>
</div>
</section>
<section id="looking-at-the-data" class="level3">
<h3 class="anchored" data-anchor-id="looking-at-the-data">Looking at the data</h3>
<p>The images are in <code>train_images</code>, so let’s grab a list of all of them:</p>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">trn_path <span class="op" style="color: #5E5E5E;">=</span> path<span class="op" style="color: #5E5E5E;">/</span><span class="st" style="color: #20794D;">'train_images'</span></span>
<span id="cb7-2">files <span class="op" style="color: #5E5E5E;">=</span> get_image_files(trn_path)</span></code></pre></div>
</div>
<p>…and take a look at one:</p>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">img <span class="op" style="color: #5E5E5E;">=</span> PILImage.create(files[<span class="dv" style="color: #AD0000;">0</span>])</span>
<span id="cb8-2"><span class="bu" style="color: null;">print</span>(img.size)</span>
<span id="cb8-3">img.to_thumb(<span class="dv" style="color: #AD0000;">128</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>(480, 640)</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="6">
<p><img src="https://stephen137.github.io/posts/Paddy_Doctor/Paddy_Doctor_files/figure-html/cell-7-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>Looks like the images might be 480x640 – let’s check all their sizes. This is faster if we do it in parallel, so we’ll use fastcore’s <code>parallel</code> for this:</p>
<p>Watch out! In the imaging world images are represented by (columns, rows) however in the array/tensor world images are represented as (rows, columns). Pytorch would say size is (640, 480)!!</p>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="im" style="color: #00769E;">from</span> fastcore.parallel <span class="im" style="color: #00769E;">import</span> <span class="op" style="color: #5E5E5E;">*</span></span>
<span id="cb10-2"></span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;"># create function to create a PILLOW image and get its size</span></span>
<span id="cb10-4"><span class="co" style="color: #5E5E5E;"># speed up process using parallel </span></span>
<span id="cb10-5"><span class="kw" style="color: #003B4F;">def</span> f(o): <span class="cf" style="color: #003B4F;">return</span> PILImage.create(o).size</span>
<span id="cb10-6">sizes <span class="op" style="color: #5E5E5E;">=</span> parallel(f, files, n_workers<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">8</span>)</span>
<span id="cb10-7">pd.Series(sizes).value_counts()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>(480, 640)    10403
(640, 480)        4
dtype: int64</code></pre>
</div>
</div>
<p>They’re nearly all the same size, except for a few. Because of those few, however, we’ll need to make sure we always resize each image to common dimensions first, otherwise fastai won’t be able to create batches. For now, we’ll just squish them to 480x480 images, and then once they’re in batches we do a random resized crop down to a smaller size, along with the other default fastai augmentations provided by <code>aug_transforms</code>. We’ll start out with small resized images, since we want to be able to iterate quickly:</p>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;"># create our dataloader</span></span>
<span id="cb12-2">dls <span class="op" style="color: #5E5E5E;">=</span> ImageDataLoaders.from_folder(trn_path, valid_pct<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.2</span>, seed<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">42</span>,</span>
<span id="cb12-3">    item_tfms<span class="op" style="color: #5E5E5E;">=</span>Resize(<span class="dv" style="color: #AD0000;">480</span>, method<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'squish'</span>), <span class="co" style="color: #5E5E5E;"># resize to a 480 x 480 square using squish - change aspect ratio</span></span>
<span id="cb12-4">    batch_tfms<span class="op" style="color: #5E5E5E;">=</span>aug_transforms(size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">128</span>, min_scale<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.75</span>))</span>
<span id="cb12-5"></span>
<span id="cb12-6"><span class="co" style="color: #5E5E5E;">#  show_batch allows us to see or hear our data</span></span>
<span id="cb12-7">dls.show_batch(max_n<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">6</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Paddy_Doctor/Paddy_Doctor_files/figure-html/cell-9-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="our-first-model" class="level3">
<h3 class="anchored" data-anchor-id="our-first-model">Our first model</h3>
<p>Let’s create a model. To pick an architecture, we should look at the options in <a href="https://www.kaggle.com/code/jhoward/the-best-vision-models-for-fine-tuning">The best vision models for fine-tuning</a>. <code>resnet26d</code> is the fastest resolution-independent model which gets into the top-15 lists there.</p>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">learn <span class="op" style="color: #5E5E5E;">=</span> vision_learner(dls, <span class="st" style="color: #20794D;">'resnet26d'</span>, metrics<span class="op" style="color: #5E5E5E;">=</span>error_rate, path<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'.'</span>).to_fp16()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Downloading: "https://github.com/rwightman/pytorch-image-models/releases/download/v0.1-weights/resnet26d-69e92c46.pth" to /home/stephen137/.cache/torch/hub/checkpoints/resnet26d-69e92c46.pth</code></pre>
</div>
</div>
<p>Let’s see what the learning rate finder shows:</p>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;"># puts through one mini-batch at a time, starting at a very low learning rate</span></span>
<span id="cb15-2"><span class="co" style="color: #5E5E5E;"># gradually increase learning rate, see improvement, then once lr gets bigger worsens</span></span>
<span id="cb15-3">learn.lr_find(suggest_funcs<span class="op" style="color: #5E5E5E;">=</span>(valley, slide))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/home/stephen137/mambaforge/lib/python3.10/site-packages/torch/amp/autocast_mode.py:198: UserWarning: User provided device_type of 'cuda', but CUDA is not available. Disabling
  warnings.warn('User provided device_type of \'cuda\', but CUDA is not available. Disabling')
/home/stephen137/mambaforge/lib/python3.10/site-packages/torch/cuda/amp/grad_scaler.py:115: UserWarning: torch.cuda.amp.GradScaler is enabled, but CUDA is not available.  Disabling.
  warnings.warn("torch.cuda.amp.GradScaler is enabled, but CUDA is not available.  Disabling.")</code></pre>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>SuggestedLRs(valley=0.0014454397605732083, slide=0.0030199517495930195)</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Paddy_Doctor/Paddy_Doctor_files/figure-html/cell-11-output-5.png" class="img-fluid"></p>
</div>
</div>
<p><code>lr_find</code> generally recommends rather conservative learning rates, to ensure that your model will train successfully. I generally like to push it a bit higher if I can. Let’s train a few epochs and see how it looks:</p>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;"># let's fine tune for 3 epochs with a selected learning rate of 0.01 (10 ^ -2)</span></span>
<span id="cb18-2">learn.fine_tune(<span class="dv" style="color: #AD0000;">3</span>, <span class="fl" style="color: #AD0000;">0.01</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th>epoch</th>
      <th>train_loss</th>
      <th>valid_loss</th>
      <th>error_rate</th>
      <th>time</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>1.774996</td>
      <td>1.171467</td>
      <td>0.378664</td>
      <td>03:57</td>
    </tr>
  </tbody>
</table>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th>epoch</th>
      <th>train_loss</th>
      <th>valid_loss</th>
      <th>error_rate</th>
      <th>time</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>1.074707</td>
      <td>0.791964</td>
      <td>0.265257</td>
      <td>04:52</td>
    </tr>
    <tr>
      <td>1</td>
      <td>0.786653</td>
      <td>0.482838</td>
      <td>0.144161</td>
      <td>04:59</td>
    </tr>
    <tr>
      <td>2</td>
      <td>0.534015</td>
      <td>0.414971</td>
      <td>0.129265</td>
      <td>05:00</td>
    </tr>
  </tbody>
</table>
</div>
</div>
<p>We’re now ready to build our first submission!!! Let’s take a look at the sample Kaggle provided to see what it needs to look like:</p>
</section>
<section id="submitting-to-kaggle" class="level3">
<h3 class="anchored" data-anchor-id="submitting-to-kaggle">Submitting to Kaggle</h3>
<div class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;"># lets's have a look at the sample Kaggle submisison file</span></span>
<span id="cb19-2">ss <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(path<span class="op" style="color: #5E5E5E;">/</span><span class="st" style="color: #20794D;">'sample_submission.csv'</span>)</span>
<span id="cb19-3">ss</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>image_id</th>
      <th>label</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>200001.jpg</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>1</th>
      <td>200002.jpg</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2</th>
      <td>200003.jpg</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>3</th>
      <td>200004.jpg</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>4</th>
      <td>200005.jpg</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>3464</th>
      <td>203465.jpg</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>3465</th>
      <td>203466.jpg</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>3466</th>
      <td>203467.jpg</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>3467</th>
      <td>203468.jpg</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>3468</th>
      <td>203469.jpg</td>
      <td>NaN</td>
    </tr>
  </tbody>
</table>
<p>3469 rows × 2 columns</p>
</div>
</div>
</div>
<p>OK so we need a CSV containing all the test images, in alphabetical order, and the predicted label for each one. We can create the needed test set using fastai like so:</p>
<div class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="co" style="color: #5E5E5E;"># create our test set</span></span>
<span id="cb20-2">tst_files <span class="op" style="color: #5E5E5E;">=</span> get_image_files(path<span class="op" style="color: #5E5E5E;">/</span><span class="st" style="color: #20794D;">'test_images'</span>).<span class="bu" style="color: null;">sorted</span>()</span>
<span id="cb20-3"></span>
<span id="cb20-4"><span class="co" style="color: #5E5E5E;"># create a dataloader pointing at the test set - use dls.test_dl</span></span>
<span id="cb20-5"><span class="co" style="color: #5E5E5E;"># key difference from normal dataloader is that it does not have any labels</span></span>
<span id="cb20-6">tst_dl <span class="op" style="color: #5E5E5E;">=</span> dls.test_dl(tst_files)</span></code></pre></div>
</div>
<p>We can now get the probabilities of each class, and the index of the most likely class, from this test set (the 2nd thing returned by <code>get_preds</code> are the targets, which are blank for a test set, so we discard them):</p>
<div class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="co" style="color: #5E5E5E;"># get our precitions and indexes from our learner</span></span>
<span id="cb21-2"><span class="co" style="color: #5E5E5E;"># decoded means rather than just get probability will get indexes of 0 to 9</span></span>
<span id="cb21-3">probs,_,idxs <span class="op" style="color: #5E5E5E;">=</span> learn.get_preds(dl<span class="op" style="color: #5E5E5E;">=</span>tst_dl, with_decoded<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb21-4">idxs</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/home/stephen137/mambaforge/lib/python3.10/site-packages/torch/amp/autocast_mode.py:198: UserWarning: User provided device_type of 'cuda', but CUDA is not available. Disabling
  warnings.warn('User provided device_type of \'cuda\', but CUDA is not available. Disabling')
/home/stephen137/mambaforge/lib/python3.10/site-packages/torch/cuda/amp/grad_scaler.py:115: UserWarning: torch.cuda.amp.GradScaler is enabled, but CUDA is not available.  Disabling.
  warnings.warn("torch.cuda.amp.GradScaler is enabled, but CUDA is not available.  Disabling.")</code></pre>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-display" data-execution_count="18">
<pre><code>TensorBase([4, 3, 3,  ..., 4, 8, 3])</code></pre>
</div>
</div>
<p>These need to be mapped to the names of each of these diseases, these names are stored by fastai automatically in the <code>vocab</code>:</p>
<div class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="co" style="color: #5E5E5E;"># grab names of the diseases from the index vocab</span></span>
<span id="cb24-2">dls.vocab</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="19">
<pre><code>['bacterial_leaf_blight', 'bacterial_leaf_streak', 'bacterial_panicle_blight', 'blast', 'brown_spot', 'dead_heart', 'downy_mildew', 'hispa', 'normal', 'tungro']</code></pre>
</div>
</div>
<p>We can create an apply this mapping using pandas:</p>
<div class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="co" style="color: #5E5E5E;"># map disease name to indexes</span></span>
<span id="cb26-2">mapping <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">dict</span>(<span class="bu" style="color: null;">enumerate</span>(dls.vocab)) <span class="co" style="color: #5E5E5E;"># create a dictionary of the indexes and vocab</span></span>
<span id="cb26-3">results <span class="op" style="color: #5E5E5E;">=</span> pd.Series(idxs.numpy(), name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"idxs"</span>).<span class="bu" style="color: null;">map</span>(mapping) <span class="co" style="color: #5E5E5E;"># looks up the dictionary and returns the indexes, and name of indexes. Passing .map to a dictionary (mapping) is much fasster than passing to a function</span></span>
<span id="cb26-4">results</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="25">
<pre><code>0       brown_spot
1            blast
2            blast
3            blast
4            blast
           ...    
3464         blast
3465         blast
3466    brown_spot
3467        normal
3468         blast
Name: idxs, Length: 3469, dtype: object</code></pre>
</div>
</div>
<p>Kaggle expects the submission as a CSV file, so let’s save it, and check the first few lines:</p>
<div class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="co" style="color: #5E5E5E;"># replace 'label' column with our results</span></span>
<span id="cb28-2">ss[<span class="st" style="color: #20794D;">'label'</span>] <span class="op" style="color: #5E5E5E;">=</span> results</span>
<span id="cb28-3">ss.to_csv(<span class="st" style="color: #20794D;">'subm.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>) </span>
<span id="cb28-4"><span class="op" style="color: #5E5E5E;">!</span>head subm.csv</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>image_id,label
200001.jpg,brown_spot
200002.jpg,blast
200003.jpg,blast
200004.jpg,blast
200005.jpg,blast
200006.jpg,normal
200007.jpg,blast
200008.jpg,blast
200009.jpg,hispa</code></pre>
</div>
</div>
<p>Let’s submit this to kaggle. We can do it from the notebook if we’re running on Kaggle, otherwise we can use the API:</p>
<div class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="co" style="color: #5E5E5E;"># function to submit to Kaggle</span></span>
<span id="cb30-2"><span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">not</span> iskaggle:</span>
<span id="cb30-3">    <span class="im" style="color: #00769E;">from</span> kaggle <span class="im" style="color: #00769E;">import</span> api</span>
<span id="cb30-4">    api.competition_submit_cli(<span class="st" style="color: #20794D;">'subm.csv'</span>, <span class="st" style="color: #20794D;">'initial rn26d 128px'</span>, comp)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████████████████████████████████████████████████████████████████████████| 62.9k/62.9k [00:01&lt;00:00, 41.0kB/s]</code></pre>
</div>
</div>
<p>Success! We successfully created a submission, although it’s not very good (top 80% - or bottoms 20%!) but it only took a short time to train. The important thing is that we have a good starting point to iterate from, and we can do rapid iterations. Every step from loading the data to creating the model to submitting to Kaggle is all automated and runs quickly. Therefore, we can now try lots of things quickly and easily and use those experiments to improve our results.</p>
</section>
<section id="going-faster" class="level3">
<h3 class="anchored" data-anchor-id="going-faster">Going faster</h3>
<p>I have noticed often when using Kaggle that the “GPU” indicator in the top right is nearly empty, and the “CPU” one is full. This strongly suggests that Kaggle’s notebook is CPU bound by decoding and resizing the images. This is a common problem on machines with poor CPU performance.</p>
<p>We really need to fix this, since we need to be able to iterate much more quickly. What we can do is to simply resize all the images to 40% of their height and width – which reduces their number of pixels 6.25x. This should mean an around 6.25x increase in performance for training small models.</p>
<p>Luckily, fastai has a function which does exactly this, whilst maintaining the folder structure of the data: <code>resize_images</code>.</p>
<div class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">trn_path <span class="op" style="color: #5E5E5E;">=</span> Path(<span class="st" style="color: #20794D;">'sml'</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">resize_images(path<span class="op" style="color: #5E5E5E;">/</span><span class="st" style="color: #20794D;">'train_images'</span>, dest<span class="op" style="color: #5E5E5E;">=</span>trn_path, max_size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">256</span>, recurse<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
</div>
<p>This will give us 192x256px images. Let’s take a look:</p>
<div class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">dls <span class="op" style="color: #5E5E5E;">=</span> ImageDataLoaders.from_folder(trn_path, valid_pct<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.2</span>, seed<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">42</span>,</span>
<span id="cb34-2">    item_tfms<span class="op" style="color: #5E5E5E;">=</span>Resize((<span class="dv" style="color: #AD0000;">256</span>,<span class="dv" style="color: #AD0000;">192</span>)))</span>
<span id="cb34-3"></span>
<span id="cb34-4">dls.show_batch(max_n<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Paddy_Doctor/Paddy_Doctor_files/figure-html/cell-22-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>In this section we’ll be experimenting with a few different architectures and image processing approaches (item and batch transforms). In order to make this easier, we’ll put our modeling steps together into a little function which we can pass the architecture, item transforms, and batch transforms to:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1"><span class="kw" style="color: #003B4F;">def</span> train(arch, item, batch, epochs<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">5</span>):</span>
<span id="cb35-2">    dls <span class="op" style="color: #5E5E5E;">=</span> ImageDataLoaders.from_folder(trn_path, seed<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">42</span>, valid_pct<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.2</span>, item_tfms<span class="op" style="color: #5E5E5E;">=</span>item, batch_tfms<span class="op" style="color: #5E5E5E;">=</span>batch)</span>
<span id="cb35-3">    learn <span class="op" style="color: #5E5E5E;">=</span> vision_learner(dls, arch, metrics<span class="op" style="color: #5E5E5E;">=</span>error_rate)</span>
<span id="cb35-4">    learn.fine_tune(epochs, <span class="fl" style="color: #AD0000;">0.01</span>)</span>
<span id="cb35-5">    <span class="cf" style="color: #003B4F;">return</span> learn</span></code></pre></div>
</div>
<p>Our item_tfms already resize our images to small sizes, so this shouldn’t impact the accuracy of our models much, if at all. Let’s re-run our resnet26d to test.</p>
<div class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">learn <span class="op" style="color: #5E5E5E;">=</span> train(<span class="st" style="color: #20794D;">'resnet26d'</span>, item<span class="op" style="color: #5E5E5E;">=</span>Resize(<span class="dv" style="color: #AD0000;">192</span>),</span>
<span id="cb36-2">              batch<span class="op" style="color: #5E5E5E;">=</span>aug_transforms(size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">128</span>, min_scale<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.75</span>))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/home/stephen137/mambaforge/lib/python3.10/site-packages/torch/amp/autocast_mode.py:198: UserWarning: User provided device_type of 'cuda', but CUDA is not available. Disabling
  warnings.warn('User provided device_type of \'cuda\', but CUDA is not available. Disabling')
/home/stephen137/mambaforge/lib/python3.10/site-packages/torch/cuda/amp/grad_scaler.py:115: UserWarning: torch.cuda.amp.GradScaler is enabled, but CUDA is not available.  Disabling.
  warnings.warn("torch.cuda.amp.GradScaler is enabled, but CUDA is not available.  Disabling.")</code></pre>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th>epoch</th>
      <th>train_loss</th>
      <th>valid_loss</th>
      <th>error_rate</th>
      <th>time</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>1.915986</td>
      <td>1.551140</td>
      <td>0.477174</td>
      <td>03:13</td>
    </tr>
  </tbody>
</table>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th>epoch</th>
      <th>train_loss</th>
      <th>valid_loss</th>
      <th>error_rate</th>
      <th>time</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>1.242299</td>
      <td>1.098648</td>
      <td>0.353676</td>
      <td>04:09</td>
    </tr>
    <tr>
      <td>1</td>
      <td>0.969338</td>
      <td>0.703203</td>
      <td>0.231619</td>
      <td>04:05</td>
    </tr>
    <tr>
      <td>2</td>
      <td>0.744738</td>
      <td>0.554062</td>
      <td>0.181643</td>
      <td>04:04</td>
    </tr>
    <tr>
      <td>3</td>
      <td>0.532851</td>
      <td>0.422054</td>
      <td>0.135031</td>
      <td>04:15</td>
    </tr>
    <tr>
      <td>4</td>
      <td>0.423329</td>
      <td>0.404017</td>
      <td>0.123979</td>
      <td>04:10</td>
    </tr>
  </tbody>
</table>
</div>
</div>
<p>That’s a big improvement in speed, and the accuracy looks fine.</p>
</section>
<section id="pytorch-image-models-timm" class="level3">
<h3 class="anchored" data-anchor-id="pytorch-image-models-timm">PyTorch Image Models (timm)</h3>
<p><a href="https://timm.fast.ai/">PyTorch Image Models</a> (timm) is a wonderful library by Ross Wightman which provides state-of-the-art pre-trained computer vision models. It’s like Hugging Face Transformers, but for computer vision instead of NLP (and it’s not restricted to transformers-based models)!</p>
<p>Ross regularly benchmarks new models as they are added to timm, and puts the results in a CSV in the project’s GitHub repo. To analyse the data, we’ll first clone the repo:</p>
<div class="cell" data-execution_count="46">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1"><span class="op" style="color: #5E5E5E;">!</span> git clone <span class="op" style="color: #5E5E5E;">--</span>depth <span class="dv" style="color: #AD0000;">1</span> https:<span class="op" style="color: #5E5E5E;">//</span>github.com<span class="op" style="color: #5E5E5E;">/</span>rwightman<span class="op" style="color: #5E5E5E;">/</span>pytorch<span class="op" style="color: #5E5E5E;">-</span>image<span class="op" style="color: #5E5E5E;">-</span>models.git</span>
<span id="cb38-2"><span class="op" style="color: #5E5E5E;">%</span>cd pytorch<span class="op" style="color: #5E5E5E;">-</span>image<span class="op" style="color: #5E5E5E;">-</span>models<span class="op" style="color: #5E5E5E;">/</span>results</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Cloning into 'pytorch-image-models'...
remote: Enumerating objects: 532, done.
remote: Counting objects: 100% (532/532), done.
remote: Compressing objects: 100% (367/367), done.
remote: Total 532 (delta 222), reused 340 (delta 156), pack-reused 0
Receiving objects: 100% (532/532), 1.30 MiB | 1.21 MiB/s, done.
Resolving deltas: 100% (222/222), done.
/home/stephen137/Kaggle_Comp/pytorch-image-models/results</code></pre>
</div>
</div>
<p>Using Pandas, we can read the two CSV files we need, and merge them together:</p>
<div class="cell" data-execution_count="47">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb40-2">df_results <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(<span class="st" style="color: #20794D;">'results-imagenet.csv'</span>)</span></code></pre></div>
</div>
<p>We’ll also add a “family” column that will allow us to group architectures into categories with similar characteristics. Ross told Jeremy Howard which models he’s found the most usable in practice, so we’ll limit the charts to just look at these. (Also include is VGG, not because it’s good, but as a comparison to show how far things have come in the last few years.)</p>
<div class="cell" data-execution_count="48">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1"><span class="kw" style="color: #003B4F;">def</span> get_data(part, col):</span>
<span id="cb41-2">    df <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(<span class="ss" style="color: #20794D;">f'benchmark-</span><span class="sc" style="color: #5E5E5E;">{</span>part<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">-amp-nhwc-pt111-cu113-rtx3090.csv'</span>).merge(df_results, on<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'model'</span>)</span>
<span id="cb41-3">    df[<span class="st" style="color: #20794D;">'secs'</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">1.</span> <span class="op" style="color: #5E5E5E;">/</span> df[col]</span>
<span id="cb41-4">    df[<span class="st" style="color: #20794D;">'family'</span>] <span class="op" style="color: #5E5E5E;">=</span> df.model.<span class="bu" style="color: null;">str</span>.extract(<span class="st" style="color: #20794D;">'^([a-z]+?(?:v2)?)(?:\d|_|$)'</span>)</span>
<span id="cb41-5">    df <span class="op" style="color: #5E5E5E;">=</span> df[<span class="op" style="color: #5E5E5E;">~</span>df.model.<span class="bu" style="color: null;">str</span>.endswith(<span class="st" style="color: #20794D;">'gn'</span>)]</span>
<span id="cb41-6">    df.loc[df.model.<span class="bu" style="color: null;">str</span>.contains(<span class="st" style="color: #20794D;">'in22'</span>),<span class="st" style="color: #20794D;">'family'</span>] <span class="op" style="color: #5E5E5E;">=</span> df.loc[df.model.<span class="bu" style="color: null;">str</span>.contains(<span class="st" style="color: #20794D;">'in22'</span>),<span class="st" style="color: #20794D;">'family'</span>] <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">'_in22'</span></span>
<span id="cb41-7">    df.loc[df.model.<span class="bu" style="color: null;">str</span>.contains(<span class="st" style="color: #20794D;">'resnet.*d'</span>),<span class="st" style="color: #20794D;">'family'</span>] <span class="op" style="color: #5E5E5E;">=</span> df.loc[df.model.<span class="bu" style="color: null;">str</span>.contains(<span class="st" style="color: #20794D;">'resnet.*d'</span>),<span class="st" style="color: #20794D;">'family'</span>] <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">'d'</span></span>
<span id="cb41-8">    <span class="cf" style="color: #003B4F;">return</span> df[df.family.<span class="bu" style="color: null;">str</span>.contains(<span class="st" style="color: #20794D;">'^re[sg]netd?|beit|convnext|levit|efficient|vit|vgg|swin'</span>)]</span></code></pre></div>
</div>
<div class="cell" data-execution_count="49">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">df <span class="op" style="color: #5E5E5E;">=</span> get_data(<span class="st" style="color: #20794D;">'infer'</span>, <span class="st" style="color: #20794D;">'infer_samples_per_sec'</span>)</span></code></pre></div>
</div>
<section id="inference-results" class="level4">
<h4 class="anchored" data-anchor-id="inference-results">Inference results</h4>
<p>Here’s the results for inference performance (see the last section for training performance). In this chart:</p>
<ul>
<li>the x axis shows how many seconds it takes to process one image (<strong>note</strong>: it’s a log scale)</li>
<li>the y axis is the accuracy on Imagenet</li>
<li>the size of each bubble is proportional to the size of images used in testing</li>
<li>the color shows what “family” the architecture is from.</li>
</ul>
<p>Hover your mouse over a marker to see details about the model. Double-click in the legend to display just one family. Single-click in the legend to show or hide a family.</p>
<p><strong>Note</strong>: on my screen, Kaggle cuts off the family selector and some plotly functionality – to see the whole thing, collapse the table of contents on the right by clicking the little arrow to the right of “<em>Contents</em>”.</p>
<div class="cell" data-execution_count="50">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1"><span class="im" style="color: #00769E;">import</span> plotly.express <span class="im" style="color: #00769E;">as</span> px</span>
<span id="cb43-2">w,h <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1000</span>,<span class="dv" style="color: #AD0000;">800</span></span>
<span id="cb43-3"></span>
<span id="cb43-4"><span class="kw" style="color: #003B4F;">def</span> show_all(df, title, size):</span>
<span id="cb43-5">    <span class="cf" style="color: #003B4F;">return</span> px.scatter(df, width<span class="op" style="color: #5E5E5E;">=</span>w, height<span class="op" style="color: #5E5E5E;">=</span>h, size<span class="op" style="color: #5E5E5E;">=</span>df[size]<span class="op" style="color: #5E5E5E;">**</span><span class="dv" style="color: #AD0000;">2</span>, title<span class="op" style="color: #5E5E5E;">=</span>title,</span>
<span id="cb43-6">        x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'secs'</span>,  y<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'top1'</span>, log_x<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'family'</span>, hover_name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'model'</span>, hover_data<span class="op" style="color: #5E5E5E;">=</span>[size])</span></code></pre></div>
</div>
<div class="cell" data-execution_count="51">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1">show_all(df, <span class="st" style="color: #20794D;">'Inference'</span>, <span class="st" style="color: #20794D;">'infer_img_size'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">

<div>                            <div id="a02e5d04-6fe4-4936-be6c-06e719350f52" class="plotly-graph-div" style="height:800px; width:1000px;"></div>            <script type="text/javascript">                require(["plotly"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById("a02e5d04-6fe4-4936-be6c-06e719350f52")) {                    Plotly.newPlot(                        "a02e5d04-6fe4-4936-be6c-06e719350f52",                        [{"customdata":[[224],[224],[224],[224],[224]],"hovertemplate":"<b>%{hovertext}</b><br><br>family=levit<br>secs=%{x}<br>top1=%{y}<br>size=%{marker.size}<br>infer_img_size=%{customdata[0]}<extra></extra>","hovertext":["levit_128s","levit_128","levit_192","levit_256","levit_384"],"legendgroup":"levit","marker":{"color":"#636efa","size":[50176,50176,50176,50176,50176],"sizemode":"area","sizeref":576.0,"symbol":"circle"},"mode":"markers","name":"levit","orientation":"v","showlegend":true,"x":[4.654236751715086e-05,6.822292249261998e-05,7.756230968148262e-05,0.00010599687945186893,0.00017720128293728847],"xaxis":"x","y":[76.53,78.486,79.842,81.51,82.586],"yaxis":"y","type":"scatter"},{"customdata":[[224],[224],[224],[224],[224],[224],[224],[224],[224],[224],[224],[224]],"hovertemplate":"<b>%{hovertext}</b><br><br>family=regnetx<br>secs=%{x}<br>top1=%{y}<br>size=%{marker.size}<br>infer_img_size=%{customdata[0]}<extra></extra>","hovertext":["regnetx_002","regnetx_004","regnetx_008","regnetx_006","regnetx_016","regnetx_032","regnetx_040","regnetx_080","regnetx_064","regnetx_120","regnetx_160","regnetx_320"],"legendgroup":"regnetx","marker":{"color":"#EF553B","size":[50176,50176,50176,50176,50176,50176,50176,50176,50176,50176,50176,50176],"sizemode":"area","sizeref":576.0,"symbol":"circle"},"mode":"markers","name":"regnetx","orientation":"v","showlegend":true,"x":[5.611048828469115e-05,6.925193368711838e-05,0.00011822399190402103,0.0001259786970023369,0.00026479614668647344,0.0006228278877415016,0.0006304057291272663,0.0007938902208602596,0.0008572212316554657,0.0012854296548621376,0.001604157977477622,0.0038134462113411888],"xaxis":"x","y":[68.762,72.396,75.038,73.852,76.95,78.172,78.482,79.194,79.072,79.596,79.856,80.246],"yaxis":"y","type":"scatter"},{"customdata":[[224],[224],[224],[224],[224],[288],[288],[224],[288],[288],[224],[288]],"hovertemplate":"<b>%{hovertext}</b><br><br>family=regnety<br>secs=%{x}<br>top1=%{y}<br>size=%{marker.size}<br>infer_img_size=%{customdata[0]}<extra></extra>","hovertext":["regnety_002","regnety_006","regnety_004","regnety_008","regnety_016","regnety_032","regnety_040","regnety_120","regnety_080","regnety_064","regnety_320","regnety_160"],"legendgroup":"regnety","marker":{"color":"#00cc96","size":[50176,50176,50176,50176,50176,82944,82944,50176,82944,82944,50176,82944],"sizemode":"area","sizeref":576.0,"symbol":"circle"},"mode":"markers","name":"regnety","orientation":"v","showlegend":true,"x":[5.9976920880845045e-05,0.00010017450398594352,0.00010468376082691796,0.00012704688411164372,0.00029335406368716726,0.0007311277645768598,0.0011773986554107355,0.0013256445946841651,0.0018643499011894553,0.0021192726656211586,0.002407666008571291,0.0024128362890577875],"xaxis":"x","y":[70.252,75.246,74.034,76.316,77.862,82.724,83.038,80.366,83.932,83.716,80.81,83.686],"yaxis":"y","type":"scatter"},{"customdata":[[224],[224],[224],[256],[224],[256],[256],[224],[288],[288],[224]],"hovertemplate":"<b>%{hovertext}</b><br><br>family=resnet<br>secs=%{x}<br>top1=%{y}<br>size=%{marker.size}<br>infer_img_size=%{customdata[0]}<extra></extra>","hovertext":["resnet18","resnet34","resnet26","resnet26t","resnet50","resnet32ts","resnet33ts","resnet101","resnet51q","resnet61q","resnet152"],"legendgroup":"resnet","marker":{"color":"#ab63fa","size":[50176,50176,50176,65536,50176,65536,65536,50176,82944,82944,50176],"sizemode":"area","sizeref":576.0,"symbol":"circle"},"mode":"markers","name":"resnet","orientation":"v","showlegend":true,"x":[9.236979323021786e-05,0.00015969338869370808,0.00017561482751111642,0.0002638710409448694,0.00028338807446305045,0.00029286350217890445,0.00029674294938752255,0.00046063207933926936,0.000534896657965681,0.0005959830740806961,0.0006634335339114052],"xaxis":"x","y":[69.748,75.11,75.292,77.882,80.374,79.004,79.214,81.938,82.36,82.524,82.822],"yaxis":"y","type":"scatter"},{"customdata":[[224],[224],[224],[224],[320],[320],[320]],"hovertemplate":"<b>%{hovertext}</b><br><br>family=resnetd<br>secs=%{x}<br>top1=%{y}<br>size=%{marker.size}<br>infer_img_size=%{customdata[0]}<extra></extra>","hovertext":["resnet18d","resnet34d","resnet26d","resnet50d","resnet101d","resnet152d","resnet200d"],"legendgroup":"resnetd","marker":{"color":"#FFA15A","size":[50176,50176,50176,50176,102400,102400,102400],"sizemode":"area","sizeref":576.0,"symbol":"circle"},"mode":"markers","name":"resnetd","orientation":"v","showlegend":true,"x":[0.00011218547400045547,0.00017947263760167124,0.0002044542400742578,0.00031235065734195835,0.0010008807750820723,0.0014054023666975855,0.0019066503965832825],"xaxis":"x","y":[72.26,77.116,76.696,80.53,83.022,83.68,83.962],"yaxis":"y","type":"scatter"},{"customdata":[[256],[256],[256]],"hovertemplate":"<b>%{hovertext}</b><br><br>family=mobilevit<br>secs=%{x}<br>top1=%{y}<br>size=%{marker.size}<br>infer_img_size=%{customdata[0]}<extra></extra>","hovertext":["mobilevit_xxs","mobilevit_xs","mobilevit_s"],"legendgroup":"mobilevit","marker":{"color":"#19d3f3","size":[65536,65536,65536],"sizemode":"area","sizeref":576.0,"symbol":"circle"},"mode":"markers","name":"mobilevit","orientation":"v","showlegend":true,"x":[0.00019510063290645313,0.00032276493352656195,0.0004140683875348853],"xaxis":"x","y":[68.912,74.644,78.312],"yaxis":"y","type":"scatter"},{"customdata":[[224],[224],[224],[224],[224],[224],[224],[224]],"hovertemplate":"<b>%{hovertext}</b><br><br>family=repvgg<br>secs=%{x}<br>top1=%{y}<br>size=%{marker.size}<br>infer_img_size=%{customdata[0]}<extra></extra>","hovertext":["repvgg_b0","repvgg_a2","repvgg_b1","repvgg_b1g4","repvgg_b2","repvgg_b3","repvgg_b2g4","repvgg_b3g4"],"legendgroup":"repvgg","marker":{"color":"#FF6692","size":[50176,50176,50176,50176,50176,50176,50176,50176],"sizemode":"area","sizeref":576.0,"symbol":"circle"},"mode":"markers","name":"repvgg","orientation":"v","showlegend":true,"x":[0.00019805588344807372,0.00025848743492578826,0.0005164995790528431,0.0006192755714365336,0.0008039813154742284,0.0009981932701809725,0.0012302090125112257,0.0015526503741887404],"xaxis":"x","y":[75.152,76.46,78.366,77.594,78.792,80.492,79.366,80.212],"yaxis":"y","type":"scatter"},{"customdata":[[240],[240],[240],[240],[240],[240],[240],[240],[240],[408],[408]],"hovertemplate":"<b>%{hovertext}</b><br><br>family=crossvit<br>secs=%{x}<br>top1=%{y}<br>size=%{marker.size}<br>infer_img_size=%{customdata[0]}<extra></extra>","hovertext":["crossvit_tiny_240","crossvit_9_240","crossvit_9_dagger_240","crossvit_small_240","crossvit_15_240","crossvit_15_dagger_240","crossvit_18_240","crossvit_18_dagger_240","crossvit_base_240","crossvit_15_dagger_408","crossvit_18_dagger_408"],"legendgroup":"crossvit","marker":{"color":"#B6E880","size":[57600,57600,57600,57600,57600,57600,57600,57600,57600,166464,166464],"sizemode":"area","sizeref":576.0,"symbol":"circle"},"mode":"markers","name":"crossvit","orientation":"v","showlegend":true,"x":[0.00025943432938820195,0.0002746551018558445,0.0002807190900209978,0.0005422640609070993,0.0005881107530170082,0.0006054331571522846,0.0008294969101240098,0.0008531185749507324,0.0013383297644539614,0.002823662289990117,0.0038593647485623862],"xaxis":"x","y":[73.324,73.964,76.98,81.02,81.536,82.332,82.4,82.518,82.216,83.838,84.196],"yaxis":"y","type":"scatter"},{"customdata":[[224],[224],[224],[384],[448],[448],[448],[480]],"hovertemplate":"<b>%{hovertext}</b><br><br>family=resnetv2<br>secs=%{x}<br>top1=%{y}<br>size=%{marker.size}<br>infer_img_size=%{customdata[0]}<extra></extra>","hovertext":["resnetv2_50","resnetv2_101","resnetv2_152x2_bit_teacher","resnetv2_152x2_bit_teacher_384","resnetv2_50x3_bitm","resnetv2_152x2_bitm","resnetv2_101x3_bitm","resnetv2_152x4_bitm"],"legendgroup":"resnetv2","marker":{"color":"#FF97FF","size":[50176,50176,50176,147456,200704,200704,200704,230400],"sizemode":"area","sizeref":576.0,"symbol":"circle"},"mode":"markers","name":"resnetv2","orientation":"v","showlegend":true,"x":[0.00027003891260730673,0.0004473172150030194,0.0035710459593614975,0.010310341272296113,0.01076194575979337,0.014216661927779357,0.017295053614666205,0.05461496450027308],"xaxis":"x","y":[80.432,82.03,82.862,83.844,84.014,84.51,84.44,84.916],"yaxis":"y","type":"scatter"},{"customdata":[[224],[224],[224]],"hovertemplate":"<b>%{hovertext}</b><br><br>family=convit<br>secs=%{x}<br>top1=%{y}<br>size=%{marker.size}<br>infer_img_size=%{customdata[0]}<extra></extra>","hovertext":["convit_tiny","convit_small","convit_base"],"legendgroup":"convit","marker":{"color":"#FECB52","size":[50176,50176,50176],"sizemode":"area","sizeref":576.0,"symbol":"circle"},"mode":"markers","name":"convit","orientation":"v","showlegend":true,"x":[0.0003142578800163414,0.0007307163943530237,0.0014544608313698112],"xaxis":"x","y":[73.116,81.426,82.288],"yaxis":"y","type":"scatter"},{"customdata":[[224],[288],[320],[320],[352],[384],[416]],"hovertemplate":"<b>%{hovertext}</b><br><br>family=resnetrs<br>secs=%{x}<br>top1=%{y}<br>size=%{marker.size}<br>infer_img_size=%{customdata[0]}<extra></extra>","hovertext":["resnetrs50","resnetrs101","resnetrs152","resnetrs200","resnetrs270","resnetrs350","resnetrs420"],"legendgroup":"resnetrs","marker":{"color":"#636efa","size":[50176,82944,102400,102400,123904,147456,173056],"sizemode":"area","sizeref":576.0,"symbol":"circle"},"mode":"markers","name":"resnetrs","orientation":"v","showlegend":true,"x":[0.000351576645466595,0.0009125586318920991,0.0015921792156925183,0.0021917327839389824,0.0034781398907864076,0.005297171310520182,0.007450454477723141],"xaxis":"x","y":[79.892,82.288,83.712,84.448,84.434,84.72,85.008],"yaxis":"y","type":"scatter"},{"customdata":[[288],[320],[320],[320],[320],[320],[320],[320],[320]],"hovertemplate":"<b>%{hovertext}</b><br><br>family=regnetz<br>secs=%{x}<br>top1=%{y}<br>size=%{marker.size}<br>infer_img_size=%{customdata[0]}<extra></extra>","hovertext":["regnetz_b16","regnetz_c16","regnetz_d8","regnetz_040","regnetz_040h","regnetz_d32","regnetz_e8","regnetz_c16_evos","regnetz_d8_evos"],"legendgroup":"regnetz","marker":{"color":"#EF553B","size":[82944,102400,102400,102400,102400,102400,102400,102400,102400],"sizemode":"area","sizeref":576.0,"symbol":"circle"},"mode":"markers","name":"regnetz","orientation":"v","showlegend":true,"x":[0.00036824952587873543,0.0005641494319015222,0.0008748829844008363,0.000961917679085024,0.0009669590106075403,0.0009901872444079175,0.0016463344363774057,0.00167117884956048,0.002579646588417387],"xaxis":"x","y":[80.716,82.518,84.05,84.236,84.494,84.022,85.03,82.63,84.05],"yaxis":"y","type":"scatter"},{"customdata":[[224]],"hovertemplate":"<b>%{hovertext}</b><br><br>family=resnetblur<br>secs=%{x}<br>top1=%{y}<br>size=%{marker.size}<br>infer_img_size=%{customdata[0]}<extra></extra>","hovertext":["resnetblur50"],"legendgroup":"resnetblur","marker":{"color":"#00cc96","size":[50176],"sizemode":"area","sizeref":576.0,"symbol":"circle"},"mode":"markers","name":"resnetblur","orientation":"v","showlegend":true,"x":[0.00038181346121538863],"xaxis":"x","y":[79.286],"yaxis":"y","type":"scatter"},{"customdata":[[224],[224],[224],[224],[224],[224],[224]],"hovertemplate":"<b>%{hovertext}</b><br><br>family=vgg<br>secs=%{x}<br>top1=%{y}<br>size=%{marker.size}<br>infer_img_size=%{customdata[0]}<extra></extra>","hovertext":["vgg11_bn","vgg13","vgg13_bn","vgg16","vgg19","vgg16_bn","vgg19_bn"],"legendgroup":"vgg","marker":{"color":"#ab63fa","size":[50176,50176,50176,50176,50176,50176,50176],"sizemode":"area","sizeref":576.0,"symbol":"circle"},"mode":"markers","name":"vgg","orientation":"v","showlegend":true,"x":[0.0003856239395341663,0.000495051955702751,0.000609002271578473,0.00061273383454961,0.0007314379338341244,0.0007335465508641178,0.0008591212907438273],"xaxis":"x","y":[70.36,69.926,71.594,71.594,72.368,73.35,74.214],"yaxis":"y","type":"scatter"},{"customdata":[[224],[224],[224],[224],[224],[224],[224],[384],[384]],"hovertemplate":"<b>%{hovertext}</b><br><br>family=swin<br>secs=%{x}<br>top1=%{y}<br>size=%{marker.size}<br>infer_img_size=%{customdata[0]}<extra></extra>","hovertext":["swin_tiny_patch4_window7_224","swin_s3_tiny_224","swin_small_patch4_window7_224","swin_s3_small_224","swin_base_patch4_window7_224","swin_s3_base_224","swin_large_patch4_window7_224","swin_base_patch4_window12_384","swin_large_patch4_window12_384"],"legendgroup":"swin","marker":{"color":"#FFA15A","size":[50176,50176,50176,50176,50176,50176,50176,147456,147456],"sizemode":"area","sizeref":576.0,"symbol":"circle"},"mode":"markers","name":"swin","orientation":"v","showlegend":true,"x":[0.0005460184335823177,0.000599319173418996,0.0008899409969119047,0.0012179822905374956,0.001254390366281987,0.001502765087761481,0.002185123678000175,0.004700352526439483,0.007950389569088886],"xaxis":"x","y":[81.378,82.122,83.212,83.77,85.252,83.93,86.32,86.432,87.148],"yaxis":"y","type":"scatter"},{"customdata":[[224],[288]],"hovertemplate":"<b>%{hovertext}</b><br><br>family=resnetv2d<br>secs=%{x}<br>top1=%{y}<br>size=%{marker.size}<br>infer_img_size=%{customdata[0]}<extra></extra>","hovertext":["resnetv2_50x1_bit_distilled","resnetv2_50d_evos"],"legendgroup":"resnetv2d","marker":{"color":"#19d3f3","size":[50176,82944],"sizemode":"area","sizeref":576.0,"symbol":"circle"},"mode":"markers","name":"resnetv2d","orientation":"v","showlegend":true,"x":[0.0006401843730994526,0.0011976191331632715],"xaxis":"x","y":[82.818,81.976],"yaxis":"y","type":"scatter"},{"customdata":[[288],[288]],"hovertemplate":"<b>%{hovertext}</b><br><br>family=regnetv<br>secs=%{x}<br>top1=%{y}<br>size=%{marker.size}<br>infer_img_size=%{customdata[0]}<extra></extra>","hovertext":["regnetv_040","regnetv_064"],"legendgroup":"regnetv","marker":{"color":"#FF6692","size":[82944,82944],"sizemode":"area","sizeref":576.0,"symbol":"circle"},"mode":"markers","name":"regnetv","orientation":"v","showlegend":true,"x":[0.0011776343680813981,0.0021355201059217975],"xaxis":"x","y":[83.194,83.712],"yaxis":"y","type":"scatter"}],                        {"template":{"data":{"histogram2dcontour":[{"type":"histogram2dcontour","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"choropleth":[{"type":"choropleth","colorbar":{"outlinewidth":0,"ticks":""}}],"histogram2d":[{"type":"histogram2d","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"heatmap":[{"type":"heatmap","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"heatmapgl":[{"type":"heatmapgl","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"contourcarpet":[{"type":"contourcarpet","colorbar":{"outlinewidth":0,"ticks":""}}],"contour":[{"type":"contour","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"surface":[{"type":"surface","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"mesh3d":[{"type":"mesh3d","colorbar":{"outlinewidth":0,"ticks":""}}],"scatter":[{"fillpattern":{"fillmode":"overlay","size":10,"solidity":0.2},"type":"scatter"}],"parcoords":[{"type":"parcoords","line":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatterpolargl":[{"type":"scatterpolargl","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"bar":[{"error_x":{"color":"#2a3f5f"},"error_y":{"color":"#2a3f5f"},"marker":{"line":{"color":"#E5ECF6","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"bar"}],"scattergeo":[{"type":"scattergeo","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatterpolar":[{"type":"scatterpolar","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"histogram":[{"marker":{"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"histogram"}],"scattergl":[{"type":"scattergl","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatter3d":[{"type":"scatter3d","line":{"colorbar":{"outlinewidth":0,"ticks":""}},"marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scattermapbox":[{"type":"scattermapbox","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatterternary":[{"type":"scatterternary","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scattercarpet":[{"type":"scattercarpet","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"carpet":[{"aaxis":{"endlinecolor":"#2a3f5f","gridcolor":"white","linecolor":"white","minorgridcolor":"white","startlinecolor":"#2a3f5f"},"baxis":{"endlinecolor":"#2a3f5f","gridcolor":"white","linecolor":"white","minorgridcolor":"white","startlinecolor":"#2a3f5f"},"type":"carpet"}],"table":[{"cells":{"fill":{"color":"#EBF0F8"},"line":{"color":"white"}},"header":{"fill":{"color":"#C8D4E3"},"line":{"color":"white"}},"type":"table"}],"barpolar":[{"marker":{"line":{"color":"#E5ECF6","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"barpolar"}],"pie":[{"automargin":true,"type":"pie"}]},"layout":{"autotypenumbers":"strict","colorway":["#636efa","#EF553B","#00cc96","#ab63fa","#FFA15A","#19d3f3","#FF6692","#B6E880","#FF97FF","#FECB52"],"font":{"color":"#2a3f5f"},"hovermode":"closest","hoverlabel":{"align":"left"},"paper_bgcolor":"white","plot_bgcolor":"#E5ECF6","polar":{"bgcolor":"#E5ECF6","angularaxis":{"gridcolor":"white","linecolor":"white","ticks":""},"radialaxis":{"gridcolor":"white","linecolor":"white","ticks":""}},"ternary":{"bgcolor":"#E5ECF6","aaxis":{"gridcolor":"white","linecolor":"white","ticks":""},"baxis":{"gridcolor":"white","linecolor":"white","ticks":""},"caxis":{"gridcolor":"white","linecolor":"white","ticks":""}},"coloraxis":{"colorbar":{"outlinewidth":0,"ticks":""}},"colorscale":{"sequential":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"sequentialminus":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"diverging":[[0,"#8e0152"],[0.1,"#c51b7d"],[0.2,"#de77ae"],[0.3,"#f1b6da"],[0.4,"#fde0ef"],[0.5,"#f7f7f7"],[0.6,"#e6f5d0"],[0.7,"#b8e186"],[0.8,"#7fbc41"],[0.9,"#4d9221"],[1,"#276419"]]},"xaxis":{"gridcolor":"white","linecolor":"white","ticks":"","title":{"standoff":15},"zerolinecolor":"white","automargin":true,"zerolinewidth":2},"yaxis":{"gridcolor":"white","linecolor":"white","ticks":"","title":{"standoff":15},"zerolinecolor":"white","automargin":true,"zerolinewidth":2},"scene":{"xaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white","gridwidth":2},"yaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white","gridwidth":2},"zaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white","gridwidth":2}},"shapedefaults":{"line":{"color":"#2a3f5f"}},"annotationdefaults":{"arrowcolor":"#2a3f5f","arrowhead":0,"arrowwidth":1},"geo":{"bgcolor":"white","landcolor":"#E5ECF6","subunitcolor":"white","showland":true,"showlakes":true,"lakecolor":"white"},"title":{"x":0.05},"mapbox":{"style":"light"}}},"xaxis":{"anchor":"y","domain":[0.0,1.0],"title":{"text":"secs"},"type":"log"},"yaxis":{"anchor":"x","domain":[0.0,1.0],"title":{"text":"top1"}},"legend":{"title":{"text":"family"},"tracegroupgap":0,"itemsizing":"constant"},"title":{"text":"Inference"},"height":800,"width":1000},                        {"responsive": true}                    ).then(function(){
                            
var gd = document.getElementById('a02e5d04-6fe4-4936-be6c-06e719350f52');
var x = new MutationObserver(function (mutations, observer) {{
        var display = window.getComputedStyle(gd).display;
        if (!display || display === 'none') {{
            console.log([gd, 'removed!']);
            Plotly.purge(gd);
            observer.disconnect();
        }}
}});

// Listen for the removal of the full notebook cells
var notebookContainer = gd.closest('#notebook-container');
if (notebookContainer) {{
    x.observe(notebookContainer, {childList: true});
}}

// Listen for the clearing of the current output cell
var outputEl = gd.closest('.output');
if (outputEl) {{
    x.observe(outputEl, {childList: true});
}}

                        })                };                });            </script>        </div>
</div>
</div>
<p>I noticed that the GPU usage bar in Kaggle was still nearly empty, so we’re still CPU bound. That means we should be able to use a more capable model with little if any speed impact. <code>convnext_small</code> tops the performance/accuracy tradeoff score there, so let’s give it a go!</p>
</section>
</section>
<section id="convnext" class="level3">
<h3 class="anchored" data-anchor-id="convnext">ConvNeXT</h3>
<p>The ConvNeXT model was proposed in <a href="https://arxiv.org/abs/2201.03545">A ConvNet for the 2020s</a> by Zhuang Liu, Hanzi Mao, Chao-Yuan Wu, Christoph Feichtenhofer, Trevor Darrell, Saining Xie. ConvNeXT is a pure convolutional model (ConvNet), inspired by the design of Vision Transformers, that claims to outperform them.</p>
<p>The abstract from the paper is the following:</p>
<blockquote class="blockquote">
<p>The “Roaring 20s” of visual recognition began with the introduction of Vision Transformers (ViTs), which quickly superseded ConvNets as the state-of-the-art image classification model. A vanilla ViT, on the other hand, faces difficulties when applied to general computer vision tasks such as object detection and semantic segmentation. It is the hierarchical Transformers (e.g., Swin Transformers) that reintroduced several ConvNet priors, making Transformers practically viable as a generic vision backbone and demonstrating remarkable performance on a wide variety of vision tasks. However, the effectiveness of such hybrid approaches is still largely credited to the intrinsic superiority of Transformers, rather than the inherent inductive biases of convolutions. In this work, we reexamine the design spaces and test the limits of what a pure ConvNet can achieve. We gradually “modernize” a standard ResNet toward the design of a vision Transformer, and discover several key components that contribute to the performance difference along the way. The outcome of this exploration is a family of pure ConvNet models dubbed ConvNeXt. Constructed entirely from standard ConvNet modules, ConvNeXts compete favorably with Transformers in terms of accuracy and scalability, achieving 87.8% ImageNet top-1 accuracy and outperforming Swin Transformers on COCO detection and ADE20K segmentation, while maintaining the simplicity and efficiency of standard ConvNets.</p>
</blockquote>
<p>Let’s take a look at one of them…</p>
<div class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1"><span class="co" style="color: #5E5E5E;"># choose our vision model architecture</span></span>
<span id="cb45-2">arch <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'convnext_small_in22k'</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1"><span class="co" style="color: #5E5E5E;"># feed chosen model into our learner</span></span>
<span id="cb46-2">learn <span class="op" style="color: #5E5E5E;">=</span> train(arch, item<span class="op" style="color: #5E5E5E;">=</span>Resize(<span class="dv" style="color: #AD0000;">192</span>, method<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'squish'</span>),</span>
<span id="cb46-3">              batch<span class="op" style="color: #5E5E5E;">=</span>aug_transforms(size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">128</span>, min_scale<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.75</span>))</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th>epoch</th>
      <th>train_loss</th>
      <th>valid_loss</th>
      <th>error_rate</th>
      <th>time</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>1.288349</td>
      <td>0.913078</td>
      <td>0.279673</td>
      <td>05:54</td>
    </tr>
  </tbody>
</table>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th>epoch</th>
      <th>train_loss</th>
      <th>valid_loss</th>
      <th>error_rate</th>
      <th>time</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>0.646190</td>
      <td>0.435760</td>
      <td>0.138395</td>
      <td>34:20</td>
    </tr>
    <tr>
      <td>1</td>
      <td>0.492490</td>
      <td>0.374682</td>
      <td>0.122057</td>
      <td>34:16</td>
    </tr>
    <tr>
      <td>2</td>
      <td>0.316289</td>
      <td>0.239387</td>
      <td>0.075444</td>
      <td>34:23</td>
    </tr>
    <tr>
      <td>3</td>
      <td>0.200733</td>
      <td>0.164755</td>
      <td>0.053340</td>
      <td>34:13</td>
    </tr>
    <tr>
      <td>4</td>
      <td>0.134689</td>
      <td>0.158538</td>
      <td>0.050937</td>
      <td>34:10</td>
    </tr>
  </tbody>
</table>
</div>
</div>
<div class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1"><span class="co" style="color: #5E5E5E;"># create our test set</span></span>
<span id="cb47-2">tst_files <span class="op" style="color: #5E5E5E;">=</span> get_image_files(path<span class="op" style="color: #5E5E5E;">/</span><span class="st" style="color: #20794D;">'test_images'</span>).<span class="bu" style="color: null;">sorted</span>()</span>
<span id="cb47-3">tst_dl <span class="op" style="color: #5E5E5E;">=</span> learn.dls.test_dl(tst_files)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1"><span class="co" style="color: #5E5E5E;"># grab our predictions</span></span>
<span id="cb48-2">probs,_,idxs <span class="op" style="color: #5E5E5E;">=</span> learn.get_preds(dl<span class="op" style="color: #5E5E5E;">=</span>tst_dl, with_decoded<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb48-3">idxs</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
<div class="cell-output cell-output-display" data-execution_count="23">
<pre><code>TensorBase([7, 8, 3,  ..., 8, 1, 5])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1"><span class="co" style="color: #5E5E5E;"># grab disease names from vocab</span></span>
<span id="cb50-2">dls.vocab</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="24">
<pre><code>['bacterial_leaf_blight', 'bacterial_leaf_streak', 'bacterial_panicle_blight', 'blast', 'brown_spot', 'dead_heart', 'downy_mildew', 'hispa', 'normal', 'tungro']</code></pre>
</div>
</div>
<div class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1"><span class="co" style="color: #5E5E5E;"># map disease names to indexes</span></span>
<span id="cb52-2">mapping <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">dict</span>(<span class="bu" style="color: null;">enumerate</span>(dls.vocab)) <span class="co" style="color: #5E5E5E;"># create a dictionary of the indexes and vocab</span></span>
<span id="cb52-3">results <span class="op" style="color: #5E5E5E;">=</span> pd.Series(idxs.numpy(), name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"idxs"</span>).<span class="bu" style="color: null;">map</span>(mapping) <span class="co" style="color: #5E5E5E;"># looks up the dictionary and returns the indexes, and name of indexes. Passing .map to a dictionary (mapping) is much fasster than passing to a function</span></span>
<span id="cb52-4">results</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="25">
<pre><code>0                       hispa
1                      normal
2                       blast
3                       blast
4                       blast
                ...          
3464               dead_heart
3465                    hispa
3466                   normal
3467    bacterial_leaf_streak
3468               dead_heart
Name: idxs, Length: 3469, dtype: object</code></pre>
</div>
</div>
<div class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb54-1"><span class="co" style="color: #5E5E5E;"># lets's have a look at the sample Kaggle submisison file</span></span>
<span id="cb54-2">ss <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(path<span class="op" style="color: #5E5E5E;">/</span><span class="st" style="color: #20794D;">'sample_submission.csv'</span>)</span>
<span id="cb54-3">ss</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="27">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>image_id</th>
      <th>label</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>200001.jpg</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>1</th>
      <td>200002.jpg</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2</th>
      <td>200003.jpg</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>3</th>
      <td>200004.jpg</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>4</th>
      <td>200005.jpg</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>3464</th>
      <td>203465.jpg</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>3465</th>
      <td>203466.jpg</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>3466</th>
      <td>203467.jpg</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>3467</th>
      <td>203468.jpg</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>3468</th>
      <td>203469.jpg</td>
      <td>NaN</td>
    </tr>
  </tbody>
</table>
<p>3469 rows × 2 columns</p>
</div>
</div>
</div>
<div class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb55-1"><span class="co" style="color: #5E5E5E;"># replace 'label' column with our results</span></span>
<span id="cb55-2">ss[<span class="st" style="color: #20794D;">'label'</span>] <span class="op" style="color: #5E5E5E;">=</span> results</span>
<span id="cb55-3">ss.to_csv(<span class="st" style="color: #20794D;">'subm.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>) </span>
<span id="cb55-4"><span class="op" style="color: #5E5E5E;">!</span>head subm.csv</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>image_id,label
200001.jpg,hispa
200002.jpg,normal
200003.jpg,blast
200004.jpg,blast
200005.jpg,blast
200006.jpg,brown_spot
200007.jpg,dead_heart
200008.jpg,brown_spot
200009.jpg,hispa</code></pre>
</div>
</div>
<div class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb57-1"><span class="co" style="color: #5E5E5E;"># function to submit to Kaggle</span></span>
<span id="cb57-2"><span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">not</span> iskaggle:</span>
<span id="cb57-3">    <span class="im" style="color: #00769E;">from</span> kaggle <span class="im" style="color: #00769E;">import</span> api</span>
<span id="cb57-4">    api.competition_submit_cli(<span class="st" style="color: #20794D;">'subm.csv'</span>, <span class="st" style="color: #20794D;">'initial convnext small in22k'</span>, comp)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████████████████████████████████████████████████████████████████████████| 70.5k/70.5k [00:01&lt;00:00, 50.3kB/s]</code></pre>
</div>
</div>
<p>Excellent. This improved model achiveved a public score of 0.95617, comfortably mid table. But, we can do even better:</p>
</section>
<section id="pre-processing-experiments" class="level3">
<h3 class="anchored" data-anchor-id="pre-processing-experiments">Pre-processing experiments</h3>
<p>So, what shall we try first? One thing which can make a difference is whether we “squish” a rectangular image into a square shape by changing it’s aspect ratio, or randomly crop out a square from it, or whether we add black padding to the edges to make it a square. In the previous version we “squished”.</p>
<p>We can also try padding, which keeps all the original image without transforming it – here’s what that looks like:</p>
<div class="cell" data-execution_count="42">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb59-1"><span class="co" style="color: #5E5E5E;"># data augmentation using padding</span></span>
<span id="cb59-2">dls <span class="op" style="color: #5E5E5E;">=</span> ImageDataLoaders.from_folder(trn_path, valid_pct<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.2</span>, seed<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">42</span>,</span>
<span id="cb59-3">    item_tfms<span class="op" style="color: #5E5E5E;">=</span>Resize(<span class="dv" style="color: #AD0000;">192</span>, method<span class="op" style="color: #5E5E5E;">=</span>ResizeMethod.Pad, pad_mode<span class="op" style="color: #5E5E5E;">=</span>PadMode.Zeros))</span>
<span id="cb59-4">dls.show_batch(max_n<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Paddy_Doctor/Paddy_Doctor_files/figure-html/cell-40-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="43">
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb60-1"><span class="co" style="color: #5E5E5E;"># feed our learner </span></span>
<span id="cb60-2">learn <span class="op" style="color: #5E5E5E;">=</span> train(arch, item<span class="op" style="color: #5E5E5E;">=</span>Resize((<span class="dv" style="color: #AD0000;">256</span>,<span class="dv" style="color: #AD0000;">192</span>), method<span class="op" style="color: #5E5E5E;">=</span>ResizeMethod.Pad, pad_mode<span class="op" style="color: #5E5E5E;">=</span>PadMode.Zeros),</span>
<span id="cb60-3">      batch<span class="op" style="color: #5E5E5E;">=</span>aug_transforms(size<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">171</span>,<span class="dv" style="color: #AD0000;">128</span>), min_scale<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.75</span>))</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th>epoch</th>
      <th>train_loss</th>
      <th>valid_loss</th>
      <th>error_rate</th>
      <th>time</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>1.263865</td>
      <td>0.892569</td>
      <td>0.281115</td>
      <td>07:24</td>
    </tr>
  </tbody>
</table>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th>epoch</th>
      <th>train_loss</th>
      <th>valid_loss</th>
      <th>error_rate</th>
      <th>time</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>0.659388</td>
      <td>0.440261</td>
      <td>0.138395</td>
      <td>44:51</td>
    </tr>
    <tr>
      <td>1</td>
      <td>0.513566</td>
      <td>0.397354</td>
      <td>0.131667</td>
      <td>44:49</td>
    </tr>
    <tr>
      <td>2</td>
      <td>0.339301</td>
      <td>0.231382</td>
      <td>0.067756</td>
      <td>44:36</td>
    </tr>
    <tr>
      <td>3</td>
      <td>0.204870</td>
      <td>0.158647</td>
      <td>0.047093</td>
      <td>44:34</td>
    </tr>
    <tr>
      <td>4</td>
      <td>0.134242</td>
      <td>0.140719</td>
      <td>0.044690</td>
      <td>44:33</td>
    </tr>
  </tbody>
</table>
</div>
</div>
<p>That’s looking like a pretty good improvement - an error_rate of 0.044690 against 0.050937.</p>
</section>
<section id="test-time-augmentation" class="level3">
<h3 class="anchored" data-anchor-id="test-time-augmentation">Test time augmentation</h3>
<p>To make the predictions even better, we can try <a href="https://nbviewer.org/github/fastai/fastbook/blob/master/07_sizing_and_tta.ipynb#Test-Time-Augmentation">test time augmentation</a> (TTA), which <a href="https://www.amazon.com/Deep-Learning-Coders-fastai-PyTorch/dp/1492045527">our book</a> defines as:</p>
<blockquote class="blockquote">
<p><em>During inference or validation, creating multiple versions of each image, using data augmentation, and then taking the average or maximum of the predictions for each augmented version of the image.</em></p>
</blockquote>
<p>Before trying that out, we’ll first see how to check the predictions and error rate of our model without TTA:</p>
<div class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb61-1">valid <span class="op" style="color: #5E5E5E;">=</span> learn.dls.valid</span>
<span id="cb61-2">preds,targs <span class="op" style="color: #5E5E5E;">=</span> learn.get_preds(dl<span class="op" style="color: #5E5E5E;">=</span>valid)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/home/stephen137/mambaforge/lib/python3.10/site-packages/torch/amp/autocast_mode.py:198: UserWarning: User provided device_type of 'cuda', but CUDA is not available. Disabling
  warnings.warn('User provided device_type of \'cuda\', but CUDA is not available. Disabling')
/home/stephen137/mambaforge/lib/python3.10/site-packages/torch/cuda/amp/grad_scaler.py:115: UserWarning: torch.cuda.amp.GradScaler is enabled, but CUDA is not available.  Disabling.
  warnings.warn("torch.cuda.amp.GradScaler is enabled, but CUDA is not available.  Disabling.")</code></pre>
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
</div>
<div class="cell" data-execution_count="32">
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb63-1">error_rate(preds, targs)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="32">
<pre><code>TensorBase(0.0509)</code></pre>
</div>
</div>
<p>That’s the same error rate we saw at the end of training, above, so we know that we’re doing that correctly. Here’s what our data augmentation is doing – if you look carefully, you can see that each image is a bit lighter or darker, sometimes flipped, zoomed, rotated, warped, and/or zoomed:</p>
<div class="cell" data-execution_count="33">
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb65-1">learn.dls.train.show_batch(max_n<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">6</span>, unique<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Paddy_Doctor/Paddy_Doctor_files/figure-html/cell-44-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>If we call <code>tta()</code> then we’ll get the average of predictions made for multiple different augmented versions of each image, along with the unaugmented original:</p>
<div class="cell" data-execution_count="34">
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb66-1">tta_preds,_ <span class="op" style="color: #5E5E5E;">=</span> learn.tta(dl<span class="op" style="color: #5E5E5E;">=</span>valid)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

    <div>
      <progress value="0" class="" max="5" style="width:300px; height:20px; vertical-align: middle;"></progress>
      
    </div>
    
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
</div>
<p>Let’s check the error rate of this:</p>
<div class="cell" data-execution_count="35">
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb67-1">error_rate(tta_preds, targs)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="35">
<pre><code>TensorBase(0.0375)</code></pre>
</div>
</div>
<p>That’s a huge improvement! We’re now ready to get our Kaggle submission sorted. First, we’ll grab the test set like we did in the last notebook:</p>
<div class="cell" data-execution_count="36">
<div class="sourceCode cell-code" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb69-1">tst_files <span class="op" style="color: #5E5E5E;">=</span> get_image_files(path<span class="op" style="color: #5E5E5E;">/</span><span class="st" style="color: #20794D;">'test_images'</span>).<span class="bu" style="color: null;">sorted</span>()</span>
<span id="cb69-2">tst_dl <span class="op" style="color: #5E5E5E;">=</span> learn.dls.test_dl(tst_files)</span></code></pre></div>
</div>
<p>Next, do TTA on that test set:</p>
<div class="cell" data-execution_count="37">
<div class="sourceCode cell-code" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb70-1">preds,_ <span class="op" style="color: #5E5E5E;">=</span> learn.tta(dl<span class="op" style="color: #5E5E5E;">=</span>tst_dl)</span></code></pre></div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

    <div>
      <progress value="0" class="" max="5" style="width:300px; height:20px; vertical-align: middle;"></progress>
      
    </div>
    
</div>
<div class="cell-output cell-output-display">

<style>
    /* Turns off some styling */
    progress {
        /* gets rid of default border in Firefox and Opera. */
        border: none;
        /* Needs to be in here for Safari polyfill so background images work as expected. */
        background-size: auto;
    }
    progress:not([value]), progress:not([value])::-webkit-progress-bar {
        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);
    }
    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {
        background: #F44336;
    }
</style>
</div>
<div class="cell-output cell-output-display">

</div>
</div>
<p>We need to indices of the largest probability prediction in each row, since that’s the index of the predicted disease. <code>argmax</code> in PyTorch gives us exactly that:</p>
<div class="cell" data-execution_count="38">
<div class="sourceCode cell-code" id="cb71" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb71-1">idxs <span class="op" style="color: #5E5E5E;">=</span> preds.argmax(dim<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span></code></pre></div>
</div>
<p>Now we need to look up those indices in the <code>vocab</code>. Last time we did that using pandas, although since then I realised there’s an even easier way!:</p>
<div class="cell" data-execution_count="39">
<div class="sourceCode cell-code" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb72-1">vocab <span class="op" style="color: #5E5E5E;">=</span> np.array(learn.dls.vocab)</span>
<span id="cb72-2">results <span class="op" style="color: #5E5E5E;">=</span> pd.Series(vocab[idxs], name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"idxs"</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="40">
<div class="sourceCode cell-code" id="cb73" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb73-1">ss <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(path<span class="op" style="color: #5E5E5E;">/</span><span class="st" style="color: #20794D;">'sample_submission.csv'</span>)</span>
<span id="cb73-2">ss[<span class="st" style="color: #20794D;">'label'</span>] <span class="op" style="color: #5E5E5E;">=</span> results</span>
<span id="cb73-3">ss.to_csv(<span class="st" style="color: #20794D;">'subm.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span>
<span id="cb73-4"><span class="op" style="color: #5E5E5E;">!</span>head subm.csv</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>image_id,label
200001.jpg,hispa
200002.jpg,normal
200003.jpg,blast
200004.jpg,blast
200005.jpg,blast
200006.jpg,brown_spot
200007.jpg,dead_heart
200008.jpg,brown_spot
200009.jpg,hispa</code></pre>
</div>
</div>
<div class="cell" data-execution_count="44">
<div class="sourceCode cell-code" id="cb75" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb75-1"><span class="co" style="color: #5E5E5E;"># submit to Kaggle</span></span>
<span id="cb75-2"><span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">not</span> iskaggle:</span>
<span id="cb75-3">    <span class="im" style="color: #00769E;">from</span> kaggle <span class="im" style="color: #00769E;">import</span> api</span>
<span id="cb75-4">    api.competition_submit_cli(<span class="st" style="color: #20794D;">'subm.csv'</span>, <span class="st" style="color: #20794D;">'convnext small 256x192 tta'</span>, comp)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████████████████████████████████████████████████████████████████████████| 70.4k/70.4k [00:01&lt;00:00, 44.9kB/s]</code></pre>
</div>
</div>
<p>This submission scored 0.96309, improving on our previous submission score of 0.95617.</p>
</section>
<section id="iterative-approach" class="level3">
<h3 class="anchored" data-anchor-id="iterative-approach">Iterative approach</h3>
<p>It took a long time to train the ConvNeXT model (due to GPU constraints on my machine and also on <a href="https://www.paperspace.com/">Paperspace</a> - it’s very rare for there to be any GPU’s available on the free subscription. I’ve since upgraded to ‘Pro’ which costs $8 pm at the time of writing). However you can see the significant improvements made by iterating, and the latest submission of 0.96309 would have been further improved by using larger images and more epochs.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Paddy_Doctor/Paddy_Doctor_files/figure-html/63d845e3-181e-43ff-a5cc-55c785d103d8.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">kaggle_submissions.JPG</figcaption><p></p>
</figure>
</div>
</section>
<section id="key-takeaways" class="level3">
<h3 class="anchored" data-anchor-id="key-takeaways">Key takeaways</h3>
<p>Most importantly, we have learned the importance of making an early submission to Kaggle, in order to obtain a baseline for rapid improvement through iterating. We’ve also learned some powerful data augmentation techniques, in particular <a href="https://nbviewer.org/github/fastai/fastbook/blob/master/07_sizing_and_tta.ipynb#Test-Time-Augmentation">test time augmentation</a> (TTA), how to handle CPU bound environments by resizing images, and discovered the vision model playground that is <a href="https://timm.fast.ai/">timm</a>.</p>


</section>

 ]]></description>
  <category>Kaggle</category>
  <category>fastai</category>
  <category>vision</category>
  <category>timm</category>
  <guid>https://stephen137.github.io/posts/Paddy_Doctor/Paddy_Doctor.html</guid>
  <pubDate>Mon, 09 Jan 2023 23:00:00 GMT</pubDate>
  <media:content url="https://stephen137.github.io/posts/Paddy_Doctor/rice_disease.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Kaggle</title>
  <dc:creator>Stephen Barrie</dc:creator>
  <link>https://stephen137.github.io/posts/Kaggle/Kaggle.html</link>
  <description><![CDATA[ 




<section id="kaggle-api" class="level3">
<h3 class="anchored" data-anchor-id="kaggle-api">Kaggle API</h3>
<p>In order to download datasets from Kaggle when working outwith the Kaggle environment you will need to make use of a Kaggle API. You can get this by clicking on <code>Account</code> below your profile name, and then selecting <code>Create New API Token</code></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Kaggle/Kaggle_files/figure-html/215d4d3a-203d-425d-bb6c-40d313d38a2a.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Kaggle_1.JPG</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Kaggle/Kaggle_files/figure-html/4dfd54a8-b679-4d02-bd64-17edb9d6fd15.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Kaggle_2.JPG</figcaption><p></p>
</figure>
</div>
<p>Initially the file will be saved in your local environment - in a directory named .kaggle. We need to move this file into a <code>.kaggle</code> directory within your PaperSpace environment. I found this easiest to do by:</p>
<ol type="1">
<li>Open in JupyterLab</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Kaggle/Kaggle_files/figure-html/6f848ddf-8adb-46f1-bdaa-af85adcf6c18.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">JupyterLab.JPG</figcaption><p></p>
</figure>
</div>
<ol start="2" type="1">
<li>Launch Classic NoteBook</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Kaggle/Kaggle_files/figure-html/cf475bf0-3e78-4ced-a09a-0ca5acb8ef31.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Classic_NoteBook.JPG</figcaption><p></p>
</figure>
</div>
<ol start="3" type="1">
<li>Create a storage directory to store Kaggle API within PaperSpace - and add the Kaggle API json file from your local environment</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Kaggle/Kaggle_files/figure-html/b6d4e96a-30e7-4c4a-9a69-96e2362e29bb.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Storage.JPG</figcaption><p></p>
</figure>
</div>
<ol start="4" type="1">
<li>Move the json file into a .kaggle directory within Paperspace. You can enter the following commands within the Terminal:</li>
</ol>
<p><code>mv kaggle.json ~/.kaggle</code></p>
<p>The <code>.kaggle</code> directory should already exist but if not you can create one by typing following command within the Terminal:</p>
<p><code>mkdir ~/.kaggle</code></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Kaggle/Kaggle_files/figure-html/1faca987-3f20-477b-a428-0cb555a5a490.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Terminal.JPG</figcaption><p></p>
</figure>
</div>
<ol start="5" type="1">
<li>To prevent other users from using our API token, we can type the following command in the Terminal:</li>
</ol>
<p><code>chmod 600 /root/.kaggle/kaggle.json</code></p>
<p>OK. That’s us now all set up and ready to access Kaggle datsets. If you are looking for a specific dataset, you can now type the following command within the Terminal:</p>
<p><code>kaggle datasets list</code></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Kaggle/Kaggle_files/figure-html/a4e3c9e5-2a7a-4118-96aa-23f5ffbde74b.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">datasets.JPG</figcaption><p></p>
</figure>
</div>
<p>As you can see, there’s plenty to keep us occupied!! If you wanted to download data from this API, just enter the command in the Terminal, following the format below :</p>
<blockquote class="blockquote">
<p>kaggle datasets download <code>[ref]</code></p>
</blockquote>
<p>For example if we wanted the (TOP 50)List if most expensive films dataset we would type:</p>
<p><code>kaggle datasets download devrimtuner/top-50list-of-most-expensive-films</code></p>


</section>

 ]]></description>
  <category>TIL</category>
  <category>Kaggle</category>
  <guid>https://stephen137.github.io/posts/Kaggle/Kaggle.html</guid>
  <pubDate>Mon, 09 Jan 2023 23:00:00 GMT</pubDate>
  <media:content url="https://stephen137.github.io/posts/Kaggle/kaggle.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Random Forests</title>
  <dc:creator>Stephen Barrie</dc:creator>
  <link>https://stephen137.github.io/posts/Random_Forests/Random_Forests.html</link>
  <description><![CDATA[ 




<section id="random-forests" class="level2">
<h2 class="anchored" data-anchor-id="random-forests">Random Forests</h2>
<p>This is my follow up to the first part of <a href="https://www.youtube.com/watch?v=AdhG64NF76E"><strong><em>Lesson 6: Practical Deep Learning for Coders 2022</em></strong></a> in which Jeremy introduces Decision Trees and Random Forests.</p>
<p>For tabular data (i.e data that looks like spreadsheet or database tables, such as the data for the Titanic competition) it’s more common to see good results by using ensembles of decision trees, such as Random Forests and Gradient Boosting Machines. In this notebook, we’re going to learn all about Random Forests, by building one from scratch, and using it to submit to the Titanic competition!</p>
<p>We’ll start by importing the basic set of libraries we normally need for data science work, and setting numpy to use our display space more efficiently:</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># import required package</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;">from</span> fastai.imports <span class="im" style="color: #00769E;">import</span> <span class="op" style="color: #5E5E5E;">*</span></span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;"># optimize display settings</span></span>
<span id="cb1-5">np.set_printoptions(linewidth<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">130</span>)</span></code></pre></div>
</div>
<p>Now let’s create DataFrames from the CSV files and carry out some preprocessing:</p>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># grab our data from Kaggle</span></span>
<span id="cb2-2"><span class="im" style="color: #00769E;">import</span> os</span>
<span id="cb2-3">iskaggle <span class="op" style="color: #5E5E5E;">=</span> os.environ.get(<span class="st" style="color: #20794D;">'KAGGLE_KERNEL_RUN_TYPE'</span>, <span class="st" style="color: #20794D;">''</span>)</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="cf" style="color: #003B4F;">if</span> iskaggle: path <span class="op" style="color: #5E5E5E;">=</span> Path(<span class="st" style="color: #20794D;">'../input/titanic'</span>)</span>
<span id="cb2-6"><span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb2-7">    <span class="im" style="color: #00769E;">import</span> zipfile,kaggle</span>
<span id="cb2-8">    path <span class="op" style="color: #5E5E5E;">=</span> Path(<span class="st" style="color: #20794D;">'titanic'</span>)</span>
<span id="cb2-9">    kaggle.api.competition_download_cli(<span class="bu" style="color: null;">str</span>(path))</span>
<span id="cb2-10">    zipfile.ZipFile(<span class="ss" style="color: #20794D;">f'</span><span class="sc" style="color: #5E5E5E;">{</span>path<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">.zip'</span>).extractall(path)   </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>titanic.zip: Skipping, found more recently modified local copy (use --force to force download)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;"># read in our training and test datasets</span></span>
<span id="cb4-2">df <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(path<span class="op" style="color: #5E5E5E;">/</span><span class="st" style="color: #20794D;">'train.csv'</span>)</span>
<span id="cb4-3">tst_df <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(path<span class="op" style="color: #5E5E5E;">/</span><span class="st" style="color: #20794D;">'test.csv'</span>)</span>
<span id="cb4-4"></span>
<span id="cb4-5"><span class="co" style="color: #5E5E5E;"># let's see what is the most common value for each colums</span></span>
<span id="cb4-6">modes <span class="op" style="color: #5E5E5E;">=</span> df.mode().iloc[<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb4-7">modes</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>PassengerId                      1
Survived                       0.0
Pclass                         3.0
Name           Abbing, Mr. Anthony
Sex                           male
Age                           24.0
SibSp                          0.0
Parch                          0.0
Ticket                        1601
Fare                          8.05
Cabin                      B96 B98
Embarked                         S
Name: 0, dtype: object</code></pre>
</div>
</div>
<p>One difference with Random Forests however is that we don’t generally have to create dummy variables like we do for non-numeric columns in linear models and neural networks. Instead, we can just convert those fields to categorical variables, which internally in Pandas makes a list of all the unique values in the column, and replaces each value with a number. The number is just an index for looking up the value in the list of all unique values.</p>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">df.dtypes</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>PassengerId      int64
Survived         int64
Pclass           int64
Name            object
Sex             object
Age            float64
SibSp            int64
Parch            int64
Ticket          object
Fare           float64
Cabin           object
Embarked        object
dtype: object</code></pre>
</div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;"># create a function to carry out some preprocessing</span></span>
<span id="cb8-2"><span class="kw" style="color: #003B4F;">def</span> proc_data(df):</span>
<span id="cb8-3">    df[<span class="st" style="color: #20794D;">'Fare'</span>] <span class="op" style="color: #5E5E5E;">=</span> df.Fare.fillna(<span class="dv" style="color: #AD0000;">0</span>) <span class="co" style="color: #5E5E5E;"># replace Fare Na with 0</span></span>
<span id="cb8-4">    df.fillna(modes, inplace<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb8-5">    df[<span class="st" style="color: #20794D;">'LogFare'</span>] <span class="op" style="color: #5E5E5E;">=</span> np.log1p(df[<span class="st" style="color: #20794D;">'Fare'</span>]) <span class="co" style="color: #5E5E5E;"># take log of fares and add 1 - normalization</span></span>
<span id="cb8-6">    df[<span class="st" style="color: #20794D;">'Embarked'</span>] <span class="op" style="color: #5E5E5E;">=</span> pd.Categorical(df.Embarked) <span class="co" style="color: #5E5E5E;"># convert embaked column to categorical</span></span>
<span id="cb8-7">    df[<span class="st" style="color: #20794D;">'Sex'</span>] <span class="op" style="color: #5E5E5E;">=</span> pd.Categorical(df.Sex) <span class="co" style="color: #5E5E5E;"># convert sex column to categorical</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;"># apply our pre-processign function to our training set</span></span>
<span id="cb9-2">proc_data(df)</span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;"># apply our pre-processign function to our test set</span></span>
<span id="cb9-5">proc_data(tst_df)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">df</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>PassengerId</th>
      <th>Survived</th>
      <th>Pclass</th>
      <th>Name</th>
      <th>Sex</th>
      <th>Age</th>
      <th>SibSp</th>
      <th>Parch</th>
      <th>Ticket</th>
      <th>Fare</th>
      <th>Cabin</th>
      <th>Embarked</th>
      <th>LogFare</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>0</td>
      <td>3</td>
      <td>Braund, Mr. Owen Harris</td>
      <td>male</td>
      <td>22.0</td>
      <td>1</td>
      <td>0</td>
      <td>A/5 21171</td>
      <td>7.2500</td>
      <td>B96 B98</td>
      <td>S</td>
      <td>2.110213</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2</td>
      <td>1</td>
      <td>1</td>
      <td>Cumings, Mrs. John Bradley (Florence Briggs Thayer)</td>
      <td>female</td>
      <td>38.0</td>
      <td>1</td>
      <td>0</td>
      <td>PC 17599</td>
      <td>71.2833</td>
      <td>C85</td>
      <td>C</td>
      <td>4.280593</td>
    </tr>
    <tr>
      <th>2</th>
      <td>3</td>
      <td>1</td>
      <td>3</td>
      <td>Heikkinen, Miss. Laina</td>
      <td>female</td>
      <td>26.0</td>
      <td>0</td>
      <td>0</td>
      <td>STON/O2. 3101282</td>
      <td>7.9250</td>
      <td>B96 B98</td>
      <td>S</td>
      <td>2.188856</td>
    </tr>
    <tr>
      <th>3</th>
      <td>4</td>
      <td>1</td>
      <td>1</td>
      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>
      <td>female</td>
      <td>35.0</td>
      <td>1</td>
      <td>0</td>
      <td>113803</td>
      <td>53.1000</td>
      <td>C123</td>
      <td>S</td>
      <td>3.990834</td>
    </tr>
    <tr>
      <th>4</th>
      <td>5</td>
      <td>0</td>
      <td>3</td>
      <td>Allen, Mr. William Henry</td>
      <td>male</td>
      <td>35.0</td>
      <td>0</td>
      <td>0</td>
      <td>373450</td>
      <td>8.0500</td>
      <td>B96 B98</td>
      <td>S</td>
      <td>2.202765</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>886</th>
      <td>887</td>
      <td>0</td>
      <td>2</td>
      <td>Montvila, Rev. Juozas</td>
      <td>male</td>
      <td>27.0</td>
      <td>0</td>
      <td>0</td>
      <td>211536</td>
      <td>13.0000</td>
      <td>B96 B98</td>
      <td>S</td>
      <td>2.639057</td>
    </tr>
    <tr>
      <th>887</th>
      <td>888</td>
      <td>1</td>
      <td>1</td>
      <td>Graham, Miss. Margaret Edith</td>
      <td>female</td>
      <td>19.0</td>
      <td>0</td>
      <td>0</td>
      <td>112053</td>
      <td>30.0000</td>
      <td>B42</td>
      <td>S</td>
      <td>3.433987</td>
    </tr>
    <tr>
      <th>888</th>
      <td>889</td>
      <td>0</td>
      <td>3</td>
      <td>Johnston, Miss. Catherine Helen "Carrie"</td>
      <td>female</td>
      <td>24.0</td>
      <td>1</td>
      <td>2</td>
      <td>W./C. 6607</td>
      <td>23.4500</td>
      <td>B96 B98</td>
      <td>S</td>
      <td>3.196630</td>
    </tr>
    <tr>
      <th>889</th>
      <td>890</td>
      <td>1</td>
      <td>1</td>
      <td>Behr, Mr. Karl Howell</td>
      <td>male</td>
      <td>26.0</td>
      <td>0</td>
      <td>0</td>
      <td>111369</td>
      <td>30.0000</td>
      <td>C148</td>
      <td>C</td>
      <td>3.433987</td>
    </tr>
    <tr>
      <th>890</th>
      <td>891</td>
      <td>0</td>
      <td>3</td>
      <td>Dooley, Mr. Patrick</td>
      <td>male</td>
      <td>32.0</td>
      <td>0</td>
      <td>0</td>
      <td>370376</td>
      <td>7.7500</td>
      <td>B96 B98</td>
      <td>Q</td>
      <td>2.169054</td>
    </tr>
  </tbody>
</table>
<p>891 rows × 13 columns</p>
</div>
</div>
</div>
<p>We’ll make a list of the continuous, categorical, and dependent variables. Note that we no longer consider <em>pclass</em> a categorical variable. That’s because it’s ordered (i.e 1st, 2nd, and 3rd class have an order), and decision trees, as we’ll see, only care about order, not about absolute value.</p>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;"># set our categorical variables</span></span>
<span id="cb11-2">cats<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">"Sex"</span>,<span class="st" style="color: #20794D;">"Embarked"</span>]</span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;"># set our continuous variables</span></span>
<span id="cb11-5">conts<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'Age'</span>, <span class="st" style="color: #20794D;">'SibSp'</span>, <span class="st" style="color: #20794D;">'Parch'</span>, <span class="st" style="color: #20794D;">'LogFare'</span>,<span class="st" style="color: #20794D;">"Pclass"</span>]</span>
<span id="cb11-6"></span>
<span id="cb11-7"><span class="co" style="color: #5E5E5E;"># set our dependent(target/y) variable</span></span>
<span id="cb11-8">dep<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Survived"</span></span></code></pre></div>
</div>
<p>Even although we’ve made the cats columns categorical, they are still shown by Pandas as their original values:</p>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;"># take a look at first 5 rows of sex column</span></span>
<span id="cb12-2">df.Sex.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>0      male
1    female
2    female
3    female
4      male
Name: Sex, dtype: category
Categories (2, object): ['female', 'male']</code></pre>
</div>
</div>
<p>However behind the scenes they’re now stored as integers, with indices that are looked up in the Categories list shown in the output above. We can view the stored values by looking in the pandas <a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.cat.codes.html">**cat.codes</a>** attribute:</p>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;"># take a look at indexes applied to values in first 5 rows of sex column</span></span>
<span id="cb14-2">df.Sex.cat.codes.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>0    1
1    0
2    0
3    0
4    1
dtype: int8</code></pre>
</div>
</div>
<section id="binary-splits" class="level3">
<h3 class="anchored" data-anchor-id="binary-splits">Binary splits</h3>
<p>Before we create a Random Forest or Gradient Boosting Machine, we’ll first need to learn how to create a decision tree, from which both of these models are built. And to create a decision tree, we’ll first need to create a binary split, since that’s what a decision tree is built from.</p>
<p>A binary split is where all rows are placed into one of two groups, based on whether they’re above or below some threshold of some column. For example, we could split the rows of our dataset into males and females, by using the threshold 0.5 and the column Sex (since the values in the column are 0 for female and 1 for male). We can use a plot to see how that would split up our data – we’ll use the <strong><a href="https://seaborn.pydata.org/tutorial/introduction.html">Seaborn library</a></strong>, which is a layer on top of <strong><a href="https://matplotlib.org/stable/tutorials/introductory/quick_start.html">matplotlib</a></strong> that makes some useful charts easier to create, and more aesthetically pleasing by default:</p>
<section id="split-by-sex" class="level4">
<h4 class="anchored" data-anchor-id="split-by-sex">Split by Sex</h4>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="co" style="color: #5E5E5E;"># import required package for plotting</span></span>
<span id="cb16-2"><span class="im" style="color: #00769E;">import</span> seaborn <span class="im" style="color: #00769E;">as</span> sns</span></code></pre></div>
</div>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;"># create side by side histograms </span></span>
<span id="cb17-2">fig,axs <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">2</span>, figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">11</span>,<span class="dv" style="color: #AD0000;">5</span>))</span>
<span id="cb17-3"></span>
<span id="cb17-4"><span class="co" style="color: #5E5E5E;"># survival rate histogram by sex - axs[0] so this is first plot</span></span>
<span id="cb17-5">sns.barplot(data<span class="op" style="color: #5E5E5E;">=</span>df, y<span class="op" style="color: #5E5E5E;">=</span>dep, x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Sex"</span>, ax<span class="op" style="color: #5E5E5E;">=</span>axs[<span class="dv" style="color: #AD0000;">0</span>]).<span class="bu" style="color: null;">set</span>(title<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Survival rate"</span>)</span>
<span id="cb17-6"></span>
<span id="cb17-7"><span class="co" style="color: #5E5E5E;"># countplot by sex - axs[1] so this is second plot</span></span>
<span id="cb17-8">sns.countplot(data<span class="op" style="color: #5E5E5E;">=</span>df, x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Sex"</span>, ax<span class="op" style="color: #5E5E5E;">=</span>axs[<span class="dv" style="color: #AD0000;">1</span>]).<span class="bu" style="color: null;">set</span>(title<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Histogram"</span>)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Random_Forests/Random_Forests_files/figure-html/cell-13-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">df[<span class="st" style="color: #20794D;">'Sex'</span>].value_counts()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>male      577
female    314
Name: Sex, dtype: int64</code></pre>
</div>
</div>
<div class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">df[<span class="st" style="color: #20794D;">'Survived'</span>].<span class="bu" style="color: null;">sum</span>()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>342</code></pre>
</div>
</div>
<p>Here we see that (on the left) if we split the data into males and females, we’d have groups that have very different survival rates: &gt;70% for females, and &lt;20% for males. We can also see (on the right) that the split would be reasonably even, with over 300 passengers (out of 891) in each group.</p>
<p>We could create a very simple “model” which simply says that all females survive, and no males do. To do so, we better first split our data into a training and validation set, to see how accurate this approach turns out to be:</p>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="co" style="color: #5E5E5E;"># import required packages</span></span>
<span id="cb22-2"><span class="im" style="color: #00769E;">from</span> numpy <span class="im" style="color: #00769E;">import</span> random</span>
<span id="cb22-3"><span class="im" style="color: #00769E;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;">import</span> train_test_split</span></code></pre></div>
</div>
<div class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="co" style="color: #5E5E5E;"># set seee for reproducibility</span></span>
<span id="cb23-2">random.seed(<span class="dv" style="color: #AD0000;">42</span>)</span>
<span id="cb23-3"></span>
<span id="cb23-4"><span class="co" style="color: #5E5E5E;"># create training &amp; validation sets</span></span>
<span id="cb23-5">trn_df,val_df <span class="op" style="color: #5E5E5E;">=</span> train_test_split(df, test_size<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.25</span>)</span>
<span id="cb23-6"></span>
<span id="cb23-7"><span class="co" style="color: #5E5E5E;"># replace categorical variables with their integer codes</span></span>
<span id="cb23-8">trn_df[cats] <span class="op" style="color: #5E5E5E;">=</span> trn_df[cats].<span class="bu" style="color: null;">apply</span>(<span class="kw" style="color: #003B4F;">lambda</span> x: x.cat.codes)</span>
<span id="cb23-9">val_df[cats] <span class="op" style="color: #5E5E5E;">=</span> val_df[cats].<span class="bu" style="color: null;">apply</span>(<span class="kw" style="color: #003B4F;">lambda</span> x: x.cat.codes)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">trn_df</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="17">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>PassengerId</th>
      <th>Survived</th>
      <th>Pclass</th>
      <th>Name</th>
      <th>Sex</th>
      <th>Age</th>
      <th>SibSp</th>
      <th>Parch</th>
      <th>Ticket</th>
      <th>Fare</th>
      <th>Cabin</th>
      <th>Embarked</th>
      <th>LogFare</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>298</th>
      <td>299</td>
      <td>1</td>
      <td>1</td>
      <td>Saalfeld, Mr. Adolphe</td>
      <td>1</td>
      <td>24.00</td>
      <td>0</td>
      <td>0</td>
      <td>19988</td>
      <td>30.5000</td>
      <td>C106</td>
      <td>2</td>
      <td>3.449988</td>
    </tr>
    <tr>
      <th>884</th>
      <td>885</td>
      <td>0</td>
      <td>3</td>
      <td>Sutehall, Mr. Henry Jr</td>
      <td>1</td>
      <td>25.00</td>
      <td>0</td>
      <td>0</td>
      <td>SOTON/OQ 392076</td>
      <td>7.0500</td>
      <td>B96 B98</td>
      <td>2</td>
      <td>2.085672</td>
    </tr>
    <tr>
      <th>247</th>
      <td>248</td>
      <td>1</td>
      <td>2</td>
      <td>Hamalainen, Mrs. William (Anna)</td>
      <td>0</td>
      <td>24.00</td>
      <td>0</td>
      <td>2</td>
      <td>250649</td>
      <td>14.5000</td>
      <td>B96 B98</td>
      <td>2</td>
      <td>2.740840</td>
    </tr>
    <tr>
      <th>478</th>
      <td>479</td>
      <td>0</td>
      <td>3</td>
      <td>Karlsson, Mr. Nils August</td>
      <td>1</td>
      <td>22.00</td>
      <td>0</td>
      <td>0</td>
      <td>350060</td>
      <td>7.5208</td>
      <td>B96 B98</td>
      <td>2</td>
      <td>2.142510</td>
    </tr>
    <tr>
      <th>305</th>
      <td>306</td>
      <td>1</td>
      <td>1</td>
      <td>Allison, Master. Hudson Trevor</td>
      <td>1</td>
      <td>0.92</td>
      <td>1</td>
      <td>2</td>
      <td>113781</td>
      <td>151.5500</td>
      <td>C22 C26</td>
      <td>2</td>
      <td>5.027492</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>106</th>
      <td>107</td>
      <td>1</td>
      <td>3</td>
      <td>Salkjelsvik, Miss. Anna Kristine</td>
      <td>0</td>
      <td>21.00</td>
      <td>0</td>
      <td>0</td>
      <td>343120</td>
      <td>7.6500</td>
      <td>B96 B98</td>
      <td>2</td>
      <td>2.157559</td>
    </tr>
    <tr>
      <th>270</th>
      <td>271</td>
      <td>0</td>
      <td>1</td>
      <td>Cairns, Mr. Alexander</td>
      <td>1</td>
      <td>24.00</td>
      <td>0</td>
      <td>0</td>
      <td>113798</td>
      <td>31.0000</td>
      <td>B96 B98</td>
      <td>2</td>
      <td>3.465736</td>
    </tr>
    <tr>
      <th>860</th>
      <td>861</td>
      <td>0</td>
      <td>3</td>
      <td>Hansen, Mr. Claus Peter</td>
      <td>1</td>
      <td>41.00</td>
      <td>2</td>
      <td>0</td>
      <td>350026</td>
      <td>14.1083</td>
      <td>B96 B98</td>
      <td>2</td>
      <td>2.715244</td>
    </tr>
    <tr>
      <th>435</th>
      <td>436</td>
      <td>1</td>
      <td>1</td>
      <td>Carter, Miss. Lucile Polk</td>
      <td>0</td>
      <td>14.00</td>
      <td>1</td>
      <td>2</td>
      <td>113760</td>
      <td>120.0000</td>
      <td>B96 B98</td>
      <td>2</td>
      <td>4.795791</td>
    </tr>
    <tr>
      <th>102</th>
      <td>103</td>
      <td>0</td>
      <td>1</td>
      <td>White, Mr. Richard Frasar</td>
      <td>1</td>
      <td>21.00</td>
      <td>0</td>
      <td>1</td>
      <td>35281</td>
      <td>77.2875</td>
      <td>D26</td>
      <td>2</td>
      <td>4.360388</td>
    </tr>
  </tbody>
</table>
<p>668 rows × 13 columns</p>
</div>
</div>
</div>
<p>Now we can create our independent variables (the x variables) and dependent (the y variable):</p>
<div class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="co" style="color: #5E5E5E;"># create a function </span></span>
<span id="cb25-2"><span class="kw" style="color: #003B4F;">def</span> xs_y(df):</span>
<span id="cb25-3">    xs <span class="op" style="color: #5E5E5E;">=</span> df[cats<span class="op" style="color: #5E5E5E;">+</span>conts].copy() <span class="co" style="color: #5E5E5E;"># independent variables are catoegorical and continuous</span></span>
<span id="cb25-4">    <span class="cf" style="color: #003B4F;">return</span> xs,df[dep] <span class="cf" style="color: #003B4F;">if</span> dep <span class="kw" style="color: #003B4F;">in</span> df <span class="cf" style="color: #003B4F;">else</span> <span class="va" style="color: #111111;">None</span> <span class="co" style="color: #5E5E5E;"># return independent variables, dependent variable</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="77">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="co" style="color: #5E5E5E;"># apply function to training &amp; validation sets</span></span>
<span id="cb26-2">trn_xs,trn_y <span class="op" style="color: #5E5E5E;">=</span> xs_y(trn_df)</span>
<span id="cb26-3">val_xs,val_y <span class="op" style="color: #5E5E5E;">=</span> xs_y(val_df)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="co" style="color: #5E5E5E;"># check last 5 rows of our training set</span></span>
<span id="cb27-2">trn_xs.tail()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="20">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>Sex</th>
      <th>Embarked</th>
      <th>Age</th>
      <th>SibSp</th>
      <th>Parch</th>
      <th>LogFare</th>
      <th>Pclass</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>106</th>
      <td>0</td>
      <td>2</td>
      <td>21.0</td>
      <td>0</td>
      <td>0</td>
      <td>2.157559</td>
      <td>3</td>
    </tr>
    <tr>
      <th>270</th>
      <td>1</td>
      <td>2</td>
      <td>24.0</td>
      <td>0</td>
      <td>0</td>
      <td>3.465736</td>
      <td>1</td>
    </tr>
    <tr>
      <th>860</th>
      <td>1</td>
      <td>2</td>
      <td>41.0</td>
      <td>2</td>
      <td>0</td>
      <td>2.715244</td>
      <td>3</td>
    </tr>
    <tr>
      <th>435</th>
      <td>0</td>
      <td>2</td>
      <td>14.0</td>
      <td>1</td>
      <td>2</td>
      <td>4.795791</td>
      <td>1</td>
    </tr>
    <tr>
      <th>102</th>
      <td>1</td>
      <td>2</td>
      <td>21.0</td>
      <td>0</td>
      <td>1</td>
      <td>4.360388</td>
      <td>1</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="co" style="color: #5E5E5E;"># check last 5 rows of our validation set</span></span>
<span id="cb28-2">val_xs.tail()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="21">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>Sex</th>
      <th>Embarked</th>
      <th>Age</th>
      <th>SibSp</th>
      <th>Parch</th>
      <th>LogFare</th>
      <th>Pclass</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>880</th>
      <td>0</td>
      <td>2</td>
      <td>25.0</td>
      <td>0</td>
      <td>1</td>
      <td>3.295837</td>
      <td>2</td>
    </tr>
    <tr>
      <th>425</th>
      <td>1</td>
      <td>2</td>
      <td>24.0</td>
      <td>0</td>
      <td>0</td>
      <td>2.110213</td>
      <td>3</td>
    </tr>
    <tr>
      <th>101</th>
      <td>1</td>
      <td>2</td>
      <td>24.0</td>
      <td>0</td>
      <td>0</td>
      <td>2.185579</td>
      <td>3</td>
    </tr>
    <tr>
      <th>199</th>
      <td>0</td>
      <td>2</td>
      <td>24.0</td>
      <td>0</td>
      <td>0</td>
      <td>2.639057</td>
      <td>2</td>
    </tr>
    <tr>
      <th>424</th>
      <td>1</td>
      <td>2</td>
      <td>18.0</td>
      <td>1</td>
      <td>1</td>
      <td>3.054591</td>
      <td>3</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>Here’s the predictions for our extremely simple model, where female is coded as 0:</p>
<div class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="co" style="color: #5E5E5E;"># set predictions for survival for validation set as Sex = female</span></span>
<span id="cb29-2">preds <span class="op" style="color: #5E5E5E;">=</span> val_xs.Sex<span class="op" style="color: #5E5E5E;">==</span><span class="dv" style="color: #AD0000;">0</span></span></code></pre></div>
</div>
<p>We’ll use mean absolute error to measure how good this model is:</p>
<div class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="co" style="color: #5E5E5E;"># import required package for our metric and calculate</span></span>
<span id="cb30-2"><span class="im" style="color: #00769E;">from</span> sklearn.metrics <span class="im" style="color: #00769E;">import</span> mean_absolute_error</span>
<span id="cb30-3">mean_absolute_error(val_y, preds)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="23">
<pre><code>0.21524663677130046</code></pre>
</div>
</div>
</section>
<section id="split-by-logfare" class="level4">
<h4 class="anchored" data-anchor-id="split-by-logfare">Split by LogFare</h4>
<p>Alternatively, we could try splitting on a continuous column. We have to use a somewhat different chart to see how this might work – here’s an example of how we could look at LogFare using a <strong><a href="https://seaborn.pydata.org/generated/seaborn.boxenplot.html">boxenplot</a></strong> and <strong><a href="https://seaborn.pydata.org/generated/seaborn.kdeplot.html">kernel density estimate(KDE)</a></strong> plot:</p>
<div class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="co" style="color: #5E5E5E;"># create subset of data to include only logfare</span></span>
<span id="cb32-2">df_fare <span class="op" style="color: #5E5E5E;">=</span> trn_df[trn_df.LogFare<span class="op" style="color: #5E5E5E;">&gt;</span><span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb32-3"></span>
<span id="cb32-4">fig,axs <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">2</span>, figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">11</span>,<span class="dv" style="color: #AD0000;">5</span>))</span>
<span id="cb32-5"></span>
<span id="cb32-6"><span class="co" style="color: #5E5E5E;"># create a boxenplot of logfare v survived </span></span>
<span id="cb32-7">sns.boxenplot(data<span class="op" style="color: #5E5E5E;">=</span>df_fare, x<span class="op" style="color: #5E5E5E;">=</span>dep, y<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"LogFare"</span>, ax<span class="op" style="color: #5E5E5E;">=</span>axs[<span class="dv" style="color: #AD0000;">0</span>])</span>
<span id="cb32-8"></span>
<span id="cb32-9"><span class="co" style="color: #5E5E5E;"># create a kernel density estimate plot</span></span>
<span id="cb32-10">sns.kdeplot(data<span class="op" style="color: #5E5E5E;">=</span>df_fare, x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"LogFare"</span>, ax<span class="op" style="color: #5E5E5E;">=</span>axs[<span class="dv" style="color: #AD0000;">1</span>])<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Random_Forests/Random_Forests_files/figure-html/cell-25-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>The boxenplot (above left) shows quantiles of LogFare for each group - didn’t survive Survived==0, and did survive, Survived==1. It shows that the average LogFare for passengers that didn’t survive is around 2.5, and for those that did it’s around 3.2. So it seems that people that paid more for their tickets were more likely to get put on a lifeboat.</p>
<p>Let’s create a simple model based on this observation:</p>
<div class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="co" style="color: #5E5E5E;"># set prediction for survival for validation set as &gt; 2.7 logfare</span></span>
<span id="cb33-2">preds <span class="op" style="color: #5E5E5E;">=</span> val_xs.LogFare<span class="op" style="color: #5E5E5E;">&gt;</span><span class="fl" style="color: #AD0000;">2.7</span></span></code></pre></div>
</div>
<p>…and test it out:</p>
<div class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">mean_absolute_error(val_y, preds) <span class="co" style="color: #5E5E5E;"># binary split based on sex 0.21524663677130046</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="26">
<pre><code>0.336322869955157</code></pre>
</div>
</div>
<p>This is quite a bit less accurate than our model that used Sex as the single binary split.</p>
<p>Ideally, we’d like some way to try more columns and breakpoints more easily. We could create a function that returns how good our model is, in order to more quickly try out a few different splits. We’ll create a score function to do this. Instead of returning the mean absolute error, we’ll calculate a measure of <em>impurity</em> – that is, how much the binary split creates two groups where the rows in a group are each similar to each other, or dissimilar.</p>
<p>We can measure the similarity of rows inside a group by taking the standard deviation of the dependent variable. If it’s higher, then it means the rows are more different to each other. We’ll then multiply this by the number of rows, since a bigger group has more impact than a smaller group:</p>
<div class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1"><span class="co" style="color: #5E5E5E;"># create a function to calculate IMPURITY score</span></span>
<span id="cb36-2"><span class="kw" style="color: #003B4F;">def</span> _side_score(side, y):</span>
<span id="cb36-3">    tot <span class="op" style="color: #5E5E5E;">=</span> side.<span class="bu" style="color: null;">sum</span>()</span>
<span id="cb36-4">    <span class="cf" style="color: #003B4F;">if</span> tot<span class="op" style="color: #5E5E5E;">&lt;=</span><span class="dv" style="color: #AD0000;">1</span>: <span class="cf" style="color: #003B4F;">return</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb36-5">    <span class="cf" style="color: #003B4F;">return</span> y[side].std()<span class="op" style="color: #5E5E5E;">*</span>tot</span></code></pre></div>
</div>
<p>Now we’ve got that written, we can calculate the score for a split by adding up the scores for the “left hand side” (lhs) and “right hand side” (rhs):</p>
<div class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1"><span class="co" style="color: #5E5E5E;"># create a fucntion to calculate score for a split</span></span>
<span id="cb37-2"><span class="kw" style="color: #003B4F;">def</span> score(col, y, split):</span>
<span id="cb37-3">    lhs <span class="op" style="color: #5E5E5E;">=</span> col<span class="op" style="color: #5E5E5E;">&lt;=</span>split</span>
<span id="cb37-4">    <span class="cf" style="color: #003B4F;">return</span> (_side_score(lhs,y) <span class="op" style="color: #5E5E5E;">+</span> _side_score(<span class="op" style="color: #5E5E5E;">~</span>lhs,y))<span class="op" style="color: #5E5E5E;">/</span><span class="bu" style="color: null;">len</span>(y)</span></code></pre></div>
</div>
<p>For instance, here’s the impurity score for the split on Sex:</p>
<div class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1"><span class="co" style="color: #5E5E5E;"># apply our score function to a split based on Sex</span></span>
<span id="cb38-2">score(trn_xs[<span class="st" style="color: #20794D;">"Sex"</span>], trn_y, <span class="fl" style="color: #AD0000;">0.5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="29">
<pre><code>0.40787530982063946</code></pre>
</div>
</div>
<p>and for LogFare:</p>
<div class="cell" data-execution_count="30">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1"><span class="co" style="color: #5E5E5E;"># apply our score function to a split based on LogFare</span></span>
<span id="cb40-2">score(trn_xs[<span class="st" style="color: #20794D;">"LogFare"</span>], trn_y, <span class="fl" style="color: #AD0000;">2.7</span>) <span class="co" style="color: #5E5E5E;"># score based on split by sex 0.40787530982063946</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="30">
<pre><code>0.47180873952099694</code></pre>
</div>
</div>
<p>A higher score means the values within the split are more different to eacch other i.e.&nbsp;impure, so as we’d expect from our earlier tests, Sex appears to be a better split as it has a lower impurity score. To make it easier to find the best binary split, we can create a simple interactive tool (note that this only works in Kaggle if you click “Copy and Edit” in the top right to open the notebook editor):</p>
<div class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1"><span class="co" style="color: #5E5E5E;"># create interactve tool to play around with splits</span></span>
<span id="cb42-2"><span class="im" style="color: #00769E;">from</span> ipywidgets <span class="im" style="color: #00769E;">import</span> interact</span>
<span id="cb42-3"></span>
<span id="cb42-4"><span class="co" style="color: #5E5E5E;"># create function that shows score for chosen splits</span></span>
<span id="cb42-5"><span class="kw" style="color: #003B4F;">def</span> iscore(nm, split):</span>
<span id="cb42-6">    col <span class="op" style="color: #5E5E5E;">=</span> trn_xs[nm]</span>
<span id="cb42-7">    <span class="cf" style="color: #003B4F;">return</span> score(col, trn_y, split)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="32">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1"><span class="co" style="color: #5E5E5E;"># set variables (nm) to play around with as our continuous variables</span></span>
<span id="cb43-2"><span class="co" style="color: #5E5E5E;"># set initial split point</span></span>
<span id="cb43-3">interact(nm<span class="op" style="color: #5E5E5E;">=</span>conts, split<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">15.5</span>)(iscore)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
[{"model_id":"7c981231002f431493935fbd2610678a","version_major":2,"version_minor":0}]
</script>
</div>
</div>
<p>Try selecting different columns and split points using the dropdown and slider above. What splits can you find that increase the purity of the data?</p>
<p>We can do the same thing for the categorical variables:</p>
<div class="cell" data-execution_count="33">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1"><span class="co" style="color: #5E5E5E;"># set variables (nm) to play around with as our cotegorical variables</span></span>
<span id="cb44-2"><span class="co" style="color: #5E5E5E;"># set initial split point</span></span>
<span id="cb44-3">interact(nm<span class="op" style="color: #5E5E5E;">=</span>cats, split<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>)(iscore)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
[{"model_id":"29f5c646cefb40ad9f21b3514b19d9da","version_major":2,"version_minor":0}]
</script>
</div>
</div>
<p>That works well enough, but it’s rather slow and fiddly. Perhaps we could get the computer to automatically find the best split point for a column for us? For example, to find the best split point for age we’d first need to make a list of all the possible split points (i.e all the unique values of that field) :</p>
<div class="cell" data-execution_count="36">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1"><span class="co" style="color: #5E5E5E;"># obtain all unique age values</span></span>
<span id="cb45-2">nm <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"Age"</span></span>
<span id="cb45-3">col <span class="op" style="color: #5E5E5E;">=</span> trn_xs[nm]</span>
<span id="cb45-4">unq <span class="op" style="color: #5E5E5E;">=</span> col.unique()</span>
<span id="cb45-5">unq.sort()</span>
<span id="cb45-6">unq</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="36">
<pre><code>array([ 0.42,  0.67,  0.75,  0.83,  0.92,  1.  ,  2.  ,  3.  ,  4.  ,  5.  ,  6.  ,  7.  ,  8.  ,  9.  , 10.  , 11.  , 12.  ,
       13.  , 14.  , 14.5 , 15.  , 16.  , 17.  , 18.  , 19.  , 20.  , 21.  , 22.  , 23.  , 24.  , 24.5 , 25.  , 26.  , 27.  ,
       28.  , 28.5 , 29.  , 30.  , 31.  , 32.  , 32.5 , 33.  , 34.  , 34.5 , 35.  , 36.  , 36.5 , 37.  , 38.  , 39.  , 40.  ,
       40.5 , 41.  , 42.  , 43.  , 44.  , 45.  , 45.5 , 46.  , 47.  , 48.  , 49.  , 50.  , 51.  , 52.  , 53.  , 54.  , 55.  ,
       55.5 , 56.  , 57.  , 58.  , 59.  , 60.  , 61.  , 62.  , 64.  , 65.  , 70.  , 70.5 , 74.  , 80.  ])</code></pre>
</div>
</div>
<p>…and find which index of those values is where score() is the lowest:</p>
<div class="cell" data-execution_count="37">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1">scores <span class="op" style="color: #5E5E5E;">=</span> np.array([score(col, trn_y, o) <span class="cf" style="color: #003B4F;">for</span> o <span class="kw" style="color: #003B4F;">in</span> unq <span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">not</span> np.isnan(o)]) <span class="co" style="color: #5E5E5E;"># use list comprehension rather than for loop</span></span>
<span id="cb47-2">unq[scores.argmin()] <span class="co" style="color: #5E5E5E;"># grab lowest score </span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="37">
<pre><code>6.0</code></pre>
</div>
</div>
<p>Based on this, it looks like, for instance, that for the <em>Age</em> column, 6 is the optimal cutoff according to our training set. We can write a little function that implements this idea:</p>
<div class="cell" data-execution_count="38">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1"><span class="co" style="color: #5E5E5E;"># create function that pulls this idea together</span></span>
<span id="cb49-2"><span class="kw" style="color: #003B4F;">def</span> min_col(df, nm):</span>
<span id="cb49-3">    col,y <span class="op" style="color: #5E5E5E;">=</span> df[nm],df[dep]</span>
<span id="cb49-4">    unq <span class="op" style="color: #5E5E5E;">=</span> col.dropna().unique()</span>
<span id="cb49-5">    scores <span class="op" style="color: #5E5E5E;">=</span> np.array([score(col, y, o) <span class="cf" style="color: #003B4F;">for</span> o <span class="kw" style="color: #003B4F;">in</span> unq <span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">not</span> np.isnan(o)])</span>
<span id="cb49-6">    idx <span class="op" style="color: #5E5E5E;">=</span> scores.argmin()</span>
<span id="cb49-7">    <span class="cf" style="color: #003B4F;">return</span> unq[idx],scores[idx] <span class="co" style="color: #5E5E5E;"># return value that gives lowest score, and that score</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="39">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1"><span class="co" style="color: #5E5E5E;"># find age value that gives lowest impurity score</span></span>
<span id="cb50-2">min_col(trn_df, <span class="st" style="color: #20794D;">"Age"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="39">
<pre><code>(6.0, 0.478316717508991)</code></pre>
</div>
</div>
<p>Let’s try all the columns:</p>
<div class="cell" data-execution_count="40">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1"><span class="co" style="color: #5E5E5E;"># combine categorical and continuous as previously defined</span></span>
<span id="cb52-2">cols <span class="op" style="color: #5E5E5E;">=</span> cats<span class="op" style="color: #5E5E5E;">+</span>conts</span>
<span id="cb52-3"></span>
<span id="cb52-4"><span class="co" style="color: #5E5E5E;"># return col name: and then result from function i.e (split value that gives lowest score, and that score)</span></span>
<span id="cb52-5">{o:min_col(trn_df, o) <span class="cf" style="color: #003B4F;">for</span> o <span class="kw" style="color: #003B4F;">in</span> cols}</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="40">
<pre><code>{'Sex': (0, 0.40787530982063946),
 'Embarked': (0, 0.47883342573147836),
 'Age': (6.0, 0.478316717508991),
 'SibSp': (4, 0.4783740258817434),
 'Parch': (0, 0.4805296527841601),
 'LogFare': (2.4390808375825834, 0.4620823937736597),
 'Pclass': (2, 0.46048261885806596)}</code></pre>
</div>
</div>
<p>According to this, Sex&lt;=0 is the best split we can use.</p>
<p>We’ve just re-invented the <strong><a href="https://link.springer.com/article/10.1023/A:1022631118932">OneR</a></strong> classifier (or at least, a minor variant of it), which was found to be one of the most effective classifiers in real-world datasets, compared to the algorithms in use in 1993. Since it’s so simple and surprisingly effective, it makes for a great baseline – that is, a starting point that you can use to compare your more sophisticated models to.</p>
<p>We found earlier that out OneR rule had an error of around 0.215, so we’ll keep that in mind as we try out more sophisticated approaches.</p>
</section>
</section>
<section id="creating-a-decision-tree" class="level3">
<h3 class="anchored" data-anchor-id="creating-a-decision-tree">Creating a decision tree</h3>
<p>How can we improve our OneR classifier, which predicts survival based only on Sex?</p>
<p>How about we take each of our two groups, female and male, and create one more binary split for each of them. That is: find the single best split for females, and the single best split for males. To do this, all we have to do is repeat the previous section’s steps, once for males, and once for females.</p>
<p>First, we’ll remove Sex from the list of possible splits (since we’ve already used it, and there’s only one possible split for that binary column), and create our two groups:</p>
<div class="cell" data-execution_count="41">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb54-1"><span class="co" style="color: #5E5E5E;"># remove Sex column from our previous defined cols</span></span>
<span id="cb54-2">cols.remove(<span class="st" style="color: #20794D;">"Sex"</span>)</span>
<span id="cb54-3"></span>
<span id="cb54-4"><span class="co" style="color: #5E5E5E;"># create ouur 2 groups males and females</span></span>
<span id="cb54-5">ismale <span class="op" style="color: #5E5E5E;">=</span> trn_df.Sex<span class="op" style="color: #5E5E5E;">==</span><span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb54-6">males,females <span class="op" style="color: #5E5E5E;">=</span> trn_df[ismale],trn_df[<span class="op" style="color: #5E5E5E;">~</span>ismale]</span></code></pre></div>
</div>
<p>Now let’s find the single best binary split for males:</p>
<div class="cell" data-execution_count="42">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb55-1"><span class="co" style="color: #5E5E5E;"># return col name: and then result from function i.e (split value that gives lowest score, and that score)</span></span>
<span id="cb55-2">{o:min_col(males, o) <span class="cf" style="color: #003B4F;">for</span> o <span class="kw" style="color: #003B4F;">in</span> cols}</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="42">
<pre><code>{'Embarked': (0, 0.3875581870410906),
 'Age': (6.0, 0.3739828371010595),
 'SibSp': (4, 0.3875864227586273),
 'Parch': (0, 0.3874704821461959),
 'LogFare': (2.803360380906535, 0.3804856231758151),
 'Pclass': (1, 0.38155442004360934)}</code></pre>
</div>
</div>
<p>…and for females:</p>
<div class="cell" data-execution_count="43">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb57-1"><span class="co" style="color: #5E5E5E;"># return col name: and then result from function i.e (split value that gives lowest score, and that score)</span></span>
<span id="cb57-2">{o:min_col(females, o) <span class="cf" style="color: #003B4F;">for</span> o <span class="kw" style="color: #003B4F;">in</span> cols}</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="43">
<pre><code>{'Embarked': (0, 0.4295252982857327),
 'Age': (50.0, 0.4225927658431649),
 'SibSp': (4, 0.42319212059713535),
 'Parch': (3, 0.4193314500446158),
 'LogFare': (4.256321678298823, 0.41350598332911376),
 'Pclass': (2, 0.3335388911567601)}</code></pre>
</div>
</div>
<p>We can see that the next best binary split for males is <em>Age&lt;=6</em> and for females is <em>Pclass&lt;=2</em>.</p>
<p>By adding these rules, we have created a <strong><em>decision tree</em></strong>, where our model will first check whether <em>Sex</em> is <em>female</em> or <em>male</em>, and depending on the result will then check either the above <em>Age</em> or <em>Pclass</em> rules, as appropriate. We could then repeat the process, creating new additional rules for each of the four groups we’ve now created.</p>
<p>Rather than writing that code manually, we can use <strong><a href="https://scikit-learn.org/stable/modules/tree.html#classification">DecisionTreeClassifier</a></strong>, from <strong><a href="https://scikit-learn.org/stable/modules/tree.html">sklearn</a></strong>, which does exactly that for us:</p>
<div class="cell" data-execution_count="44">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb59-1"><span class="co" style="color: #5E5E5E;"># import decision tree classifier and graphical </span></span>
<span id="cb59-2"><span class="im" style="color: #00769E;">from</span> sklearn.tree <span class="im" style="color: #00769E;">import</span> DecisionTreeClassifier, export_graphviz</span>
<span id="cb59-3"><span class="im" style="color: #00769E;">import</span> graphviz</span></code></pre></div>
</div>
<div class="cell" data-execution_count="45">
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb60-1"><span class="co" style="color: #5E5E5E;"># fit a decision tree to our training data</span></span>
<span id="cb60-2">m <span class="op" style="color: #5E5E5E;">=</span> DecisionTreeClassifier(max_leaf_nodes<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">4</span>).fit(trn_xs, trn_y)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="46">
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb61-1"><span class="co" style="color: #5E5E5E;"># create a function that draws decision tree </span></span>
<span id="cb61-2"><span class="kw" style="color: #003B4F;">def</span> draw_tree(t, df, size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10</span>, ratio<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.6</span>, precision<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>, <span class="op" style="color: #5E5E5E;">**</span>kwargs):</span>
<span id="cb61-3">    s<span class="op" style="color: #5E5E5E;">=</span>export_graphviz(t, out_file<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>, feature_names<span class="op" style="color: #5E5E5E;">=</span>df.columns, filled<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, rounded<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>,</span>
<span id="cb61-4">                      special_characters<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, rotate<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>, precision<span class="op" style="color: #5E5E5E;">=</span>precision, <span class="op" style="color: #5E5E5E;">**</span>kwargs)</span>
<span id="cb61-5">    <span class="cf" style="color: #003B4F;">return</span> graphviz.Source(re.sub(<span class="st" style="color: #20794D;">'Tree {'</span>, <span class="ss" style="color: #20794D;">f'Tree </span><span class="ch" style="color: #20794D;">{{</span><span class="ss" style="color: #20794D;"> size=</span><span class="sc" style="color: #5E5E5E;">{</span>size<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">; ratio=</span><span class="sc" style="color: #5E5E5E;">{</span>ratio<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>, s))</span></code></pre></div>
</div>
<div class="cell" data-execution_count="47">
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb62-1"><span class="co" style="color: #5E5E5E;"># draw decision teee based on </span></span>
<span id="cb62-2">draw_tree(m, trn_xs, size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="47">
<p><img src="https://stephen137.github.io/posts/Random_Forests/Random_Forests_files/figure-html/cell-46-output-1.svg" class="img-fluid"></p>
</div>
</div>
<ol type="1">
<li>The first split looks at Sex</li>
</ol>
<ul>
<li>less than or equal to 0.5 True effectively means 0 i.e female (229) which sets us off down the LEFT hand side of the tree</li>
<li>less than or equal to 0.5 False effectively means 1 i.e.&nbsp;male (439) which sets us off down the RIGHT hand side of the tree</li>
</ul>
<ol start="2" type="1">
<li>The second split</li>
</ol>
<ul>
<li>for females is based on below (120) and above (109) Pclass 2; and</li>
<li>for males is based on below (21) and above (418) age 6</li>
</ul>
<p>We can see that our training set of 668 rows (415 survivors, 253 not survived) has been split exactly as we did!</p>
<p>In this picture, the more orange nodes have a lower survival rate, and blue have higher survival. Each node shows how many rows (“samples”) match that set of rules, and shows how many perish or survive (“values”). There’s also something called <strong>gini</strong>. That’s another measure of impurity, and it’s very similar to the score() function we created earlier.</p>
<p>Gini is defined as follows:</p>
<div class="cell" data-execution_count="48">
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb63-1"><span class="co" style="color: #5E5E5E;"># derive the gini calculation</span></span>
<span id="cb63-2"><span class="kw" style="color: #003B4F;">def</span> gini(cond):</span>
<span id="cb63-3">    act <span class="op" style="color: #5E5E5E;">=</span> df.loc[cond, dep]</span>
<span id="cb63-4">    <span class="cf" style="color: #003B4F;">return</span> <span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">-</span> act.mean()<span class="op" style="color: #5E5E5E;">**</span><span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">-</span> (<span class="dv" style="color: #AD0000;">1</span><span class="op" style="color: #5E5E5E;">-</span>act).mean()<span class="op" style="color: #5E5E5E;">**</span><span class="dv" style="color: #AD0000;">2</span> <span class="co" style="color: #5E5E5E;"># probability that if you pick two rows from a group that you get same survived result each time</span></span></code></pre></div>
</div>
<p>What this calculates is the probability that, if you pick two rows from a group, you’ll get the same Survived result each time. If the group is all the same, the probability is 0.0, and 1.0 if they’re all different.</p>
<div class="cell" data-execution_count="49">
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb64-1"><span class="co" style="color: #5E5E5E;"># apply our function to split by sex</span></span>
<span id="cb64-2">gini(df.Sex<span class="op" style="color: #5E5E5E;">==</span><span class="st" style="color: #20794D;">'female'</span>), gini(df.Sex<span class="op" style="color: #5E5E5E;">==</span><span class="st" style="color: #20794D;">'male'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="49">
<pre><code>(0.3828350034484158, 0.3064437162277842)</code></pre>
</div>
</div>
<p>Let’s see how this model compares to our OneR version:</p>
<div class="cell" data-execution_count="50">
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb66-1">mean_absolute_error(val_y, m.predict(val_xs)) <span class="co" style="color: #5E5E5E;"># oneR score 0.21524663677130046</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="50">
<pre><code>0.2242152466367713</code></pre>
</div>
</div>
<p>It’s actually marginally worse. Since this is such a small dataset (we’ve only got around 200 rows in our validation set) this small difference isn’t really meaningful. Perhaps we’ll see better results if we create a bigger tree:</p>
<div class="cell" data-execution_count="51">
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb68-1">m <span class="op" style="color: #5E5E5E;">=</span> DecisionTreeClassifier(min_samples_leaf<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">50</span>)</span>
<span id="cb68-2">m.fit(trn_xs, trn_y)</span>
<span id="cb68-3">draw_tree(m, trn_xs, size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">12</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="51">
<p><img src="https://stephen137.github.io/posts/Random_Forests/Random_Forests_files/figure-html/cell-50-output-1.svg" class="img-fluid"></p>
</div>
</div>
<p>Let’s check how many leaf nodes and data points we have:</p>
<div class="cell" data-execution_count="82">
<div class="sourceCode cell-code" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb69-1">m.get_n_leaves(), <span class="bu" style="color: null;">len</span>(trn_xs)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="82">
<pre><code>(11, 668)</code></pre>
</div>
</div>
</section>
<section id="overfitting" class="level3">
<h3 class="anchored" data-anchor-id="overfitting">Overfitting</h3>
<p>So we have 11 leaf nodes, and 668 data points. This seems reasonable, no suggestion of overfitting.</p>
<blockquote class="blockquote">
<p>Here’s some intuition for an overfitting decision tree with more leaf nodes than data items. Consider the game Twenty Questions. In that game, the chooser secretly imagines an object (like, “our television set”), and the guesser gets to pose 20 yes or no questions to try to guess what the object is (like “Is it bigger than a breadbox?”). The guesser is not trying to predict a numerical value, but just to identify a particular object out of the set of all imaginable objects. When your decision tree has more leaves than there are possible objects in your domain, then it is essentially a well-trained guesser. It has learned the sequence of questions needed to identify a particular data item in the training set, and it is “predicting” only by describing that item’s value. This is a way of memorizing the training set—i.e., of overfitting.</p>
</blockquote>
<div class="cell" data-execution_count="52">
<div class="sourceCode cell-code" id="cb71" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb71-1">mean_absolute_error(val_y, m.predict(val_xs)) <span class="co" style="color: #5E5E5E;"># oneR score 0.21524663677130046</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="52">
<pre><code>0.18385650224215247</code></pre>
</div>
</div>
<p>It looks like this is an improvement, although again it’s a bit hard to tell with small datasets like this. Let’s try submitting it to Kaggle:</p>
<div class="cell" data-execution_count="53">
<div class="sourceCode cell-code" id="cb73" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb73-1"><span class="co" style="color: #5E5E5E;"># create a Kaggle submission csv file</span></span>
<span id="cb73-2">tst_df[cats] <span class="op" style="color: #5E5E5E;">=</span> tst_df[cats].<span class="bu" style="color: null;">apply</span>(<span class="kw" style="color: #003B4F;">lambda</span> x: x.cat.codes)</span>
<span id="cb73-3">tst_xs,_ <span class="op" style="color: #5E5E5E;">=</span> xs_y(tst_df)</span>
<span id="cb73-4"></span>
<span id="cb73-5"><span class="kw" style="color: #003B4F;">def</span> subm(preds, suff):</span>
<span id="cb73-6">    tst_df[<span class="st" style="color: #20794D;">'Survived'</span>] <span class="op" style="color: #5E5E5E;">=</span> preds</span>
<span id="cb73-7">    sub_df <span class="op" style="color: #5E5E5E;">=</span> tst_df[[<span class="st" style="color: #20794D;">'PassengerId'</span>,<span class="st" style="color: #20794D;">'Survived'</span>]]</span>
<span id="cb73-8">    sub_df.to_csv(<span class="ss" style="color: #20794D;">f'sub-</span><span class="sc" style="color: #5E5E5E;">{</span>suff<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">.csv'</span>, index<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span>
<span id="cb73-9"></span>
<span id="cb73-10">subm(m.predict(tst_xs), <span class="st" style="color: #20794D;">'tree'</span>)</span></code></pre></div>
</div>
<p>When I submitted this I got a score of 0.76555, which isn’t as good as our linear models or most of our neural nets, but it’s pretty close to those results.</p>
<p>Hopefully you can now see why we didn’t really need to create dummy variables, but instead just converted the labels into numbers using some (potentially arbitary) ordering of categories. For instance, here’s how the first few items of Embarked are labeled:</p>
<div class="cell" data-execution_count="54">
<div class="sourceCode cell-code" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb74-1">df.Embarked.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="54">
<pre><code>0    S
1    C
2    S
3    S
4    S
Name: Embarked, dtype: category
Categories (3, object): ['C', 'Q', 'S']</code></pre>
</div>
</div>
<p>…resulting in these integer codes:</p>
<div class="cell" data-execution_count="55">
<div class="sourceCode cell-code" id="cb76" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb76-1">df.Embarked.cat.codes.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="55">
<pre><code>0    2
1    0
2    2
3    2
4    2
dtype: int8</code></pre>
</div>
</div>
<p>So let’s say we wanted to split into “C” in one group, vs “Q” or “S” in the other group. Then we just have to split on codes &lt;=0 (since C is mapped to category 0). Note that if we wanted to split into “Q” in one group, we’d need to use two binary splits, first to separate “C” from “Q” and “S”, and then a second split to separate “Q” from “S”. For this reason, sometimes it can still be helpful to use dummy variables for categorical variables with few levels (like this one).</p>
<p>As a rough guide, consider using dummy variables for &lt;4 levels, and numeric codes for &gt;=4 levels.</p>
<p>Building a decision tree is a good way to create a model of our data. It is very flexible, since it can clearly handle nonlinear relationships and interactions between variables. But we can see there is a fundamental compromise between how well it generalizes (which we can achieve by creating small trees) and how accurate it is on the training set (which we can achieve by using large trees).</p>
<p>So how do we get the best of both worlds?</p>
</section>
<section id="the-random-forest" class="level3">
<h3 class="anchored" data-anchor-id="the-random-forest">The random forest</h3>
<p>In 1994 Berkeley professor <strong><a href="https://en.wikipedia.org/wiki/Leo_Breiman">Leo Breiman</a></strong>, one year after his retirement, published a small technical report called <strong><a href="https://www.stat.berkeley.edu/~breiman/bagging.pdf">“Bagging Predictors”</a></strong>, which turned out to be one of the most influential ideas in modern machine learning. The report began:</p>
<blockquote class="blockquote">
<p>Bagging predictors is a method for generating multiple versions of a predictor and using these to get an aggregated predictor. The aggregation averages over the versions… The multiple versions are formed by making bootstrap replicates of the learning set and using these as new learning sets. Tests… show that bagging can give substantial gains in accuracy. The vital element is the instability of the prediction method. If perturbing the learning set can cause significant changes in the predictor constructed, then bagging can improve accuracy.</p>
</blockquote>
<p>Here is the procedure that Breiman is proposing:</p>
<ol type="1">
<li>Randomly choose a subset of the rows of your data (i.e., “bootstrap replicates of your learning set”).</li>
<li>Train a model using this subset.</li>
<li>Save that model, and then return to step 1 a few times.</li>
<li>This will give you a number of trained models. To make a prediction, predict using all of the models, and then take the average of each of those model’s predictions.</li>
</ol>
<p>This procedure is known as “bagging.” It is based on a deep and important insight: although each of the models trained on a subset of data will make more errors than a model trained on the full dataset, those errors will not be correlated with each other. Different models will make different errors. The average of those errors, therefore, is: zero! So if we take the average of all of the models’ predictions, then we should end up with a prediction that gets closer and closer to the correct answer, the more models we have. This is an extraordinary result—it means that we can improve the accuracy of nearly any kind of machine learning algorithm by training it multiple times, each time on a different random subset of the data, and averaging its predictions.</p>
<p>In 2001 Leo Breiman went on to demonstrate that this approach to building models, when applied to decision tree building algorithms, was particularly powerful. He went even further than just randomly choosing rows for each model’s training, but also randomly selected from a subset of columns when choosing each split in each decision tree. He called this method the <strong><em>random forest</em></strong>. Today it is, perhaps, the most widely used and practically important machine learning method.</p>
<p>In essence a random forest is a model that averages the predictions of a large number of decision trees, which are generated by randomly varying various parameters that specify what data is used to train the tree and other tree parameters. Bagging is a particular approach to “ensembling,” or combining the results of multiple models together. To see how it works in practice, let’s get started on creating our own random forest!</p>
<p>One of the most important properties of random forests is that they aren’t very sensitive to the hyperparameter choices, such as <code>max_features</code>. You can set <code>n_estimators</code> to as high a number as you have time to train—the more trees you have, the more accurate the model will be. <code>max_samples</code> can often be left at its default, unless you have over 200,000 data points, in which case setting it to 200,000 will make it train faster with little impact on accuracy. <code>max_features=0.5</code> and <code>min_samples_leaf=4</code> both tend to work well, although sklearn’s defaults work well too.</p>
<p>The sklearn docs <a href="http://scikit-learn.org/stable/auto_examples/ensemble/plot_ensemble_oob.html">show an example</a> of the effects of different <code>max_features</code> choices, with increasing numbers of trees. In the plot, the blue plot line uses the fewest features and the green line uses the most (it uses all the features). As you can see below, the models with the lowest error result from using a subset of features but with a larger number of trees.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Random_Forests/Random_Forests_files/figure-html/38f3bf16-2175-46ec-9671-1f31468f1162.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">sklearn_features.png</figcaption><p></p>
</figure>
</div>
<p>One way we can create a bunch of uncorrelated models is to train each of them on a different random subset of the data. Here’s how we can create a tree on a random subset of the data:</p>
<div class="cell" data-execution_count="56">
<div class="sourceCode cell-code" id="cb78" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb78-1"><span class="co" style="color: #5E5E5E;"># create a function that generates a bunch of uncorrelated decision trees</span></span>
<span id="cb78-2"><span class="kw" style="color: #003B4F;">def</span> get_tree(prop<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.75</span>):</span>
<span id="cb78-3">    n <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">len</span>(trn_y)</span>
<span id="cb78-4">    idxs <span class="op" style="color: #5E5E5E;">=</span> random.choice(n, <span class="bu" style="color: null;">int</span>(n<span class="op" style="color: #5E5E5E;">*</span>prop))</span>
<span id="cb78-5">    <span class="cf" style="color: #003B4F;">return</span> DecisionTreeClassifier</span>
<span id="cb78-6">    (min_samples_leaf<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">5</span>)</span>
<span id="cb78-7">    .fit(trn_xs.iloc[idxs], </span>
<span id="cb78-8">         trn_y.iloc[idxs])</span></code></pre></div>
</div>
<p>Now we can create as many trees as we want:</p>
<div class="cell" data-execution_count="57">
<div class="sourceCode cell-code" id="cb79" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb79-1">trees <span class="op" style="color: #5E5E5E;">=</span> [get_tree() <span class="cf" style="color: #003B4F;">for</span> t <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">100</span>)]</span></code></pre></div>
</div>
<p>Our prediction will then be the average of these trees’ predictions:</p>
<div class="cell" data-execution_count="58">
<div class="sourceCode cell-code" id="cb80" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb80-1">all_probs <span class="op" style="color: #5E5E5E;">=</span> [t.predict(val_xs) <span class="cf" style="color: #003B4F;">for</span> t <span class="kw" style="color: #003B4F;">in</span> trees]</span>
<span id="cb80-2">avg_probs <span class="op" style="color: #5E5E5E;">=</span> np.stack(all_probs).mean(<span class="dv" style="color: #AD0000;">0</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="59">
<div class="sourceCode cell-code" id="cb81" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb81-1">mean_absolute_error(val_y, avg_probs)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="59">
<pre><code>0.2272645739910314</code></pre>
</div>
</div>
<p>This is nearly identical to what sklearn’s RandomForestClassifier does. The main extra piece in a “real” random forest is that as well as choosing a random sample of data for each tree, it also picks a random subset of columns for each split. Here’s how we repeat the above process with a random forest:</p>
<div class="cell" data-execution_count="134">
<div class="sourceCode cell-code" id="cb83" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb83-1"><span class="im" style="color: #00769E;">from</span> sklearn.ensemble <span class="im" style="color: #00769E;">import</span> RandomForestClassifier</span>
<span id="cb83-2"></span>
<span id="cb83-3"></span>
<span id="cb83-4">rf <span class="op" style="color: #5E5E5E;">=</span> RandomForestClassifier(<span class="dv" style="color: #AD0000;">100</span>, min_samples_leaf<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">5</span>)</span>
<span id="cb83-5">rf.fit(trn_xs, trn_y)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb83-6">mean_absolute_error(val_y, rf.predict(val_xs))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="134">
<pre><code>0.18834080717488788</code></pre>
</div>
</div>
<p>We can submit that to Kaggle too:</p>
<div class="cell" data-execution_count="61">
<div class="sourceCode cell-code" id="cb85" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb85-1"><span class="co" style="color: #5E5E5E;"># create a random forest Kaggle submission csv file</span></span>
<span id="cb85-2">subm(rf.predict(tst_xs), <span class="st" style="color: #20794D;">'rf'</span>)</span></code></pre></div>
</div>
<p>This actually scored slightly worse 0.76315 than the original decision tree classifier.</p>
<p>One particularly nice feature of random forests is they can tell us which independent variables were the most important in the model, using feature_importances_:</p>
<div class="cell" data-execution_count="135">
<div class="sourceCode cell-code" id="cb86" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb86-1">pd.DataFrame(<span class="bu" style="color: null;">dict</span>(cols<span class="op" style="color: #5E5E5E;">=</span>trn_xs.columns, imp<span class="op" style="color: #5E5E5E;">=</span>m.feature_importances_)).plot(<span class="st" style="color: #20794D;">'cols'</span>, <span class="st" style="color: #20794D;">'imp'</span>, <span class="st" style="color: #20794D;">'barh'</span>)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Random_Forests/Random_Forests_files/figure-html/cell-62-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>We can see that <em>Sex</em> is by far the most important predictor, with <em>LogFare</em> a distant second, and <em>Age</em> and <em>Pclass</em> behind that. In datasets with many columns, it is recommended to create a feature importance plot as soon as possible, in order to find which columns are worth studying more closely. (Note also that we didn’t really need to take the log() of Fare, since random forests only care about order, and log() doesn’t change the order – we only did it to make our graphs earlier easier to read).</p>
<p>The way these importances are calculated is quite simple yet elegant. The feature importance algorithm loops through each tree, and then recursively explores each branch. At each branch, it looks to see what feature was used for that split, and how much the model improves as a result of that split. The improvement (weighted by the number of rows in that group) is added to the importance score for that feature. This is summed across all branches of all trees, and finally the scores are normalized such that they add to 1.</p>
</section>
<section id="key-takeaways" class="level3">
<h3 class="anchored" data-anchor-id="key-takeaways">Key takeaways</h3>
<p>So what can we take away from all this?</p>
<p>I think the first thing I’d note from this is that, clearly, more complex models aren’t always better. Our <code>OneR</code> model, consisting of a single binary split, was nearly as good as our more complex models. Perhaps in practice a simple model like this might be much easier to use, and could be worth considering. Our random forest wasn’t an improvement on the single decision tree at all.</p>
<p>So we should always be careful to benchmark simple models, as see if they’re good enough for our needs. In practice, you will often find that simple models will have trouble providing adequate accuracy for more complex tasks, such as recommendation systems, NLP, computer vision, or multivariate time series. But there’s no need to guess – it’s so easy to try a few different models, there’s no reason not to give the simpler ones a go too!</p>
<p>Another thing I think we can take away is that random forests aren’t actually that complicated at all. We were able to implement the key features of them in a notebook quite quickly. And they aren’t sensitive to issues like normalization, interactions, or non-linear transformations, which make them extremely easy to work with, and hard to mess up!</p>


</section>
</section>

 ]]></description>
  <category>Random Forests</category>
  <category>fastai</category>
  <guid>https://stephen137.github.io/posts/Random_Forests/Random_Forests.html</guid>
  <pubDate>Sun, 08 Jan 2023 23:00:00 GMT</pubDate>
  <media:content url="https://stephen137.github.io/posts/Random_Forests/random_forest.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Seaborn Tutorial</title>
  <dc:creator>Stephen Barrie</dc:creator>
  <link>https://stephen137.github.io/posts/Seaborn/Seaborn.html</link>
  <description><![CDATA[ 




<section id="what-is-seaborn" class="level1">
<h1>What is seaborn?</h1>
<p>There is no universally best way to visualize data. Different questions are best answered by different plots. <a href="https://seaborn.pydata.org/tutorial/introduction.html">Seaborn</a> makes it easy to switch between different visual representations by using a consistent dataset-oriented API. Seaborn helps you explore and understand your data.</p>
<p>Its plotting functions operate on dataframes and arrays containing whole datasets and internally perform the necessary semantic mapping and statistical aggregation to produce informative plots. Its dataset-oriented, declarative API lets you focus on what the different elements of your plots mean, rather than on the details of how to draw them.</p>
<section id="setup" class="level2">
<h2 class="anchored" data-anchor-id="setup">Setup</h2>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb1-4"><span class="im" style="color: #00769E;">import</span> seaborn <span class="im" style="color: #00769E;">as</span> sns</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="op" style="color: #5E5E5E;">%</span>matplotlib inline</span>
<span id="cb1-7"><span class="op" style="color: #5E5E5E;">%</span>reload_ext autoreload</span>
<span id="cb1-8"><span class="op" style="color: #5E5E5E;">%</span>autoreload <span class="dv" style="color: #AD0000;">2</span></span></code></pre></div>
</div>
</section>
<section id="import-data" class="level2">
<h2 class="anchored" data-anchor-id="import-data">Import Data</h2>
<p>seaborn has a number of built in datases:</p>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># Seaborn provides a playground of built in datasets</span></span>
<span id="cb2-2"><span class="bu" style="color: null;">print</span>(sns.get_dataset_names())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>['anagrams', 'anscombe', 'attention', 'brain_networks', 'car_crashes', 'diamonds', 'dots', 'dowjones', 'exercise', 'flights', 'fmri', 'geyser', 'glue', 'healthexp', 'iris', 'mpg', 'penguins', 'planets', 'seaice', 'taxis', 'tips', 'titanic']</code></pre>
</div>
</div>
<p>For the purposes of this blog we will be working with the <em>car_crashes</em> dataset.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Seaborn/Seaborn_files/figure-html/d936a020-cd5d-432b-a538-703a42e2ac61.jpg" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">car_crash.jpg</figcaption><p></p>
</figure>
</div>
<div class="cell" data-execution_count="157">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;"># Load a built in dataset of US car crash</span></span>
<span id="cb4-2">crash_df <span class="op" style="color: #5E5E5E;">=</span> sns.load_dataset(<span class="st" style="color: #20794D;">'car_crashes'</span>)</span>
<span id="cb4-3">crash_df.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="157">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>total</th>
      <th>speeding</th>
      <th>alcohol</th>
      <th>not_distracted</th>
      <th>no_previous</th>
      <th>ins_premium</th>
      <th>ins_losses</th>
      <th>abbrev</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>18.8</td>
      <td>7.332</td>
      <td>5.640</td>
      <td>18.048</td>
      <td>15.040</td>
      <td>784.55</td>
      <td>145.08</td>
      <td>AL</td>
    </tr>
    <tr>
      <th>1</th>
      <td>18.1</td>
      <td>7.421</td>
      <td>4.525</td>
      <td>16.290</td>
      <td>17.014</td>
      <td>1053.48</td>
      <td>133.93</td>
      <td>AK</td>
    </tr>
    <tr>
      <th>2</th>
      <td>18.6</td>
      <td>6.510</td>
      <td>5.208</td>
      <td>15.624</td>
      <td>17.856</td>
      <td>899.47</td>
      <td>110.35</td>
      <td>AZ</td>
    </tr>
    <tr>
      <th>3</th>
      <td>22.4</td>
      <td>4.032</td>
      <td>5.824</td>
      <td>21.056</td>
      <td>21.280</td>
      <td>827.34</td>
      <td>142.39</td>
      <td>AR</td>
    </tr>
    <tr>
      <th>4</th>
      <td>12.0</td>
      <td>4.200</td>
      <td>3.360</td>
      <td>10.920</td>
      <td>10.680</td>
      <td>878.41</td>
      <td>165.63</td>
      <td>CA</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
</section>
<section id="distribution-plots" class="level2">
<h2 class="anchored" data-anchor-id="distribution-plots">Distribution plots</h2>
<section id="distribution-plot" class="level3">
<h3 class="anchored" data-anchor-id="distribution-plot">Distribution plot</h3>
<p>A distribution plot provides a way to look at a univariate distribution. A univeriate distribution provides a distribution for one variable. For more detail check out the <a href="https://seaborn.pydata.org/generated/seaborn.displot.html">seaborn documentation</a>.</p>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;"># Kernal Density Estimation with a Histogram is provided</span></span>
<span id="cb5-2">sns.distplot(crash_df[<span class="st" style="color: #20794D;">'alcohol'</span>])</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/tmp/ipykernel_206/3403426496.py:3: UserWarning: 

`distplot` is a deprecated function and will be removed in seaborn v0.14.0.

Please adapt your code to use either `displot` (a figure-level function with
similar flexibility) or `histplot` (an axes-level function for histograms).

For a guide to updating your code to use the new functions, please see
https://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751

  sns.distplot(crash_df['alcohol'])</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="15">
<pre><code>&lt;AxesSubplot: xlabel='alcohol', ylabel='Density'&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Seaborn/Seaborn_files/figure-html/cell-5-output-3.png" class="img-fluid"></p>
</div>
</div>
<p>If we just want the KDE on its own:</p>
<div class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;"># Get just the KDE plot</span></span>
<span id="cb8-2">sns.kdeplot(crash_df[<span class="st" style="color: #20794D;">'alcohol'</span>])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<pre><code>&lt;AxesSubplot: xlabel='alcohol', ylabel='Density'&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Seaborn/Seaborn_files/figure-html/cell-6-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Kernel Density Estimation (KDE)
</div>
</div>
<div class="callout-body-container callout-body">
<p>The <a href="https://en.wikipedia.org/wiki/Kernel_density_estimation">kernel density estimation</a> is included by default but can be removed by setting kde=False.</p>
</div>
</div>
<div class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;"># kde=False removes the KDE</span></span>
<span id="cb10-2"><span class="co" style="color: #5E5E5E;"># Bins define how many buckets to divide the data up into between intervals</span></span>
<span id="cb10-3"></span>
<span id="cb10-4">sns.distplot(crash_df[<span class="st" style="color: #20794D;">'alcohol'</span>], </span>
<span id="cb10-5">             kde<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>, </span>
<span id="cb10-6">             bins<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">25</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/tmp/ipykernel_206/1004551440.py:5: UserWarning: 

`distplot` is a deprecated function and will be removed in seaborn v0.14.0.

Please adapt your code to use either `displot` (a figure-level function with
similar flexibility) or `histplot` (an axes-level function for histograms).

For a guide to updating your code to use the new functions, please see
https://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751

  sns.distplot(crash_df['alcohol'], kde=False, bins=25)</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="17">
<pre><code>&lt;AxesSubplot: xlabel='alcohol'&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Seaborn/Seaborn_files/figure-html/cell-7-output-3.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="joint-plot" class="level3">
<h3 class="anchored" data-anchor-id="joint-plot">Joint plot</h3>
<p>Let’s say we want to investigate the <em>alcohol</em> and <em>speeding</em> variables and also the relationship between the two. A <strong><a href="https://seaborn.pydata.org/generated/seaborn.jointplot.html">jointplot</a></strong> compares two distributions and plots a <strong><a href="https://en.wikipedia.org/wiki/Scatter_plot">scatter plot</a></strong> by default. We can also include a ‘best fit’ regression line by passing in the argument <em>kind=‘reg’</em>.</p>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;"># joint plot of speeding vs alcohol</span></span>
<span id="cb13-2">sns.jointplot(x <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'speeding'</span>, </span>
<span id="cb13-3">              y <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'alcohol'</span>, </span>
<span id="cb13-4">              data <span class="op" style="color: #5E5E5E;">=</span> crash_df, </span>
<span id="cb13-5">              kind <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'reg'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>&lt;seaborn.axisgrid.JointGrid at 0x7f31f0add2a0&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Seaborn/Seaborn_files/figure-html/cell-8-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>As we can see there looks to be a clear positive correlation between speeding and drink-driving.</p>
<p>We can also create a 2D KDE by passing in the argument <em>kind=‘kde’</em></p>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;"># joint plot of speeding vs alcohol</span></span>
<span id="cb15-2">sns.jointplot(x <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'speeding'</span>, </span>
<span id="cb15-3">              y <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'alcohol'</span>, </span>
<span id="cb15-4">              data <span class="op" style="color: #5E5E5E;">=</span> crash_df, </span>
<span id="cb15-5">              kind <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'kde'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>&lt;seaborn.axisgrid.JointGrid at 0x7f31ec15ac80&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Seaborn/Seaborn_files/figure-html/cell-9-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>…and we can create a hexagon distribution with <em>kind=‘hex’</em></p>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;"># joint plot of speeding vs alcohol</span></span>
<span id="cb17-2">sns.jointplot(x <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'speeding'</span>, </span>
<span id="cb17-3">              y <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'alcohol'</span>, </span>
<span id="cb17-4">              data <span class="op" style="color: #5E5E5E;">=</span> crash_df, </span>
<span id="cb17-5">              kind <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'hex'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>&lt;seaborn.axisgrid.JointGrid at 0x7f31ecd43c10&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Seaborn/Seaborn_files/figure-html/cell-10-output-2.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="pair-plots" class="level3">
<h3 class="anchored" data-anchor-id="pair-plots">Pair plots</h3>
<p>Pair Plots plot relationships across the entire DataFrame’s numerical values:</p>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;"># # pair plot for car_crashes DataFrame</span></span>
<span id="cb19-2">sns.pairplot(crash_df)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>&lt;seaborn.axisgrid.PairGrid at 0x7f31cecd4be0&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Seaborn/Seaborn_files/figure-html/cell-11-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>Note that in addition to the relationship scatterplots we also have a histogram for each variable on the leading diagonal.</p>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Using <strong>hue</strong> as a categorical variable
</div>
</div>
<div class="callout-body-container callout-body">
<p>TWe can pass in hue=‘some_categorical_variable’ to effectively include a THIRD variable in our pair plot!</p>
</div>
</div>
<p>Let’s illustrate this using one of the other inbuilt seaborn datasets <strong><em>tips</em></strong> which includes some categorical variables:</p>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="co" style="color: #5E5E5E;"># With hue you can pass in a categorical column and the charts will be colorized</span></span>
<span id="cb21-2"><span class="co" style="color: #5E5E5E;"># You can use color maps (palette) from Matplotlib to define what colors to use</span></span>
<span id="cb21-3">tips_df <span class="op" style="color: #5E5E5E;">=</span> sns.load_dataset(<span class="st" style="color: #20794D;">'tips'</span>)</span>
<span id="cb21-4">sns.pairplot(tips_df, </span>
<span id="cb21-5">             hue <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'sex'</span>, </span>
<span id="cb21-6">             palette <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'Blues'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>&lt;seaborn.axisgrid.PairGrid at 0x7f31cdf078b0&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Seaborn/Seaborn_files/figure-html/cell-12-output-2.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="rug-plot" class="level3">
<h3 class="anchored" data-anchor-id="rug-plot">Rug Plot</h3>
<p>A <a href="https://en.wikipedia.org/wiki/Rug_plot">Rug Plot</a> plots a single column of datapoints in an array as sticks on an axis. You’ll see a more dense number of lines where the amount is most common. This is like how a histogram is taller where values are more common.</p>
<div class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="co" style="color: #5E5E5E;"># plot a rugplot of tips</span></span>
<span id="cb23-2">sns.rugplot(tips_df[<span class="st" style="color: #20794D;">'tip'</span>])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="19">
<pre><code>&lt;AxesSubplot: xlabel='tip'&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Seaborn/Seaborn_files/figure-html/cell-13-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>We can see that the lines are denser between just below 2 dollars and up towards 3 dollars.</p>
</section>
</section>
<section id="styling" class="level2">
<h2 class="anchored" data-anchor-id="styling">Styling</h2>
<p>We can control the overall look of our plots using <strong><em>set_style</em></strong></p>
<div class="cell" data-execution_count="39">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="co" style="color: #5E5E5E;"># set overall style</span></span>
<span id="cb25-2">sns.set_style(<span class="st" style="color: #20794D;">'ticks'</span>)</span>
<span id="cb25-3"></span>
<span id="cb25-4"><span class="co" style="color: #5E5E5E;"># set size of our plot</span></span>
<span id="cb25-5">plt.figure(figsize <span class="op" style="color: #5E5E5E;">=</span> (<span class="dv" style="color: #AD0000;">8</span>,<span class="dv" style="color: #AD0000;">4</span>))</span>
<span id="cb25-6"></span>
<span id="cb25-7"><span class="co" style="color: #5E5E5E;"># labels</span></span>
<span id="cb25-8">sns.set_context(<span class="st" style="color: #20794D;">'paper'</span>, font_scale <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">1.5</span>)</span>
<span id="cb25-9"></span>
<span id="cb25-10"><span class="co" style="color: #5E5E5E;"># jointplot of speeding v alcohol from car_crashes DF, include regression line</span></span>
<span id="cb25-11">sns.jointplot(x <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'speeding'</span>, </span>
<span id="cb25-12">              y <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'alcohol'</span>, </span>
<span id="cb25-13">              data <span class="op" style="color: #5E5E5E;">=</span> crash_df, </span>
<span id="cb25-14">              kind <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'reg'</span>) </span>
<span id="cb25-15"></span>
<span id="cb25-16"><span class="co" style="color: #5E5E5E;"># we can turn the axis spines on or off</span></span>
<span id="cb25-17">sns.despine(left <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">False</span>, </span>
<span id="cb25-18">            bottom <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>&lt;Figure size 800x400 with 0 Axes&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Seaborn/Seaborn_files/figure-html/cell-14-output-2.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="categorical-plots" class="level2">
<h2 class="anchored" data-anchor-id="categorical-plots">Categorical Plots</h2>
<section id="bar-plots" class="level3">
<h3 class="anchored" data-anchor-id="bar-plots">Bar Plots</h3>
<p>Bar plot or <strong><a href="https://en.wikipedia.org/wiki/Bar_chart">bar chart</a></strong> can be used to aggregate categorical data based on a function. <strong>Mean</strong> is the default but we can change the reported summary statistic. For more information see the <a href="https://seaborn.pydata.org/generated/seaborn.barplot.html">seaborn documentation</a>.</p>
<div class="cell" data-execution_count="40">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="co" style="color: #5E5E5E;"># plot a barplot showing mean total bill by sex</span></span>
<span id="cb27-2">sns.barplot(x <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'sex'</span>, </span>
<span id="cb27-3">            y <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'total_bill'</span>, </span>
<span id="cb27-4">            data <span class="op" style="color: #5E5E5E;">=</span> tips_df)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="40">
<pre><code>&lt;AxesSubplot: xlabel='sex', ylabel='total_bill'&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Seaborn/Seaborn_files/figure-html/cell-15-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>We can estimate total bill amount based on sex. With estimator we can define functions to use other than the mean like those provided by NumPy : median, std, var, cov or make your own functions</p>
<div class="cell" data-execution_count="41">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="co" style="color: #5E5E5E;"># plot a barplot showing median total bill by sex</span></span>
<span id="cb29-2">sns.barplot(x <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'sex'</span>,</span>
<span id="cb29-3">            y <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'total_bill'</span>,</span>
<span id="cb29-4">            data <span class="op" style="color: #5E5E5E;">=</span> tips_df, </span>
<span id="cb29-5">            estimator <span class="op" style="color: #5E5E5E;">=</span> np.median)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="41">
<pre><code>&lt;AxesSubplot: xlabel='sex', ylabel='total_bill'&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Seaborn/Seaborn_files/figure-html/cell-16-output-2.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="count-plot" class="level3">
<h3 class="anchored" data-anchor-id="count-plot">Count Plot</h3>
<p>A <strong>count plot</strong> is like a bar plot, but the estimator is counting the number of occurences. For more information see the <a href="https://seaborn.pydata.org/generated/seaborn.countplot.html">seaborn documentation</a>.</p>
<div class="cell" data-execution_count="42">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="co" style="color: #5E5E5E;"># plot a count of number of males and females</span></span>
<span id="cb31-2">sns.countplot(x <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'sex'</span>,</span>
<span id="cb31-3">              data <span class="op" style="color: #5E5E5E;">=</span> tips_df)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="42">
<pre><code>&lt;AxesSubplot: xlabel='sex', ylabel='count'&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Seaborn/Seaborn_files/figure-html/cell-17-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
<strong>shift and tab</strong>
</div>
</div>
<div class="callout-body-container callout-body">
<p>Hit <strong>shift and tab</strong> after the function to pull up docstring and the list of possible arguments</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Seaborn/Seaborn_files/figure-html/05142566-3f99-4342-bdca-9962404df254.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">shift_tab.JPG</figcaption><p></p>
</figure>
</div>
</div>
</div>
</section>
<section id="box-plot" class="level3">
<h3 class="anchored" data-anchor-id="box-plot">Box Plot</h3>
<p>A <strong><a href="https://en.wikipedia.org/wiki/Box_plot">box plot</a></strong> allows you to compare different variables. The box shows the quartiles of the data. The bar in the middle is the median and the box extends 1 standard deviation from the median. The whiskers extend to all the other data aside from the points that are considered to be outliers. For more information see the <a href="https://seaborn.pydata.org/generated/seaborn.boxplot.html">seaborn documentation</a>.</p>
<div class="cell" data-execution_count="45">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="co" style="color: #5E5E5E;"># create box plots of total bill per day</span></span>
<span id="cb33-2"><span class="co" style="color: #5E5E5E;"># use hue to allow comparison between male and female</span></span>
<span id="cb33-3">sns.boxplot(x <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'day'</span>,</span>
<span id="cb33-4">            y <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'total_bill'</span>, </span>
<span id="cb33-5">            data <span class="op" style="color: #5E5E5E;">=</span> tips_df, </span>
<span id="cb33-6">            hue <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'sex'</span>)</span>
<span id="cb33-7"></span>
<span id="cb33-8"></span>
<span id="cb33-9"><span class="co" style="color: #5E5E5E;"># Sometimes the labelling can get a bit cluttered. We can control this</span></span>
<span id="cb33-10"><span class="co" style="color: #5E5E5E;"># loc=0 moves legend to the best position</span></span>
<span id="cb33-11">plt.legend(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="45">
<pre><code>&lt;matplotlib.legend.Legend at 0x7f31c52d92d0&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Seaborn/Seaborn_files/figure-html/cell-18-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>Interestingly, we can see that men spend more than women on a Friday, but less than women on a Saturday.</p>
</section>
<section id="violin-plot" class="level3">
<h3 class="anchored" data-anchor-id="violin-plot">Violin Plot</h3>
<p>A <strong><a href="https://en.wikipedia.org/wiki/Violin_plot">violin plot</a></strong> is a combination of the boxplot and KDE. Whereas a box plot corresponds to data points, the violin plot uses the KDE estimation of the data points. For more information see the <a href="https://seaborn.pydata.org/generated/seaborn.violinplot.html">seaborn documentation</a>.</p>
<div class="cell" data-execution_count="47">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1"><span class="co" style="color: #5E5E5E;"># create a violin plot showing distribution of total bill by day and sex</span></span>
<span id="cb35-2">sns.violinplot(x <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'day'</span>, </span>
<span id="cb35-3">               y <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'total_bill'</span>, </span>
<span id="cb35-4">               data <span class="op" style="color: #5E5E5E;">=</span> tips_df, </span>
<span id="cb35-5">               hue <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'sex'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="47">
<pre><code>&lt;AxesSubplot: xlabel='day', ylabel='total_bill'&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Seaborn/Seaborn_files/figure-html/cell-19-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="48">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1"><span class="co" style="color: #5E5E5E;"># Split allows you to compare how the categories compare to each other</span></span>
<span id="cb37-2">sns.violinplot(x <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'day'</span>,</span>
<span id="cb37-3">               y <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'total_bill'</span>,</span>
<span id="cb37-4">               data <span class="op" style="color: #5E5E5E;">=</span> tips_df,</span>
<span id="cb37-5">               hue <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'sex'</span>,</span>
<span id="cb37-6">               split <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="48">
<pre><code>&lt;AxesSubplot: xlabel='day', ylabel='total_bill'&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Seaborn/Seaborn_files/figure-html/cell-20-output-2.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="strip-plot" class="level3">
<h3 class="anchored" data-anchor-id="strip-plot">Strip Plot</h3>
<p>The <a href="https://en.wikipedia.org/wiki/Dot_plot_(statistics)">strip plot</a> or dotplot draws a scatter plot representing all data points where one variable is categorical. It is often used to show all observations with a box plot that represents the average distribution. For more information see the <a href="https://seaborn.pydata.org/generated/seaborn.stripplot.html">seaborn documentation</a>.</p>
<div class="cell" data-execution_count="50">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">plt.figure(figsize <span class="op" style="color: #5E5E5E;">=</span> (<span class="dv" style="color: #AD0000;">8</span>,<span class="dv" style="color: #AD0000;">5</span>))</span>
<span id="cb39-2"></span>
<span id="cb39-3"><span class="co" style="color: #5E5E5E;"># Jitter spreads data points out so that they aren't stacked on top of each other</span></span>
<span id="cb39-4"><span class="co" style="color: #5E5E5E;"># Hue breaks data into men and women</span></span>
<span id="cb39-5">sns.stripplot(x <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'day'</span>,</span>
<span id="cb39-6">              y <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'total_bill'</span>,</span>
<span id="cb39-7">              data <span class="op" style="color: #5E5E5E;">=</span> tips_df,</span>
<span id="cb39-8">              jitter <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">True</span>, </span>
<span id="cb39-9">              hue <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'sex'</span>,</span>
<span id="cb39-10">              dodge <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="50">
<pre><code>&lt;AxesSubplot: xlabel='day', ylabel='total_bill'&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Seaborn/Seaborn_files/figure-html/cell-21-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>This looks great, but the data points for male and female are difficult to distinguish. We can set the argument <em>dode=True</em> to separate them amd show them side by side:</p>
<div class="cell" data-execution_count="51">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1">plt.figure(figsize <span class="op" style="color: #5E5E5E;">=</span> (<span class="dv" style="color: #AD0000;">8</span>,<span class="dv" style="color: #AD0000;">5</span>))</span>
<span id="cb41-2"></span>
<span id="cb41-3"><span class="co" style="color: #5E5E5E;"># Jitter spreads data points out so that they aren't stacked on top of each other</span></span>
<span id="cb41-4"><span class="co" style="color: #5E5E5E;"># Hue breaks data into men and women</span></span>
<span id="cb41-5">sns.stripplot(x <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'day'</span>,</span>
<span id="cb41-6">              y <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'total_bill'</span>,</span>
<span id="cb41-7">              data <span class="op" style="color: #5E5E5E;">=</span> tips_df,</span>
<span id="cb41-8">              jitter <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">True</span>, </span>
<span id="cb41-9">              hue <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'sex'</span>,</span>
<span id="cb41-10">              dodge <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="51">
<pre><code>&lt;AxesSubplot: xlabel='day', ylabel='total_bill'&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Seaborn/Seaborn_files/figure-html/cell-22-output-2.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="swarm-plot" class="level3">
<h3 class="anchored" data-anchor-id="swarm-plot">Swarm plot</h3>
<p>A <strong>swarm plot</strong> is like a strip plot, but points are adjusted so they don’t overlap. It looks like a combination of the violin and strip plots. For more information see the <a href="https://seaborn.pydata.org/generated/seaborn.swarmplot.html">seaborn documentation</a>.</p>
<div class="cell" data-execution_count="53">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1"><span class="co" style="color: #5E5E5E;"># create a raw swarmplot of total bill bu day</span></span>
<span id="cb43-2">sns.swarmplot(x <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'day'</span>,</span>
<span id="cb43-3">              y <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'total_bill'</span>,</span>
<span id="cb43-4">              data <span class="op" style="color: #5E5E5E;">=</span> tips_df)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="53">
<pre><code>&lt;AxesSubplot: xlabel='day', ylabel='total_bill'&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Seaborn/Seaborn_files/figure-html/cell-23-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>We can then stack a violin plot with a swarm:</p>
<div class="cell" data-execution_count="54">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1"><span class="co" style="color: #5E5E5E;"># stack a violin plot on top of our swarmplot</span></span>
<span id="cb45-2">sns.violinplot(x <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'day'</span>,</span>
<span id="cb45-3">               y <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'total_bill'</span>,</span>
<span id="cb45-4">               data <span class="op" style="color: #5E5E5E;">=</span> tips_df)</span>
<span id="cb45-5"></span>
<span id="cb45-6">sns.swarmplot(x <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'day'</span>,</span>
<span id="cb45-7">              y <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'total_bill'</span>,</span>
<span id="cb45-8">              data <span class="op" style="color: #5E5E5E;">=</span> tips_df,</span>
<span id="cb45-9">              color <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'white'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="54">
<pre><code>&lt;AxesSubplot: xlabel='day', ylabel='total_bill'&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Seaborn/Seaborn_files/figure-html/cell-24-output-2.png" class="img-fluid"></p>
</div>
</div>
</section>
</section>
<section id="palettes" class="level2">
<h2 class="anchored" data-anchor-id="palettes">Palettes</h2>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Color maps
</div>
</div>
<div class="callout-body-container callout-body">
<p>You can use matplotlib’s <a href="https://matplotlib.org/3.3.1/tutorials/colors/colormaps.html">color maps</a> for styling</p>
</div>
</div>
<div class="cell" data-execution_count="70">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1">plt.figure(figsize <span class="op" style="color: #5E5E5E;">=</span> (<span class="dv" style="color: #AD0000;">8</span>,<span class="dv" style="color: #AD0000;">8</span>))</span>
<span id="cb47-2"></span>
<span id="cb47-3"><span class="co" style="color: #5E5E5E;"># let's go for a presentation style using 'talk'</span></span>
<span id="cb47-4">sns.set_style(<span class="st" style="color: #20794D;">'ticks'</span>)</span>
<span id="cb47-5">sns.set_context(<span class="st" style="color: #20794D;">'paper'</span>)</span>
<span id="cb47-6"></span>
<span id="cb47-7"><span class="co" style="color: #5E5E5E;"># customize our colours using palette argument</span></span>
<span id="cb47-8">sns.stripplot(x <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'day'</span>,</span>
<span id="cb47-9">              y <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'total_bill'</span>,</span>
<span id="cb47-10">              data <span class="op" style="color: #5E5E5E;">=</span> tips_df,</span>
<span id="cb47-11">              hue <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'sex'</span>,</span>
<span id="cb47-12">              palette <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'plasma'</span>)</span>
<span id="cb47-13"></span>
<span id="cb47-14"><span class="co" style="color: #5E5E5E;"># control location of legend </span></span>
<span id="cb47-15">plt.legend(loc<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="70">
<pre><code>&lt;matplotlib.legend.Legend at 0x7f31c50bcc40&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Seaborn/Seaborn_files/figure-html/cell-25-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Setting the legend location
</div>
</div>
<div class="callout-body-container callout-body">
<p>We can control the position of the legend by using plt.legend(loc = )<br>
1 - upper left<br>
2 - lower left<br>
3 - lower right<br>
See the <a href="https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.legend.html">other options</a></p>
</div>
</div>
</section>
<section id="matrix-plots" class="level2">
<h2 class="anchored" data-anchor-id="matrix-plots">Matrix plots</h2>
<section id="heatmaps" class="level3">
<h3 class="anchored" data-anchor-id="heatmaps">Heatmaps</h3>
<div class="callout-important callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Important
</div>
</div>
<div class="callout-body-container callout-body">
<p>To create a heatmap you must have data set up as a matrix where variables are on the columns and rows</p>
</div>
</div>
<p>For example let’s look at an extract from our car_crashes dataset :</p>
<div class="cell" data-execution_count="73">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1"><span class="co" style="color: #5E5E5E;"># grab first 5 rows </span></span>
<span id="cb49-2">crash_df.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="73">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>total</th>
      <th>speeding</th>
      <th>alcohol</th>
      <th>not_distracted</th>
      <th>no_previous</th>
      <th>ins_premium</th>
      <th>ins_losses</th>
      <th>abbrev</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>18.8</td>
      <td>7.332</td>
      <td>5.640</td>
      <td>18.048</td>
      <td>15.040</td>
      <td>784.55</td>
      <td>145.08</td>
      <td>AL</td>
    </tr>
    <tr>
      <th>1</th>
      <td>18.1</td>
      <td>7.421</td>
      <td>4.525</td>
      <td>16.290</td>
      <td>17.014</td>
      <td>1053.48</td>
      <td>133.93</td>
      <td>AK</td>
    </tr>
    <tr>
      <th>2</th>
      <td>18.6</td>
      <td>6.510</td>
      <td>5.208</td>
      <td>15.624</td>
      <td>17.856</td>
      <td>899.47</td>
      <td>110.35</td>
      <td>AZ</td>
    </tr>
    <tr>
      <th>3</th>
      <td>22.4</td>
      <td>4.032</td>
      <td>5.824</td>
      <td>21.056</td>
      <td>21.280</td>
      <td>827.34</td>
      <td>142.39</td>
      <td>AR</td>
    </tr>
    <tr>
      <th>4</th>
      <td>12.0</td>
      <td>4.200</td>
      <td>3.360</td>
      <td>10.920</td>
      <td>10.680</td>
      <td>878.41</td>
      <td>165.63</td>
      <td>CA</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>In its current format (with the variables across the columns but not the rows) we won’t be able to produce a heat map for our car_crashes DataFrame. We can transform our DataFrame into the correct format using a correlation function:</p>
<div class="cell" data-execution_count="77">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1">plt.figure(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">8</span>,<span class="dv" style="color: #AD0000;">6</span>))</span>
<span id="cb50-2">sns.set_context(<span class="st" style="color: #20794D;">'paper'</span>,</span>
<span id="cb50-3">                font_scale <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">1.4</span>)</span>
<span id="cb50-4"></span>
<span id="cb50-5"><span class="co" style="color: #5E5E5E;"># transform our dataset into a correlation matrix</span></span>
<span id="cb50-6">crash_mx <span class="op" style="color: #5E5E5E;">=</span> crash_df.corr()</span>
<span id="cb50-7">crash_mx</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/tmp/ipykernel_206/2429762792.py:5: FutureWarning: The default value of numeric_only in DataFrame.corr is deprecated. In a future version, it will default to False. Select only valid columns or specify the value of numeric_only to silence this warning.
  crash_mx = crash_df.corr()</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="77">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>total</th>
      <th>speeding</th>
      <th>alcohol</th>
      <th>not_distracted</th>
      <th>no_previous</th>
      <th>ins_premium</th>
      <th>ins_losses</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>total</th>
      <td>1.000000</td>
      <td>0.611548</td>
      <td>0.852613</td>
      <td>0.827560</td>
      <td>0.956179</td>
      <td>-0.199702</td>
      <td>-0.036011</td>
    </tr>
    <tr>
      <th>speeding</th>
      <td>0.611548</td>
      <td>1.000000</td>
      <td>0.669719</td>
      <td>0.588010</td>
      <td>0.571976</td>
      <td>-0.077675</td>
      <td>-0.065928</td>
    </tr>
    <tr>
      <th>alcohol</th>
      <td>0.852613</td>
      <td>0.669719</td>
      <td>1.000000</td>
      <td>0.732816</td>
      <td>0.783520</td>
      <td>-0.170612</td>
      <td>-0.112547</td>
    </tr>
    <tr>
      <th>not_distracted</th>
      <td>0.827560</td>
      <td>0.588010</td>
      <td>0.732816</td>
      <td>1.000000</td>
      <td>0.747307</td>
      <td>-0.174856</td>
      <td>-0.075970</td>
    </tr>
    <tr>
      <th>no_previous</th>
      <td>0.956179</td>
      <td>0.571976</td>
      <td>0.783520</td>
      <td>0.747307</td>
      <td>1.000000</td>
      <td>-0.156895</td>
      <td>-0.006359</td>
    </tr>
    <tr>
      <th>ins_premium</th>
      <td>-0.199702</td>
      <td>-0.077675</td>
      <td>-0.170612</td>
      <td>-0.174856</td>
      <td>-0.156895</td>
      <td>1.000000</td>
      <td>0.623116</td>
    </tr>
    <tr>
      <th>ins_losses</th>
      <td>-0.036011</td>
      <td>-0.065928</td>
      <td>-0.112547</td>
      <td>-0.075970</td>
      <td>-0.006359</td>
      <td>0.623116</td>
      <td>1.000000</td>
    </tr>
  </tbody>
</table>
</div>
</div>
<div class="cell-output cell-output-display">
<pre><code>&lt;Figure size 800x600 with 0 Axes&gt;</code></pre>
</div>
</div>
<p>Now that we have our data in the correct format we can go ahead and plot out heatmap:</p>
<div class="cell" data-execution_count="78">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1"><span class="co" style="color: #5E5E5E;"># create a heatmap, annotate and customize from colormaps</span></span>
<span id="cb53-2">sns.heatmap(crash_mx, </span>
<span id="cb53-3">            annot <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">True</span>, </span>
<span id="cb53-4">            cmap <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'Blues'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="78">
<pre><code>&lt;AxesSubplot: &gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Seaborn/Seaborn_files/figure-html/cell-28-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>Another way to prep our data for plotting is to create a pivot table. Let’s use another of seaborn’s built in datasets to illustrate:</p>
<div class="cell" data-execution_count="79">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb55-1">flights <span class="op" style="color: #5E5E5E;">=</span> sns.load_dataset(<span class="st" style="color: #20794D;">"flights"</span>)</span>
<span id="cb55-2">flights</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="79">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>year</th>
      <th>month</th>
      <th>passengers</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1949</td>
      <td>Jan</td>
      <td>112</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1949</td>
      <td>Feb</td>
      <td>118</td>
    </tr>
    <tr>
      <th>2</th>
      <td>1949</td>
      <td>Mar</td>
      <td>132</td>
    </tr>
    <tr>
      <th>3</th>
      <td>1949</td>
      <td>Apr</td>
      <td>129</td>
    </tr>
    <tr>
      <th>4</th>
      <td>1949</td>
      <td>May</td>
      <td>121</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>139</th>
      <td>1960</td>
      <td>Aug</td>
      <td>606</td>
    </tr>
    <tr>
      <th>140</th>
      <td>1960</td>
      <td>Sep</td>
      <td>508</td>
    </tr>
    <tr>
      <th>141</th>
      <td>1960</td>
      <td>Oct</td>
      <td>461</td>
    </tr>
    <tr>
      <th>142</th>
      <td>1960</td>
      <td>Nov</td>
      <td>390</td>
    </tr>
    <tr>
      <th>143</th>
      <td>1960</td>
      <td>Dec</td>
      <td>432</td>
    </tr>
  </tbody>
</table>
<p>144 rows × 3 columns</p>
</div>
</div>
</div>
<p>We can create a matrix with an index of month, columns representing years and the number of passengers for each:</p>
<div class="cell" data-execution_count="80">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb56-1">flights <span class="op" style="color: #5E5E5E;">=</span> flights.pivot_table(index <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'month'</span>,</span>
<span id="cb56-2">                              columns <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'year'</span>,</span>
<span id="cb56-3">                              values <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'passengers'</span>)</span>
<span id="cb56-4">flights</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="80">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th>year</th>
      <th>1949</th>
      <th>1950</th>
      <th>1951</th>
      <th>1952</th>
      <th>1953</th>
      <th>1954</th>
      <th>1955</th>
      <th>1956</th>
      <th>1957</th>
      <th>1958</th>
      <th>1959</th>
      <th>1960</th>
    </tr>
    <tr>
      <th>month</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>Jan</th>
      <td>112</td>
      <td>115</td>
      <td>145</td>
      <td>171</td>
      <td>196</td>
      <td>204</td>
      <td>242</td>
      <td>284</td>
      <td>315</td>
      <td>340</td>
      <td>360</td>
      <td>417</td>
    </tr>
    <tr>
      <th>Feb</th>
      <td>118</td>
      <td>126</td>
      <td>150</td>
      <td>180</td>
      <td>196</td>
      <td>188</td>
      <td>233</td>
      <td>277</td>
      <td>301</td>
      <td>318</td>
      <td>342</td>
      <td>391</td>
    </tr>
    <tr>
      <th>Mar</th>
      <td>132</td>
      <td>141</td>
      <td>178</td>
      <td>193</td>
      <td>236</td>
      <td>235</td>
      <td>267</td>
      <td>317</td>
      <td>356</td>
      <td>362</td>
      <td>406</td>
      <td>419</td>
    </tr>
    <tr>
      <th>Apr</th>
      <td>129</td>
      <td>135</td>
      <td>163</td>
      <td>181</td>
      <td>235</td>
      <td>227</td>
      <td>269</td>
      <td>313</td>
      <td>348</td>
      <td>348</td>
      <td>396</td>
      <td>461</td>
    </tr>
    <tr>
      <th>May</th>
      <td>121</td>
      <td>125</td>
      <td>172</td>
      <td>183</td>
      <td>229</td>
      <td>234</td>
      <td>270</td>
      <td>318</td>
      <td>355</td>
      <td>363</td>
      <td>420</td>
      <td>472</td>
    </tr>
    <tr>
      <th>Jun</th>
      <td>135</td>
      <td>149</td>
      <td>178</td>
      <td>218</td>
      <td>243</td>
      <td>264</td>
      <td>315</td>
      <td>374</td>
      <td>422</td>
      <td>435</td>
      <td>472</td>
      <td>535</td>
    </tr>
    <tr>
      <th>Jul</th>
      <td>148</td>
      <td>170</td>
      <td>199</td>
      <td>230</td>
      <td>264</td>
      <td>302</td>
      <td>364</td>
      <td>413</td>
      <td>465</td>
      <td>491</td>
      <td>548</td>
      <td>622</td>
    </tr>
    <tr>
      <th>Aug</th>
      <td>148</td>
      <td>170</td>
      <td>199</td>
      <td>242</td>
      <td>272</td>
      <td>293</td>
      <td>347</td>
      <td>405</td>
      <td>467</td>
      <td>505</td>
      <td>559</td>
      <td>606</td>
    </tr>
    <tr>
      <th>Sep</th>
      <td>136</td>
      <td>158</td>
      <td>184</td>
      <td>209</td>
      <td>237</td>
      <td>259</td>
      <td>312</td>
      <td>355</td>
      <td>404</td>
      <td>404</td>
      <td>463</td>
      <td>508</td>
    </tr>
    <tr>
      <th>Oct</th>
      <td>119</td>
      <td>133</td>
      <td>162</td>
      <td>191</td>
      <td>211</td>
      <td>229</td>
      <td>274</td>
      <td>306</td>
      <td>347</td>
      <td>359</td>
      <td>407</td>
      <td>461</td>
    </tr>
    <tr>
      <th>Nov</th>
      <td>104</td>
      <td>114</td>
      <td>146</td>
      <td>172</td>
      <td>180</td>
      <td>203</td>
      <td>237</td>
      <td>271</td>
      <td>305</td>
      <td>310</td>
      <td>362</td>
      <td>390</td>
    </tr>
    <tr>
      <th>Dec</th>
      <td>118</td>
      <td>140</td>
      <td>166</td>
      <td>194</td>
      <td>201</td>
      <td>229</td>
      <td>278</td>
      <td>306</td>
      <td>336</td>
      <td>337</td>
      <td>405</td>
      <td>432</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>Now that we have our data in the correct format we can go ahead and plot out heatmap:</p>
<div class="cell" data-execution_count="81">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb57-1"><span class="co" style="color: #5E5E5E;"># You can separate data with lines</span></span>
<span id="cb57-2">sns.heatmap(flights,</span>
<span id="cb57-3">            cmap <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'Blues'</span>,</span>
<span id="cb57-4">            linecolor <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'white'</span>,</span>
<span id="cb57-5">            linewidth <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="81">
<pre><code>&lt;AxesSubplot: xlabel='year', ylabel='month'&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Seaborn/Seaborn_files/figure-html/cell-31-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>We see that flights have increased over time and that most people travel in July and August.</p>
</section>
<section id="cluster-maps" class="level3">
<h3 class="anchored" data-anchor-id="cluster-maps">Cluster Maps</h3>
<p>A <strong>Cluster map</strong> is a hierarchically clustered heatmap. The distance between points is calculated, the closest are joined, and this continues for the next closest (It compares columns / rows of the heatmap). For more information see the <a href="https://seaborn.pydata.org/generated/seaborn.clustermap.html">seaborn documentation</a>.</p>
<p>Let’s illustrate using another of seaborn’s built-in datasets:</p>
<div class="cell" data-execution_count="99">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb59-1">iris <span class="op" style="color: #5E5E5E;">=</span> sns.load_dataset(<span class="st" style="color: #20794D;">'iris'</span>)</span>
<span id="cb59-2">iris</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="99">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>sepal_length</th>
      <th>sepal_width</th>
      <th>petal_length</th>
      <th>petal_width</th>
      <th>species</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>5.1</td>
      <td>3.5</td>
      <td>1.4</td>
      <td>0.2</td>
      <td>setosa</td>
    </tr>
    <tr>
      <th>1</th>
      <td>4.9</td>
      <td>3.0</td>
      <td>1.4</td>
      <td>0.2</td>
      <td>setosa</td>
    </tr>
    <tr>
      <th>2</th>
      <td>4.7</td>
      <td>3.2</td>
      <td>1.3</td>
      <td>0.2</td>
      <td>setosa</td>
    </tr>
    <tr>
      <th>3</th>
      <td>4.6</td>
      <td>3.1</td>
      <td>1.5</td>
      <td>0.2</td>
      <td>setosa</td>
    </tr>
    <tr>
      <th>4</th>
      <td>5.0</td>
      <td>3.6</td>
      <td>1.4</td>
      <td>0.2</td>
      <td>setosa</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>145</th>
      <td>6.7</td>
      <td>3.0</td>
      <td>5.2</td>
      <td>2.3</td>
      <td>virginica</td>
    </tr>
    <tr>
      <th>146</th>
      <td>6.3</td>
      <td>2.5</td>
      <td>5.0</td>
      <td>1.9</td>
      <td>virginica</td>
    </tr>
    <tr>
      <th>147</th>
      <td>6.5</td>
      <td>3.0</td>
      <td>5.2</td>
      <td>2.0</td>
      <td>virginica</td>
    </tr>
    <tr>
      <th>148</th>
      <td>6.2</td>
      <td>3.4</td>
      <td>5.4</td>
      <td>2.3</td>
      <td>virginica</td>
    </tr>
    <tr>
      <th>149</th>
      <td>5.9</td>
      <td>3.0</td>
      <td>5.1</td>
      <td>1.8</td>
      <td>virginica</td>
    </tr>
  </tbody>
</table>
<p>150 rows × 5 columns</p>
</div>
</div>
</div>
<p>It would be useful to carve up our numerical data based on the different species in order to identify any trends.</p>
<div class="cell" data-execution_count="100">
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb60-1"><span class="co" style="color: #5E5E5E;"># remove the column species using .pop</span></span>
<span id="cb60-2">species <span class="op" style="color: #5E5E5E;">=</span> iris.pop(<span class="st" style="color: #20794D;">'species'</span>)</span>
<span id="cb60-3"></span>
<span id="cb60-4">sns.clustermap(iris)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="100">
<pre><code>&lt;seaborn.matrix.ClusterGrid at 0x7f31bc001ba0&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Seaborn/Seaborn_files/figure-html/cell-33-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>Let’s try this out on our flight data we looked at earlier:</p>
<div class="cell" data-execution_count="84">
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb62-1"><span class="co" style="color: #5E5E5E;"># standard_scale normalizes the data to focus on the clustering</span></span>
<span id="cb62-2">sns.clustermap(flights,</span>
<span id="cb62-3">               cmap <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"Blues"</span>,</span>
<span id="cb62-4">               standard_scale <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="84">
<pre><code>&lt;seaborn.matrix.ClusterGrid at 0x7f31c2681c00&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Seaborn/Seaborn_files/figure-html/cell-34-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>With our flights data we can see that years have been reoriented to place like data closer together. You can see clusters of data for July &amp; August for the years 59 &amp; 60.</p>
</section>
<section id="pair-grids" class="level3">
<h3 class="anchored" data-anchor-id="pair-grids">Pair Grids</h3>
<p>Pair Grids allow us to create a grid of different plots with complete control over what is displayed. For more information see the <a href="https://seaborn.pydata.org/generated/seaborn.PairGrid.html">seaborn documentation</a>.</p>
<div class="cell" data-execution_count="113">
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb64-1"><span class="co" style="color: #5E5E5E;"># load in iris dataset</span></span>
<span id="cb64-2">iris <span class="op" style="color: #5E5E5E;">=</span> sns.load_dataset(<span class="st" style="color: #20794D;">'iris'</span>)</span>
<span id="cb64-3"></span>
<span id="cb64-4"><span class="co" style="color: #5E5E5E;"># Create the empty grid system using the provided data</span></span>
<span id="cb64-5"><span class="co" style="color: #5E5E5E;"># Colorize based on species</span></span>
<span id="cb64-6">iris_g <span class="op" style="color: #5E5E5E;">=</span> sns.PairGrid(iris,</span>
<span id="cb64-7">                      hue <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'species'</span>)</span>
<span id="cb64-8"></span>
<span id="cb64-9"><span class="co" style="color: #5E5E5E;"># Put a histogram on the diagonal </span></span>
<span id="cb64-10">iris_g.map_diag(plt.hist)</span>
<span id="cb64-11"></span>
<span id="cb64-12"><span class="co" style="color: #5E5E5E;"># And a scatter plot every place else </span></span>
<span id="cb64-13">iris_g.map_offdiag(plt.scatter)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="113">
<pre><code>&lt;seaborn.axisgrid.PairGrid at 0x7f31bbc31de0&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Seaborn/Seaborn_files/figure-html/cell-35-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>We can further tailor by having different plots in the upper, lower and diagonal:</p>
<div class="cell" data-execution_count="117">
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb66-1"><span class="co" style="color: #5E5E5E;"># load in iris dataset</span></span>
<span id="cb66-2">iris <span class="op" style="color: #5E5E5E;">=</span> sns.load_dataset(<span class="st" style="color: #20794D;">'iris'</span>)</span>
<span id="cb66-3"></span>
<span id="cb66-4"><span class="co" style="color: #5E5E5E;"># Create the empty grid system using the provided data</span></span>
<span id="cb66-5"><span class="co" style="color: #5E5E5E;"># Colorize based on species</span></span>
<span id="cb66-6">iris_g <span class="op" style="color: #5E5E5E;">=</span> sns.PairGrid(iris,</span>
<span id="cb66-7">                      hue <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'species'</span>)</span>
<span id="cb66-8"></span>
<span id="cb66-9"><span class="co" style="color: #5E5E5E;"># Put a histogram on the diagonal </span></span>
<span id="cb66-10">iris_g.map_diag(plt.hist)</span>
<span id="cb66-11"></span>
<span id="cb66-12"><span class="co" style="color: #5E5E5E;"># Have different plots in upper, lower and diagonal</span></span>
<span id="cb66-13">iris_g.map_upper(plt.scatter)</span>
<span id="cb66-14">iris_g.map_lower(sns.kdeplot)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="117">
<pre><code>&lt;seaborn.axisgrid.PairGrid at 0x7f31b6d41960&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Seaborn/Seaborn_files/figure-html/cell-36-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>We can also define the x and y variables for our custom grids:</p>
<div class="cell" data-execution_count="111">
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb68-1"><span class="co" style="color: #5E5E5E;"># load in iris dataset</span></span>
<span id="cb68-2">iris <span class="op" style="color: #5E5E5E;">=</span> sns.load_dataset(<span class="st" style="color: #20794D;">'iris'</span>)</span>
<span id="cb68-3"></span>
<span id="cb68-4"><span class="co" style="color: #5E5E5E;"># You can define define variables for x &amp; y for a custom grid</span></span>
<span id="cb68-5">iris_g <span class="op" style="color: #5E5E5E;">=</span> sns.PairGrid(iris,</span>
<span id="cb68-6">                      hue <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"species"</span>,</span>
<span id="cb68-7">                      x_vars <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">"sepal_length"</span>, <span class="st" style="color: #20794D;">"sepal_width"</span>],</span>
<span id="cb68-8">                      y_vars <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">"petal_length"</span>, <span class="st" style="color: #20794D;">"petal_width"</span>])</span>
<span id="cb68-9"></span>
<span id="cb68-10">iris_g.<span class="bu" style="color: null;">map</span>(plt.scatter)</span>
<span id="cb68-11"></span>
<span id="cb68-12"><span class="co" style="color: #5E5E5E;"># Add a legend last</span></span>
<span id="cb68-13">iris_g.add_legend()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="111">
<pre><code>&lt;seaborn.axisgrid.PairGrid at 0x7f31b8eecdc0&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Seaborn/Seaborn_files/figure-html/cell-37-output-2.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="facet-grid" class="level3">
<h3 class="anchored" data-anchor-id="facet-grid">Facet Grid</h3>
<p>A <strong>facet grid</strong> allows us to print multiple plots in a grid where we can define columns &amp; rows. For further information see the <a href="https://seaborn.pydata.org/generated/seaborn.FacetGrid.html">seaborn documentation</a>.</p>
<p>Let’s return to our <em>tips</em> dataset to illustrate what can be done usin facet grids.</p>
<div class="cell" data-execution_count="128">
<div class="sourceCode cell-code" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb70-1"><span class="co" style="color: #5E5E5E;"># Get histogram for smokers and non with total bill for lunch &amp; dinner</span></span>
<span id="cb70-2">tips_fg <span class="op" style="color: #5E5E5E;">=</span> sns.FacetGrid(tips_df,</span>
<span id="cb70-3">                        col <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'time'</span>,</span>
<span id="cb70-4">                        row <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'smoker'</span>)</span>
<span id="cb70-5"></span>
<span id="cb70-6"><span class="co" style="color: #5E5E5E;"># You can pass in attributes for the histogram</span></span>
<span id="cb70-7">tips_fg.<span class="bu" style="color: null;">map</span>(plt.hist,</span>
<span id="cb70-8">            <span class="st" style="color: #20794D;">'total_bill'</span>,</span>
<span id="cb70-9">            bins <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">8</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/home/stephen137/mambaforge/lib/python3.10/site-packages/seaborn/axisgrid.py:745: FutureWarning: iteritems is deprecated and will be removed in a future version. Use .items instead.
  plot_args = [v for k, v in plot_data.iteritems()]
/home/stephen137/mambaforge/lib/python3.10/site-packages/seaborn/axisgrid.py:745: FutureWarning: iteritems is deprecated and will be removed in a future version. Use .items instead.
  plot_args = [v for k, v in plot_data.iteritems()]
/home/stephen137/mambaforge/lib/python3.10/site-packages/seaborn/axisgrid.py:745: FutureWarning: iteritems is deprecated and will be removed in a future version. Use .items instead.
  plot_args = [v for k, v in plot_data.iteritems()]
/home/stephen137/mambaforge/lib/python3.10/site-packages/seaborn/axisgrid.py:745: FutureWarning: iteritems is deprecated and will be removed in a future version. Use .items instead.
  plot_args = [v for k, v in plot_data.iteritems()]</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="128">
<pre><code>&lt;seaborn.axisgrid.FacetGrid at 0x7f31bad559f0&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Seaborn/Seaborn_files/figure-html/cell-38-output-3.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="122">
<div class="sourceCode cell-code" id="cb73" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb73-1"><span class="co" style="color: #5E5E5E;"># Get histogram for smokers and non with total bill for lunch &amp; dinner</span></span>
<span id="cb73-2">tips_fg <span class="op" style="color: #5E5E5E;">=</span> sns.FacetGrid(tips_df,</span>
<span id="cb73-3">                        col <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'time'</span>,</span>
<span id="cb73-4">                        row <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'smoker'</span>)</span>
<span id="cb73-5"></span>
<span id="cb73-6"><span class="co" style="color: #5E5E5E;"># Create a scatter plot with data on total bill &amp; tip (You need 2 parameters)</span></span>
<span id="cb73-7">tips_fg.<span class="bu" style="color: null;">map</span>(plt.scatter,</span>
<span id="cb73-8">            <span class="st" style="color: #20794D;">'total_bill'</span>,</span>
<span id="cb73-9">            <span class="st" style="color: #20794D;">'tip'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/home/stephen137/mambaforge/lib/python3.10/site-packages/seaborn/axisgrid.py:745: FutureWarning: iteritems is deprecated and will be removed in a future version. Use .items instead.
  plot_args = [v for k, v in plot_data.iteritems()]
/home/stephen137/mambaforge/lib/python3.10/site-packages/seaborn/axisgrid.py:745: FutureWarning: iteritems is deprecated and will be removed in a future version. Use .items instead.
  plot_args = [v for k, v in plot_data.iteritems()]
/home/stephen137/mambaforge/lib/python3.10/site-packages/seaborn/axisgrid.py:745: FutureWarning: iteritems is deprecated and will be removed in a future version. Use .items instead.
  plot_args = [v for k, v in plot_data.iteritems()]
/home/stephen137/mambaforge/lib/python3.10/site-packages/seaborn/axisgrid.py:745: FutureWarning: iteritems is deprecated and will be removed in a future version. Use .items instead.
  plot_args = [v for k, v in plot_data.iteritems()]</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="122">
<pre><code>&lt;seaborn.axisgrid.FacetGrid at 0x7f31b61160b0&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Seaborn/Seaborn_files/figure-html/cell-39-output-3.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="130">
<div class="sourceCode cell-code" id="cb76" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb76-1"><span class="co" style="color: #5E5E5E;"># We can assign variables to different colors and increase size of grid</span></span>
<span id="cb76-2"><span class="co" style="color: #5E5E5E;"># Aspect is 1.3 x the size of height</span></span>
<span id="cb76-3"><span class="co" style="color: #5E5E5E;"># You can change the order of the columns</span></span>
<span id="cb76-4"><span class="co" style="color: #5E5E5E;"># Define the palette used</span></span>
<span id="cb76-5"></span>
<span id="cb76-6">tips_fg <span class="op" style="color: #5E5E5E;">=</span> sns.FacetGrid(tips_df,</span>
<span id="cb76-7">                        col <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'time'</span>,</span>
<span id="cb76-8">                        hue <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'smoker'</span>,</span>
<span id="cb76-9">                        height <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">4</span>,</span>
<span id="cb76-10">                        aspect <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">1.3</span>)</span>
<span id="cb76-11">                 </span>
<span id="cb76-12">tips_fg.<span class="bu" style="color: null;">map</span>(plt.scatter,</span>
<span id="cb76-13">            <span class="st" style="color: #20794D;">"total_bill"</span>,</span>
<span id="cb76-14">            <span class="st" style="color: #20794D;">"tip"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/home/stephen137/mambaforge/lib/python3.10/site-packages/seaborn/axisgrid.py:745: FutureWarning: iteritems is deprecated and will be removed in a future version. Use .items instead.
  plot_args = [v for k, v in plot_data.iteritems()]
/home/stephen137/mambaforge/lib/python3.10/site-packages/seaborn/axisgrid.py:745: FutureWarning: iteritems is deprecated and will be removed in a future version. Use .items instead.
  plot_args = [v for k, v in plot_data.iteritems()]
/home/stephen137/mambaforge/lib/python3.10/site-packages/seaborn/axisgrid.py:745: FutureWarning: iteritems is deprecated and will be removed in a future version. Use .items instead.
  plot_args = [v for k, v in plot_data.iteritems()]
/home/stephen137/mambaforge/lib/python3.10/site-packages/seaborn/axisgrid.py:745: FutureWarning: iteritems is deprecated and will be removed in a future version. Use .items instead.
  plot_args = [v for k, v in plot_data.iteritems()]</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="130">
<pre><code>&lt;seaborn.axisgrid.FacetGrid at 0x7f31b80d1180&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Seaborn/Seaborn_files/figure-html/cell-40-output-3.png" class="img-fluid"></p>
</div>
</div>
<p>We can change the column order:</p>
<div class="cell" data-execution_count="131">
<div class="sourceCode cell-code" id="cb79" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb79-1"><span class="co" style="color: #5E5E5E;"># We can assign variables to different colors and increase size of grid</span></span>
<span id="cb79-2"><span class="co" style="color: #5E5E5E;"># Aspect is 1.3 x the size of height</span></span>
<span id="cb79-3"><span class="co" style="color: #5E5E5E;"># Define the palette used</span></span>
<span id="cb79-4"></span>
<span id="cb79-5">tips_fg <span class="op" style="color: #5E5E5E;">=</span> sns.FacetGrid(tips_df,</span>
<span id="cb79-6">                        col <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'time'</span>,</span>
<span id="cb79-7">                        hue <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'smoker'</span>,</span>
<span id="cb79-8">                        height <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">4</span>,</span>
<span id="cb79-9">                        aspect <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">1.3</span>,</span>
<span id="cb79-10"></span>
<span id="cb79-11"><span class="co" style="color: #5E5E5E;"># We can change the order of the columns and paletter</span></span>
<span id="cb79-12">                        col_order <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'Dinner'</span>, <span class="st" style="color: #20794D;">'Lunch'</span>], </span>
<span id="cb79-13">                        palette <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'Set1'</span>)</span>
<span id="cb79-14">              </span>
<span id="cb79-15"><span class="co" style="color: #5E5E5E;"># We can change the edge colour of our dots to white      </span></span>
<span id="cb79-16">tips_fg.<span class="bu" style="color: null;">map</span>(plt.scatter,</span>
<span id="cb79-17">            <span class="st" style="color: #20794D;">"total_bill"</span>,</span>
<span id="cb79-18">            <span class="st" style="color: #20794D;">"tip"</span>,</span>
<span id="cb79-19">            edgecolor <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'w'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/home/stephen137/mambaforge/lib/python3.10/site-packages/seaborn/axisgrid.py:745: FutureWarning: iteritems is deprecated and will be removed in a future version. Use .items instead.
  plot_args = [v for k, v in plot_data.iteritems()]
/home/stephen137/mambaforge/lib/python3.10/site-packages/seaborn/axisgrid.py:745: FutureWarning: iteritems is deprecated and will be removed in a future version. Use .items instead.
  plot_args = [v for k, v in plot_data.iteritems()]
/home/stephen137/mambaforge/lib/python3.10/site-packages/seaborn/axisgrid.py:745: FutureWarning: iteritems is deprecated and will be removed in a future version. Use .items instead.
  plot_args = [v for k, v in plot_data.iteritems()]
/home/stephen137/mambaforge/lib/python3.10/site-packages/seaborn/axisgrid.py:745: FutureWarning: iteritems is deprecated and will be removed in a future version. Use .items instead.
  plot_args = [v for k, v in plot_data.iteritems()]</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="131">
<pre><code>&lt;seaborn.axisgrid.FacetGrid at 0x7f31b82530a0&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Seaborn/Seaborn_files/figure-html/cell-41-output-3.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="133">
<div class="sourceCode cell-code" id="cb82" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb82-1"><span class="co" style="color: #5E5E5E;"># create a dictionary to define the size, linewidth and edge color of our markers</span></span>
<span id="cb82-2">kws <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">dict</span>(s<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">50</span>, </span>
<span id="cb82-3">           linewidth<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">.5</span>, </span>
<span id="cb82-4">           edgecolor<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'w'</span>)</span>
<span id="cb82-5"></span>
<span id="cb82-6"><span class="co" style="color: #5E5E5E;"># let's go to town on the customizations! note we can reference the dictionary we just created</span></span>
<span id="cb82-7">tips_fg <span class="op" style="color: #5E5E5E;">=</span> sns.FacetGrid(tips_df, </span>
<span id="cb82-8">                        col<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'sex'</span>, </span>
<span id="cb82-9">                        hue<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'smoker'</span>, </span>
<span id="cb82-10">                        height<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">4</span>, </span>
<span id="cb82-11">                        aspect<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">1.3</span>, </span>
<span id="cb82-12">                        hue_order<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'Yes'</span>, <span class="st" style="color: #20794D;">'No'</span>], </span>
<span id="cb82-13">                        hue_kws<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">dict</span>(marker<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'^'</span>, <span class="st" style="color: #20794D;">'v'</span>])</span>
<span id="cb82-14">                       )</span>
<span id="cb82-15"></span>
<span id="cb82-16">tips_fg.<span class="bu" style="color: null;">map</span>(plt.scatter,</span>
<span id="cb82-17">            <span class="st" style="color: #20794D;">'total_bill'</span>,</span>
<span id="cb82-18">            <span class="st" style="color: #20794D;">'tip'</span>,</span>
<span id="cb82-19">            <span class="op" style="color: #5E5E5E;">**</span>kws</span>
<span id="cb82-20">           )</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/home/stephen137/mambaforge/lib/python3.10/site-packages/seaborn/axisgrid.py:745: FutureWarning: iteritems is deprecated and will be removed in a future version. Use .items instead.
  plot_args = [v for k, v in plot_data.iteritems()]
/home/stephen137/mambaforge/lib/python3.10/site-packages/seaborn/axisgrid.py:745: FutureWarning: iteritems is deprecated and will be removed in a future version. Use .items instead.
  plot_args = [v for k, v in plot_data.iteritems()]
/home/stephen137/mambaforge/lib/python3.10/site-packages/seaborn/axisgrid.py:745: FutureWarning: iteritems is deprecated and will be removed in a future version. Use .items instead.
  plot_args = [v for k, v in plot_data.iteritems()]
/home/stephen137/mambaforge/lib/python3.10/site-packages/seaborn/axisgrid.py:745: FutureWarning: iteritems is deprecated and will be removed in a future version. Use .items instead.
  plot_args = [v for k, v in plot_data.iteritems()]</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="133">
<pre><code>&lt;seaborn.axisgrid.FacetGrid at 0x7f31bb0fbb20&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Seaborn/Seaborn_files/figure-html/cell-42-output-3.png" class="img-fluid"></p>
</div>
</div>
<p>Here hue has been used to denote smoker vs non-smoker - blue upward pointing markers represent smokers, and the orange downward facing markers represent non-smokers.</p>
<p>Let’s look at a seaborn dataset that we haven’t seeen yet. This dataframe provides scores for different students based on the level of attention they could provide during testing:</p>
<div class="cell" data-execution_count="147">
<div class="sourceCode cell-code" id="cb85" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb85-1"><span class="co" style="color: #5E5E5E;"># load in attention dataset and take a look at first 13 rows</span></span>
<span id="cb85-2">att_df <span class="op" style="color: #5E5E5E;">=</span> sns.load_dataset(<span class="st" style="color: #20794D;">'attention'</span>)</span>
<span id="cb85-3">att_df.head(<span class="dv" style="color: #AD0000;">13</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="147">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>Unnamed: 0</th>
      <th>subject</th>
      <th>attention</th>
      <th>solutions</th>
      <th>score</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>0</td>
      <td>1</td>
      <td>divided</td>
      <td>1</td>
      <td>2.0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1</td>
      <td>2</td>
      <td>divided</td>
      <td>1</td>
      <td>3.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>2</td>
      <td>3</td>
      <td>divided</td>
      <td>1</td>
      <td>3.0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>3</td>
      <td>4</td>
      <td>divided</td>
      <td>1</td>
      <td>5.0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>4</td>
      <td>5</td>
      <td>divided</td>
      <td>1</td>
      <td>4.0</td>
    </tr>
    <tr>
      <th>5</th>
      <td>5</td>
      <td>6</td>
      <td>divided</td>
      <td>1</td>
      <td>5.0</td>
    </tr>
    <tr>
      <th>6</th>
      <td>6</td>
      <td>7</td>
      <td>divided</td>
      <td>1</td>
      <td>5.0</td>
    </tr>
    <tr>
      <th>7</th>
      <td>7</td>
      <td>8</td>
      <td>divided</td>
      <td>1</td>
      <td>5.0</td>
    </tr>
    <tr>
      <th>8</th>
      <td>8</td>
      <td>9</td>
      <td>divided</td>
      <td>1</td>
      <td>2.0</td>
    </tr>
    <tr>
      <th>9</th>
      <td>9</td>
      <td>10</td>
      <td>divided</td>
      <td>1</td>
      <td>6.0</td>
    </tr>
    <tr>
      <th>10</th>
      <td>10</td>
      <td>11</td>
      <td>focused</td>
      <td>1</td>
      <td>6.0</td>
    </tr>
    <tr>
      <th>11</th>
      <td>11</td>
      <td>12</td>
      <td>focused</td>
      <td>1</td>
      <td>8.0</td>
    </tr>
    <tr>
      <th>12</th>
      <td>12</td>
      <td>13</td>
      <td>focused</td>
      <td>1</td>
      <td>6.0</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="149">
<div class="sourceCode cell-code" id="cb86" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb86-1"><span class="co" style="color: #5E5E5E;"># Put each student (subject) in their own plot with 5 per line and plot their scores</span></span>
<span id="cb86-2">att_fg <span class="op" style="color: #5E5E5E;">=</span> sns.FacetGrid(att_df, </span>
<span id="cb86-3">                       col <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'subject'</span>,</span>
<span id="cb86-4">                       col_wrap <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">5</span>,</span>
<span id="cb86-5">                       height <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">1.5</span></span>
<span id="cb86-6">                      )</span>
<span id="cb86-7"></span>
<span id="cb86-8">att_fg.<span class="bu" style="color: null;">map</span>(plt.plot,</span>
<span id="cb86-9">           <span class="st" style="color: #20794D;">'solutions'</span>,</span>
<span id="cb86-10">           <span class="st" style="color: #20794D;">'score'</span>,</span>
<span id="cb86-11">           marker <span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'.'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/home/stephen137/mambaforge/lib/python3.10/site-packages/seaborn/axisgrid.py:745: FutureWarning: iteritems is deprecated and will be removed in a future version. Use .items instead.
  plot_args = [v for k, v in plot_data.iteritems()]
/home/stephen137/mambaforge/lib/python3.10/site-packages/seaborn/axisgrid.py:745: FutureWarning: iteritems is deprecated and will be removed in a future version. Use .items instead.
  plot_args = [v for k, v in plot_data.iteritems()]
/home/stephen137/mambaforge/lib/python3.10/site-packages/seaborn/axisgrid.py:745: FutureWarning: iteritems is deprecated and will be removed in a future version. Use .items instead.
  plot_args = [v for k, v in plot_data.iteritems()]
/home/stephen137/mambaforge/lib/python3.10/site-packages/seaborn/axisgrid.py:745: FutureWarning: iteritems is deprecated and will be removed in a future version. Use .items instead.
  plot_args = [v for k, v in plot_data.iteritems()]
/home/stephen137/mambaforge/lib/python3.10/site-packages/seaborn/axisgrid.py:745: FutureWarning: iteritems is deprecated and will be removed in a future version. Use .items instead.
  plot_args = [v for k, v in plot_data.iteritems()]
/home/stephen137/mambaforge/lib/python3.10/site-packages/seaborn/axisgrid.py:745: FutureWarning: iteritems is deprecated and will be removed in a future version. Use .items instead.
  plot_args = [v for k, v in plot_data.iteritems()]
/home/stephen137/mambaforge/lib/python3.10/site-packages/seaborn/axisgrid.py:745: FutureWarning: iteritems is deprecated and will be removed in a future version. Use .items instead.
  plot_args = [v for k, v in plot_data.iteritems()]
/home/stephen137/mambaforge/lib/python3.10/site-packages/seaborn/axisgrid.py:745: FutureWarning: iteritems is deprecated and will be removed in a future version. Use .items instead.
  plot_args = [v for k, v in plot_data.iteritems()]
/home/stephen137/mambaforge/lib/python3.10/site-packages/seaborn/axisgrid.py:745: FutureWarning: iteritems is deprecated and will be removed in a future version. Use .items instead.
  plot_args = [v for k, v in plot_data.iteritems()]
/home/stephen137/mambaforge/lib/python3.10/site-packages/seaborn/axisgrid.py:745: FutureWarning: iteritems is deprecated and will be removed in a future version. Use .items instead.
  plot_args = [v for k, v in plot_data.iteritems()]
/home/stephen137/mambaforge/lib/python3.10/site-packages/seaborn/axisgrid.py:745: FutureWarning: iteritems is deprecated and will be removed in a future version. Use .items instead.
  plot_args = [v for k, v in plot_data.iteritems()]
/home/stephen137/mambaforge/lib/python3.10/site-packages/seaborn/axisgrid.py:745: FutureWarning: iteritems is deprecated and will be removed in a future version. Use .items instead.
  plot_args = [v for k, v in plot_data.iteritems()]
/home/stephen137/mambaforge/lib/python3.10/site-packages/seaborn/axisgrid.py:745: FutureWarning: iteritems is deprecated and will be removed in a future version. Use .items instead.
  plot_args = [v for k, v in plot_data.iteritems()]
/home/stephen137/mambaforge/lib/python3.10/site-packages/seaborn/axisgrid.py:745: FutureWarning: iteritems is deprecated and will be removed in a future version. Use .items instead.
  plot_args = [v for k, v in plot_data.iteritems()]
/home/stephen137/mambaforge/lib/python3.10/site-packages/seaborn/axisgrid.py:745: FutureWarning: iteritems is deprecated and will be removed in a future version. Use .items instead.
  plot_args = [v for k, v in plot_data.iteritems()]
/home/stephen137/mambaforge/lib/python3.10/site-packages/seaborn/axisgrid.py:745: FutureWarning: iteritems is deprecated and will be removed in a future version. Use .items instead.
  plot_args = [v for k, v in plot_data.iteritems()]
/home/stephen137/mambaforge/lib/python3.10/site-packages/seaborn/axisgrid.py:745: FutureWarning: iteritems is deprecated and will be removed in a future version. Use .items instead.
  plot_args = [v for k, v in plot_data.iteritems()]
/home/stephen137/mambaforge/lib/python3.10/site-packages/seaborn/axisgrid.py:745: FutureWarning: iteritems is deprecated and will be removed in a future version. Use .items instead.
  plot_args = [v for k, v in plot_data.iteritems()]
/home/stephen137/mambaforge/lib/python3.10/site-packages/seaborn/axisgrid.py:745: FutureWarning: iteritems is deprecated and will be removed in a future version. Use .items instead.
  plot_args = [v for k, v in plot_data.iteritems()]
/home/stephen137/mambaforge/lib/python3.10/site-packages/seaborn/axisgrid.py:745: FutureWarning: iteritems is deprecated and will be removed in a future version. Use .items instead.
  plot_args = [v for k, v in plot_data.iteritems()]</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="149">
<pre><code>&lt;seaborn.axisgrid.FacetGrid at 0x7f31b5546ce0&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Seaborn/Seaborn_files/figure-html/cell-44-output-3.png" class="img-fluid"></p>
</div>
</div>
</section>
</section>
<section id="regression-plots" class="level2">
<h2 class="anchored" data-anchor-id="regression-plots">Regression Plots</h2>
<p>Let’s revisit the <em>tips</em> dataset used earlier. Let’s recall what our dataset looks like:</p>
<div class="cell" data-execution_count="150">
<div class="sourceCode cell-code" id="cb89" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb89-1"><span class="co" style="color: #5E5E5E;"># grab first 5 rows</span></span>
<span id="cb89-2">tips_df.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="150">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>total_bill</th>
      <th>tip</th>
      <th>sex</th>
      <th>smoker</th>
      <th>day</th>
      <th>time</th>
      <th>size</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>16.99</td>
      <td>1.01</td>
      <td>Female</td>
      <td>No</td>
      <td>Sun</td>
      <td>Dinner</td>
      <td>2</td>
    </tr>
    <tr>
      <th>1</th>
      <td>10.34</td>
      <td>1.66</td>
      <td>Male</td>
      <td>No</td>
      <td>Sun</td>
      <td>Dinner</td>
      <td>3</td>
    </tr>
    <tr>
      <th>2</th>
      <td>21.01</td>
      <td>3.50</td>
      <td>Male</td>
      <td>No</td>
      <td>Sun</td>
      <td>Dinner</td>
      <td>3</td>
    </tr>
    <tr>
      <th>3</th>
      <td>23.68</td>
      <td>3.31</td>
      <td>Male</td>
      <td>No</td>
      <td>Sun</td>
      <td>Dinner</td>
      <td>2</td>
    </tr>
    <tr>
      <th>4</th>
      <td>24.59</td>
      <td>3.61</td>
      <td>Female</td>
      <td>No</td>
      <td>Sun</td>
      <td>Dinner</td>
      <td>4</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>Say we wanted to explore the relationship between tip size and total bill size comparing men and women:</p>
<div class="cell" data-execution_count="152">
<div class="sourceCode cell-code" id="cb90" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb90-1">plt.figure(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">8</span>,<span class="dv" style="color: #AD0000;">6</span>))</span>
<span id="cb90-2"></span>
<span id="cb90-3">sns.set_context(<span class="st" style="color: #20794D;">'paper'</span>,</span>
<span id="cb90-4">                font_scale <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">1.4</span>)</span>
<span id="cb90-5"></span>
<span id="cb90-6">sns.lmplot(x <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'total_bill'</span>,</span>
<span id="cb90-7">           y <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'tip'</span>,</span>
<span id="cb90-8">           hue <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'sex'</span>,</span>
<span id="cb90-9">           data <span class="op" style="color: #5E5E5E;">=</span> tips_df,</span>
<span id="cb90-10">           markers <span class="op" style="color: #5E5E5E;">=</span> [ <span class="st" style="color: #20794D;">'o'</span>, <span class="st" style="color: #20794D;">'^'</span>],</span>
<span id="cb90-11">           scatter_kws <span class="op" style="color: #5E5E5E;">=</span> { <span class="st" style="color: #20794D;">'s'</span> : <span class="dv" style="color: #AD0000;">100</span>, <span class="st" style="color: #20794D;">'linewidth'</span>: <span class="fl" style="color: #AD0000;">0.5</span>, <span class="st" style="color: #20794D;">'edgecolor'</span>: <span class="st" style="color: #20794D;">'w'</span>})                            </span>
<span id="cb90-12">                                                                                 </span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="152">
<pre><code>&lt;seaborn.axisgrid.FacetGrid at 0x7f31b4cd5720&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>&lt;Figure size 800x600 with 0 Axes&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Seaborn/Seaborn_files/figure-html/cell-46-output-3.png" class="img-fluid"></p>
</div>
</div>
<p>It might be useful to see the equivalent broken down by day:</p>
<div class="cell" data-execution_count="153">
<div class="sourceCode cell-code" id="cb93" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb93-1"><span class="co" style="color: #5E5E5E;"># sns.lmplot(x='total_bill', y='tip', col='sex', row='time', data=tips_df)</span></span>
<span id="cb93-2">tips_df.head()</span>
<span id="cb93-3"></span>
<span id="cb93-4"><span class="co" style="color: #5E5E5E;"># Makes the fonts more readable</span></span>
<span id="cb93-5">sns.set_context(<span class="st" style="color: #20794D;">'poster'</span>,</span>
<span id="cb93-6">                font_scale<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">1.4</span>)</span>
<span id="cb93-7"></span>
<span id="cb93-8">sns.lmplot(x<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'total_bill'</span>, </span>
<span id="cb93-9">           y<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'tip'</span>, data<span class="op" style="color: #5E5E5E;">=</span>tips_df,</span>
<span id="cb93-10">           col<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'day'</span>,</span>
<span id="cb93-11">           hue<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'sex'</span>,</span>
<span id="cb93-12">          height<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">8</span>,</span>
<span id="cb93-13">           aspect<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.6</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="153">
<pre><code>&lt;seaborn.axisgrid.FacetGrid at 0x7f31b4d48fd0&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Seaborn/Seaborn_files/figure-html/cell-47-output-2.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="acknowledgements" class="level2">
<h2 class="anchored" data-anchor-id="acknowledgements">Acknowledgements</h2>
<p>Thanks once again to <strong><a href="https://twitter.com/svpino">Santiago</a></strong> for signposting this video posted by <strong><a href="https://github.com/derekbanas">Derek Banas</a></strong>. This blog was written after interactively working through it.</p>
<div class="cell" data-execution_count="156">
<div class="sourceCode cell-code" id="cb95" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb95-1"><span class="op" style="color: #5E5E5E;">%%</span>HTML</span>
<span id="cb95-2"><span class="op" style="color: #5E5E5E;">&lt;</span>iframe width<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"560"</span> height<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"315"</span> src<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"https://www.youtube.com/embed/6GUZXDef2U0"</span> title<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"YouTube video player"</span> frameborder<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"0"</span> allow<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"</span> allowfullscreen<span class="op" style="color: #5E5E5E;">&gt;&lt;/</span>iframe<span class="op" style="color: #5E5E5E;">&gt;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<iframe width="560" height="315" src="https://www.youtube.com/embed/6GUZXDef2U0" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen=""></iframe>
</div>
</div>


</section>
</section>

 ]]></description>
  <category>seaborn</category>
  <guid>https://stephen137.github.io/posts/Seaborn/Seaborn.html</guid>
  <pubDate>Tue, 03 Jan 2023 23:00:00 GMT</pubDate>
  <media:content url="https://stephen137.github.io/posts/Seaborn/seaborn.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Numpy Tutorial</title>
  <dc:creator>Stephen Barrie</dc:creator>
  <link>https://stephen137.github.io/posts/NumPy/Complete_Python_NumPy_Tutorial.html</link>
  <description><![CDATA[ 




<section id="numpy" class="level2">
<h2 class="anchored" data-anchor-id="numpy">NumPy</h2>
<p>NumPy is the fundamental package for scientific computing in Python. It is a Python library that provides a multidimensional array object, various derived objects (such as masked arrays and matrices), and an assortment of routines for fast operations on arrays, including mathematical, logical, shape manipulation, sorting, selecting, I/O, discrete Fourier transforms, basic linear algebra, basic statistical operations, random simulation and much more.</p>
<p>At the core of the NumPy package, is the ndarray object. This encapsulates n-dimensional arrays of homogeneous data types, with many operations being performed in compiled code for performance. There are several important differences between NumPy arrays and the standard Python sequences.</p>
<p>See <a href="https://numpy.org/doc/stable/user/whatisnumpy.html">the documentation</a> for further information.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/NumPy/Complete_Python_NumPy_Tutorial_files/figure-html/fb75bee0-c105-4879-b113-820b4388e815.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">arrays.JPG</figcaption><p></p>
</figure>
</div>
</section>
<section id="numpy-v-lists" class="level2">
<h2 class="anchored" data-anchor-id="numpy-v-lists">NumPy [ ] v Lists ( )</h2>
<section id="why-is-numpy-faster" class="level3">
<h3 class="anchored" data-anchor-id="why-is-numpy-faster">Why is NumPy faster?</h3>
<p>NumPy has a significant speed advantage over <a href="https://docs.python.org/3/tutorial/introduction.html#lists">Lists</a>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/NumPy/Complete_Python_NumPy_Tutorial_files/figure-html/8b5c36f6-6e6d-4e8b-b09a-e65abffba35b.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">speed.JPG</figcaption><p></p>
</figure>
</div>
<p>Let’s find out why…</p>
<ol type="1">
<li>Less memory is used to represent data</li>
</ol>
<p>Say for example the number 5. This is represented in binary form as follows:</p>
<ul>
<li><strong>int8</strong> which takes up 8 bits (or 1 byte) of memory and is represented in binary form as 00000101</li>
</ul>
<p>NumPy can cast this to:</p>
<ul>
<li><strong>int16</strong> which takes up 16 bits (or 2 bytes) of memory and is represented in binary form as 00000000 00000101</li>
<li><strong>int32</strong> which takes up 32 bits (or 4 bytes) of memory and is represented in binary form as 00000000 00000000 00000000 00000101</li>
<li><strong>int64</strong> which takes up 64 bits (or 8 bytes) of memory and is represented in binary form as 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000101</li>
</ul>
<p><strong>Lists</strong> use a built in <strong><em>int</em></strong> type for Python which consists of four different things:</p>
<ul>
<li>object value</li>
<li>object type</li>
<li>reference count</li>
<li>size of value</li>
</ul>
<p>each of which use up memory:</p>
<ul>
<li>object value: 8 bytes 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000101</li>
<li>object type: 8 bytes 11001010 10111110 01100001 01000100 11111100 00000000 11001100 01011111</li>
<li>reference count: 8 bytes 00000001 00111101 11111110 10111100 00011010 11011101 10100100 11011000</li>
<li>size of value: 4 bytes 00000000 00000000 00000000 00011100</li>
</ul>
<ol start="2" type="1">
<li><p>No type checking when iterating through objects</p></li>
<li><p>NumPy utilizes <a href="https://www.geeksforgeeks.org/difference-between-contiguous-and-noncontiguous-memory-allocation/">contiguous memory</a> which enables <a href="https://en.wikipedia.org/wiki/Single_instruction,_multiple_data">Single Instruction Multiple Data (SIMD)</a> Vector Processing to be harnessed, and effective <a href="https://en.wikipedia.org/wiki/Cache_(computing)">cache</a> utilization</p></li>
</ol>
</section>
<section id="how-do-lists-differ-from-numpy" class="level3">
<h3 class="anchored" data-anchor-id="how-do-lists-differ-from-numpy">How do Lists differ from NumPy?</h3>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/NumPy/Complete_Python_NumPy_Tutorial_files/figure-html/324b742c-c7ef-41da-ba97-5fa1612afb35.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">differences.JPG</figcaption><p></p>
</figure>
</div>
<p>NumPy allows itemwise computation:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/NumPy/Complete_Python_NumPy_Tutorial_files/figure-html/19cabc9b-d908-4a9f-858d-2ec66579923e.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">multiply.JPG</figcaption><p></p>
</figure>
</div>
</section>
</section>
<section id="applications-of-numpy" class="level2">
<h2 class="anchored" data-anchor-id="applications-of-numpy">Applications of NumPy</h2>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/NumPy/Complete_Python_NumPy_Tutorial_files/figure-html/3f6fa33c-b8b1-4762-8df4-79aeed4e6e92.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">applications.JPG</figcaption><p></p>
</figure>
</div>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
SciPy
</div>
</div>
<div class="callout-body-container callout-body">
<p>NumPy can perform complex mathematical operations, although the <a href="https://docs.scipy.org/doc/scipy/tutorial/index.html">SciPy</a> library allows even more advanced computation.</p>
</div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># load in </span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span></code></pre></div>
</div>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># which version?</span></span>
<span id="cb2-2">np.__version__</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>'1.22.4'</code></pre>
</div>
</div>
</section>
<section id="the-basics" class="level2">
<h2 class="anchored" data-anchor-id="the-basics">The Basics</h2>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;"># create an array of integers</span></span>
<span id="cb4-2">a <span class="op" style="color: #5E5E5E;">=</span> np.array([<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">3</span>])</span>
<span id="cb4-3">a</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>array([1, 2, 3])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;"># create an array of floating point numbers</span></span>
<span id="cb6-2">b <span class="op" style="color: #5E5E5E;">=</span> np.array([[<span class="fl" style="color: #AD0000;">9.0</span>,<span class="fl" style="color: #AD0000;">8.0</span>,<span class="fl" style="color: #AD0000;">7.0</span>],[<span class="fl" style="color: #AD0000;">6.0</span>,<span class="fl" style="color: #AD0000;">5.0</span>,<span class="fl" style="color: #AD0000;">4.0</span>]])</span>
<span id="cb6-3">b</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>array([[9., 8., 7.],
       [6., 5., 4.]])</code></pre>
</div>
</div>
<section id="shape-of-a-numpy-array" class="level3">
<h3 class="anchored" data-anchor-id="shape-of-a-numpy-array">Shape of a NumPy array</h3>
<p>Every NumPy array can be queried for its shape. A shape is a tuple of the format (n_rows, n_cols).</p>
<div class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;"># Grab the array shape</span></span>
<span id="cb8-2">a.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<pre><code>(3,)</code></pre>
</div>
</div>
<p>Since there is no value after the comma, this is a one-dimensional array.</p>
<div class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;"># Grab the array dimension</span></span>
<span id="cb10-2">a.ndim</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="17">
<pre><code>1</code></pre>
</div>
</div>
<div class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;"># Grab the array shape</span></span>
<span id="cb12-2">b.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">
<pre><code>(2, 3)</code></pre>
</div>
</div>
<p>(2, 3) means that the matrix has 2 rows and 3 columns.</p>
<div class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;"># Grab the array dimension</span></span>
<span id="cb14-2">b.ndim</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="19">
<pre><code>2</code></pre>
</div>
</div>
<div class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="co" style="color: #5E5E5E;"># Get type</span></span>
<span id="cb16-2">a.dtype</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="21">
<pre><code>dtype('int64')</code></pre>
</div>
</div>
<p>This is the default size, but we can assign a lower int value to save memory:</p>
<div class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">a <span class="op" style="color: #5E5E5E;">=</span> np.array([<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">3</span>], dtype<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'int16'</span>)</span>
<span id="cb18-2">a</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<pre><code>array([1, 2, 3], dtype=int16)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="co" style="color: #5E5E5E;"># Get size - how many bytes?</span></span>
<span id="cb20-2">a.itemsize</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="24">
<pre><code>2</code></pre>
</div>
</div>
<div class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="co" style="color: #5E5E5E;"># Get size - how many bytes?</span></span>
<span id="cb22-2">b.itemsize</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="25">
<pre><code>8</code></pre>
</div>
</div>
<div class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="co" style="color: #5E5E5E;"># Get total number of elements</span></span>
<span id="cb24-2">a.size</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="26">
<pre><code>3</code></pre>
</div>
</div>
<div class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="co" style="color: #5E5E5E;"># Get total size</span></span>
<span id="cb26-2">a.size <span class="op" style="color: #5E5E5E;">*</span> a.itemsize</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="27">
<pre><code>6</code></pre>
</div>
</div>
<div class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="co" style="color: #5E5E5E;"># Get total size</span></span>
<span id="cb28-2">a.nbytes</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="28">
<pre><code>6</code></pre>
</div>
</div>
</section>
</section>
<section id="indexing---accessing-specific-elements-rows-columns-etc" class="level2">
<h2 class="anchored" data-anchor-id="indexing---accessing-specific-elements-rows-columns-etc">Indexing - accessing specific elements, rows, columns etc</h2>
<div class="callout-important callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Indexing
</div>
</div>
<div class="callout-body-container callout-body">
<p>Remember - the first index of a NumPy array is <strong>zero!</strong> and not one</p>
</div>
</div>
<div class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">c <span class="op" style="color: #5E5E5E;">=</span> np.array([[<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">3</span>,<span class="dv" style="color: #AD0000;">4</span>,<span class="dv" style="color: #AD0000;">5</span>,<span class="dv" style="color: #AD0000;">6</span>,<span class="dv" style="color: #AD0000;">7</span>],[<span class="dv" style="color: #AD0000;">8</span>,<span class="dv" style="color: #AD0000;">9</span>,<span class="dv" style="color: #AD0000;">10</span>,<span class="dv" style="color: #AD0000;">11</span>,<span class="dv" style="color: #AD0000;">12</span>,<span class="dv" style="color: #AD0000;">13</span>,<span class="dv" style="color: #AD0000;">14</span>]])</span>
<span id="cb30-2"><span class="bu" style="color: null;">print</span>(c)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[ 1  2  3  4  5  6  7]
 [ 8  9 10 11 12 13 14]]</code></pre>
</div>
</div>
<div class="cell" data-execution_count="32">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">c.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="32">
<pre><code>(2, 7)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="33">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="co" style="color: #5E5E5E;"># Get a specific element from row, column (r,c)</span></span>
<span id="cb34-2">c[<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">5</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="33">
<pre><code>13</code></pre>
</div>
</div>
<div class="cell" data-execution_count="35">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1"><span class="co" style="color: #5E5E5E;"># Get a specific element from row, column (r,c)</span></span>
<span id="cb36-2">c[<span class="dv" style="color: #AD0000;">1</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">2</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="35">
<pre><code>13</code></pre>
</div>
</div>
<div class="cell" data-execution_count="36">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1"><span class="co" style="color: #5E5E5E;"># Get a specific ROW</span></span>
<span id="cb38-2">c[<span class="dv" style="color: #AD0000;">0</span>, :]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="36">
<pre><code>array([1, 2, 3, 4, 5, 6, 7])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="37">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1"><span class="co" style="color: #5E5E5E;"># Get a specific COLUMN</span></span>
<span id="cb40-2">c[:, <span class="dv" style="color: #AD0000;">2</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="37">
<pre><code>array([ 3, 10])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="38">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1"><span class="co" style="color: #5E5E5E;"># Getting a little more fancy [start_index : end_index : step_size]</span></span>
<span id="cb42-2"><span class="co" style="color: #5E5E5E;"># Row 0, then columns 1 to 6 (excluding 6) in steps of 2</span></span>
<span id="cb42-3">c [<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>:<span class="dv" style="color: #AD0000;">6</span>:<span class="dv" style="color: #AD0000;">2</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="38">
<pre><code>array([2, 4, 6])</code></pre>
</div>
</div>
</section>
<section id="indexing---changing-specific-elements" class="level2">
<h2 class="anchored" data-anchor-id="indexing---changing-specific-elements">Indexing - changing specific elements</h2>
<div class="cell" data-execution_count="39">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1"><span class="co" style="color: #5E5E5E;"># change row 1, column 5 value (13) to 20</span></span>
<span id="cb44-2">c[<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">5</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">20</span></span>
<span id="cb44-3"><span class="bu" style="color: null;">print</span>(c)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[ 1  2  3  4  5  6  7]
 [ 8  9 10 11 12 20 14]]</code></pre>
</div>
</div>
<div class="cell" data-execution_count="40">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1"><span class="co" style="color: #5E5E5E;"># change column 2 [3,10] to [21,28]</span></span>
<span id="cb46-2">c[:,<span class="dv" style="color: #AD0000;">2</span>] <span class="op" style="color: #5E5E5E;">=</span> [<span class="dv" style="color: #AD0000;">21</span>,<span class="dv" style="color: #AD0000;">28</span>]</span>
<span id="cb46-3"><span class="bu" style="color: null;">print</span>(c)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[ 1  2 21  4  5  6  7]
 [ 8  9 28 11 12 20 14]]</code></pre>
</div>
</div>
<div class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1"><span class="co" style="color: #5E5E5E;"># 3-d example</span></span>
<span id="cb48-2">d <span class="op" style="color: #5E5E5E;">=</span> np.array([[[<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">2</span>],[<span class="dv" style="color: #AD0000;">3</span>,<span class="dv" style="color: #AD0000;">4</span>]],[[<span class="dv" style="color: #AD0000;">5</span>,<span class="dv" style="color: #AD0000;">6</span>],[<span class="dv" style="color: #AD0000;">7</span>,<span class="dv" style="color: #AD0000;">8</span>]]])</span>
<span id="cb48-3"><span class="bu" style="color: null;">print</span>(d)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[[1 2]
  [3 4]]

 [[5 6]
  [7 8]]]</code></pre>
</div>
</div>
<div class="cell" data-execution_count="46">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1"><span class="co" style="color: #5E5E5E;"># Get specific example (work from outside in)</span></span>
<span id="cb50-2"></span>
<span id="cb50-3"><span class="co" style="color: #5E5E5E;"># the first index reference [0] relates to the first grouping</span></span>
<span id="cb50-4"><span class="co" style="color: #5E5E5E;"># [1, 2]</span></span>
<span id="cb50-5"><span class="co" style="color: #5E5E5E;"># [3, 4]</span></span>
<span id="cb50-6"></span>
<span id="cb50-7"><span class="co" style="color: #5E5E5E;"># the second index reference [1] relates to the second row within that grouping [3, 4]</span></span>
<span id="cb50-8"></span>
<span id="cb50-9"><span class="co" style="color: #5E5E5E;"># the third index reference [1] specifies the second column from the second row of the grouping [3,4] i.e 4</span></span>
<span id="cb50-10"></span>
<span id="cb50-11">d[<span class="dv" style="color: #AD0000;">0</span>,<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">1</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="46">
<pre><code>4</code></pre>
</div>
</div>
<div class="cell" data-execution_count="47">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1"><span class="co" style="color: #5E5E5E;"># Get specific example (work from outside in)</span></span>
<span id="cb52-2"></span>
<span id="cb52-3"><span class="co" style="color: #5E5E5E;"># the first index reference : means we are selecting from both groupings</span></span>
<span id="cb52-4"><span class="co" style="color: #5E5E5E;"># [1 2]</span></span>
<span id="cb52-5"><span class="co" style="color: #5E5E5E;"># [3 4]</span></span>
<span id="cb52-6"></span>
<span id="cb52-7"><span class="co" style="color: #5E5E5E;"># [5 6]</span></span>
<span id="cb52-8"><span class="co" style="color: #5E5E5E;"># [7 8]</span></span>
<span id="cb52-9"></span>
<span id="cb52-10"><span class="co" style="color: #5E5E5E;"># the second index reference [1] relates to the second row from each of the groupings i.e. [3,4] and [7,8]</span></span>
<span id="cb52-11"></span>
<span id="cb52-12"><span class="co" style="color: #5E5E5E;"># the third index reference [:] specifies all values within those rows </span></span>
<span id="cb52-13"></span>
<span id="cb52-14">d[:,<span class="dv" style="color: #AD0000;">1</span>,:]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="47">
<pre><code>array([[3, 4],
       [7, 8]])</code></pre>
</div>
</div>
</section>
<section id="initializing-different-array-types" class="level2">
<h2 class="anchored" data-anchor-id="initializing-different-array-types">Initializing Different Array Types</h2>
<div class="cell" data-execution_count="49">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb54-1"><span class="co" style="color: #5E5E5E;"># All 0s matrix specifying shape</span></span>
<span id="cb54-2"></span>
<span id="cb54-3">np.zeros(<span class="dv" style="color: #AD0000;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="49">
<pre><code>array([0., 0., 0., 0., 0.])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="51">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb56-1"><span class="co" style="color: #5E5E5E;"># All 0s 2 x 3 matrix specifying shape</span></span>
<span id="cb56-2"></span>
<span id="cb56-3">np.zeros((<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">3</span>))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="51">
<pre><code>array([[0., 0., 0.],
       [0., 0., 0.]])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="54">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb58-1"><span class="co" style="color: #5E5E5E;"># All 0s 2 x 3 x 4 matrix </span></span>
<span id="cb58-2"></span>
<span id="cb58-3"><span class="co" style="color: #5E5E5E;"># first reference = number of groupings</span></span>
<span id="cb58-4"><span class="co" style="color: #5E5E5E;"># second reference = number of rows</span></span>
<span id="cb58-5"><span class="co" style="color: #5E5E5E;"># third reference = number of columns</span></span>
<span id="cb58-6">np.zeros((<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">3</span>,<span class="dv" style="color: #AD0000;">4</span>))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="54">
<pre><code>array([[[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]],

       [[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]]])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb60-1"><span class="co" style="color: #5E5E5E;"># All 1s matrix</span></span>
<span id="cb60-2"></span>
<span id="cb60-3">np.ones((<span class="dv" style="color: #AD0000;">4</span>,<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">2</span>), dtype<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'int16'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>array([[[1, 1],
        [1, 1]],

       [[1, 1],
        [1, 1]],

       [[1, 1],
        [1, 1]],

       [[1, 1],
        [1, 1]]], dtype=int16)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb62-1"><span class="co" style="color: #5E5E5E;"># Any other number .full</span></span>
<span id="cb62-2"></span>
<span id="cb62-3">np.full((<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">2</span>), <span class="dv" style="color: #AD0000;">137</span>, dtype<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'float32'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>array([[137., 137.],
       [137., 137.]], dtype=float32)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb64-1"><span class="co" style="color: #5E5E5E;"># Any other number .full_like</span></span>
<span id="cb64-2"><span class="co" style="color: #5E5E5E;"># creates a new array full of 4s matching the shape of the d array we previously created</span></span>
<span id="cb64-3"></span>
<span id="cb64-4">np.full_like(d,<span class="dv" style="color: #AD0000;">4</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="22">
<pre><code>array([[[4, 4],
        [4, 4]],

       [[4, 4],
        [4, 4]]])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb66-1"><span class="co" style="color: #5E5E5E;"># random decimals</span></span>
<span id="cb66-2"><span class="co" style="color: #5E5E5E;"># using random.rand</span></span>
<span id="cb66-3"></span>
<span id="cb66-4">np.random.rand(<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">3</span>,<span class="dv" style="color: #AD0000;">7</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="25">
<pre><code>array([[[0.16735136, 0.86937755, 0.30866395, 0.05841447, 0.28817268,
         0.55635487, 0.87087044],
        [0.95692978, 0.45277212, 0.87002198, 0.59516086, 0.56308885,
         0.71476549, 0.64600732],
        [0.06479773, 0.83108022, 0.0321547 , 0.3054754 , 0.72857438,
         0.56460774, 0.72935517]]])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb68-1"><span class="co" style="color: #5E5E5E;"># random decimals following shape of previously defined array</span></span>
<span id="cb68-2"><span class="co" style="color: #5E5E5E;"># using random.random_sample</span></span>
<span id="cb68-3"></span>
<span id="cb68-4">np.random.random_sample(d.shape)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="28">
<pre><code>array([[[0.04212123, 0.39748958],
        [0.63778666, 0.3396428 ]],

       [[0.33967012, 0.49291645],
        [0.97990323, 0.45722717]]])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="32">
<div class="sourceCode cell-code" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb70-1"><span class="co" style="color: #5E5E5E;"># random integers</span></span>
<span id="cb70-2"><span class="co" style="color: #5E5E5E;"># first argument is range of integers to sample from (upper limit is EXclusive)</span></span>
<span id="cb70-3"><span class="co" style="color: #5E5E5E;"># second argument is shape - established by size=</span></span>
<span id="cb70-4"></span>
<span id="cb70-5">np.random.randint(<span class="dv" style="color: #AD0000;">7</span>,<span class="dv" style="color: #AD0000;">13</span>, size<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">3</span>,<span class="dv" style="color: #AD0000;">3</span>))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="32">
<pre><code>array([[10, 10, 10],
       [12, 12, 12],
       [10,  7,  9]])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="33">
<div class="sourceCode cell-code" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb72-1"><span class="co" style="color: #5E5E5E;"># identity matrix</span></span>
<span id="cb72-2"><span class="co" style="color: #5E5E5E;"># ones on main diagonal and zeros elsewhere</span></span>
<span id="cb72-3"><span class="co" style="color: #5E5E5E;"># only one pararmeter as this is a square matrix</span></span>
<span id="cb72-4"></span>
<span id="cb72-5">np.identity(<span class="dv" style="color: #AD0000;">7</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="33">
<pre><code>array([[1., 0., 0., 0., 0., 0., 0.],
       [0., 1., 0., 0., 0., 0., 0.],
       [0., 0., 1., 0., 0., 0., 0.],
       [0., 0., 0., 1., 0., 0., 0.],
       [0., 0., 0., 0., 1., 0., 0.],
       [0., 0., 0., 0., 0., 1., 0.],
       [0., 0., 0., 0., 0., 0., 1.]])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="38">
<div class="sourceCode cell-code" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb74-1"><span class="co" style="color: #5E5E5E;"># repeat a matrix using .repeat</span></span>
<span id="cb74-2"><span class="co" style="color: #5E5E5E;"># first argument is array to be repeated</span></span>
<span id="cb74-3"><span class="co" style="color: #5E5E5E;"># second argument is how many times to be repeated</span></span>
<span id="cb74-4"><span class="co" style="color: #5E5E5E;"># axis 0 refers to rows</span></span>
<span id="cb74-5"></span>
<span id="cb74-6">arr <span class="op" style="color: #5E5E5E;">=</span> np.array([[<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">3</span>,<span class="dv" style="color: #AD0000;">7</span>]])</span>
<span id="cb74-7">r1 <span class="op" style="color: #5E5E5E;">=</span> np.repeat(arr,<span class="dv" style="color: #AD0000;">3</span>,axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb74-8"><span class="bu" style="color: null;">print</span>(r1)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1 3 7]
 [1 3 7]
 [1 3 7]]</code></pre>
</div>
</div>
<div class="cell" data-execution_count="41">
<div class="sourceCode cell-code" id="cb76" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb76-1"><span class="co" style="color: #5E5E5E;"># repeat a matrix using .repeat</span></span>
<span id="cb76-2"><span class="co" style="color: #5E5E5E;"># first argument is array to be repeated</span></span>
<span id="cb76-3"><span class="co" style="color: #5E5E5E;"># second argument is how many times to be repeated</span></span>
<span id="cb76-4"><span class="co" style="color: #5E5E5E;"># axis 1 refers to columns</span></span>
<span id="cb76-5"></span>
<span id="cb76-6">arr <span class="op" style="color: #5E5E5E;">=</span> np.array([[<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">3</span>,<span class="dv" style="color: #AD0000;">7</span>]])</span>
<span id="cb76-7">r1 <span class="op" style="color: #5E5E5E;">=</span> np.repeat(arr,<span class="dv" style="color: #AD0000;">3</span>,axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb76-8"><span class="bu" style="color: null;">print</span>(r1)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1 1 1 3 3 3 7 7 7]]</code></pre>
</div>
</div>
<p>How might we go about initializing the matrix below?</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/NumPy/Complete_Python_NumPy_Tutorial_files/figure-html/0d9f9bb2-415c-468a-9c13-567a35eb5b59.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">matrix.JPG</figcaption><p></p>
</figure>
</div>
<div class="cell" data-execution_count="43">
<div class="sourceCode cell-code" id="cb78" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb78-1"><span class="co" style="color: #5E5E5E;"># create a 5 x 5 1s matrix for the outer layer</span></span>
<span id="cb78-2">outputs <span class="op" style="color: #5E5E5E;">=</span>np.ones((<span class="dv" style="color: #AD0000;">5</span>,<span class="dv" style="color: #AD0000;">5</span>))</span>
<span id="cb78-3">outputs</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="43">
<pre><code>array([[1., 1., 1., 1., 1.],
       [1., 1., 1., 1., 1.],
       [1., 1., 1., 1., 1.],
       [1., 1., 1., 1., 1.],
       [1., 1., 1., 1., 1.]])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="44">
<div class="sourceCode cell-code" id="cb80" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb80-1"><span class="co" style="color: #5E5E5E;"># create a 3 x 3 zero matric for the middle layer</span></span>
<span id="cb80-2">z <span class="op" style="color: #5E5E5E;">=</span> np.zeros ((<span class="dv" style="color: #AD0000;">3</span>,<span class="dv" style="color: #AD0000;">3</span>))</span>
<span id="cb80-3">z</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="44">
<pre><code>array([[0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.]])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="45">
<div class="sourceCode cell-code" id="cb82" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb82-1"><span class="co" style="color: #5E5E5E;"># fil in middle element i.e row 1 column 1 with a 9</span></span>
<span id="cb82-2">z[<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">1</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">9</span></span>
<span id="cb82-3">z</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="45">
<pre><code>array([[0., 0., 0.],
       [0., 9., 0.],
       [0., 0., 0.]])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="49">
<div class="sourceCode cell-code" id="cb84" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb84-1"><span class="co" style="color: #5E5E5E;"># replace outer layer with inner layers</span></span>
<span id="cb84-2">outputs[<span class="dv" style="color: #AD0000;">1</span>:<span class="dv" style="color: #AD0000;">4</span>,<span class="dv" style="color: #AD0000;">1</span>:<span class="dv" style="color: #AD0000;">4</span>] <span class="op" style="color: #5E5E5E;">=</span> z</span>
<span id="cb84-3">outputs</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="49">
<pre><code>array([[1., 1., 1., 1., 1.],
       [1., 0., 0., 0., 1.],
       [1., 0., 9., 0., 1.],
       [1., 0., 0., 0., 1.],
       [1., 1., 1., 1., 1.]])</code></pre>
</div>
</div>
</section>
<section id="be-careful-when-copying-arrays" class="level2">
<h2 class="anchored" data-anchor-id="be-careful-when-copying-arrays">Be careful when copying arrays</h2>
<div class="cell" data-execution_count="52">
<div class="sourceCode cell-code" id="cb86" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb86-1">a <span class="op" style="color: #5E5E5E;">=</span> np.array([<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">3</span>])</span>
<span id="cb86-2">a</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="52">
<pre><code>array([1, 2, 3])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="62">
<div class="sourceCode cell-code" id="cb88" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb88-1"><span class="co" style="color: #5E5E5E;"># if you equate two arrays then any changes impact BOTH</span></span>
<span id="cb88-2"><span class="co" style="color: #5E5E5E;"># this is NOT making a copy!</span></span>
<span id="cb88-3">b <span class="op" style="color: #5E5E5E;">=</span> a</span>
<span id="cb88-4">b</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="62">
<pre><code>array([1, 2, 3])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="63">
<div class="sourceCode cell-code" id="cb90" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb90-1"><span class="co" style="color: #5E5E5E;"># To illustrate let's change the first element of b</span></span>
<span id="cb90-2">b[<span class="dv" style="color: #AD0000;">0</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">137</span></span>
<span id="cb90-3">b</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="63">
<pre><code>array([137,   2,   3])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="64">
<div class="sourceCode cell-code" id="cb92" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb92-1"><span class="co" style="color: #5E5E5E;"># note the first element in a has also changed!</span></span>
<span id="cb92-2">a</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="64">
<pre><code>array([137,   2,   3])</code></pre>
</div>
</div>
<p>In order to make a copy we have to use .copy:</p>
<div class="cell" data-execution_count="65">
<div class="sourceCode cell-code" id="cb94" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb94-1">a <span class="op" style="color: #5E5E5E;">=</span> np.array([<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">3</span>])</span>
<span id="cb94-2">a</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="65">
<pre><code>array([1, 2, 3])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="66">
<div class="sourceCode cell-code" id="cb96" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb96-1">b <span class="op" style="color: #5E5E5E;">=</span> a.copy()</span>
<span id="cb96-2">b</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="66">
<pre><code>array([1, 2, 3])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="67">
<div class="sourceCode cell-code" id="cb98" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb98-1">b[<span class="dv" style="color: #AD0000;">0</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">137</span></span>
<span id="cb98-2">b</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="67">
<pre><code>array([137,   2,   3])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="68">
<div class="sourceCode cell-code" id="cb100" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb100-1">a</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="68">
<pre><code>array([1, 2, 3])</code></pre>
</div>
</div>
</section>
<section id="mathematics" class="level2">
<h2 class="anchored" data-anchor-id="mathematics">Mathematics</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb102" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb102-1">We can carry out element wise arithmetic using NumPy</span></code></pre></div>
</div>
<div class="cell" data-execution_count="70">
<div class="sourceCode cell-code" id="cb103" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb103-1">a <span class="op" style="color: #5E5E5E;">=</span> np.array([<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">3</span>,<span class="dv" style="color: #AD0000;">4</span>])</span>
<span id="cb103-2">a</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="70">
<pre><code>array([1, 2, 3, 4])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="71">
<div class="sourceCode cell-code" id="cb105" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb105-1"><span class="co" style="color: #5E5E5E;"># add 2 to every element within the array</span></span>
<span id="cb105-2">a <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">2</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="71">
<pre><code>array([3, 4, 5, 6])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="74">
<div class="sourceCode cell-code" id="cb107" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb107-1"><span class="co" style="color: #5E5E5E;"># deduct 2 from every element within the array</span></span>
<span id="cb107-2">a <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">2</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="74">
<pre><code>array([-1,  0,  1,  2])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="75">
<div class="sourceCode cell-code" id="cb109" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb109-1"><span class="co" style="color: #5E5E5E;"># multiply every element within the array by 2</span></span>
<span id="cb109-2">a <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">2</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="75">
<pre><code>array([2, 4, 6, 8])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="76">
<div class="sourceCode cell-code" id="cb111" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb111-1"><span class="co" style="color: #5E5E5E;"># divide every element within the array by 2</span></span>
<span id="cb111-2">a <span class="op" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="76">
<pre><code>array([0.5, 1. , 1.5, 2. ])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="77">
<div class="sourceCode cell-code" id="cb113" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb113-1">b <span class="op" style="color: #5E5E5E;">=</span> np.array([<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">0</span>,<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">0</span>])</span>
<span id="cb113-2">a <span class="op" style="color: #5E5E5E;">+</span> b</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="77">
<pre><code>array([2, 2, 4, 4])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="78">
<div class="sourceCode cell-code" id="cb115" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb115-1">a <span class="op" style="color: #5E5E5E;">**</span> <span class="dv" style="color: #AD0000;">3</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="78">
<pre><code>array([ 1,  8, 27, 64])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="79">
<div class="sourceCode cell-code" id="cb117" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb117-1"><span class="co" style="color: #5E5E5E;"># Take the sin </span></span>
<span id="cb117-2">np.sin(a)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="79">
<pre><code>array([ 0.84147098,  0.90929743,  0.14112001, -0.7568025 ])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="80">
<div class="sourceCode cell-code" id="cb119" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb119-1"><span class="co" style="color: #5E5E5E;"># Take the cos</span></span>
<span id="cb119-2">np.cos(a)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="80">
<pre><code>array([ 0.54030231, -0.41614684, -0.9899925 , -0.65364362])</code></pre>
</div>
</div>
<p>For a comprehensive outline of the mathematical operations possible using NumPy see <a href="https://numpy.org/doc/stable/reference/routines.math.html">the documentation</a>.</p>
<section id="matrix-multiplication" class="level3">
<h3 class="anchored" data-anchor-id="matrix-multiplication">Matrix Multiplication</h3>
<p>Note that for matrix multiplication the number of rows of one of the matrices needs to match the number of columns of the other matrix:</p>
<div class="cell" data-execution_count="85">
<div class="sourceCode cell-code" id="cb121" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb121-1"><span class="co" style="color: #5E5E5E;"># 2 rows x 3 columns</span></span>
<span id="cb121-2">a <span class="op" style="color: #5E5E5E;">=</span> np.ones ((<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">3</span>))</span>
<span id="cb121-3">a</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="85">
<pre><code>array([[1., 1., 1.],
       [1., 1., 1.]])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="86">
<div class="sourceCode cell-code" id="cb123" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb123-1"><span class="co" style="color: #5E5E5E;"># 3 rows x 2 columns</span></span>
<span id="cb123-2">b <span class="op" style="color: #5E5E5E;">=</span> np.full((<span class="dv" style="color: #AD0000;">3</span>,<span class="dv" style="color: #AD0000;">2</span>), <span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb123-3">b</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="86">
<pre><code>array([[2, 2],
       [2, 2],
       [2, 2]])</code></pre>
</div>
</div>
<div class="callout-warning callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Matrix Multiplication
</div>
</div>
<div class="callout-body-container callout-body">
<p>Matrix multiplication can only be performed where the number of rows in Matrix A match the number of columns in Matrix B. For example we can multiply a 2 row x [3] column matrix by a [3] row x 2 column matrix. The resulting matrixc is a 2 x 2 matrix - the [3]s cancel out leaving the outer 2s.</p>
</div>
</div>
<div class="cell" data-execution_count="87">
<div class="sourceCode cell-code" id="cb125" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb125-1"><span class="co" style="color: #5E5E5E;"># Let's try to multiply together</span></span>
<span id="cb125-2">a <span class="op" style="color: #5E5E5E;">*</span> b</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>ValueError: operands could not be broadcast together with shapes (2,3) (3,2) </code></pre>
</div>
</div>
<p>Hold on - why is this not working?! Our matrix multiplication criteria is satisfied - the number of rows in matrix <em>a</em> = 2 which matches the number of columns in matrix <em>b</em>. Don’t panic! We just have to use the <strong><em>.matmul()</em></strong> function instead:</p>
<div class="cell" data-execution_count="88">
<div class="sourceCode cell-code" id="cb127" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb127-1"><span class="co" style="color: #5E5E5E;"># Let's try again using .matmul</span></span>
<span id="cb127-2">np.matmul(a,b)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="88">
<pre><code>array([[6., 6.],
       [6., 6.]])</code></pre>
</div>
</div>
</section>
<section id="determinant-of-a-matrix" class="level3">
<h3 class="anchored" data-anchor-id="determinant-of-a-matrix">Determinant of a matrix</h3>
<p>The determinant of a 2 × 2 matrix is:</p>
<p></p>
<p>For simplicity let’s use an identity matrix to illustrate. Recall that the identity matric has 1s on the leading diagonal and 0s elsewhere:</p>
<div class="cell" data-execution_count="95">
<div class="sourceCode cell-code" id="cb129" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb129-1">i<span class="op" style="color: #5E5E5E;">=</span> np.identity(<span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb129-2">i </span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="95">
<pre><code>array([[1., 0.],
       [0., 1.]])</code></pre>
</div>
</div>
<p>An identity matrix using the above formula should have a determinant of 1:</p>
<div class="cell" data-execution_count="96">
<div class="sourceCode cell-code" id="cb131" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb131-1"><span class="co" style="color: #5E5E5E;"># calc the determinant of identity matrix i</span></span>
<span id="cb131-2">np.linalg.det(i)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="96">
<pre><code>1.0</code></pre>
</div>
</div>
<p>There are many other linear algebra operations that can be performed. See the <a href="https://numpy.org/doc/stable/reference/routines.linalg.html">documentation</a> for more detail.</p>
</section>
</section>
<section id="summary-statistics" class="level2">
<h2 class="anchored" data-anchor-id="summary-statistics">Summary statistics</h2>
<div class="cell" data-execution_count="98">
<div class="sourceCode cell-code" id="cb133" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb133-1">stats <span class="op" style="color: #5E5E5E;">=</span> np.array([[<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">3</span>],[<span class="dv" style="color: #AD0000;">4</span>,<span class="dv" style="color: #AD0000;">5</span>,<span class="dv" style="color: #AD0000;">6</span>]])</span>
<span id="cb133-2">stats</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="98">
<pre><code>array([[1, 2, 3],
       [4, 5, 6]])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="99">
<div class="sourceCode cell-code" id="cb135" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb135-1">np.<span class="bu" style="color: null;">min</span>(stats)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="99">
<pre><code>1</code></pre>
</div>
</div>
<div class="cell" data-execution_count="100">
<div class="sourceCode cell-code" id="cb137" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb137-1">np.<span class="bu" style="color: null;">max</span>(stats)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="100">
<pre><code>6</code></pre>
</div>
</div>
<div class="cell" data-execution_count="102">
<div class="sourceCode cell-code" id="cb139" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb139-1">np.mean(stats)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="102">
<pre><code>3.5</code></pre>
</div>
</div>
<div class="cell" data-execution_count="103">
<div class="sourceCode cell-code" id="cb141" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb141-1">np.std(stats)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="103">
<pre><code>1.707825127659933</code></pre>
</div>
</div>
<div class="cell" data-execution_count="104">
<div class="sourceCode cell-code" id="cb143" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb143-1">np.<span class="bu" style="color: null;">sum</span>(stats)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="104">
<pre><code>21</code></pre>
</div>
</div>
<div class="cell" data-execution_count="105">
<div class="sourceCode cell-code" id="cb145" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb145-1"><span class="co" style="color: #5E5E5E;"># sum by row going downwards (axis = 0)</span></span>
<span id="cb145-2">np.<span class="bu" style="color: null;">sum</span>(stats, axis <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="105">
<pre><code>array([5, 7, 9])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="106">
<div class="sourceCode cell-code" id="cb147" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb147-1"><span class="co" style="color: #5E5E5E;"># sum by column going across (axis = 1)</span></span>
<span id="cb147-2">np.<span class="bu" style="color: null;">sum</span>(stats, axis <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="106">
<pre><code>array([ 6, 15])</code></pre>
</div>
</div>
</section>
<section id="reorganizing-arrays" class="level2">
<h2 class="anchored" data-anchor-id="reorganizing-arrays">Reorganizing arrays</h2>
<div class="cell" data-execution_count="109">
<div class="sourceCode cell-code" id="cb149" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb149-1">before <span class="op" style="color: #5E5E5E;">=</span> np.array([[<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">3</span>,<span class="dv" style="color: #AD0000;">4</span>],</span>
<span id="cb149-2">                   [<span class="dv" style="color: #AD0000;">5</span>,<span class="dv" style="color: #AD0000;">6</span>,<span class="dv" style="color: #AD0000;">7</span>,<span class="dv" style="color: #AD0000;">8</span>]])</span>
<span id="cb149-3">before</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="109">
<pre><code>array([[1, 2, 3, 4],
       [5, 6, 7, 8]])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="108">
<div class="sourceCode cell-code" id="cb151" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb151-1">before.shape</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="108">
<pre><code>(2, 4)</code></pre>
</div>
</div>
<p>In some cases we might want to change the shape of the array:</p>
<div class="cell" data-execution_count="110">
<div class="sourceCode cell-code" id="cb153" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb153-1">after <span class="op" style="color: #5E5E5E;">=</span> before.reshape(<span class="dv" style="color: #AD0000;">8</span>,<span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb153-2">after</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="110">
<pre><code>array([[1],
       [2],
       [3],
       [4],
       [5],
       [6],
       [7],
       [8]])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="111">
<div class="sourceCode cell-code" id="cb155" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb155-1">after <span class="op" style="color: #5E5E5E;">=</span> before.reshape(<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb155-2">after</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="111">
<pre><code>array([[[1, 2],
        [3, 4]],

       [[5, 6],
        [7, 8]]])</code></pre>
</div>
</div>
<section id="vertcally-stacking-vectors" class="level3">
<h3 class="anchored" data-anchor-id="vertcally-stacking-vectors">Vertcally stacking vectors</h3>
<div class="cell" data-execution_count="115">
<div class="sourceCode cell-code" id="cb157" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb157-1">v1 <span class="op" style="color: #5E5E5E;">=</span> np.array([<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">3</span>,<span class="dv" style="color: #AD0000;">4</span>])</span>
<span id="cb157-2">v2 <span class="op" style="color: #5E5E5E;">=</span> np.array([<span class="dv" style="color: #AD0000;">5</span>,<span class="dv" style="color: #AD0000;">6</span>,<span class="dv" style="color: #AD0000;">7</span>,<span class="dv" style="color: #AD0000;">8</span>])</span>
<span id="cb157-3"></span>
<span id="cb157-4"></span>
<span id="cb157-5">np.vstack([v1,v2])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="115">
<pre><code>array([[1, 2, 3, 4],
       [5, 6, 7, 8]])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="116">
<div class="sourceCode cell-code" id="cb159" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb159-1"><span class="co" style="color: #5E5E5E;"># we can stack as much as we want any in any order</span></span>
<span id="cb159-2">np.vstack([v1,v2,v2,v2,v1,v1,v2])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="116">
<pre><code>array([[1, 2, 3, 4],
       [5, 6, 7, 8],
       [5, 6, 7, 8],
       [5, 6, 7, 8],
       [1, 2, 3, 4],
       [1, 2, 3, 4],
       [5, 6, 7, 8]])</code></pre>
</div>
</div>
</section>
<section id="horizontally-stacking-vectors" class="level3">
<h3 class="anchored" data-anchor-id="horizontally-stacking-vectors">Horizontally stacking vectors</h3>
<div class="cell" data-execution_count="121">
<div class="sourceCode cell-code" id="cb161" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb161-1">h1 <span class="op" style="color: #5E5E5E;">=</span> np.ones((<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">4</span>))</span>
<span id="cb161-2">h2 <span class="op" style="color: #5E5E5E;">=</span> np.zeros((<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">2</span>))</span>
<span id="cb161-3"></span>
<span id="cb161-4">h1</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="121">
<pre><code>array([[1., 1., 1., 1.],
       [1., 1., 1., 1.]])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="122">
<div class="sourceCode cell-code" id="cb163" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb163-1">h2</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="122">
<pre><code>array([[0., 0.],
       [0., 0.]])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="123">
<div class="sourceCode cell-code" id="cb165" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb165-1">np.hstack([h1,h2])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="123">
<pre><code>array([[1., 1., 1., 1., 0., 0.],
       [1., 1., 1., 1., 0., 0.]])</code></pre>
</div>
</div>
</section>
</section>
<section id="other-use-cases" class="level2">
<h2 class="anchored" data-anchor-id="other-use-cases">Other use cases</h2>
<div class="cell" data-execution_count="128">
<div class="sourceCode cell-code" id="cb167" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb167-1"><span class="co" style="color: #5E5E5E;"># Load data from file using .genfromtxt</span></span>
<span id="cb167-2"><span class="co" style="color: #5E5E5E;"># automatically cast as float type</span></span>
<span id="cb167-3"></span>
<span id="cb167-4">filedata <span class="op" style="color: #5E5E5E;">=</span> np.genfromtxt(<span class="st" style="color: #20794D;">'NumPy.txt'</span>, delimiter<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">','</span>)</span>
<span id="cb167-5">filedata</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="128">
<pre><code>array([[  1.,  13.,  21.,  11., 196.,  75.,   4.,   3.,  34.,   6.,   7.,
          8.,   0.,   1.,   2.,   3.,   4.,   5.],
       [  3.,  42.,  12.,  33., 766.,  75.,   4.,  55.,   6.,   4.,   3.,
          4.,   5.,   6.,   7.,   0.,  11.,  12.],
       [  1.,  22.,  33.,  11., 999.,  11.,   2.,   1.,  78.,   0.,   1.,
          2.,   9.,   8.,   7.,   1.,  76.,  88.]])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="130">
<div class="sourceCode cell-code" id="cb169" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb169-1"><span class="co" style="color: #5E5E5E;"># cast the data as int32</span></span>
<span id="cb169-2">filedata <span class="op" style="color: #5E5E5E;">=</span> filedata.astype(<span class="st" style="color: #20794D;">'int32'</span>)</span>
<span id="cb169-3">filedata</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="130">
<pre><code>array([[  1,  13,  21,  11, 196,  75,   4,   3,  34,   6,   7,   8,   0,
          1,   2,   3,   4,   5],
       [  3,  42,  12,  33, 766,  75,   4,  55,   6,   4,   3,   4,   5,
          6,   7,   0,  11,  12],
       [  1,  22,  33,  11, 999,  11,   2,   1,  78,   0,   1,   2,   9,
          8,   7,   1,  76,  88]], dtype=int32)</code></pre>
</div>
</div>
<section id="boolean-masking-and-advanced-indexing" class="level3">
<h3 class="anchored" data-anchor-id="boolean-masking-and-advanced-indexing">Boolean masking and advanced indexing</h3>
<div class="cell" data-execution_count="131">
<div class="sourceCode cell-code" id="cb171" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb171-1"><span class="co" style="color: #5E5E5E;"># this returns a boolean for every vlaue based on our condition</span></span>
<span id="cb171-2">filedata <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">50</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="131">
<pre><code>array([[False, False, False, False,  True,  True, False, False, False,
        False, False, False, False, False, False, False, False, False],
       [False, False, False, False,  True,  True, False,  True, False,
        False, False, False, False, False, False, False, False, False],
       [False, False, False, False,  True, False, False, False,  True,
        False, False, False, False, False, False, False,  True,  True]])</code></pre>
</div>
</div>
<p>This is good but not very helpful. We really want to extract the values:</p>
<div class="cell" data-execution_count="132">
<div class="sourceCode cell-code" id="cb173" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb173-1"><span class="co" style="color: #5E5E5E;"># this is better as this returns the values that meet our condition</span></span>
<span id="cb173-2">filedata[filedata <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">50</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="132">
<pre><code>array([196,  75, 766,  75,  55, 999,  78,  76,  88], dtype=int32)</code></pre>
</div>
</div>
</section>
<section id="indexing-with-a-list" class="level3">
<h3 class="anchored" data-anchor-id="indexing-with-a-list">Indexing with a List</h3>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb175" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb175-1">a <span class="op" style="color: #5E5E5E;">=</span> np.array([<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">3</span>,<span class="dv" style="color: #AD0000;">4</span>,<span class="dv" style="color: #AD0000;">5</span>,<span class="dv" style="color: #AD0000;">6</span>,<span class="dv" style="color: #AD0000;">7</span>,<span class="dv" style="color: #AD0000;">8</span>,<span class="dv" style="color: #AD0000;">9</span>])</span>
<span id="cb175-2"></span>
<span id="cb175-3"><span class="co" style="color: #5E5E5E;"># Let's grab 2, 3 and 9</span></span>
<span id="cb175-4">a[[<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">2</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>]]</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>NameError: name 'np' is not defined</code></pre>
</div>
</div>
<div class="cell" data-execution_count="137">
<div class="sourceCode cell-code" id="cb177" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb177-1">np.<span class="bu" style="color: null;">any</span>(filedata <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">50</span>, axis <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="137">
<pre><code>array([False, False, False, False,  True,  True, False,  True,  True,
       False, False, False, False, False, False, False,  True,  True])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="138">
<div class="sourceCode cell-code" id="cb179" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb179-1">np.<span class="bu" style="color: null;">any</span>(filedata <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">50</span>, axis <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="138">
<pre><code>array([ True,  True,  True])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="139">
<div class="sourceCode cell-code" id="cb181" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb181-1">np.<span class="bu" style="color: null;">all</span>(filedata <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">50</span>, axis <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="139">
<pre><code>array([False, False, False, False,  True, False, False, False, False,
       False, False, False, False, False, False, False, False, False])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="140">
<div class="sourceCode cell-code" id="cb183" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb183-1">np.<span class="bu" style="color: null;">all</span>(filedata <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">50</span>, axis <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="140">
<pre><code>array([False, False, False])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="145">
<div class="sourceCode cell-code" id="cb185" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb185-1">(filedata <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">50</span>) <span class="op" style="color: #5E5E5E;">&amp;</span> (filedata <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">100</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="145">
<pre><code>array([[False, False, False, False, False,  True, False, False, False,
        False, False, False, False, False, False, False, False, False],
       [False, False, False, False, False,  True, False,  True, False,
        False, False, False, False, False, False, False, False, False],
       [False, False, False, False, False, False, False, False,  True,
        False, False, False, False, False, False, False,  True,  True]])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="148">
<div class="sourceCode cell-code" id="cb187" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb187-1"><span class="co" style="color: #5E5E5E;"># ~ means NOT and negates the condition specified</span></span>
<span id="cb187-2">(<span class="op" style="color: #5E5E5E;">~</span>((filedata <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">50</span>) <span class="op" style="color: #5E5E5E;">&amp;</span> (filedata <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">100</span>)))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="148">
<pre><code>array([[ True,  True,  True,  True,  True, False,  True,  True,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True],
       [ True,  True,  True,  True,  True, False,  True, False,  True,
         True,  True,  True,  True,  True,  True,  True,  True,  True],
       [ True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True,  True,  True,  True,  True,  True, False, False]])</code></pre>
</div>
</div>
</section>
</section>
<section id="wrap-up" class="level2">
<h2 class="anchored" data-anchor-id="wrap-up">Wrap up</h2>
<p>How would we index the blue highlighted section of the matrix below:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/NumPy/Complete_Python_NumPy_Tutorial_files/figure-html/709b5942-abff-427c-9ac4-4fb0e0790ddf.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">indexing_blue.JPG</figcaption><p></p>
</figure>
</div>
<p>First we index the row range, and then the column range:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb189" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb189-1">a[<span class="dv" style="color: #AD0000;">2</span>:<span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">0</span>:<span class="dv" style="color: #AD0000;">2</span>]</span></code></pre></div>
</div>
<p>How would we index the green highlighted section of the matrix below:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/NumPy/Complete_Python_NumPy_Tutorial_files/figure-html/d3ac8c45-c464-4d21-a0b7-ece845dc4559.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">indexing_green.JPG</figcaption><p></p>
</figure>
</div>
<p>We can do this by using two different lists within our indexing. The first list contains the row indices and the second list contains the column indices:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb190" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb190-1">a[ [<span class="dv" style="color: #AD0000;">0</span>,<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">3</span>], [<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">3</span>,<span class="dv" style="color: #AD0000;">4</span>] ]</span></code></pre></div>
</div>
<p>How would we index the red highlighted section of the matrix below:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/NumPy/Complete_Python_NumPy_Tutorial_files/figure-html/1948a527-e510-41ac-862f-450b9268c553.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">indexing_red.JPG</figcaption><p></p>
</figure>
</div>
<p>Again, we can do this by using two different lists. The first list contains the required rows, and the second list contains the required column range:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb191" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb191-1">a [[<span class="dv" style="color: #AD0000;">0</span>,<span class="dv" style="color: #AD0000;">4</span>,<span class="dv" style="color: #AD0000;">5</span>], <span class="dv" style="color: #AD0000;">3</span>:]</span></code></pre></div>
</div>
</section>
<section id="acknowledgements" class="level2">
<h2 class="anchored" data-anchor-id="acknowledgements">Acknowledgements</h2>
<p>Thanks once again to <strong><a href="https://twitter.com/svpino">Santiago</a></strong> for signposting this video posted by <strong><a href="https://github.com/KeithGalli">Keith Galli</a></strong>. This blog was written after interactively working through it.</p>
<div class="cell" data-execution_count="39">
<div class="sourceCode cell-code" id="cb192" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb192-1"><span class="op" style="color: #5E5E5E;">%%</span>HTML</span>
<span id="cb192-2"><span class="op" style="color: #5E5E5E;">&lt;</span>iframe width<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"560"</span> height<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"315"</span> src<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"https://www.youtube.com/embed/QUT1VHiLmmI"</span> title<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"YouTube video player"</span> frameborder<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"0"</span> allow<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"</span> allowfullscreen<span class="op" style="color: #5E5E5E;">&gt;&lt;/</span>iframe<span class="op" style="color: #5E5E5E;">&gt;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<iframe width="560" height="315" src="https://www.youtube.com/embed/QUT1VHiLmmI" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>
</div>
</div>


</section>

 ]]></description>
  <category>NumPy</category>
  <guid>https://stephen137.github.io/posts/NumPy/Complete_Python_NumPy_Tutorial.html</guid>
  <pubDate>Mon, 02 Jan 2023 23:00:00 GMT</pubDate>
  <media:content url="https://stephen137.github.io/posts/NumPy/NumPy.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Efficient Pandas</title>
  <dc:creator>Stephen Barrie</dc:creator>
  <link>https://stephen137.github.io/posts/Pandas/Effective_Pandas.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Having code that is clean, readable and has a logical flow is invaluable. I discovered Structured Query Language (SQL) before Python, and as the name suggests, this already pushes you down this structured, logical road. I have only recently started to explore Python, but my experience so far is that the code can quickly become scattered and difficult to follow, particulary during the exploratory data analysis (EDA) phase.</p>
<p>I have just finished actively watching <a href="https://www.youtube.com/watch?v=zgbUk90aQ6A">Efficient Pandas</a> by <strong><a href="https://twitter.com/__mharrison__">Matt Harrison</a></strong> and decided to share the content via this blog. The video feels like a bit of a breakthrough for me, someone who is just starting out in the world of data science, and hopefully others will also benefit from reading this. Adopting the <strong>chaining</strong> method covered in this blog, whenever possible, should ensure that your code is cleaner, and reads like a recipe of ordered steps, reducing any potential ambiguities.</p>
</section>
<section id="initial-set-up" class="level2">
<h2 class="anchored" data-anchor-id="initial-set-up">Initial set up</h2>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># bring in the pandas!</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd</span></code></pre></div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># check which version of pandas we're on</span></span>
<span id="cb2-2">pd.__version__</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>'1.5.0'</code></pre>
</div>
</div>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;"># control the pandas display features</span></span>
<span id="cb4-2">pd.options.display.min_rows <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">20</span></span></code></pre></div>
</div>
</section>
<section id="dataset" class="level2">
<h2 class="anchored" data-anchor-id="dataset">Dataset</h2>
<p>The dataset we will be exploring is from https://www.fueleconomy.gov/feg/download.shtml which is the official U.S. government source for fuel economy information. The zipped csv file can be downloaded from <a href="https://github.com/mattharrison/datasets/blob/master/data/vehicles.csv.zip">here</a> but we can just read in the file using pandas:</p>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;"># read in our dataset</span></span>
<span id="cb5-2">autos <span class="op" style="color: #5E5E5E;">=</span> pd.read_csv(<span class="st" style="color: #20794D;">'https://github.com/mattharrison/datasets/raw/master/data/vehicles.csv.zip'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/tmp/ipykernel_2753/3884461791.py:2: DtypeWarning: Columns (68,70,71,72,73,74,76,79) have mixed types. Specify dtype option on import or set low_memory=False.
  autos = pd.read_csv('https://github.com/mattharrison/datasets/raw/master/data/vehicles.csv.zip')</code></pre>
</div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;"># Let's take a look</span></span>
<span id="cb7-2">autos</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>barrels08</th>
      <th>barrelsA08</th>
      <th>charge120</th>
      <th>charge240</th>
      <th>city08</th>
      <th>city08U</th>
      <th>cityA08</th>
      <th>cityA08U</th>
      <th>cityCD</th>
      <th>cityE</th>
      <th>...</th>
      <th>mfrCode</th>
      <th>c240Dscr</th>
      <th>charge240b</th>
      <th>c240bDscr</th>
      <th>createdOn</th>
      <th>modifiedOn</th>
      <th>startStop</th>
      <th>phevCity</th>
      <th>phevHwy</th>
      <th>phevComb</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>15.695714</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>19</td>
      <td>0.0</td>
      <td>0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>...</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>NaN</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>NaN</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>29.964545</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>9</td>
      <td>0.0</td>
      <td>0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>...</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>NaN</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>NaN</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>12.207778</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>23</td>
      <td>0.0</td>
      <td>0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>...</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>NaN</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>NaN</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>29.964545</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>10</td>
      <td>0.0</td>
      <td>0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>...</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>NaN</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>NaN</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>17.347895</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>17</td>
      <td>0.0</td>
      <td>0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>...</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>NaN</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>NaN</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>5</th>
      <td>14.982273</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>21</td>
      <td>0.0</td>
      <td>0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>...</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>NaN</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>NaN</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>6</th>
      <td>13.184400</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>22</td>
      <td>0.0</td>
      <td>0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>...</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>NaN</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>NaN</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>7</th>
      <td>13.733750</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>23</td>
      <td>0.0</td>
      <td>0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>...</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>NaN</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>NaN</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>8</th>
      <td>12.677308</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>23</td>
      <td>0.0</td>
      <td>0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>...</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>NaN</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>NaN</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>9</th>
      <td>13.184400</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>23</td>
      <td>0.0</td>
      <td>0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>...</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>NaN</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>NaN</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>41134</th>
      <td>16.480500</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>18</td>
      <td>0.0</td>
      <td>0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>...</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>NaN</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>NaN</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>41135</th>
      <td>12.677308</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>23</td>
      <td>0.0</td>
      <td>0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>...</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>NaN</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>NaN</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>41136</th>
      <td>13.733750</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>21</td>
      <td>0.0</td>
      <td>0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>...</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>NaN</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>NaN</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>41137</th>
      <td>11.771786</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>24</td>
      <td>0.0</td>
      <td>0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>...</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>NaN</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>NaN</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>41138</th>
      <td>13.184400</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>21</td>
      <td>0.0</td>
      <td>0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>...</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>NaN</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>NaN</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>41139</th>
      <td>14.982273</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>19</td>
      <td>0.0</td>
      <td>0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>...</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>NaN</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>NaN</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>41140</th>
      <td>14.330870</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>20</td>
      <td>0.0</td>
      <td>0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>...</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>NaN</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>NaN</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>41141</th>
      <td>15.695714</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>18</td>
      <td>0.0</td>
      <td>0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>...</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>NaN</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>NaN</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>41142</th>
      <td>15.695714</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>18</td>
      <td>0.0</td>
      <td>0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>...</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>NaN</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>NaN</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>41143</th>
      <td>18.311667</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>16</td>
      <td>0.0</td>
      <td>0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>...</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>0.0</td>
      <td>NaN</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>NaN</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
  </tbody>
</table>
<p>41144 rows × 83 columns</p>
</div>
</div>
</div>
<p>So our dataset includes 41,144 rows and 83 columns - that’s a lot of data! Let’s have a look at the columns:</p>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">autos.columns</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>Index(['barrels08', 'barrelsA08', 'charge120', 'charge240', 'city08',
       'city08U', 'cityA08', 'cityA08U', 'cityCD', 'cityE', 'cityUF', 'co2',
       'co2A', 'co2TailpipeAGpm', 'co2TailpipeGpm', 'comb08', 'comb08U',
       'combA08', 'combA08U', 'combE', 'combinedCD', 'combinedUF', 'cylinders',
       'displ', 'drive', 'engId', 'eng_dscr', 'feScore', 'fuelCost08',
       'fuelCostA08', 'fuelType', 'fuelType1', 'ghgScore', 'ghgScoreA',
       'highway08', 'highway08U', 'highwayA08', 'highwayA08U', 'highwayCD',
       'highwayE', 'highwayUF', 'hlv', 'hpv', 'id', 'lv2', 'lv4', 'make',
       'model', 'mpgData', 'phevBlended', 'pv2', 'pv4', 'range', 'rangeCity',
       'rangeCityA', 'rangeHwy', 'rangeHwyA', 'trany', 'UCity', 'UCityA',
       'UHighway', 'UHighwayA', 'VClass', 'year', 'youSaveSpend', 'guzzler',
       'trans_dscr', 'tCharger', 'sCharger', 'atvType', 'fuelType2', 'rangeA',
       'evMotor', 'mfrCode', 'c240Dscr', 'charge240b', 'c240bDscr',
       'createdOn', 'modifiedOn', 'startStop', 'phevCity', 'phevHwy',
       'phevComb'],
      dtype='object')</code></pre>
</div>
</div>
</section>
<section id="data-types" class="level2">
<h2 class="anchored" data-anchor-id="data-types">Data Types</h2>
<p>Let’s concentrate our focus on a subset of the data. Let’s look at 14 of the 83 columns and also find out about the types of data included. Getting the right types will enable analysis and correctness.</p>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;"># Let's drill down and focus on just 14 of the 83 columns</span></span>
<span id="cb10-2">cols <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'city08'</span>,<span class="st" style="color: #20794D;">'comb08'</span>, <span class="st" style="color: #20794D;">'highway08'</span>,<span class="st" style="color: #20794D;">'cylinders'</span>, <span class="st" style="color: #20794D;">'displ'</span>, <span class="st" style="color: #20794D;">'drive'</span>, <span class="st" style="color: #20794D;">'eng_dscr'</span>, <span class="st" style="color: #20794D;">'fuelCost08'</span>,</span>
<span id="cb10-3">      <span class="st" style="color: #20794D;">'make'</span>, <span class="st" style="color: #20794D;">'model'</span>, <span class="st" style="color: #20794D;">'trany'</span>, <span class="st" style="color: #20794D;">'range'</span>, <span class="st" style="color: #20794D;">'createdOn'</span>, <span class="st" style="color: #20794D;">'year'</span>]       </span></code></pre></div>
</div>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;"># Let's see the data types for each column</span></span>
<span id="cb11-2">autos[cols].dtypes</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>city08          int64
comb08          int64
highway08       int64
cylinders     float64
displ         float64
drive          object
eng_dscr       object
fuelCost08      int64
make           object
model          object
trany          object
range           int64
createdOn      object
year            int64
dtype: object</code></pre>
</div>
</div>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;"># Let's see how much memory is being used by column</span></span>
<span id="cb13-2">autos[cols].memory_usage(deep<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>Index             128
city08         329152
comb08         329152
highway08      329152
cylinders      329152
displ          329152
drive         3028369
eng_dscr      2135693
fuelCost08     329152
make          2606267
model         2813134
trany         2933276
range          329152
createdOn     3497240
year           329152
dtype: int64</code></pre>
</div>
</div>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;"># Let's see how much memory is being used in total</span></span>
<span id="cb15-2">autos[cols].memory_usage(deep<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>).<span class="bu" style="color: null;">sum</span>()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>19647323</code></pre>
</div>
</div>
</section>
<section id="integers-int" class="level2">
<h2 class="anchored" data-anchor-id="integers-int">Integers (int)</h2>
<p>Integers(int) are numbers without a decimal point. Let’s grab some summary statistics for our integer columns:</p>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;"># summary stats for integer columns</span></span>
<span id="cb17-2">(autos</span>
<span id="cb17-3"> [cols]</span>
<span id="cb17-4"> .select_dtypes(<span class="bu" style="color: null;">int</span>)</span>
<span id="cb17-5"> .describe()</span>
<span id="cb17-6">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>city08</th>
      <th>comb08</th>
      <th>highway08</th>
      <th>fuelCost08</th>
      <th>range</th>
      <th>year</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>count</th>
      <td>41144.000000</td>
      <td>41144.000000</td>
      <td>41144.000000</td>
      <td>41144.000000</td>
      <td>41144.000000</td>
      <td>41144.000000</td>
    </tr>
    <tr>
      <th>mean</th>
      <td>18.369045</td>
      <td>20.616396</td>
      <td>24.504667</td>
      <td>2362.335942</td>
      <td>0.793506</td>
      <td>2001.535266</td>
    </tr>
    <tr>
      <th>std</th>
      <td>7.905886</td>
      <td>7.674535</td>
      <td>7.730364</td>
      <td>654.981925</td>
      <td>13.041592</td>
      <td>11.142414</td>
    </tr>
    <tr>
      <th>min</th>
      <td>6.000000</td>
      <td>7.000000</td>
      <td>9.000000</td>
      <td>500.000000</td>
      <td>0.000000</td>
      <td>1984.000000</td>
    </tr>
    <tr>
      <th>25%</th>
      <td>15.000000</td>
      <td>17.000000</td>
      <td>20.000000</td>
      <td>1900.000000</td>
      <td>0.000000</td>
      <td>1991.000000</td>
    </tr>
    <tr>
      <th>50%</th>
      <td>17.000000</td>
      <td>20.000000</td>
      <td>24.000000</td>
      <td>2350.000000</td>
      <td>0.000000</td>
      <td>2002.000000</td>
    </tr>
    <tr>
      <th>75%</th>
      <td>20.000000</td>
      <td>23.000000</td>
      <td>28.000000</td>
      <td>2700.000000</td>
      <td>0.000000</td>
      <td>2011.000000</td>
    </tr>
    <tr>
      <th>max</th>
      <td>150.000000</td>
      <td>136.000000</td>
      <td>124.000000</td>
      <td>7400.000000</td>
      <td>370.000000</td>
      <td>2020.000000</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
</section>
<section id="chaining" class="level2">
<h2 class="anchored" data-anchor-id="chaining">Chaining</h2>
<p>The above code is fine but it can quickly become cluttered and unreadable. A better way is to lean on SQL coding best practice which means that our code reads more like a recipe of ordered steps:</p>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;"># use chaining to grab summary stats for integer columns</span></span>
<span id="cb18-2">(autos</span>
<span id="cb18-3"> [cols]</span>
<span id="cb18-4"> .select_dtypes(<span class="bu" style="color: null;">int</span>)</span>
<span id="cb18-5"> .describe()</span>
<span id="cb18-6">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>city08</th>
      <th>comb08</th>
      <th>highway08</th>
      <th>fuelCost08</th>
      <th>range</th>
      <th>year</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>count</th>
      <td>41144.000000</td>
      <td>41144.000000</td>
      <td>41144.000000</td>
      <td>41144.000000</td>
      <td>41144.000000</td>
      <td>41144.000000</td>
    </tr>
    <tr>
      <th>mean</th>
      <td>18.369045</td>
      <td>20.616396</td>
      <td>24.504667</td>
      <td>2362.335942</td>
      <td>0.793506</td>
      <td>2001.535266</td>
    </tr>
    <tr>
      <th>std</th>
      <td>7.905886</td>
      <td>7.674535</td>
      <td>7.730364</td>
      <td>654.981925</td>
      <td>13.041592</td>
      <td>11.142414</td>
    </tr>
    <tr>
      <th>min</th>
      <td>6.000000</td>
      <td>7.000000</td>
      <td>9.000000</td>
      <td>500.000000</td>
      <td>0.000000</td>
      <td>1984.000000</td>
    </tr>
    <tr>
      <th>25%</th>
      <td>15.000000</td>
      <td>17.000000</td>
      <td>20.000000</td>
      <td>1900.000000</td>
      <td>0.000000</td>
      <td>1991.000000</td>
    </tr>
    <tr>
      <th>50%</th>
      <td>17.000000</td>
      <td>20.000000</td>
      <td>24.000000</td>
      <td>2350.000000</td>
      <td>0.000000</td>
      <td>2002.000000</td>
    </tr>
    <tr>
      <th>75%</th>
      <td>20.000000</td>
      <td>23.000000</td>
      <td>28.000000</td>
      <td>2700.000000</td>
      <td>0.000000</td>
      <td>2011.000000</td>
    </tr>
    <tr>
      <th>max</th>
      <td>150.000000</td>
      <td>136.000000</td>
      <td>124.000000</td>
      <td>7400.000000</td>
      <td>370.000000</td>
      <td>2020.000000</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>Same result, much more readable code! Chaining is also known as ‘flow programming’. Rather than creating intermediate variables, leverage the fact that most operations return a new object which can be worked on.</p>
<p>Note, if you can’t find a way to chain we can use pandas <a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.pipe.html">.pipe</a>. We’ll see how this works later.</p>
</section>
<section id="saving-space" class="level2">
<h2 class="anchored" data-anchor-id="saving-space">Saving Space</h2>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span></code></pre></div>
</div>
<p>The int columns are currently in int64 format. Let’s try to free up some space by representing our data more memory efficiently. We can use <a href="https://numpy.org/doc/stable/reference/generated/numpy.iinfo.html">Numpy</a> to help with this:</p>
<div class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="co" style="color: #5E5E5E;"># Can comb08 column be int8?</span></span>
<span id="cb20-2">np.iinfo(np.int8)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>iinfo(min=-128, max=127, dtype=int8)</code></pre>
</div>
</div>
<p>The range -128 to 127 can be represented as 8 bits. (There are 256 values which in binary form can be represented by 11111111 i.e.&nbsp;8 bits). We have a maximum value of 136 for the <em>comb08</em> column so we can’t convert to int8 without losing info. We can however convert the <em>highway08</em> column to int8. Let’s try int16:</p>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="co" style="color: #5E5E5E;"># Can comb08 column be int16?</span></span>
<span id="cb22-2">np.iinfo(np.int16)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">
<pre><code>iinfo(min=-32768, max=32767, dtype=int16)</code></pre>
</div>
</div>
<p>All of our data is within this range, so we can go ahead and convert all int64 columns to int16 (and int8 for <em>highway08</em>):</p>
<div class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="co" style="color: #5E5E5E;"># convert from int64 to int16 and int8 in order to free up some memory</span></span>
<span id="cb24-2"><span class="co" style="color: #5E5E5E;"># also obtain summary statistics for integer columns</span></span>
<span id="cb24-3">(autos</span>
<span id="cb24-4"> [cols]</span>
<span id="cb24-5"> .astype({<span class="st" style="color: #20794D;">'city08'</span>: <span class="st" style="color: #20794D;">'int16'</span>, <span class="st" style="color: #20794D;">'comb08'</span>: <span class="st" style="color: #20794D;">'int16'</span>, <span class="st" style="color: #20794D;">'highway08'</span>: <span class="st" style="color: #20794D;">'int8'</span>,<span class="st" style="color: #20794D;">'fuelCost08'</span>:<span class="st" style="color: #20794D;">'int16'</span>, <span class="st" style="color: #20794D;">'range'</span>:<span class="st" style="color: #20794D;">'int16'</span>, <span class="st" style="color: #20794D;">'year'</span>:<span class="st" style="color: #20794D;">'int16'</span>}) </span>
<span id="cb24-6"> .select_dtypes([<span class="st" style="color: #20794D;">'integer'</span>])</span>
<span id="cb24-7"> .describe()</span>
<span id="cb24-8">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>city08</th>
      <th>comb08</th>
      <th>highway08</th>
      <th>fuelCost08</th>
      <th>range</th>
      <th>year</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>count</th>
      <td>41144.000000</td>
      <td>41144.000000</td>
      <td>41144.000000</td>
      <td>41144.000000</td>
      <td>41144.000000</td>
      <td>41144.000000</td>
    </tr>
    <tr>
      <th>mean</th>
      <td>18.369045</td>
      <td>20.616396</td>
      <td>24.504667</td>
      <td>2362.335942</td>
      <td>0.793506</td>
      <td>2001.535266</td>
    </tr>
    <tr>
      <th>std</th>
      <td>7.905886</td>
      <td>7.674535</td>
      <td>7.730364</td>
      <td>654.981925</td>
      <td>13.041592</td>
      <td>11.142414</td>
    </tr>
    <tr>
      <th>min</th>
      <td>6.000000</td>
      <td>7.000000</td>
      <td>9.000000</td>
      <td>500.000000</td>
      <td>0.000000</td>
      <td>1984.000000</td>
    </tr>
    <tr>
      <th>25%</th>
      <td>15.000000</td>
      <td>17.000000</td>
      <td>20.000000</td>
      <td>1900.000000</td>
      <td>0.000000</td>
      <td>1991.000000</td>
    </tr>
    <tr>
      <th>50%</th>
      <td>17.000000</td>
      <td>20.000000</td>
      <td>24.000000</td>
      <td>2350.000000</td>
      <td>0.000000</td>
      <td>2002.000000</td>
    </tr>
    <tr>
      <th>75%</th>
      <td>20.000000</td>
      <td>23.000000</td>
      <td>28.000000</td>
      <td>2700.000000</td>
      <td>0.000000</td>
      <td>2011.000000</td>
    </tr>
    <tr>
      <th>max</th>
      <td>150.000000</td>
      <td>136.000000</td>
      <td>124.000000</td>
      <td>7400.000000</td>
      <td>370.000000</td>
      <td>2020.000000</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>Let’s see if we have saved any space by converting:</p>
<div class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="co" style="color: #5E5E5E;"># check memory usage</span></span>
<span id="cb25-2">(autos</span>
<span id="cb25-3"> [cols]</span>
<span id="cb25-4"> .astype({<span class="st" style="color: #20794D;">'city08'</span>: <span class="st" style="color: #20794D;">'int16'</span>, <span class="st" style="color: #20794D;">'comb08'</span>: <span class="st" style="color: #20794D;">'int16'</span>, <span class="st" style="color: #20794D;">'highway08'</span>: <span class="st" style="color: #20794D;">'int8'</span>,<span class="st" style="color: #20794D;">'fuelCost08'</span>:<span class="st" style="color: #20794D;">'int16'</span>, <span class="st" style="color: #20794D;">'range'</span>:<span class="st" style="color: #20794D;">'int16'</span>, <span class="st" style="color: #20794D;">'year'</span>:<span class="st" style="color: #20794D;">'int16'</span>}) </span>
<span id="cb25-5"> .memory_usage(deep<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb25-6"> .<span class="bu" style="color: null;">sum</span>() <span class="co" style="color: #5E5E5E;"># was 19,647,323</span></span>
<span id="cb25-7">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="17">
<pre><code>18124995</code></pre>
</div>
</div>
<p>So a saving, but not substantial - just under 8%. Let’s see if we can improve on this:</p>
</section>
<section id="floats" class="level2">
<h2 class="anchored" data-anchor-id="floats">Floats</h2>
<p>A floating point (known as a float) number has decimal points even if that decimal point value is 0. For example: 1.13, 2.0, 1234.345. If we have a column that contains both integers and floating point numbers, Pandas will assign the entire column to the float data type so the decimal points are not lost.</p>
<div class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="co" style="color: #5E5E5E;"># Let's take a look at the columns with a float data type</span></span>
<span id="cb27-2">(autos</span>
<span id="cb27-3"> [cols]</span>
<span id="cb27-4"> .select_dtypes(<span class="st" style="color: #20794D;">'float'</span>)</span>
<span id="cb27-5">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>cylinders</th>
      <th>displ</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>4.0</td>
      <td>2.0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>12.0</td>
      <td>4.9</td>
    </tr>
    <tr>
      <th>2</th>
      <td>4.0</td>
      <td>2.2</td>
    </tr>
    <tr>
      <th>3</th>
      <td>8.0</td>
      <td>5.2</td>
    </tr>
    <tr>
      <th>4</th>
      <td>4.0</td>
      <td>2.2</td>
    </tr>
    <tr>
      <th>5</th>
      <td>4.0</td>
      <td>1.8</td>
    </tr>
    <tr>
      <th>6</th>
      <td>4.0</td>
      <td>1.8</td>
    </tr>
    <tr>
      <th>7</th>
      <td>4.0</td>
      <td>1.6</td>
    </tr>
    <tr>
      <th>8</th>
      <td>4.0</td>
      <td>1.6</td>
    </tr>
    <tr>
      <th>9</th>
      <td>4.0</td>
      <td>1.8</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>41134</th>
      <td>4.0</td>
      <td>2.1</td>
    </tr>
    <tr>
      <th>41135</th>
      <td>4.0</td>
      <td>1.9</td>
    </tr>
    <tr>
      <th>41136</th>
      <td>4.0</td>
      <td>1.9</td>
    </tr>
    <tr>
      <th>41137</th>
      <td>4.0</td>
      <td>1.9</td>
    </tr>
    <tr>
      <th>41138</th>
      <td>4.0</td>
      <td>1.9</td>
    </tr>
    <tr>
      <th>41139</th>
      <td>4.0</td>
      <td>2.2</td>
    </tr>
    <tr>
      <th>41140</th>
      <td>4.0</td>
      <td>2.2</td>
    </tr>
    <tr>
      <th>41141</th>
      <td>4.0</td>
      <td>2.2</td>
    </tr>
    <tr>
      <th>41142</th>
      <td>4.0</td>
      <td>2.2</td>
    </tr>
    <tr>
      <th>41143</th>
      <td>4.0</td>
      <td>2.2</td>
    </tr>
  </tbody>
</table>
<p>41144 rows × 2 columns</p>
</div>
</div>
</div>
<p>Cylinders look int like - we would expect the number of cylinders to be an integer, and not a float (decimal).</p>
<div class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="co" style="color: #5E5E5E;"># summary stats for cylinders</span></span>
<span id="cb28-2">(autos</span>
<span id="cb28-3"> .cylinders</span>
<span id="cb28-4"> .describe()</span>
<span id="cb28-5">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="19">
<pre><code>count    40938.000000
mean         5.717084
std          1.755517
min          2.000000
25%          4.000000
50%          6.000000
75%          6.000000
max         16.000000
Name: cylinders, dtype: float64</code></pre>
</div>
</div>
<p>Oops, we have missing values - count = 40,938 but we have 41,144 rows.</p>
<div class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="co" style="color: #5E5E5E;"># Let's count the various values for cylinders</span></span>
<span id="cb30-2">(autos</span>
<span id="cb30-3"> .cylinders</span>
<span id="cb30-4"> .value_counts(dropna<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span>
<span id="cb30-5">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="20">
<pre><code>4.0     15938
6.0     14284
8.0      8801
5.0       771
12.0      626
3.0       279
NaN       206
10.0      170
2.0        59
16.0       10
Name: cylinders, dtype: int64</code></pre>
</div>
</div>
<p>As anticipated, we have missing values (206) represented by NaN</p>
<div class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="co" style="color: #5E5E5E;">## where are they missing? We can use .query</span></span>
<span id="cb32-2">(autos</span>
<span id="cb32-3"> [cols]</span>
<span id="cb32-4"> .query(<span class="st" style="color: #20794D;">'cylinders.isna()'</span>)</span>
<span id="cb32-5">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="21">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>city08</th>
      <th>comb08</th>
      <th>highway08</th>
      <th>cylinders</th>
      <th>displ</th>
      <th>drive</th>
      <th>eng_dscr</th>
      <th>fuelCost08</th>
      <th>make</th>
      <th>model</th>
      <th>trany</th>
      <th>range</th>
      <th>createdOn</th>
      <th>year</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>7138</th>
      <td>81</td>
      <td>85</td>
      <td>91</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>800</td>
      <td>Nissan</td>
      <td>Altra EV</td>
      <td>NaN</td>
      <td>90</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>2000</td>
    </tr>
    <tr>
      <th>7139</th>
      <td>81</td>
      <td>72</td>
      <td>64</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>2-Wheel Drive</td>
      <td>NaN</td>
      <td>900</td>
      <td>Toyota</td>
      <td>RAV4 EV</td>
      <td>NaN</td>
      <td>88</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>2000</td>
    </tr>
    <tr>
      <th>8143</th>
      <td>81</td>
      <td>72</td>
      <td>64</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>2-Wheel Drive</td>
      <td>NaN</td>
      <td>900</td>
      <td>Toyota</td>
      <td>RAV4 EV</td>
      <td>NaN</td>
      <td>88</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>2001</td>
    </tr>
    <tr>
      <th>8144</th>
      <td>74</td>
      <td>65</td>
      <td>58</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>1000</td>
      <td>Ford</td>
      <td>Th!nk</td>
      <td>NaN</td>
      <td>29</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>2001</td>
    </tr>
    <tr>
      <th>8146</th>
      <td>45</td>
      <td>39</td>
      <td>33</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>2-Wheel Drive</td>
      <td>NaN</td>
      <td>1700</td>
      <td>Ford</td>
      <td>Explorer USPS Electric</td>
      <td>NaN</td>
      <td>38</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>2001</td>
    </tr>
    <tr>
      <th>8147</th>
      <td>84</td>
      <td>75</td>
      <td>66</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>900</td>
      <td>Nissan</td>
      <td>Hyper-Mini</td>
      <td>NaN</td>
      <td>33</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>2001</td>
    </tr>
    <tr>
      <th>9212</th>
      <td>87</td>
      <td>78</td>
      <td>69</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>2-Wheel Drive</td>
      <td>NaN</td>
      <td>850</td>
      <td>Toyota</td>
      <td>RAV4 EV</td>
      <td>NaN</td>
      <td>95</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>2002</td>
    </tr>
    <tr>
      <th>9213</th>
      <td>45</td>
      <td>39</td>
      <td>33</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>2-Wheel Drive</td>
      <td>NaN</td>
      <td>1700</td>
      <td>Ford</td>
      <td>Explorer USPS Electric</td>
      <td>NaN</td>
      <td>38</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>2002</td>
    </tr>
    <tr>
      <th>10329</th>
      <td>87</td>
      <td>78</td>
      <td>69</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>2-Wheel Drive</td>
      <td>NaN</td>
      <td>850</td>
      <td>Toyota</td>
      <td>RAV4 EV</td>
      <td>NaN</td>
      <td>95</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>2003</td>
    </tr>
    <tr>
      <th>21413</th>
      <td>22</td>
      <td>24</td>
      <td>28</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>4-Wheel Drive</td>
      <td>NaN</td>
      <td>1750</td>
      <td>Subaru</td>
      <td>RX Turbo</td>
      <td>Manual 5-spd</td>
      <td>0</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>1985</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>34407</th>
      <td>73</td>
      <td>72</td>
      <td>71</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>Front-Wheel Drive</td>
      <td>NaN</td>
      <td>900</td>
      <td>BYD</td>
      <td>e6</td>
      <td>Automatic (A1)</td>
      <td>187</td>
      <td>Wed Mar 13 00:00:00 EDT 2019</td>
      <td>2019</td>
    </tr>
    <tr>
      <th>34408</th>
      <td>118</td>
      <td>108</td>
      <td>97</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>Front-Wheel Drive</td>
      <td>NaN</td>
      <td>600</td>
      <td>Nissan</td>
      <td>Leaf (62 kW-hr battery pack)</td>
      <td>Automatic (A1)</td>
      <td>226</td>
      <td>Wed Mar 13 00:00:00 EDT 2019</td>
      <td>2019</td>
    </tr>
    <tr>
      <th>34409</th>
      <td>114</td>
      <td>104</td>
      <td>94</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>Front-Wheel Drive</td>
      <td>NaN</td>
      <td>650</td>
      <td>Nissan</td>
      <td>Leaf SV/SL (62 kW-hr battery pack)</td>
      <td>Automatic (A1)</td>
      <td>215</td>
      <td>Wed Mar 13 00:00:00 EDT 2019</td>
      <td>2019</td>
    </tr>
    <tr>
      <th>34538</th>
      <td>74</td>
      <td>74</td>
      <td>73</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>All-Wheel Drive</td>
      <td>NaN</td>
      <td>900</td>
      <td>Audi</td>
      <td>e-tron</td>
      <td>Automatic (A1)</td>
      <td>204</td>
      <td>Tue Apr 16 00:00:00 EDT 2019</td>
      <td>2019</td>
    </tr>
    <tr>
      <th>34561</th>
      <td>80</td>
      <td>76</td>
      <td>72</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>4-Wheel Drive</td>
      <td>NaN</td>
      <td>850</td>
      <td>Jaguar</td>
      <td>I-Pace</td>
      <td>Automatic (A1)</td>
      <td>234</td>
      <td>Thu May 02 00:00:00 EDT 2019</td>
      <td>2020</td>
    </tr>
    <tr>
      <th>34563</th>
      <td>138</td>
      <td>131</td>
      <td>124</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>Rear-Wheel Drive</td>
      <td>NaN</td>
      <td>500</td>
      <td>Tesla</td>
      <td>Model 3 Standard Range</td>
      <td>Automatic (A1)</td>
      <td>220</td>
      <td>Thu May 02 00:00:00 EDT 2019</td>
      <td>2019</td>
    </tr>
    <tr>
      <th>34564</th>
      <td>140</td>
      <td>133</td>
      <td>124</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>Rear-Wheel Drive</td>
      <td>NaN</td>
      <td>500</td>
      <td>Tesla</td>
      <td>Model 3 Standard Range Plus</td>
      <td>Automatic (A1)</td>
      <td>240</td>
      <td>Thu May 02 00:00:00 EDT 2019</td>
      <td>2019</td>
    </tr>
    <tr>
      <th>34565</th>
      <td>115</td>
      <td>111</td>
      <td>107</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>All-Wheel Drive</td>
      <td>NaN</td>
      <td>600</td>
      <td>Tesla</td>
      <td>Model S Long Range</td>
      <td>Automatic (A1)</td>
      <td>370</td>
      <td>Thu May 02 00:00:00 EDT 2019</td>
      <td>2019</td>
    </tr>
    <tr>
      <th>34566</th>
      <td>104</td>
      <td>104</td>
      <td>104</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>All-Wheel Drive</td>
      <td>NaN</td>
      <td>650</td>
      <td>Tesla</td>
      <td>Model S Performance (19" Wheels)</td>
      <td>Automatic (A1)</td>
      <td>345</td>
      <td>Thu May 02 00:00:00 EDT 2019</td>
      <td>2019</td>
    </tr>
    <tr>
      <th>34567</th>
      <td>98</td>
      <td>97</td>
      <td>96</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>All-Wheel Drive</td>
      <td>NaN</td>
      <td>700</td>
      <td>Tesla</td>
      <td>Model S Performance (21" Wheels)</td>
      <td>Automatic (A1)</td>
      <td>325</td>
      <td>Thu May 02 00:00:00 EDT 2019</td>
      <td>2019</td>
    </tr>
  </tbody>
</table>
<p>206 rows × 14 columns</p>
</div>
</div>
</div>
<div class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="co" style="color: #5E5E5E;">## chaining - add cylinders and displ columns replacing NaN with 0</span></span>
<span id="cb33-2">(autos</span>
<span id="cb33-3"> [cols]</span>
<span id="cb33-4"> .assign(cylinders<span class="op" style="color: #5E5E5E;">=</span>autos.cylinders.fillna(<span class="dv" style="color: #AD0000;">0</span>).astype(<span class="st" style="color: #20794D;">'int8'</span>),</span>
<span id="cb33-5">         displ<span class="op" style="color: #5E5E5E;">=</span>autos.displ.fillna(<span class="dv" style="color: #AD0000;">0</span>))</span>
<span id="cb33-6"> .astype({<span class="st" style="color: #20794D;">'city08'</span>: <span class="st" style="color: #20794D;">'int16'</span>, <span class="st" style="color: #20794D;">'comb08'</span>: <span class="st" style="color: #20794D;">'int16'</span>, <span class="st" style="color: #20794D;">'highway08'</span>: <span class="st" style="color: #20794D;">'int8'</span>,<span class="st" style="color: #20794D;">'fuelCost08'</span>:<span class="st" style="color: #20794D;">'int16'</span>, <span class="st" style="color: #20794D;">'range'</span>:<span class="st" style="color: #20794D;">'int16'</span>, <span class="st" style="color: #20794D;">'year'</span>:<span class="st" style="color: #20794D;">'int16'</span>}) </span>
<span id="cb33-7"> .describe()</span>
<span id="cb33-8">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="22">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>city08</th>
      <th>comb08</th>
      <th>highway08</th>
      <th>cylinders</th>
      <th>displ</th>
      <th>fuelCost08</th>
      <th>range</th>
      <th>year</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>count</th>
      <td>41144.000000</td>
      <td>41144.000000</td>
      <td>41144.000000</td>
      <td>41144.000000</td>
      <td>41144.000000</td>
      <td>41144.000000</td>
      <td>41144.000000</td>
      <td>41144.000000</td>
    </tr>
    <tr>
      <th>mean</th>
      <td>18.369045</td>
      <td>20.616396</td>
      <td>24.504667</td>
      <td>5.688460</td>
      <td>3.277904</td>
      <td>2362.335942</td>
      <td>0.793506</td>
      <td>2001.535266</td>
    </tr>
    <tr>
      <th>std</th>
      <td>7.905886</td>
      <td>7.674535</td>
      <td>7.730364</td>
      <td>1.797009</td>
      <td>1.373415</td>
      <td>654.981925</td>
      <td>13.041592</td>
      <td>11.142414</td>
    </tr>
    <tr>
      <th>min</th>
      <td>6.000000</td>
      <td>7.000000</td>
      <td>9.000000</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>500.000000</td>
      <td>0.000000</td>
      <td>1984.000000</td>
    </tr>
    <tr>
      <th>25%</th>
      <td>15.000000</td>
      <td>17.000000</td>
      <td>20.000000</td>
      <td>4.000000</td>
      <td>2.200000</td>
      <td>1900.000000</td>
      <td>0.000000</td>
      <td>1991.000000</td>
    </tr>
    <tr>
      <th>50%</th>
      <td>17.000000</td>
      <td>20.000000</td>
      <td>24.000000</td>
      <td>6.000000</td>
      <td>3.000000</td>
      <td>2350.000000</td>
      <td>0.000000</td>
      <td>2002.000000</td>
    </tr>
    <tr>
      <th>75%</th>
      <td>20.000000</td>
      <td>23.000000</td>
      <td>28.000000</td>
      <td>6.000000</td>
      <td>4.300000</td>
      <td>2700.000000</td>
      <td>0.000000</td>
      <td>2011.000000</td>
    </tr>
    <tr>
      <th>max</th>
      <td>150.000000</td>
      <td>136.000000</td>
      <td>124.000000</td>
      <td>16.000000</td>
      <td>8.400000</td>
      <td>7400.000000</td>
      <td>370.000000</td>
      <td>2020.000000</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="co" style="color: #5E5E5E;"># use this to inspect float sizes</span></span>
<span id="cb34-2">np.finfo(np.float16)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="23">
<pre><code>finfo(resolution=0.001, min=-6.55040e+04, max=6.55040e+04, dtype=float16)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1"><span class="co" style="color: #5E5E5E;">## chaining - add cylinders and displ columns replacing NaN with 0</span></span>
<span id="cb36-2">(autos</span>
<span id="cb36-3"> [cols]</span>
<span id="cb36-4"> .assign(cylinders<span class="op" style="color: #5E5E5E;">=</span>autos.cylinders.fillna(<span class="dv" style="color: #AD0000;">0</span>).astype(<span class="st" style="color: #20794D;">'int8'</span>),</span>
<span id="cb36-5">         displ<span class="op" style="color: #5E5E5E;">=</span>autos.displ.fillna(<span class="dv" style="color: #AD0000;">0</span>).astype(<span class="st" style="color: #20794D;">'float16'</span>))</span>
<span id="cb36-6"> .astype({<span class="st" style="color: #20794D;">'city08'</span>: <span class="st" style="color: #20794D;">'int16'</span>, <span class="st" style="color: #20794D;">'comb08'</span>: <span class="st" style="color: #20794D;">'int16'</span>, <span class="st" style="color: #20794D;">'highway08'</span>: <span class="st" style="color: #20794D;">'int8'</span>,<span class="st" style="color: #20794D;">'fuelCost08'</span>:<span class="st" style="color: #20794D;">'int16'</span>, <span class="st" style="color: #20794D;">'range'</span>:<span class="st" style="color: #20794D;">'int16'</span>, <span class="st" style="color: #20794D;">'year'</span>:<span class="st" style="color: #20794D;">'int16'</span>}) </span>
<span id="cb36-7"> )</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="24">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>city08</th>
      <th>comb08</th>
      <th>highway08</th>
      <th>cylinders</th>
      <th>displ</th>
      <th>drive</th>
      <th>eng_dscr</th>
      <th>fuelCost08</th>
      <th>make</th>
      <th>model</th>
      <th>trany</th>
      <th>range</th>
      <th>createdOn</th>
      <th>year</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>19</td>
      <td>21</td>
      <td>25</td>
      <td>4</td>
      <td>2.000000</td>
      <td>Rear-Wheel Drive</td>
      <td>(FFS)</td>
      <td>2000</td>
      <td>Alfa Romeo</td>
      <td>Spider Veloce 2000</td>
      <td>Manual 5-spd</td>
      <td>0</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>1985</td>
    </tr>
    <tr>
      <th>1</th>
      <td>9</td>
      <td>11</td>
      <td>14</td>
      <td>12</td>
      <td>4.898438</td>
      <td>Rear-Wheel Drive</td>
      <td>(GUZZLER)</td>
      <td>3850</td>
      <td>Ferrari</td>
      <td>Testarossa</td>
      <td>Manual 5-spd</td>
      <td>0</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>1985</td>
    </tr>
    <tr>
      <th>2</th>
      <td>23</td>
      <td>27</td>
      <td>33</td>
      <td>4</td>
      <td>2.199219</td>
      <td>Front-Wheel Drive</td>
      <td>(FFS)</td>
      <td>1550</td>
      <td>Dodge</td>
      <td>Charger</td>
      <td>Manual 5-spd</td>
      <td>0</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>1985</td>
    </tr>
    <tr>
      <th>3</th>
      <td>10</td>
      <td>11</td>
      <td>12</td>
      <td>8</td>
      <td>5.199219</td>
      <td>Rear-Wheel Drive</td>
      <td>NaN</td>
      <td>3850</td>
      <td>Dodge</td>
      <td>B150/B250 Wagon 2WD</td>
      <td>Automatic 3-spd</td>
      <td>0</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>1985</td>
    </tr>
    <tr>
      <th>4</th>
      <td>17</td>
      <td>19</td>
      <td>23</td>
      <td>4</td>
      <td>2.199219</td>
      <td>4-Wheel or All-Wheel Drive</td>
      <td>(FFS,TRBO)</td>
      <td>2700</td>
      <td>Subaru</td>
      <td>Legacy AWD Turbo</td>
      <td>Manual 5-spd</td>
      <td>0</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>1993</td>
    </tr>
    <tr>
      <th>5</th>
      <td>21</td>
      <td>22</td>
      <td>24</td>
      <td>4</td>
      <td>1.799805</td>
      <td>Front-Wheel Drive</td>
      <td>(FFS)</td>
      <td>1900</td>
      <td>Subaru</td>
      <td>Loyale</td>
      <td>Automatic 3-spd</td>
      <td>0</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>1993</td>
    </tr>
    <tr>
      <th>6</th>
      <td>22</td>
      <td>25</td>
      <td>29</td>
      <td>4</td>
      <td>1.799805</td>
      <td>Front-Wheel Drive</td>
      <td>(FFS)</td>
      <td>1700</td>
      <td>Subaru</td>
      <td>Loyale</td>
      <td>Manual 5-spd</td>
      <td>0</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>1993</td>
    </tr>
    <tr>
      <th>7</th>
      <td>23</td>
      <td>24</td>
      <td>26</td>
      <td>4</td>
      <td>1.599609</td>
      <td>Front-Wheel Drive</td>
      <td>(FFS)</td>
      <td>1750</td>
      <td>Toyota</td>
      <td>Corolla</td>
      <td>Automatic 3-spd</td>
      <td>0</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>1993</td>
    </tr>
    <tr>
      <th>8</th>
      <td>23</td>
      <td>26</td>
      <td>31</td>
      <td>4</td>
      <td>1.599609</td>
      <td>Front-Wheel Drive</td>
      <td>(FFS)</td>
      <td>1600</td>
      <td>Toyota</td>
      <td>Corolla</td>
      <td>Manual 5-spd</td>
      <td>0</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>1993</td>
    </tr>
    <tr>
      <th>9</th>
      <td>23</td>
      <td>25</td>
      <td>30</td>
      <td>4</td>
      <td>1.799805</td>
      <td>Front-Wheel Drive</td>
      <td>(FFS)</td>
      <td>1700</td>
      <td>Toyota</td>
      <td>Corolla</td>
      <td>Automatic 4-spd</td>
      <td>0</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>1993</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>41134</th>
      <td>18</td>
      <td>20</td>
      <td>24</td>
      <td>4</td>
      <td>2.099609</td>
      <td>Front-Wheel Drive</td>
      <td>(FFS)</td>
      <td>2100</td>
      <td>Saab</td>
      <td>900</td>
      <td>Manual 5-spd</td>
      <td>0</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>1993</td>
    </tr>
    <tr>
      <th>41135</th>
      <td>23</td>
      <td>26</td>
      <td>33</td>
      <td>4</td>
      <td>1.900391</td>
      <td>Front-Wheel Drive</td>
      <td>(TBI)      (FFS)</td>
      <td>1600</td>
      <td>Saturn</td>
      <td>SL</td>
      <td>Automatic 4-spd</td>
      <td>0</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>1993</td>
    </tr>
    <tr>
      <th>41136</th>
      <td>21</td>
      <td>24</td>
      <td>30</td>
      <td>4</td>
      <td>1.900391</td>
      <td>Front-Wheel Drive</td>
      <td>(MFI)      (FFS)</td>
      <td>1750</td>
      <td>Saturn</td>
      <td>SL</td>
      <td>Automatic 4-spd</td>
      <td>0</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>1993</td>
    </tr>
    <tr>
      <th>41137</th>
      <td>24</td>
      <td>28</td>
      <td>33</td>
      <td>4</td>
      <td>1.900391</td>
      <td>Front-Wheel Drive</td>
      <td>(TBI)      (FFS)</td>
      <td>1500</td>
      <td>Saturn</td>
      <td>SL</td>
      <td>Manual 5-spd</td>
      <td>0</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>1993</td>
    </tr>
    <tr>
      <th>41138</th>
      <td>21</td>
      <td>25</td>
      <td>32</td>
      <td>4</td>
      <td>1.900391</td>
      <td>Front-Wheel Drive</td>
      <td>(MFI)      (FFS)</td>
      <td>1700</td>
      <td>Saturn</td>
      <td>SL</td>
      <td>Manual 5-spd</td>
      <td>0</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>1993</td>
    </tr>
    <tr>
      <th>41139</th>
      <td>19</td>
      <td>22</td>
      <td>26</td>
      <td>4</td>
      <td>2.199219</td>
      <td>Front-Wheel Drive</td>
      <td>(FFS)</td>
      <td>1900</td>
      <td>Subaru</td>
      <td>Legacy</td>
      <td>Automatic 4-spd</td>
      <td>0</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>1993</td>
    </tr>
    <tr>
      <th>41140</th>
      <td>20</td>
      <td>23</td>
      <td>28</td>
      <td>4</td>
      <td>2.199219</td>
      <td>Front-Wheel Drive</td>
      <td>(FFS)</td>
      <td>1850</td>
      <td>Subaru</td>
      <td>Legacy</td>
      <td>Manual 5-spd</td>
      <td>0</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>1993</td>
    </tr>
    <tr>
      <th>41141</th>
      <td>18</td>
      <td>21</td>
      <td>24</td>
      <td>4</td>
      <td>2.199219</td>
      <td>4-Wheel or All-Wheel Drive</td>
      <td>(FFS)</td>
      <td>2000</td>
      <td>Subaru</td>
      <td>Legacy AWD</td>
      <td>Automatic 4-spd</td>
      <td>0</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>1993</td>
    </tr>
    <tr>
      <th>41142</th>
      <td>18</td>
      <td>21</td>
      <td>24</td>
      <td>4</td>
      <td>2.199219</td>
      <td>4-Wheel or All-Wheel Drive</td>
      <td>(FFS)</td>
      <td>2000</td>
      <td>Subaru</td>
      <td>Legacy AWD</td>
      <td>Manual 5-spd</td>
      <td>0</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>1993</td>
    </tr>
    <tr>
      <th>41143</th>
      <td>16</td>
      <td>18</td>
      <td>21</td>
      <td>4</td>
      <td>2.199219</td>
      <td>4-Wheel or All-Wheel Drive</td>
      <td>(FFS,TRBO)</td>
      <td>2900</td>
      <td>Subaru</td>
      <td>Legacy AWD Turbo</td>
      <td>Automatic 4-spd</td>
      <td>0</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>1993</td>
    </tr>
  </tbody>
</table>
<p>41144 rows × 14 columns</p>
</div>
</div>
</div>
<div class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1"><span class="co" style="color: #5E5E5E;"># new memory usage</span></span>
<span id="cb37-2">(autos</span>
<span id="cb37-3"> <span class="co" style="color: #5E5E5E;">#[cols]</span></span>
<span id="cb37-4"> .loc[:,cols]</span>
<span id="cb37-5"> .assign(cylinders<span class="op" style="color: #5E5E5E;">=</span>autos.cylinders.fillna(<span class="dv" style="color: #AD0000;">0</span>).astype(<span class="st" style="color: #20794D;">'int8'</span>),</span>
<span id="cb37-6">         displ<span class="op" style="color: #5E5E5E;">=</span>autos.displ.fillna(<span class="dv" style="color: #AD0000;">0</span>).astype(<span class="st" style="color: #20794D;">'float16'</span>))</span>
<span id="cb37-7"> .astype({<span class="st" style="color: #20794D;">'city08'</span>: <span class="st" style="color: #20794D;">'int16'</span>, <span class="st" style="color: #20794D;">'comb08'</span>: <span class="st" style="color: #20794D;">'int16'</span>, <span class="st" style="color: #20794D;">'highway08'</span>: <span class="st" style="color: #20794D;">'int8'</span>,<span class="st" style="color: #20794D;">'fuelCost08'</span>:<span class="st" style="color: #20794D;">'int16'</span>, <span class="st" style="color: #20794D;">'range'</span>:<span class="st" style="color: #20794D;">'int16'</span>, <span class="st" style="color: #20794D;">'year'</span>:<span class="st" style="color: #20794D;">'int16'</span>}) </span>
<span id="cb37-8"> .memory_usage(deep<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb37-9"> .<span class="bu" style="color: null;">sum</span>() <span class="co" style="color: #5E5E5E;"># was 19,647,323</span></span>
<span id="cb37-10">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="25">
<pre><code>17590123</code></pre>
</div>
</div>
<p>A further reduction.</p>
</section>
<section id="objects" class="level2">
<h2 class="anchored" data-anchor-id="objects">Objects</h2>
<p>At the very basic level, Pandas objects can be thought of as enhanced versions of NumPy structured arrays in which the rows and columns are identified with labels rather than simple integer indices.</p>
<div class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1"><span class="co" style="color: #5E5E5E;"># let's take a look at our object columns</span></span>
<span id="cb39-2">(autos</span>
<span id="cb39-3"> [cols]</span>
<span id="cb39-4"> .select_dtypes(<span class="bu" style="color: null;">object</span>)</span>
<span id="cb39-5">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="26">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>drive</th>
      <th>eng_dscr</th>
      <th>make</th>
      <th>model</th>
      <th>trany</th>
      <th>createdOn</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>Rear-Wheel Drive</td>
      <td>(FFS)</td>
      <td>Alfa Romeo</td>
      <td>Spider Veloce 2000</td>
      <td>Manual 5-spd</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
    </tr>
    <tr>
      <th>1</th>
      <td>Rear-Wheel Drive</td>
      <td>(GUZZLER)</td>
      <td>Ferrari</td>
      <td>Testarossa</td>
      <td>Manual 5-spd</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
    </tr>
    <tr>
      <th>2</th>
      <td>Front-Wheel Drive</td>
      <td>(FFS)</td>
      <td>Dodge</td>
      <td>Charger</td>
      <td>Manual 5-spd</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
    </tr>
    <tr>
      <th>3</th>
      <td>Rear-Wheel Drive</td>
      <td>NaN</td>
      <td>Dodge</td>
      <td>B150/B250 Wagon 2WD</td>
      <td>Automatic 3-spd</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
    </tr>
    <tr>
      <th>4</th>
      <td>4-Wheel or All-Wheel Drive</td>
      <td>(FFS,TRBO)</td>
      <td>Subaru</td>
      <td>Legacy AWD Turbo</td>
      <td>Manual 5-spd</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
    </tr>
    <tr>
      <th>5</th>
      <td>Front-Wheel Drive</td>
      <td>(FFS)</td>
      <td>Subaru</td>
      <td>Loyale</td>
      <td>Automatic 3-spd</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
    </tr>
    <tr>
      <th>6</th>
      <td>Front-Wheel Drive</td>
      <td>(FFS)</td>
      <td>Subaru</td>
      <td>Loyale</td>
      <td>Manual 5-spd</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
    </tr>
    <tr>
      <th>7</th>
      <td>Front-Wheel Drive</td>
      <td>(FFS)</td>
      <td>Toyota</td>
      <td>Corolla</td>
      <td>Automatic 3-spd</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
    </tr>
    <tr>
      <th>8</th>
      <td>Front-Wheel Drive</td>
      <td>(FFS)</td>
      <td>Toyota</td>
      <td>Corolla</td>
      <td>Manual 5-spd</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
    </tr>
    <tr>
      <th>9</th>
      <td>Front-Wheel Drive</td>
      <td>(FFS)</td>
      <td>Toyota</td>
      <td>Corolla</td>
      <td>Automatic 4-spd</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>41134</th>
      <td>Front-Wheel Drive</td>
      <td>(FFS)</td>
      <td>Saab</td>
      <td>900</td>
      <td>Manual 5-spd</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
    </tr>
    <tr>
      <th>41135</th>
      <td>Front-Wheel Drive</td>
      <td>(TBI)      (FFS)</td>
      <td>Saturn</td>
      <td>SL</td>
      <td>Automatic 4-spd</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
    </tr>
    <tr>
      <th>41136</th>
      <td>Front-Wheel Drive</td>
      <td>(MFI)      (FFS)</td>
      <td>Saturn</td>
      <td>SL</td>
      <td>Automatic 4-spd</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
    </tr>
    <tr>
      <th>41137</th>
      <td>Front-Wheel Drive</td>
      <td>(TBI)      (FFS)</td>
      <td>Saturn</td>
      <td>SL</td>
      <td>Manual 5-spd</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
    </tr>
    <tr>
      <th>41138</th>
      <td>Front-Wheel Drive</td>
      <td>(MFI)      (FFS)</td>
      <td>Saturn</td>
      <td>SL</td>
      <td>Manual 5-spd</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
    </tr>
    <tr>
      <th>41139</th>
      <td>Front-Wheel Drive</td>
      <td>(FFS)</td>
      <td>Subaru</td>
      <td>Legacy</td>
      <td>Automatic 4-spd</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
    </tr>
    <tr>
      <th>41140</th>
      <td>Front-Wheel Drive</td>
      <td>(FFS)</td>
      <td>Subaru</td>
      <td>Legacy</td>
      <td>Manual 5-spd</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
    </tr>
    <tr>
      <th>41141</th>
      <td>4-Wheel or All-Wheel Drive</td>
      <td>(FFS)</td>
      <td>Subaru</td>
      <td>Legacy AWD</td>
      <td>Automatic 4-spd</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
    </tr>
    <tr>
      <th>41142</th>
      <td>4-Wheel or All-Wheel Drive</td>
      <td>(FFS)</td>
      <td>Subaru</td>
      <td>Legacy AWD</td>
      <td>Manual 5-spd</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
    </tr>
    <tr>
      <th>41143</th>
      <td>4-Wheel or All-Wheel Drive</td>
      <td>(FFS,TRBO)</td>
      <td>Subaru</td>
      <td>Legacy AWD Turbo</td>
      <td>Automatic 4-spd</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
    </tr>
  </tbody>
</table>
<p>41144 rows × 6 columns</p>
</div>
</div>
</div>
<div class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1"><span class="co" style="color: #5E5E5E;">## drive looks categorical</span></span>
<span id="cb40-2">(autos</span>
<span id="cb40-3"> .drive</span>
<span id="cb40-4"> .value_counts(dropna<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span>
<span id="cb40-5">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="27">
<pre><code>Front-Wheel Drive             14236
Rear-Wheel Drive              13831
4-Wheel or All-Wheel Drive     6648
All-Wheel Drive                3015
4-Wheel Drive                  1460
NaN                            1189
2-Wheel Drive                   507
Part-time 4-Wheel Drive         258
Name: drive, dtype: int64</code></pre>
</div>
</div>
<div class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1"><span class="co" style="color: #5E5E5E;"># Where are the missing values NaN ?</span></span>
<span id="cb42-2">(autos</span>
<span id="cb42-3"> [cols]</span>
<span id="cb42-4"> .query(<span class="st" style="color: #20794D;">'drive.isna()'</span>)</span>
<span id="cb42-5">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="28">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>city08</th>
      <th>comb08</th>
      <th>highway08</th>
      <th>cylinders</th>
      <th>displ</th>
      <th>drive</th>
      <th>eng_dscr</th>
      <th>fuelCost08</th>
      <th>make</th>
      <th>model</th>
      <th>trany</th>
      <th>range</th>
      <th>createdOn</th>
      <th>year</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>7138</th>
      <td>81</td>
      <td>85</td>
      <td>91</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>800</td>
      <td>Nissan</td>
      <td>Altra EV</td>
      <td>NaN</td>
      <td>90</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>2000</td>
    </tr>
    <tr>
      <th>8144</th>
      <td>74</td>
      <td>65</td>
      <td>58</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>1000</td>
      <td>Ford</td>
      <td>Th!nk</td>
      <td>NaN</td>
      <td>29</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>2001</td>
    </tr>
    <tr>
      <th>8147</th>
      <td>84</td>
      <td>75</td>
      <td>66</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>900</td>
      <td>Nissan</td>
      <td>Hyper-Mini</td>
      <td>NaN</td>
      <td>33</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>2001</td>
    </tr>
    <tr>
      <th>18217</th>
      <td>18</td>
      <td>21</td>
      <td>25</td>
      <td>4.0</td>
      <td>2.0</td>
      <td>NaN</td>
      <td>(FFS)</td>
      <td>2000</td>
      <td>Alfa Romeo</td>
      <td>Spider Veloce 2000</td>
      <td>Manual 5-spd</td>
      <td>0</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>1984</td>
    </tr>
    <tr>
      <th>18218</th>
      <td>20</td>
      <td>22</td>
      <td>26</td>
      <td>4.0</td>
      <td>1.5</td>
      <td>NaN</td>
      <td>(FFS)</td>
      <td>1900</td>
      <td>Bertone</td>
      <td>X1/9</td>
      <td>Manual 5-spd</td>
      <td>0</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>1984</td>
    </tr>
    <tr>
      <th>18219</th>
      <td>13</td>
      <td>15</td>
      <td>20</td>
      <td>8.0</td>
      <td>5.7</td>
      <td>NaN</td>
      <td>(350 V8) (FFS)</td>
      <td>2800</td>
      <td>Chevrolet</td>
      <td>Corvette</td>
      <td>Automatic 4-spd</td>
      <td>0</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>1984</td>
    </tr>
    <tr>
      <th>18220</th>
      <td>13</td>
      <td>15</td>
      <td>20</td>
      <td>8.0</td>
      <td>5.7</td>
      <td>NaN</td>
      <td>(350 V8) (FFS)</td>
      <td>2800</td>
      <td>Chevrolet</td>
      <td>Corvette</td>
      <td>Manual 4-spd</td>
      <td>0</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>1984</td>
    </tr>
    <tr>
      <th>18221</th>
      <td>15</td>
      <td>17</td>
      <td>20</td>
      <td>6.0</td>
      <td>3.0</td>
      <td>NaN</td>
      <td>(FFS,TRBO)</td>
      <td>2500</td>
      <td>Nissan</td>
      <td>300ZX</td>
      <td>Automatic 4-spd</td>
      <td>0</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>1984</td>
    </tr>
    <tr>
      <th>18222</th>
      <td>16</td>
      <td>18</td>
      <td>20</td>
      <td>6.0</td>
      <td>3.0</td>
      <td>NaN</td>
      <td>(FFS)</td>
      <td>2350</td>
      <td>Nissan</td>
      <td>300ZX</td>
      <td>Automatic 4-spd</td>
      <td>0</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>1984</td>
    </tr>
    <tr>
      <th>18223</th>
      <td>16</td>
      <td>18</td>
      <td>22</td>
      <td>6.0</td>
      <td>3.0</td>
      <td>NaN</td>
      <td>(FFS,TRBO)</td>
      <td>2350</td>
      <td>Nissan</td>
      <td>300ZX</td>
      <td>Manual 5-spd</td>
      <td>0</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>1984</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>20063</th>
      <td>13</td>
      <td>15</td>
      <td>19</td>
      <td>8.0</td>
      <td>5.0</td>
      <td>NaN</td>
      <td>(FFS) CA model</td>
      <td>2800</td>
      <td>Mercury</td>
      <td>Grand Marquis Wagon</td>
      <td>Automatic 4-spd</td>
      <td>0</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>1984</td>
    </tr>
    <tr>
      <th>20064</th>
      <td>13</td>
      <td>15</td>
      <td>20</td>
      <td>8.0</td>
      <td>5.0</td>
      <td>NaN</td>
      <td>(GM-OLDS) CA model</td>
      <td>2800</td>
      <td>Oldsmobile</td>
      <td>Custom Cruiser Wagon</td>
      <td>Automatic 4-spd</td>
      <td>0</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>1984</td>
    </tr>
    <tr>
      <th>20065</th>
      <td>14</td>
      <td>16</td>
      <td>19</td>
      <td>8.0</td>
      <td>5.0</td>
      <td>NaN</td>
      <td>(GM-CHEV) CA model</td>
      <td>2650</td>
      <td>Pontiac</td>
      <td>Parisienne Wagon</td>
      <td>Automatic 4-spd</td>
      <td>0</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>1984</td>
    </tr>
    <tr>
      <th>20387</th>
      <td>14</td>
      <td>14</td>
      <td>15</td>
      <td>4.0</td>
      <td>2.4</td>
      <td>NaN</td>
      <td>(FFS) CA model</td>
      <td>3000</td>
      <td>Nissan</td>
      <td>Pickup Cab Chassis</td>
      <td>Manual 5-spd</td>
      <td>0</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>1984</td>
    </tr>
    <tr>
      <th>21129</th>
      <td>14</td>
      <td>16</td>
      <td>21</td>
      <td>8.0</td>
      <td>3.5</td>
      <td>NaN</td>
      <td>GUZZLER  FFS,TURBO</td>
      <td>3250</td>
      <td>Lotus</td>
      <td>Esprit V8</td>
      <td>Manual 5-spd</td>
      <td>0</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>2002</td>
    </tr>
    <tr>
      <th>23029</th>
      <td>79</td>
      <td>85</td>
      <td>94</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>Lead Acid</td>
      <td>800</td>
      <td>GMC</td>
      <td>EV1</td>
      <td>Automatic (A1)</td>
      <td>55</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>1999</td>
    </tr>
    <tr>
      <th>23030</th>
      <td>35</td>
      <td>37</td>
      <td>39</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NiMH</td>
      <td>1750</td>
      <td>GMC</td>
      <td>EV1</td>
      <td>Automatic (A1)</td>
      <td>105</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>1999</td>
    </tr>
    <tr>
      <th>23032</th>
      <td>49</td>
      <td>48</td>
      <td>46</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>1400</td>
      <td>Honda</td>
      <td>EV Plus</td>
      <td>Automatic (A1)</td>
      <td>81</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>1999</td>
    </tr>
    <tr>
      <th>23037</th>
      <td>49</td>
      <td>48</td>
      <td>46</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>1400</td>
      <td>Honda</td>
      <td>EV Plus</td>
      <td>Automatic (A1)</td>
      <td>81</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>1998</td>
    </tr>
    <tr>
      <th>23040</th>
      <td>102</td>
      <td>98</td>
      <td>94</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>650</td>
      <td>MINI</td>
      <td>MiniE</td>
      <td>Automatic (A1)</td>
      <td>100</td>
      <td>Tue Jan 01 00:00:00 EST 2013</td>
      <td>2008</td>
    </tr>
  </tbody>
</table>
<p>1189 rows × 14 columns</p>
</div>
</div>
</div>
<div class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1"><span class="co" style="color: #5E5E5E;"># let's look at the drive column, grouped by year</span></span>
<span id="cb43-2">(autos</span>
<span id="cb43-3"> [cols]</span>
<span id="cb43-4"> .groupby(<span class="st" style="color: #20794D;">'year'</span>)</span>
<span id="cb43-5"> .drive</span>
<span id="cb43-6"> .nunique()</span>
<span id="cb43-7">) </span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="29">
<pre><code>year
1984    3
1985    4
1986    4
1987    3
1988    3
1989    3
1990    3
1991    3
1992    3
1993    3
1994    3
1995    4
1996    3
1997    4
1998    4
1999    4
2000    4
2001    4
2002    4
2003    4
2004    4
2005    4
2006    4
2007    4
2008    3
2009    4
2010    6
2011    5
2012    5
2013    5
2014    5
2015    5
2016    5
2017    5
2018    5
2019    5
2020    5
Name: drive, dtype: int64</code></pre>
</div>
</div>
<div class="cell" data-execution_count="30">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1"><span class="co" style="color: #5E5E5E;"># let's convert drive to category, replacing NaN with 'Other using .assign .astype</span></span>
<span id="cb45-2"><span class="co" style="color: #5E5E5E;"># and convert make to category, updating .astype dictionary </span></span>
<span id="cb45-3"><span class="co" style="color: #5E5E5E;"># and check our memory usage</span></span>
<span id="cb45-4">(autos</span>
<span id="cb45-5"> [cols]</span>
<span id="cb45-6"> .assign(cylinders<span class="op" style="color: #5E5E5E;">=</span>autos.cylinders.fillna(<span class="dv" style="color: #AD0000;">0</span>).astype(<span class="st" style="color: #20794D;">'int8'</span>),</span>
<span id="cb45-7">         displ<span class="op" style="color: #5E5E5E;">=</span>autos.displ.fillna(<span class="dv" style="color: #AD0000;">0</span>).astype(<span class="st" style="color: #20794D;">'float16'</span>),</span>
<span id="cb45-8">         drive<span class="op" style="color: #5E5E5E;">=</span>autos.drive.fillna(<span class="st" style="color: #20794D;">'Other'</span>).astype(<span class="st" style="color: #20794D;">'category'</span>))</span>
<span id="cb45-9"> .astype({<span class="st" style="color: #20794D;">'city08'</span>: <span class="st" style="color: #20794D;">'int16'</span>, <span class="st" style="color: #20794D;">'comb08'</span>: <span class="st" style="color: #20794D;">'int16'</span>, <span class="st" style="color: #20794D;">'highway08'</span>: <span class="st" style="color: #20794D;">'int8'</span>,<span class="st" style="color: #20794D;">'fuelCost08'</span>:<span class="st" style="color: #20794D;">'int16'</span>, <span class="st" style="color: #20794D;">'range'</span>:<span class="st" style="color: #20794D;">'int16'</span>, <span class="st" style="color: #20794D;">'year'</span>:<span class="st" style="color: #20794D;">'int16'</span>, <span class="st" style="color: #20794D;">'make'</span>: <span class="st" style="color: #20794D;">'category'</span>}) </span>
<span id="cb45-10"> .memory_usage(deep<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb45-11"> .<span class="bu" style="color: null;">sum</span>() <span class="co" style="color: #5E5E5E;"># was 19,647,323</span></span>
<span id="cb45-12">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="30">
<pre><code>12093275</code></pre>
</div>
</div>
<p>As we can see, converting to <strong>category</strong> has freed up a lot of space, a reduction from 17590123 - just over 30%</p>
<div class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1"><span class="co" style="color: #5E5E5E;"># Let's inspect trany </span></span>
<span id="cb47-2"><span class="co" style="color: #5E5E5E;"># looks like it has two pices of info embedded in the column</span></span>
<span id="cb47-3"></span>
<span id="cb47-4">(autos</span>
<span id="cb47-5"> .trany</span>
<span id="cb47-6"> .value_counts(dropna<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span>
<span id="cb47-7">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="31">
<pre><code>Automatic 4-spd                     11047
Manual 5-spd                         8361
Automatic 3-spd                      3151
Automatic (S6)                       3106
Manual 6-spd                         2757
Automatic 5-spd                      2203
Automatic (S8)                       1665
Automatic 6-spd                      1619
Manual 4-spd                         1483
Automatic (S5)                        833
Automatic (variable gear ratios)      826
Automatic 7-spd                       724
Automatic 8-spd                       433
Automatic (AM-S7)                     424
Automatic (S7)                        327
Automatic 9-spd                       293
Automatic (AM7)                       245
Automatic (S4)                        233
Automatic (AV-S6)                     208
Automatic (A1)                        201
Automatic (AM6)                       151
Automatic (AV-S7)                     139
Automatic (S10)                       124
Automatic (AM-S6)                     116
Manual 7-spd                          114
Automatic (S9)                         86
Manual 3-spd                           77
Automatic (AM-S8)                      60
Automatic (AV-S8)                      47
Automatic 10-spd                       25
Manual 4-spd Doubled                   17
Automatic (AM5)                        14
NaN                                    11
Automatic (AV-S10)                     11
Automatic (AM8)                         6
Automatic (AM-S9)                       3
Automatic (L3)                          2
Automatic (L4)                          2
Name: trany, dtype: int64</code></pre>
</div>
</div>
<p>11 NaN values</p>
<p>The information from the <em>trany</em> column seems to have two components:</p>
<ul>
<li>Automatic v Manual</li>
<li>Speed</li>
</ul>
<div class="cell" data-execution_count="32">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1"><span class="co" style="color: #5E5E5E;"># add new columns for automatic using .str.contains</span></span>
<span id="cb49-2"><span class="co" style="color: #5E5E5E;"># add new column for speeds using .str.extract</span></span>
<span id="cb49-3"><span class="co" style="color: #5E5E5E;"># drop exisitng trany column</span></span>
<span id="cb49-4">(autos</span>
<span id="cb49-5"> [cols]</span>
<span id="cb49-6"> .assign(cylinders<span class="op" style="color: #5E5E5E;">=</span>autos.cylinders.fillna(<span class="dv" style="color: #AD0000;">0</span>).astype(<span class="st" style="color: #20794D;">'int8'</span>),</span>
<span id="cb49-7">         displ<span class="op" style="color: #5E5E5E;">=</span>autos.displ.fillna(<span class="dv" style="color: #AD0000;">0</span>).astype(<span class="st" style="color: #20794D;">'float16'</span>),</span>
<span id="cb49-8">         drive<span class="op" style="color: #5E5E5E;">=</span>autos.drive.fillna(<span class="st" style="color: #20794D;">'Other'</span>).astype(<span class="st" style="color: #20794D;">'category'</span>),</span>
<span id="cb49-9">         automatic<span class="op" style="color: #5E5E5E;">=</span>autos.trany.<span class="bu" style="color: null;">str</span>.contains(<span class="st" style="color: #20794D;">'Auto'</span>),</span>
<span id="cb49-10">         speeds<span class="op" style="color: #5E5E5E;">=</span>autos.trany.<span class="bu" style="color: null;">str</span>.extract(<span class="vs" style="color: #20794D;">r'(\d)+'</span>).fillna(<span class="st" style="color: #20794D;">'20'</span>).astype(<span class="st" style="color: #20794D;">'int8'</span>)</span>
<span id="cb49-11">        ) </span>
<span id="cb49-12"> .astype({<span class="st" style="color: #20794D;">'city08'</span>: <span class="st" style="color: #20794D;">'int16'</span>, <span class="st" style="color: #20794D;">'comb08'</span>: <span class="st" style="color: #20794D;">'int16'</span>, <span class="st" style="color: #20794D;">'highway08'</span>: <span class="st" style="color: #20794D;">'int8'</span>,<span class="st" style="color: #20794D;">'fuelCost08'</span>:<span class="st" style="color: #20794D;">'int16'</span>, <span class="st" style="color: #20794D;">'range'</span>:<span class="st" style="color: #20794D;">'int16'</span>, <span class="st" style="color: #20794D;">'year'</span>:<span class="st" style="color: #20794D;">'int16'</span>, <span class="st" style="color: #20794D;">'make'</span>: <span class="st" style="color: #20794D;">'category'</span>}) </span>
<span id="cb49-13"> .drop(columns<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'trany'</span>])</span>
<span id="cb49-14"> .memory_usage(deep<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb49-15"> .<span class="bu" style="color: null;">sum</span>() <span class="co" style="color: #5E5E5E;"># was 19,647,323</span></span>
<span id="cb49-16">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="32">
<pre><code>10631047</code></pre>
</div>
</div>
<p>Great, another reduction - we have almost halved our original memory usage.</p>
</section>
<section id="dates" class="level2">
<h2 class="anchored" data-anchor-id="dates">Dates</h2>
<p>pandas contains extensive capabilities and features for working with time series data for all domains. Check out the <a href="https://pandas.pydata.org/docs/user_guide/timeseries.html#overview">documentation</a> for more info.</p>
<p>We can convert the <em>CreatedOn</em> column from an object to datetime <a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.dt.tz_localize.html">using</a>.</p>
<div class="cell" data-execution_count="33">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1"><span class="co" style="color: #5E5E5E;"># add createdOn using pd.to_datetime .dt.tz_localize</span></span>
<span id="cb51-2">(autos</span>
<span id="cb51-3"> [cols]</span>
<span id="cb51-4"> .assign(cylinders<span class="op" style="color: #5E5E5E;">=</span>autos.cylinders.fillna(<span class="dv" style="color: #AD0000;">0</span>).astype(<span class="st" style="color: #20794D;">'int8'</span>),</span>
<span id="cb51-5">         displ<span class="op" style="color: #5E5E5E;">=</span>autos.displ.fillna(<span class="dv" style="color: #AD0000;">0</span>).astype(<span class="st" style="color: #20794D;">'float16'</span>),</span>
<span id="cb51-6">         drive<span class="op" style="color: #5E5E5E;">=</span>autos.drive.fillna(<span class="st" style="color: #20794D;">'Other'</span>).astype(<span class="st" style="color: #20794D;">'category'</span>),</span>
<span id="cb51-7">         automatic<span class="op" style="color: #5E5E5E;">=</span>autos.trany.<span class="bu" style="color: null;">str</span>.contains(<span class="st" style="color: #20794D;">'Auto'</span>),</span>
<span id="cb51-8">         speeds<span class="op" style="color: #5E5E5E;">=</span>autos.trany.<span class="bu" style="color: null;">str</span>.extract(<span class="vs" style="color: #20794D;">r'(\d)+'</span>).fillna(<span class="st" style="color: #20794D;">'20'</span>).astype(<span class="st" style="color: #20794D;">'int8'</span>),</span>
<span id="cb51-9">         createdOn<span class="op" style="color: #5E5E5E;">=</span>pd.to_datetime(autos.createdOn).dt.tz_localize(<span class="st" style="color: #20794D;">'America/New_York'</span>)</span>
<span id="cb51-10">        ) </span>
<span id="cb51-11"> .astype({<span class="st" style="color: #20794D;">'city08'</span>: <span class="st" style="color: #20794D;">'int16'</span>, <span class="st" style="color: #20794D;">'comb08'</span>: <span class="st" style="color: #20794D;">'int16'</span>, <span class="st" style="color: #20794D;">'highway08'</span>: <span class="st" style="color: #20794D;">'int8'</span>,<span class="st" style="color: #20794D;">'fuelCost08'</span>:<span class="st" style="color: #20794D;">'int16'</span>, <span class="st" style="color: #20794D;">'range'</span>:<span class="st" style="color: #20794D;">'int16'</span>, <span class="st" style="color: #20794D;">'year'</span>:<span class="st" style="color: #20794D;">'int16'</span>, <span class="st" style="color: #20794D;">'make'</span>: <span class="st" style="color: #20794D;">'category'</span>}) </span>
<span id="cb51-12"> .drop(columns<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'trany'</span>])</span>
<span id="cb51-13"> .memory_usage(deep<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb51-14"> .<span class="bu" style="color: null;">sum</span>() <span class="co" style="color: #5E5E5E;"># was 19,647,323</span></span>
<span id="cb51-15">)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/home/stephen137/mambaforge/lib/python3.10/site-packages/dateutil/parser/_parser.py:1207: UnknownTimezoneWarning: tzname EST identified but not understood.  Pass `tzinfos` argument in order to correctly return a timezone-aware datetime.  In a future version, this will raise an exception.
  warnings.warn("tzname {tzname} identified but not understood.  "
/home/stephen137/mambaforge/lib/python3.10/site-packages/dateutil/parser/_parser.py:1207: UnknownTimezoneWarning: tzname EDT identified but not understood.  Pass `tzinfos` argument in order to correctly return a timezone-aware datetime.  In a future version, this will raise an exception.
  warnings.warn("tzname {tzname} identified but not understood.  "</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="33">
<pre><code>7462959</code></pre>
</div>
</div>
<p>Excellent, we have successfully reduced our memory usage by 62%!</p>
<div class="cell" data-execution_count="34">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb54-1"><span class="co" style="color: #5E5E5E;"># Pythom doesn't like EST/EDT</span></span>
<span id="cb54-2">(autos</span>
<span id="cb54-3"> [cols]</span>
<span id="cb54-4"> .createdOn</span>
<span id="cb54-5">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="34">
<pre><code>0        Tue Jan 01 00:00:00 EST 2013
1        Tue Jan 01 00:00:00 EST 2013
2        Tue Jan 01 00:00:00 EST 2013
3        Tue Jan 01 00:00:00 EST 2013
4        Tue Jan 01 00:00:00 EST 2013
5        Tue Jan 01 00:00:00 EST 2013
6        Tue Jan 01 00:00:00 EST 2013
7        Tue Jan 01 00:00:00 EST 2013
8        Tue Jan 01 00:00:00 EST 2013
9        Tue Jan 01 00:00:00 EST 2013
                     ...             
41134    Tue Jan 01 00:00:00 EST 2013
41135    Tue Jan 01 00:00:00 EST 2013
41136    Tue Jan 01 00:00:00 EST 2013
41137    Tue Jan 01 00:00:00 EST 2013
41138    Tue Jan 01 00:00:00 EST 2013
41139    Tue Jan 01 00:00:00 EST 2013
41140    Tue Jan 01 00:00:00 EST 2013
41141    Tue Jan 01 00:00:00 EST 2013
41142    Tue Jan 01 00:00:00 EST 2013
41143    Tue Jan 01 00:00:00 EST 2013
Name: createdOn, Length: 41144, dtype: object</code></pre>
</div>
</div>
<div class="cell" data-execution_count="35">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb56-1"><span class="co" style="color: #5E5E5E;"># Fix date warnings - move on to eng_dscr</span></span>
<span id="cb56-2"><span class="co" style="color: #5E5E5E;"># https://www.fueleconomy.gov/feg/findacarhelp.shtml</span></span>
<span id="cb56-3">(autos</span>
<span id="cb56-4"> [cols]</span>
<span id="cb56-5"> .assign(cylinders<span class="op" style="color: #5E5E5E;">=</span>autos.cylinders.fillna(<span class="dv" style="color: #AD0000;">0</span>).astype(<span class="st" style="color: #20794D;">'int8'</span>),</span>
<span id="cb56-6">         displ<span class="op" style="color: #5E5E5E;">=</span>autos.displ.fillna(<span class="dv" style="color: #AD0000;">0</span>).astype(<span class="st" style="color: #20794D;">'float16'</span>),</span>
<span id="cb56-7">         drive<span class="op" style="color: #5E5E5E;">=</span>autos.drive.fillna(<span class="st" style="color: #20794D;">'Other'</span>).astype(<span class="st" style="color: #20794D;">'category'</span>),</span>
<span id="cb56-8">         automatic<span class="op" style="color: #5E5E5E;">=</span>autos.trany.<span class="bu" style="color: null;">str</span>.contains(<span class="st" style="color: #20794D;">'Auto'</span>),</span>
<span id="cb56-9">         speeds<span class="op" style="color: #5E5E5E;">=</span>autos.trany.<span class="bu" style="color: null;">str</span>.extract(<span class="vs" style="color: #20794D;">r'(\d)+'</span>).fillna(<span class="st" style="color: #20794D;">'20'</span>).astype(<span class="st" style="color: #20794D;">'int8'</span>),</span>
<span id="cb56-10">         createdOn<span class="op" style="color: #5E5E5E;">=</span>pd.to_datetime(autos.createdOn.replace({<span class="st" style="color: #20794D;">'EDT'</span>: <span class="st" style="color: #20794D;">'-04:00'</span>, <span class="st" style="color: #20794D;">'EST'</span>:<span class="st" style="color: #20794D;">'-05:00'</span>}, regex<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>))</span>
<span id="cb56-11">        ) </span>
<span id="cb56-12"> .astype({<span class="st" style="color: #20794D;">'city08'</span>: <span class="st" style="color: #20794D;">'int16'</span>, <span class="st" style="color: #20794D;">'comb08'</span>: <span class="st" style="color: #20794D;">'int16'</span>, <span class="st" style="color: #20794D;">'highway08'</span>: <span class="st" style="color: #20794D;">'int8'</span>,<span class="st" style="color: #20794D;">'fuelCost08'</span>:<span class="st" style="color: #20794D;">'int16'</span>, <span class="st" style="color: #20794D;">'range'</span>:<span class="st" style="color: #20794D;">'int16'</span>, <span class="st" style="color: #20794D;">'year'</span>:<span class="st" style="color: #20794D;">'int16'</span>, <span class="st" style="color: #20794D;">'make'</span>: <span class="st" style="color: #20794D;">'category'</span>}) </span>
<span id="cb56-13"> .drop(columns<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'trany'</span>])</span>
<span id="cb56-14"> .eng_dscr</span>
<span id="cb56-15"> .value_counts(dropna<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span>
<span id="cb56-16">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="35">
<pre><code>NaN                                 16153
(FFS)                                8827
SIDI                                 5526
(FFS) CA model                        926
(FFS)      (MPFI)                     734
FFV                                   701
(FFS,TRBO)                            666
(350 V8) (FFS)                        411
(GUZZLER)  (FFS)                      366
SOHC                                  354
                                    ...  
B234L/R4 (FFS,TRBO)                     1
GUZZLER V8 FFS,TURBO                    1
4.6M FFS MPFI                           1
CNG FFS                                 1
POLICE FFS MPFI                         1
B308E5 FFS,TURBO                        1
5.4E-R FFS MPFI                         1
V-6 FFS                                 1
(GUZZLER)  (FFS)      (S-CHARGE)        1
R-ENG (FFS,TRBO)                        1
Name: eng_dscr, Length: 558, dtype: int64</code></pre>
</div>
</div>
<p>As we can see the majority of values within the <em>eng_dscr</em> column are NaN and the other values are very messy. How should we deal with this?</p>
<div class="cell" data-execution_count="36">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb58-1"><span class="co" style="color: #5E5E5E;"># drop eng_dscr column, and bring in an FFS column (feedback fuel system)</span></span>
<span id="cb58-2"><span class="co" style="color: #5E5E5E;"># check update to memory usage</span></span>
<span id="cb58-3"></span>
<span id="cb58-4">(autos</span>
<span id="cb58-5"> [cols]</span>
<span id="cb58-6"> .assign(cylinders<span class="op" style="color: #5E5E5E;">=</span>autos.cylinders.fillna(<span class="dv" style="color: #AD0000;">0</span>).astype(<span class="st" style="color: #20794D;">'int8'</span>),</span>
<span id="cb58-7">         displ<span class="op" style="color: #5E5E5E;">=</span>autos.displ.fillna(<span class="dv" style="color: #AD0000;">0</span>).astype(<span class="st" style="color: #20794D;">'float16'</span>),</span>
<span id="cb58-8">         drive<span class="op" style="color: #5E5E5E;">=</span>autos.drive.fillna(<span class="st" style="color: #20794D;">'Other'</span>).astype(<span class="st" style="color: #20794D;">'category'</span>),</span>
<span id="cb58-9">         automatic<span class="op" style="color: #5E5E5E;">=</span>autos.trany.<span class="bu" style="color: null;">str</span>.contains(<span class="st" style="color: #20794D;">'Auto'</span>),</span>
<span id="cb58-10">         speeds<span class="op" style="color: #5E5E5E;">=</span>autos.trany.<span class="bu" style="color: null;">str</span>.extract(<span class="vs" style="color: #20794D;">r'(\d)+'</span>).fillna(<span class="st" style="color: #20794D;">'20'</span>).astype(<span class="st" style="color: #20794D;">'int8'</span>),</span>
<span id="cb58-11">         createdOn<span class="op" style="color: #5E5E5E;">=</span>pd.to_datetime(autos.createdOn.replace({<span class="st" style="color: #20794D;">'EDT'</span>: <span class="st" style="color: #20794D;">'-04:00'</span>, <span class="st" style="color: #20794D;">'EST'</span>:<span class="st" style="color: #20794D;">'-05:00'</span>}, regex<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)),</span>
<span id="cb58-12">         ffs<span class="op" style="color: #5E5E5E;">=</span>autos.eng_dscr.<span class="bu" style="color: null;">str</span>.contains(<span class="st" style="color: #20794D;">'FFS'</span>)</span>
<span id="cb58-13">        ) </span>
<span id="cb58-14"> .astype({<span class="st" style="color: #20794D;">'city08'</span>: <span class="st" style="color: #20794D;">'int16'</span>, <span class="st" style="color: #20794D;">'comb08'</span>: <span class="st" style="color: #20794D;">'int16'</span>, <span class="st" style="color: #20794D;">'highway08'</span>: <span class="st" style="color: #20794D;">'int8'</span>,<span class="st" style="color: #20794D;">'fuelCost08'</span>:<span class="st" style="color: #20794D;">'int16'</span>, <span class="st" style="color: #20794D;">'range'</span>:<span class="st" style="color: #20794D;">'int16'</span>, <span class="st" style="color: #20794D;">'year'</span>:<span class="st" style="color: #20794D;">'int16'</span>, <span class="st" style="color: #20794D;">'make'</span>: <span class="st" style="color: #20794D;">'category'</span>}) </span>
<span id="cb58-15"> .drop(columns<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'trany'</span>,<span class="st" style="color: #20794D;">'eng_dscr'</span>])</span>
<span id="cb58-16"> .memory_usage(deep<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb58-17"> .<span class="bu" style="color: null;">sum</span>() <span class="co" style="color: #5E5E5E;"># was 19,647,323</span></span>
<span id="cb58-18">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="36">
<pre><code>8676214</code></pre>
</div>
</div>
</section>
<section id="functions---.apply" class="level2">
<h2 class="anchored" data-anchor-id="functions---.apply">Functions - .apply</h2>
<p>Let’s now create a function which brings together all the exploratory data analysis we have performed in one place:</p>
<div class="cell" data-execution_count="37">
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb60-1"><span class="kw" style="color: #003B4F;">def</span> autos_tweak(autos):</span>
<span id="cb60-2">    cols <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'city08'</span>,<span class="st" style="color: #20794D;">'comb08'</span>, <span class="st" style="color: #20794D;">'highway08'</span>,<span class="st" style="color: #20794D;">'cylinders'</span>, <span class="st" style="color: #20794D;">'displ'</span>, <span class="st" style="color: #20794D;">'drive'</span>, <span class="st" style="color: #20794D;">'eng_dscr'</span>, <span class="st" style="color: #20794D;">'fuelCost08'</span>,</span>
<span id="cb60-3">      <span class="st" style="color: #20794D;">'make'</span>, <span class="st" style="color: #20794D;">'model'</span>, <span class="st" style="color: #20794D;">'trany'</span>, <span class="st" style="color: #20794D;">'range'</span>, <span class="st" style="color: #20794D;">'createdOn'</span>, <span class="st" style="color: #20794D;">'year'</span>]</span>
<span id="cb60-4">    <span class="cf" style="color: #003B4F;">return</span> (autos</span>
<span id="cb60-5">    [cols]</span>
<span id="cb60-6">    .assign(cylinders<span class="op" style="color: #5E5E5E;">=</span>autos.cylinders.fillna(<span class="dv" style="color: #AD0000;">0</span>).astype(<span class="st" style="color: #20794D;">'int8'</span>),</span>
<span id="cb60-7">         displ<span class="op" style="color: #5E5E5E;">=</span>autos.displ.fillna(<span class="dv" style="color: #AD0000;">0</span>).astype(<span class="st" style="color: #20794D;">'float16'</span>),</span>
<span id="cb60-8">         drive<span class="op" style="color: #5E5E5E;">=</span>autos.drive.fillna(<span class="st" style="color: #20794D;">'Other'</span>).astype(<span class="st" style="color: #20794D;">'category'</span>),</span>
<span id="cb60-9">         automatic<span class="op" style="color: #5E5E5E;">=</span>autos.trany.<span class="bu" style="color: null;">str</span>.contains(<span class="st" style="color: #20794D;">'Auto'</span>),</span>
<span id="cb60-10">         speeds<span class="op" style="color: #5E5E5E;">=</span>autos.trany.<span class="bu" style="color: null;">str</span>.extract(<span class="vs" style="color: #20794D;">r'(\d)+'</span>).fillna(<span class="st" style="color: #20794D;">'20'</span>).astype(<span class="st" style="color: #20794D;">'int8'</span>),</span>
<span id="cb60-11">         createdOn<span class="op" style="color: #5E5E5E;">=</span>pd.to_datetime(autos.createdOn.replace({<span class="st" style="color: #20794D;">'EDT'</span>: <span class="st" style="color: #20794D;">'-04:00'</span>, <span class="st" style="color: #20794D;">'EST'</span>:<span class="st" style="color: #20794D;">'-05:00'</span>}, regex<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)),</span>
<span id="cb60-12">         ffs<span class="op" style="color: #5E5E5E;">=</span>autos.eng_dscr.<span class="bu" style="color: null;">str</span>.contains(<span class="st" style="color: #20794D;">'FFS'</span>)</span>
<span id="cb60-13">        ) </span>
<span id="cb60-14">    .astype({<span class="st" style="color: #20794D;">'city08'</span>: <span class="st" style="color: #20794D;">'int16'</span>, <span class="st" style="color: #20794D;">'comb08'</span>: <span class="st" style="color: #20794D;">'int16'</span>,  <span class="st" style="color: #20794D;">'highway08'</span>: <span class="st" style="color: #20794D;">'int8'</span>,<span class="st" style="color: #20794D;">'fuelCost08'</span>:<span class="st" style="color: #20794D;">'int16'</span>, <span class="st" style="color: #20794D;">'range'</span>:<span class="st" style="color: #20794D;">'int16'</span>, <span class="st" style="color: #20794D;">'year'</span>:<span class="st" style="color: #20794D;">'int16'</span>, <span class="st" style="color: #20794D;">'make'</span>: <span class="st" style="color: #20794D;">'category'</span>}) </span>
<span id="cb60-15">    .drop(columns<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'trany'</span>,<span class="st" style="color: #20794D;">'eng_dscr'</span>])</span>
<span id="cb60-16">    )</span></code></pre></div>
</div>
<p>Look how neat and tidy the above code is compared to the following alternative approach:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb61-1">a1 <span class="op" style="color: #5E5E5E;">=</span> autos[cols]</span>
<span id="cb61-2">cyls <span class="op" style="color: #5E5E5E;">=</span> autos.cylinders.fillna(<span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb61-3">cyls2 <span class="op" style="color: #5E5E5E;">=</span> cyls.astype(<span class="st" style="color: #20794D;">'int8'</span>)</span>
<span id="cb61-4">a1[<span class="st" style="color: #20794D;">'cylinders'</span>] <span class="op" style="color: #5E5E5E;">=</span> cyls2</span>
<span id="cb61-5">displ <span class="op" style="color: #5E5E5E;">=</span> a1.displ</span>
<span id="cb61-6">displ2 <span class="op" style="color: #5E5E5E;">=</span> displ.fillna(<span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb61-7">displ3<span class="op" style="color: #5E5E5E;">=</span>displ2.astype(<span class="st" style="color: #20794D;">'float16'</span>)</span>
<span id="cb61-8">a1.displ<span class="op" style="color: #5E5E5E;">=</span>displ3</span>
<span id="cb61-9">a1.drive<span class="op" style="color: #5E5E5E;">=</span>autos.drive.fillna(<span class="st" style="color: #20794D;">'Other'</span>).astype(<span class="st" style="color: #20794D;">'category'</span>)</span>
<span id="cb61-10">a1[<span class="st" style="color: #20794D;">'automatic'</span>] <span class="op" style="color: #5E5E5E;">=</span> autos.trany.<span class="bu" style="color: null;">str</span>.contains(<span class="st" style="color: #20794D;">'Auto'</span>)</span>
<span id="cb61-11">speed<span class="op" style="color: #5E5E5E;">=</span>autos.trany.<span class="bu" style="color: null;">str</span>.extract(<span class="vs" style="color: #20794D;">r'(\d)+'</span>)</span>
<span id="cb61-12">speedfill <span class="op" style="color: #5E5E5E;">=</span> speed.fillna(<span class="st" style="color: #20794D;">'20'</span>)</span>
<span id="cb61-13">speedint <span class="op" style="color: #5E5E5E;">=</span> speedfill.astype(<span class="st" style="color: #20794D;">'int8'</span>)</span>
<span id="cb61-14">a1[<span class="st" style="color: #20794D;">'speeds'</span>] <span class="op" style="color: #5E5E5E;">=</span> speedint</span>
<span id="cb61-15">a1.createdOn<span class="op" style="color: #5E5E5E;">=</span>pd.to_datetime(autos.createdOn).dt.tz_localize(<span class="st" style="color: #20794D;">'America/New_York'</span>)</span>
<span id="cb61-16">a1.ffs<span class="op" style="color: #5E5E5E;">=</span>autos.eng_dscr.<span class="bu" style="color: null;">str</span>.contains(<span class="st" style="color: #20794D;">'FFS'</span>)</span>
<span id="cb61-17">a1[<span class="st" style="color: #20794D;">'highway08'</span>] <span class="op" style="color: #5E5E5E;">=</span> autos.highway08.astype(<span class="st" style="color: #20794D;">'int8'</span>)</span>
<span id="cb61-18">a1[<span class="st" style="color: #20794D;">'city08'</span>] <span class="op" style="color: #5E5E5E;">=</span> autos.city08.astype(<span class="st" style="color: #20794D;">'int8'</span>)</span>
<span id="cb61-19">a1[<span class="st" style="color: #20794D;">'comb08'</span>] <span class="op" style="color: #5E5E5E;">=</span> autos.comb08.astype(<span class="st" style="color: #20794D;">'int16'</span>)</span>
<span id="cb61-20">a1[<span class="st" style="color: #20794D;">'fuelCost08'</span>] <span class="op" style="color: #5E5E5E;">=</span>autos.fuelCost08.astype(<span class="st" style="color: #20794D;">'int16'</span>)</span>
<span id="cb61-21">a1[<span class="st" style="color: #20794D;">'range'</span>] <span class="op" style="color: #5E5E5E;">=</span> autos.<span class="bu" style="color: null;">range</span>.astype(<span class="st" style="color: #20794D;">'int16'</span>)</span>
<span id="cb61-22">a1[<span class="st" style="color: #20794D;">'make'</span>] <span class="op" style="color: #5E5E5E;">=</span> autos.make.astype(<span class="st" style="color: #20794D;">'category'</span>)</span>
<span id="cb61-23">a3 <span class="op" style="color: #5E5E5E;">=</span> a1.drop(columns<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'trany'</span>,<span class="st" style="color: #20794D;">'eng_dscr'</span>])</span></code></pre></div>
</div>
</section>
<section id="dont-mutate" class="level2">
<h2 class="anchored" data-anchor-id="dont-mutate">Don’t Mutate</h2>
<p>“you are missing the point, inplace <em>rarely</em> actually does something inplace. you are <em>thinking</em> that you are saving memory but you are not.”</p>
<p><strong>jreback</strong> - Pandas core dev</p>
<pre><code>https://github.com/pandas-dev/pandas/issues/16529#issuecomment-676518136</code></pre>
<ul>
<li>in general, no performance benefits</li>
<li>prohibits chaining</li>
<li>SettingWithCopyWarning fun</li>
</ul>
</section>
<section id="try-to-avoid-using-.apply-where-possible" class="level2">
<h2 class="anchored" data-anchor-id="try-to-avoid-using-.apply-where-possible">Try to avoid using .apply (where possible)</h2>
<div class="cell" data-execution_count="39">
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb63-1"><span class="kw" style="color: #003B4F;">def</span> autos_tweak(autos):</span>
<span id="cb63-2">    cols <span class="op" style="color: #5E5E5E;">=</span> [<span class="st" style="color: #20794D;">'city08'</span>,<span class="st" style="color: #20794D;">'comb08'</span>, <span class="st" style="color: #20794D;">'highway08'</span>,<span class="st" style="color: #20794D;">'cylinders'</span>, <span class="st" style="color: #20794D;">'displ'</span>, <span class="st" style="color: #20794D;">'drive'</span>, <span class="st" style="color: #20794D;">'eng_dscr'</span>, <span class="st" style="color: #20794D;">'fuelCost08'</span>,</span>
<span id="cb63-3">      <span class="st" style="color: #20794D;">'make'</span>, <span class="st" style="color: #20794D;">'model'</span>, <span class="st" style="color: #20794D;">'trany'</span>, <span class="st" style="color: #20794D;">'range'</span>, <span class="st" style="color: #20794D;">'createdOn'</span>, <span class="st" style="color: #20794D;">'year'</span>]</span>
<span id="cb63-4">    <span class="cf" style="color: #003B4F;">return</span> (autos</span>
<span id="cb63-5">    [cols]</span>
<span id="cb63-6">    .assign(cylinders<span class="op" style="color: #5E5E5E;">=</span>autos.cylinders.fillna(<span class="dv" style="color: #AD0000;">0</span>).astype(<span class="st" style="color: #20794D;">'int8'</span>),</span>
<span id="cb63-7">         displ<span class="op" style="color: #5E5E5E;">=</span>autos.displ.fillna(<span class="dv" style="color: #AD0000;">0</span>).astype(<span class="st" style="color: #20794D;">'float16'</span>),</span>
<span id="cb63-8">         drive<span class="op" style="color: #5E5E5E;">=</span>autos.drive.fillna(<span class="st" style="color: #20794D;">'Other'</span>).astype(<span class="st" style="color: #20794D;">'category'</span>),</span>
<span id="cb63-9">         automatic<span class="op" style="color: #5E5E5E;">=</span>autos.trany.<span class="bu" style="color: null;">str</span>.contains(<span class="st" style="color: #20794D;">'Auto'</span>),</span>
<span id="cb63-10">         speeds<span class="op" style="color: #5E5E5E;">=</span>autos.trany.<span class="bu" style="color: null;">str</span>.extract(<span class="vs" style="color: #20794D;">r'(\d)+'</span>).fillna(<span class="st" style="color: #20794D;">'20'</span>).astype(<span class="st" style="color: #20794D;">'int8'</span>),</span>
<span id="cb63-11">         createdOn<span class="op" style="color: #5E5E5E;">=</span>pd.to_datetime(autos.createdOn.replace({<span class="st" style="color: #20794D;">'EDT'</span>: <span class="st" style="color: #20794D;">'-04:00'</span>, <span class="st" style="color: #20794D;">'EST'</span>:<span class="st" style="color: #20794D;">'-05:00'</span>}, regex<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)),</span>
<span id="cb63-12">         ffs<span class="op" style="color: #5E5E5E;">=</span>autos.eng_dscr.<span class="bu" style="color: null;">str</span>.contains(<span class="st" style="color: #20794D;">'FFS'</span>)</span>
<span id="cb63-13">        ) </span>
<span id="cb63-14">    .astype({<span class="st" style="color: #20794D;">'city08'</span>: <span class="st" style="color: #20794D;">'int16'</span>, <span class="st" style="color: #20794D;">'comb08'</span>: <span class="st" style="color: #20794D;">'int16'</span>,  <span class="st" style="color: #20794D;">'highway08'</span>: <span class="st" style="color: #20794D;">'int8'</span>,<span class="st" style="color: #20794D;">'fuelCost08'</span>:<span class="st" style="color: #20794D;">'int16'</span>, <span class="st" style="color: #20794D;">'range'</span>:<span class="st" style="color: #20794D;">'int16'</span>, <span class="st" style="color: #20794D;">'year'</span>:<span class="st" style="color: #20794D;">'int16'</span>, <span class="st" style="color: #20794D;">'make'</span>: <span class="st" style="color: #20794D;">'category'</span>}) </span>
<span id="cb63-15">    .drop(columns<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'trany'</span>,<span class="st" style="color: #20794D;">'eng_dscr'</span>])</span>
<span id="cb63-16">    )</span>
<span id="cb63-17"></span>
<span id="cb63-18">autos2 <span class="op" style="color: #5E5E5E;">=</span> autos_tweak(autos)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="40">
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb64-1"><span class="co" style="color: #5E5E5E;"># try to be more Euro-centric</span></span>
<span id="cb64-2"><span class="kw" style="color: #003B4F;">def</span> to_lper100km(val):</span>
<span id="cb64-3">    <span class="cf" style="color: #003B4F;">return</span> <span class="fl" style="color: #AD0000;">235.215</span> <span class="op" style="color: #5E5E5E;">/</span> val</span></code></pre></div>
</div>
<div class="cell" data-execution_count="41">
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb65-1"><span class="op" style="color: #5E5E5E;">%%</span>timeit</span>
<span id="cb65-2">autos2.city08.<span class="bu" style="color: null;">apply</span>(to_lper100km)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>5.3 ms ± 390 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)</code></pre>
</div>
</div>
<p>4.95 ms (milliseconds) is equivalent to 4,950 μs (microseconds)</p>
<p>There is a lot of computational overhead using this method - the function pulls out each individual entry from the Series, convert it to a Python object, pass the individual entry into the function, and then convert back to a pandas object.</p>
<div class="cell" data-execution_count="42">
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb67-1"><span class="op" style="color: #5E5E5E;">%%</span>timeit</span>
<span id="cb67-2"><span class="co" style="color: #5E5E5E;"># note that you can't run %%timeit with a leading #comment</span></span>
<span id="cb67-3"><span class="co" style="color: #5E5E5E;"># this gives the same results</span></span>
<span id="cb67-4"><span class="fl" style="color: #AD0000;">235.215</span> <span class="op" style="color: #5E5E5E;">/</span> autos2.city08</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>84.5 µs ± 3.29 µs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)</code></pre>
</div>
</div>
<p>90.7 μs (microseconds)</p>
<p>This gives the same answer but is more than 50 x faster than using the .apply method, because it is leveraging modern CPU <a href="https://en.wikipedia.org/wiki/Single_instruction,_multiple_data">single instruction multiple data</a> (SIMD) architecture - here’s a block of data - do the division on it.</p>
<div class="cell" data-execution_count="43">
<div class="sourceCode cell-code" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb69-1"><span class="co" style="color: #5E5E5E;"># create a function to return whether the make of the car is US</span></span>
<span id="cb69-2"><span class="kw" style="color: #003B4F;">def</span> is_american(val):</span>
<span id="cb69-3">    <span class="cf" style="color: #003B4F;">return</span> val <span class="kw" style="color: #003B4F;">in</span> {<span class="st" style="color: #20794D;">'Chevrolet'</span>, <span class="st" style="color: #20794D;">'Ford'</span>, <span class="st" style="color: #20794D;">'Dodge'</span>, <span class="st" style="color: #20794D;">'GMC'</span>, <span class="st" style="color: #20794D;">'Tesla'</span>}</span></code></pre></div>
</div>
<div class="cell" data-execution_count="44">
<div class="sourceCode cell-code" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb70-1"><span class="op" style="color: #5E5E5E;">%%</span>timeit</span>
<span id="cb70-2"></span>
<span id="cb70-3"><span class="co" style="color: #5E5E5E;"># use .apply</span></span>
<span id="cb70-4">autos2.make.<span class="bu" style="color: null;">apply</span>(is_american)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>233 µs ± 6.36 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)</code></pre>
</div>
</div>
<p>245 μs (microseconds)</p>
<div class="cell" data-execution_count="45">
<div class="sourceCode cell-code" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb72-1"><span class="op" style="color: #5E5E5E;">%%</span>timeit</span>
<span id="cb72-2"></span>
<span id="cb72-3"><span class="co" style="color: #5E5E5E;"># use .isin </span></span>
<span id="cb72-4">autos2.make.isin({<span class="st" style="color: #20794D;">'Chevrolet'</span>, <span class="st" style="color: #20794D;">'Ford'</span>, <span class="st" style="color: #20794D;">'Dodge'</span>, <span class="st" style="color: #20794D;">'GMC'</span>, <span class="st" style="color: #20794D;">'Tesla'</span>})</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>448 µs ± 9.32 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)</code></pre>
</div>
</div>
<p>465 μs (microseconds)</p>
<div class="cell" data-execution_count="46">
<div class="sourceCode cell-code" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb74-1"><span class="op" style="color: #5E5E5E;">%%</span>timeit</span>
<span id="cb74-2"></span>
<span id="cb74-3"><span class="co" style="color: #5E5E5E;"># use .astype(str) and then .isin</span></span>
<span id="cb74-4">autos2.make.astype(<span class="bu" style="color: null;">str</span>).isin({<span class="st" style="color: #20794D;">'Chevrolet'</span>, <span class="st" style="color: #20794D;">'Ford'</span>, <span class="st" style="color: #20794D;">'Dodge'</span>, <span class="st" style="color: #20794D;">'GMC'</span>, <span class="st" style="color: #20794D;">'Tesla'</span>})</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>4.91 ms ± 65.2 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)</code></pre>
</div>
</div>
<p>5.35 ms (milliseconds) is equivalent to 5,350 μs (microseconds)</p>
<div class="cell" data-execution_count="47">
<div class="sourceCode cell-code" id="cb76" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb76-1"><span class="op" style="color: #5E5E5E;">%%</span>timeit</span>
<span id="cb76-2"></span>
<span id="cb76-3"><span class="co" style="color: #5E5E5E;"># use .astype(str) and then .apply</span></span>
<span id="cb76-4">autos2.make.astype(<span class="bu" style="color: null;">str</span>).<span class="bu" style="color: null;">apply</span>(is_american)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>8.23 ms ± 241 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)</code></pre>
</div>
</div>
<p>8.93 ms (milliseconds) is equivalent to 8,930 μs (microseconds)</p>
<p>In the case of the categorical column - make:</p>
<ul>
<li>the .apply method on the function was fastest</li>
<li>the .isin method was next fastest (~ 2 x slower)</li>
<li>third fastest was (~ 22 x slower)</li>
<li>finally the .astype(str).apply method (~36 x slower)</li>
</ul>
<div class="cell" data-execution_count="48">
<div class="sourceCode cell-code" id="cb78" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb78-1"><span class="kw" style="color: #003B4F;">def</span> country(val):</span>
<span id="cb78-2">    <span class="cf" style="color: #003B4F;">if</span> val <span class="kw" style="color: #003B4F;">in</span> {<span class="st" style="color: #20794D;">'Chevrolet'</span>, <span class="st" style="color: #20794D;">'Ford'</span>, <span class="st" style="color: #20794D;">'Dodge'</span>, <span class="st" style="color: #20794D;">'GMC'</span>, <span class="st" style="color: #20794D;">'Tesla'</span>}:</span>
<span id="cb78-3">        <span class="cf" style="color: #003B4F;">return</span> <span class="st" style="color: #20794D;">'US'</span></span>
<span id="cb78-4">    <span class="co" style="color: #5E5E5E;"># else</span></span>
<span id="cb78-5">    <span class="cf" style="color: #003B4F;">return</span> <span class="st" style="color: #20794D;">'Other'</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="49">
<div class="sourceCode cell-code" id="cb79" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb79-1"><span class="op" style="color: #5E5E5E;">%%</span>timeit</span>
<span id="cb79-2"></span>
<span id="cb79-3"><span class="co" style="color: #5E5E5E;"># use .apply</span></span>
<span id="cb79-4"><span class="co" style="color: #5E5E5E;"># Might be OK for strings, since they are not vectorized...</span></span>
<span id="cb79-5">(autos2</span>
<span id="cb79-6"> .assign(country<span class="op" style="color: #5E5E5E;">=</span>autos2.make.<span class="bu" style="color: null;">apply</span>(country))</span>
<span id="cb79-7">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2.14 ms ± 66.5 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="50">
<div class="sourceCode cell-code" id="cb81" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb81-1"><span class="op" style="color: #5E5E5E;">%%</span>timeit </span>
<span id="cb81-2"></span>
<span id="cb81-3"><span class="co" style="color: #5E5E5E;"># use .assign</span></span>
<span id="cb81-4">values <span class="op" style="color: #5E5E5E;">=</span> {<span class="st" style="color: #20794D;">'Chevrolet'</span>, <span class="st" style="color: #20794D;">'Ford'</span>, <span class="st" style="color: #20794D;">'Dodge'</span>, <span class="st" style="color: #20794D;">'GMC'</span>, <span class="st" style="color: #20794D;">'Tesla'</span>}</span>
<span id="cb81-5">(autos2</span>
<span id="cb81-6"> .assign(country<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'US'</span>)</span>
<span id="cb81-7"> .assign(country<span class="op" style="color: #5E5E5E;">=</span><span class="kw" style="color: #003B4F;">lambda</span> df_:df_.country.where(df_.make.isin(values), <span class="st" style="color: #20794D;">'Other'</span>))</span>
<span id="cb81-8">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>4.31 ms ± 83 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="51">
<div class="sourceCode cell-code" id="cb83" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb83-1"><span class="op" style="color: #5E5E5E;">%%</span>timeit </span>
<span id="cb83-2"></span>
<span id="cb83-3"><span class="co" style="color: #5E5E5E;"># using MumPy .select - allows you to specify a list of Booleans, and wherever they hold true [i.e make is Chevrolet, Ford, Dodge...Tesla, you specify the value ['US'] to put into placeholder </span></span>
<span id="cb83-4"><span class="co" style="color: #5E5E5E;"># this method is not available within pandas</span></span>
<span id="cb83-5">(autos2</span>
<span id="cb83-6"> .assign(country<span class="op" style="color: #5E5E5E;">=</span>np.select([autos2.make.isin({<span class="st" style="color: #20794D;">'Chevrolet'</span>, <span class="st" style="color: #20794D;">'Ford'</span>, <span class="st" style="color: #20794D;">'Dodge'</span>, <span class="st" style="color: #20794D;">'GMC'</span>, <span class="st" style="color: #20794D;">'Tesla'</span>})],</span>
<span id="cb83-7">                           [<span class="st" style="color: #20794D;">'US'</span>], <span class="st" style="color: #20794D;">'Other'</span>))</span>
<span id="cb83-8">)                          </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>3.36 ms ± 145 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="52">
<div class="sourceCode cell-code" id="cb85" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb85-1"><span class="op" style="color: #5E5E5E;">%%</span>timeit </span>
<span id="cb85-2"></span>
<span id="cb85-3"><span class="co" style="color: #5E5E5E;"># using MumPy .where - allows you to specify a list of Booleans, and wherever they hold true [i.e make is Chevrolet, Ford, Dodge...Tesla, you specify the value ['US'] to put into placeholder </span></span>
<span id="cb85-4"><span class="co" style="color: #5E5E5E;"># this method is not available within pandas</span></span>
<span id="cb85-5">(autos2</span>
<span id="cb85-6"> .assign(country<span class="op" style="color: #5E5E5E;">=</span>np.where(autos2.make.isin({<span class="st" style="color: #20794D;">'Chevrolet'</span>, <span class="st" style="color: #20794D;">'Ford'</span>, <span class="st" style="color: #20794D;">'Dodge'</span>, <span class="st" style="color: #20794D;">'GMC'</span>, <span class="st" style="color: #20794D;">'Tesla'</span>}),</span>
<span id="cb85-7">                           [<span class="st" style="color: #20794D;">'US'</span>], <span class="st" style="color: #20794D;">'Other'</span>))</span>
<span id="cb85-8">)  </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>3.38 ms ± 35.2 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)</code></pre>
</div>
</div>
<p>Key takeaways</p>
<ul>
<li>if you find yourself using a for loop alarm bells should be ringing!</li>
<li>you could use .apply but still slow</li>
<li>apply where or np.select</li>
<li>the same result can be obtained much faster using list comprehension</li>
</ul>
</section>
<section id="aggregation" class="level2">
<h2 class="anchored" data-anchor-id="aggregation">Aggregation</h2>
<p>It is important as a data science to work with the raw data and get to know the finer details, but ultimately, providing higher level insights are our main goal. This can be obtained by aggregating data. Let’s compare mileage by country by year…</p>
<div class="cell" data-execution_count="53">
<div class="sourceCode cell-code" id="cb87" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb87-1"><span class="co" style="color: #5E5E5E;"># start off with auto</span></span>
<span id="cb87-2"><span class="co" style="color: #5E5E5E;"># group by year</span></span>
<span id="cb87-3"><span class="co" style="color: #5E5E5E;"># then grab the mean values</span></span>
<span id="cb87-4">(autos2</span>
<span id="cb87-5"> <span class="co" style="color: #5E5E5E;"># Year will therefore be our index</span></span>
<span id="cb87-6"> .groupby(<span class="st" style="color: #20794D;">'year'</span>)</span>
<span id="cb87-7"> .mean()</span>
<span id="cb87-8">)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/tmp/ipykernel_2753/262800323.py:7: FutureWarning: The default value of numeric_only in DataFrameGroupBy.mean is deprecated. In a future version, numeric_only will default to False. Either specify numeric_only or select only columns which should be valid for the function.
  .mean()</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="53">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>city08</th>
      <th>comb08</th>
      <th>highway08</th>
      <th>cylinders</th>
      <th>displ</th>
      <th>fuelCost08</th>
      <th>range</th>
      <th>speeds</th>
    </tr>
    <tr>
      <th>year</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1984</th>
      <td>17.982688</td>
      <td>19.881874</td>
      <td>23.075356</td>
      <td>5.385438</td>
      <td>3.165017</td>
      <td>2313.543788</td>
      <td>0.000000</td>
      <td>3.928208</td>
    </tr>
    <tr>
      <th>1985</th>
      <td>17.878307</td>
      <td>19.808348</td>
      <td>23.042328</td>
      <td>5.375661</td>
      <td>3.164080</td>
      <td>2334.509112</td>
      <td>0.000000</td>
      <td>3.924750</td>
    </tr>
    <tr>
      <th>1986</th>
      <td>17.665289</td>
      <td>19.550413</td>
      <td>22.699174</td>
      <td>5.425620</td>
      <td>3.183762</td>
      <td>2354.049587</td>
      <td>0.000000</td>
      <td>3.984298</td>
    </tr>
    <tr>
      <th>1987</th>
      <td>17.310345</td>
      <td>19.228549</td>
      <td>22.445068</td>
      <td>5.412189</td>
      <td>3.173949</td>
      <td>2403.648757</td>
      <td>0.000000</td>
      <td>4.037690</td>
    </tr>
    <tr>
      <th>1988</th>
      <td>17.333628</td>
      <td>19.328319</td>
      <td>22.702655</td>
      <td>5.461947</td>
      <td>3.194899</td>
      <td>2387.035398</td>
      <td>0.000000</td>
      <td>4.129204</td>
    </tr>
    <tr>
      <th>1989</th>
      <td>17.143972</td>
      <td>19.125759</td>
      <td>22.465742</td>
      <td>5.488291</td>
      <td>3.209926</td>
      <td>2433.434519</td>
      <td>0.000000</td>
      <td>4.166522</td>
    </tr>
    <tr>
      <th>1990</th>
      <td>17.033395</td>
      <td>19.000928</td>
      <td>22.337662</td>
      <td>5.496289</td>
      <td>3.217369</td>
      <td>2436.178108</td>
      <td>0.000000</td>
      <td>4.238404</td>
    </tr>
    <tr>
      <th>1991</th>
      <td>16.848940</td>
      <td>18.825972</td>
      <td>22.253534</td>
      <td>5.598940</td>
      <td>3.266809</td>
      <td>2490.856890</td>
      <td>0.000000</td>
      <td>4.301237</td>
    </tr>
    <tr>
      <th>1992</th>
      <td>16.805531</td>
      <td>18.862623</td>
      <td>22.439786</td>
      <td>5.623550</td>
      <td>3.276159</td>
      <td>2494.736842</td>
      <td>0.000000</td>
      <td>4.318466</td>
    </tr>
    <tr>
      <th>1993</th>
      <td>16.998170</td>
      <td>19.104300</td>
      <td>22.780421</td>
      <td>5.602928</td>
      <td>3.248540</td>
      <td>2454.620311</td>
      <td>0.000000</td>
      <td>4.339433</td>
    </tr>
    <tr>
      <th>1994</th>
      <td>16.918534</td>
      <td>19.012220</td>
      <td>22.725051</td>
      <td>5.704684</td>
      <td>3.333190</td>
      <td>2461.507128</td>
      <td>0.000000</td>
      <td>4.332994</td>
    </tr>
    <tr>
      <th>1995</th>
      <td>16.569804</td>
      <td>18.797311</td>
      <td>22.671148</td>
      <td>5.892451</td>
      <td>3.471776</td>
      <td>2497.828335</td>
      <td>0.000000</td>
      <td>4.356774</td>
    </tr>
    <tr>
      <th>1996</th>
      <td>17.289780</td>
      <td>19.584735</td>
      <td>23.569211</td>
      <td>5.627426</td>
      <td>3.234789</td>
      <td>2375.032342</td>
      <td>0.000000</td>
      <td>4.364812</td>
    </tr>
    <tr>
      <th>1997</th>
      <td>17.135171</td>
      <td>19.429134</td>
      <td>23.451444</td>
      <td>5.666667</td>
      <td>3.226933</td>
      <td>2405.511811</td>
      <td>0.000000</td>
      <td>4.402887</td>
    </tr>
    <tr>
      <th>1998</th>
      <td>17.113300</td>
      <td>19.518473</td>
      <td>23.546798</td>
      <td>5.633005</td>
      <td>3.201979</td>
      <td>2382.635468</td>
      <td>0.229064</td>
      <td>4.419951</td>
    </tr>
    <tr>
      <th>1999</th>
      <td>17.272300</td>
      <td>19.611502</td>
      <td>23.552817</td>
      <td>5.667840</td>
      <td>3.188794</td>
      <td>2392.194836</td>
      <td>0.570423</td>
      <td>4.421362</td>
    </tr>
    <tr>
      <th>2000</th>
      <td>17.221429</td>
      <td>19.526190</td>
      <td>23.414286</td>
      <td>5.713095</td>
      <td>3.200517</td>
      <td>2429.702381</td>
      <td>0.348810</td>
      <td>4.508333</td>
    </tr>
    <tr>
      <th>2001</th>
      <td>17.275521</td>
      <td>19.479693</td>
      <td>23.328211</td>
      <td>5.720088</td>
      <td>3.192452</td>
      <td>2448.463227</td>
      <td>0.261251</td>
      <td>4.660812</td>
    </tr>
    <tr>
      <th>2002</th>
      <td>16.893333</td>
      <td>19.168205</td>
      <td>23.030769</td>
      <td>5.827692</td>
      <td>3.264525</td>
      <td>2479.794872</td>
      <td>0.136410</td>
      <td>4.757949</td>
    </tr>
    <tr>
      <th>2003</th>
      <td>16.780651</td>
      <td>19.000958</td>
      <td>22.836207</td>
      <td>5.942529</td>
      <td>3.358259</td>
      <td>2525.574713</td>
      <td>0.090996</td>
      <td>4.911877</td>
    </tr>
    <tr>
      <th>2004</th>
      <td>16.740642</td>
      <td>19.067736</td>
      <td>23.064171</td>
      <td>5.957219</td>
      <td>3.393626</td>
      <td>2512.566845</td>
      <td>0.000000</td>
      <td>4.976827</td>
    </tr>
    <tr>
      <th>2005</th>
      <td>16.851630</td>
      <td>19.193825</td>
      <td>23.297599</td>
      <td>5.944254</td>
      <td>3.399485</td>
      <td>2518.610635</td>
      <td>0.000000</td>
      <td>5.192110</td>
    </tr>
    <tr>
      <th>2006</th>
      <td>16.626812</td>
      <td>18.959239</td>
      <td>23.048913</td>
      <td>6.100543</td>
      <td>3.549294</td>
      <td>2539.175725</td>
      <td>0.000000</td>
      <td>5.315217</td>
    </tr>
    <tr>
      <th>2007</th>
      <td>16.605684</td>
      <td>18.978686</td>
      <td>23.083481</td>
      <td>6.166075</td>
      <td>3.628539</td>
      <td>2535.923623</td>
      <td>0.000000</td>
      <td>5.610124</td>
    </tr>
    <tr>
      <th>2008</th>
      <td>16.900590</td>
      <td>19.276327</td>
      <td>23.455771</td>
      <td>6.192923</td>
      <td>3.637796</td>
      <td>2536.436394</td>
      <td>0.084246</td>
      <td>5.773378</td>
    </tr>
    <tr>
      <th>2009</th>
      <td>17.334459</td>
      <td>19.735642</td>
      <td>24.017736</td>
      <td>6.122466</td>
      <td>3.624839</td>
      <td>2427.027027</td>
      <td>0.000000</td>
      <td>6.043074</td>
    </tr>
    <tr>
      <th>2010</th>
      <td>18.105500</td>
      <td>20.588819</td>
      <td>24.947701</td>
      <td>5.965735</td>
      <td>3.502548</td>
      <td>2351.082056</td>
      <td>0.000000</td>
      <td>6.271416</td>
    </tr>
    <tr>
      <th>2011</th>
      <td>18.669027</td>
      <td>21.011504</td>
      <td>25.169912</td>
      <td>5.980531</td>
      <td>3.521903</td>
      <td>2333.982301</td>
      <td>0.259292</td>
      <td>6.560177</td>
    </tr>
    <tr>
      <th>2012</th>
      <td>19.362847</td>
      <td>21.819444</td>
      <td>26.105035</td>
      <td>5.910590</td>
      <td>3.460015</td>
      <td>2289.973958</td>
      <td>0.782118</td>
      <td>6.706597</td>
    </tr>
    <tr>
      <th>2013</th>
      <td>20.661318</td>
      <td>23.125000</td>
      <td>27.504223</td>
      <td>5.762669</td>
      <td>3.327529</td>
      <td>2210.768581</td>
      <td>1.255068</td>
      <td>6.896959</td>
    </tr>
    <tr>
      <th>2014</th>
      <td>21.033469</td>
      <td>23.531429</td>
      <td>27.978776</td>
      <td>5.745306</td>
      <td>3.289703</td>
      <td>2198.040816</td>
      <td>1.405714</td>
      <td>6.985306</td>
    </tr>
    <tr>
      <th>2015</th>
      <td>21.445830</td>
      <td>24.038971</td>
      <td>28.586906</td>
      <td>5.635230</td>
      <td>3.205085</td>
      <td>2148.869836</td>
      <td>2.208106</td>
      <td>7.035853</td>
    </tr>
    <tr>
      <th>2016</th>
      <td>22.591918</td>
      <td>25.150555</td>
      <td>29.606973</td>
      <td>5.463550</td>
      <td>3.054415</td>
      <td>2091.204437</td>
      <td>4.546751</td>
      <td>7.080032</td>
    </tr>
    <tr>
      <th>2017</th>
      <td>22.761021</td>
      <td>25.249033</td>
      <td>29.554524</td>
      <td>5.453210</td>
      <td>3.026032</td>
      <td>2096.558391</td>
      <td>4.336427</td>
      <td>7.225058</td>
    </tr>
    <tr>
      <th>2018</th>
      <td>22.564732</td>
      <td>25.019345</td>
      <td>29.273065</td>
      <td>5.438988</td>
      <td>2.992239</td>
      <td>2103.980655</td>
      <td>3.519345</td>
      <td>7.017113</td>
    </tr>
    <tr>
      <th>2019</th>
      <td>23.318147</td>
      <td>25.627942</td>
      <td>29.664389</td>
      <td>5.368261</td>
      <td>2.964679</td>
      <td>2093.545938</td>
      <td>5.565680</td>
      <td>7.136674</td>
    </tr>
    <tr>
      <th>2020</th>
      <td>22.679426</td>
      <td>25.267943</td>
      <td>29.617225</td>
      <td>5.071770</td>
      <td>2.644994</td>
      <td>2023.444976</td>
      <td>2.282297</td>
      <td>7.746411</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="54">
<div class="sourceCode cell-code" id="cb89" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb89-1"><span class="co" style="color: #5E5E5E;"># let's focus on just the comb08 and speeds columns</span></span>
<span id="cb89-2">(autos2</span>
<span id="cb89-3"> .groupby(<span class="st" style="color: #20794D;">'year'</span>)</span>
<span id="cb89-4"> [[<span class="st" style="color: #20794D;">'comb08'</span>,<span class="st" style="color: #20794D;">'speeds'</span>]]</span>
<span id="cb89-5"> .mean()</span>
<span id="cb89-6">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="54">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>comb08</th>
      <th>speeds</th>
    </tr>
    <tr>
      <th>year</th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1984</th>
      <td>19.881874</td>
      <td>3.928208</td>
    </tr>
    <tr>
      <th>1985</th>
      <td>19.808348</td>
      <td>3.924750</td>
    </tr>
    <tr>
      <th>1986</th>
      <td>19.550413</td>
      <td>3.984298</td>
    </tr>
    <tr>
      <th>1987</th>
      <td>19.228549</td>
      <td>4.037690</td>
    </tr>
    <tr>
      <th>1988</th>
      <td>19.328319</td>
      <td>4.129204</td>
    </tr>
    <tr>
      <th>1989</th>
      <td>19.125759</td>
      <td>4.166522</td>
    </tr>
    <tr>
      <th>1990</th>
      <td>19.000928</td>
      <td>4.238404</td>
    </tr>
    <tr>
      <th>1991</th>
      <td>18.825972</td>
      <td>4.301237</td>
    </tr>
    <tr>
      <th>1992</th>
      <td>18.862623</td>
      <td>4.318466</td>
    </tr>
    <tr>
      <th>1993</th>
      <td>19.104300</td>
      <td>4.339433</td>
    </tr>
    <tr>
      <th>1994</th>
      <td>19.012220</td>
      <td>4.332994</td>
    </tr>
    <tr>
      <th>1995</th>
      <td>18.797311</td>
      <td>4.356774</td>
    </tr>
    <tr>
      <th>1996</th>
      <td>19.584735</td>
      <td>4.364812</td>
    </tr>
    <tr>
      <th>1997</th>
      <td>19.429134</td>
      <td>4.402887</td>
    </tr>
    <tr>
      <th>1998</th>
      <td>19.518473</td>
      <td>4.419951</td>
    </tr>
    <tr>
      <th>1999</th>
      <td>19.611502</td>
      <td>4.421362</td>
    </tr>
    <tr>
      <th>2000</th>
      <td>19.526190</td>
      <td>4.508333</td>
    </tr>
    <tr>
      <th>2001</th>
      <td>19.479693</td>
      <td>4.660812</td>
    </tr>
    <tr>
      <th>2002</th>
      <td>19.168205</td>
      <td>4.757949</td>
    </tr>
    <tr>
      <th>2003</th>
      <td>19.000958</td>
      <td>4.911877</td>
    </tr>
    <tr>
      <th>2004</th>
      <td>19.067736</td>
      <td>4.976827</td>
    </tr>
    <tr>
      <th>2005</th>
      <td>19.193825</td>
      <td>5.192110</td>
    </tr>
    <tr>
      <th>2006</th>
      <td>18.959239</td>
      <td>5.315217</td>
    </tr>
    <tr>
      <th>2007</th>
      <td>18.978686</td>
      <td>5.610124</td>
    </tr>
    <tr>
      <th>2008</th>
      <td>19.276327</td>
      <td>5.773378</td>
    </tr>
    <tr>
      <th>2009</th>
      <td>19.735642</td>
      <td>6.043074</td>
    </tr>
    <tr>
      <th>2010</th>
      <td>20.588819</td>
      <td>6.271416</td>
    </tr>
    <tr>
      <th>2011</th>
      <td>21.011504</td>
      <td>6.560177</td>
    </tr>
    <tr>
      <th>2012</th>
      <td>21.819444</td>
      <td>6.706597</td>
    </tr>
    <tr>
      <th>2013</th>
      <td>23.125000</td>
      <td>6.896959</td>
    </tr>
    <tr>
      <th>2014</th>
      <td>23.531429</td>
      <td>6.985306</td>
    </tr>
    <tr>
      <th>2015</th>
      <td>24.038971</td>
      <td>7.035853</td>
    </tr>
    <tr>
      <th>2016</th>
      <td>25.150555</td>
      <td>7.080032</td>
    </tr>
    <tr>
      <th>2017</th>
      <td>25.249033</td>
      <td>7.225058</td>
    </tr>
    <tr>
      <th>2018</th>
      <td>25.019345</td>
      <td>7.017113</td>
    </tr>
    <tr>
      <th>2019</th>
      <td>25.627942</td>
      <td>7.136674</td>
    </tr>
    <tr>
      <th>2020</th>
      <td>25.267943</td>
      <td>7.746411</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb90" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb90-1"><span class="op" style="color: #5E5E5E;">%%</span>timeit</span>
<span id="cb90-2"></span>
<span id="cb90-3"><span class="co" style="color: #5E5E5E;"># Watch out for the ordering!!!</span></span>
<span id="cb90-4"><span class="co" style="color: #5E5E5E;"># here we are grouping by year</span></span>
<span id="cb90-5"><span class="co" style="color: #5E5E5E;"># but then we are taking average of all columns - computationally expensive</span></span>
<span id="cb90-6"><span class="co" style="color: #5E5E5E;"># we are only interested in comb08 and speeds</span></span>
<span id="cb90-7">(autos2</span>
<span id="cb90-8"> .groupby(<span class="st" style="color: #20794D;">'year'</span>)</span>
<span id="cb90-9"> .mean()</span>
<span id="cb90-10"> <span class="co" style="color: #5E5E5E;">#.median()</span></span>
<span id="cb90-11"> <span class="co" style="color: #5E5E5E;">#.quantile(.1)</span></span>
<span id="cb90-12"> <span class="co" style="color: #5E5E5E;">#.std()</span></span>
<span id="cb90-13"> [[<span class="st" style="color: #20794D;">'comb08'</span>,<span class="st" style="color: #20794D;">'speeds'</span>]]</span>
<span id="cb90-14">)</span></code></pre></div>
</div>
</section>
<section id="visualizations" class="level2">
<h2 class="anchored" data-anchor-id="visualizations">Visualizations</h2>
<p>The pandas library includes a variety of <a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html">visualization tools</a> which allow us to communicate our findings visually. Note that is very easy to show a variety of different plots quickly, simply by commenting out (#) to leave the desired plot:</p>
<div class="cell" data-execution_count="56">
<div class="sourceCode cell-code" id="cb91" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb91-1"><span class="co" style="color: #5E5E5E;"># in pandas default plot is a line plot</span></span>
<span id="cb91-2"><span class="co" style="color: #5E5E5E;"># with index as the x axis and the selected grouped columns as the lines</span></span>
<span id="cb91-3">(autos2</span>
<span id="cb91-4"> .groupby(<span class="st" style="color: #20794D;">'year'</span>)</span>
<span id="cb91-5">  [[<span class="st" style="color: #20794D;">'comb08'</span>,<span class="st" style="color: #20794D;">'speeds'</span>]]</span>
<span id="cb91-6"> <span class="co" style="color: #5E5E5E;">#.mean()</span></span>
<span id="cb91-7"> <span class="co" style="color: #5E5E5E;">#.median()</span></span>
<span id="cb91-8"> <span class="co" style="color: #5E5E5E;">#.quantile(.1)</span></span>
<span id="cb91-9"> .std()</span>
<span id="cb91-10"> <span class="co" style="color: #5E5E5E;">#.var()</span></span>
<span id="cb91-11"> .plot()</span>
<span id="cb91-12">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="56">
<pre><code>&lt;AxesSubplot: xlabel='year'&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Pandas/Effective_Pandas_files/figure-html/cell-57-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="57">
<div class="sourceCode cell-code" id="cb93" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb93-1"><span class="co" style="color: #5E5E5E;"># add country</span></span>
<span id="cb93-2">(autos2</span>
<span id="cb93-3"> .assign(country<span class="op" style="color: #5E5E5E;">=</span>autos2.make.<span class="bu" style="color: null;">apply</span>(country))</span>
<span id="cb93-4"> <span class="co" style="color: #5E5E5E;"># can group by more than one column</span></span>
<span id="cb93-5"> .groupby([<span class="st" style="color: #20794D;">'year'</span>,<span class="st" style="color: #20794D;">'country'</span>])</span>
<span id="cb93-6"> .mean()</span>
<span id="cb93-7">)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/tmp/ipykernel_2753/361744348.py:6: FutureWarning: The default value of numeric_only in DataFrameGroupBy.mean is deprecated. In a future version, numeric_only will default to False. Either specify numeric_only or select only columns which should be valid for the function.
  .mean()</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="57">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th></th>
      <th>city08</th>
      <th>comb08</th>
      <th>highway08</th>
      <th>cylinders</th>
      <th>displ</th>
      <th>fuelCost08</th>
      <th>range</th>
      <th>speeds</th>
    </tr>
    <tr>
      <th>year</th>
      <th>country</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th rowspan="2" valign="top">1984</th>
      <th>Other</th>
      <td>19.384615</td>
      <td>21.417330</td>
      <td>24.847038</td>
      <td>4.908046</td>
      <td>2.690516</td>
      <td>2118.125553</td>
      <td>0.000000</td>
      <td>3.969054</td>
    </tr>
    <tr>
      <th>US</th>
      <td>16.079232</td>
      <td>17.797119</td>
      <td>20.669868</td>
      <td>6.033613</td>
      <td>3.809268</td>
      <td>2578.871549</td>
      <td>0.000000</td>
      <td>3.872749</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">1985</th>
      <th>Other</th>
      <td>19.284768</td>
      <td>21.373068</td>
      <td>24.816777</td>
      <td>4.871965</td>
      <td>2.636070</td>
      <td>2141.997792</td>
      <td>0.000000</td>
      <td>3.958057</td>
    </tr>
    <tr>
      <th>US</th>
      <td>16.275472</td>
      <td>18.025157</td>
      <td>21.020126</td>
      <td>5.949686</td>
      <td>3.765813</td>
      <td>2553.899371</td>
      <td>0.000000</td>
      <td>3.886792</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">1986</th>
      <th>Other</th>
      <td>19.167183</td>
      <td>21.213622</td>
      <td>24.650155</td>
      <td>4.804954</td>
      <td>2.536234</td>
      <td>2149.148607</td>
      <td>0.000000</td>
      <td>4.069659</td>
    </tr>
    <tr>
      <th>US</th>
      <td>15.945035</td>
      <td>17.645390</td>
      <td>20.464539</td>
      <td>6.136525</td>
      <td>3.925433</td>
      <td>2588.741135</td>
      <td>0.000000</td>
      <td>3.886525</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">1987</th>
      <th>Other</th>
      <td>18.633381</td>
      <td>20.710414</td>
      <td>24.186876</td>
      <td>4.825963</td>
      <td>2.583168</td>
      <td>2227.318117</td>
      <td>0.000000</td>
      <td>4.142653</td>
    </tr>
    <tr>
      <th>US</th>
      <td>15.611722</td>
      <td>17.326007</td>
      <td>20.208791</td>
      <td>6.164835</td>
      <td>3.932442</td>
      <td>2630.036630</td>
      <td>0.000000</td>
      <td>3.902930</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">1988</th>
      <th>Other</th>
      <td>18.668224</td>
      <td>20.814642</td>
      <td>24.437695</td>
      <td>4.819315</td>
      <td>2.531434</td>
      <td>2207.476636</td>
      <td>0.000000</td>
      <td>4.205607</td>
    </tr>
    <tr>
      <th>US</th>
      <td>15.577869</td>
      <td>17.372951</td>
      <td>20.420082</td>
      <td>6.307377</td>
      <td>4.067735</td>
      <td>2623.258197</td>
      <td>0.000000</td>
      <td>4.028689</td>
    </tr>
    <tr>
      <th>...</th>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">2016</th>
      <th>Other</th>
      <td>21.903749</td>
      <td>24.439716</td>
      <td>28.866261</td>
      <td>5.493414</td>
      <td>2.992272</td>
      <td>2127.608916</td>
      <td>1.017224</td>
      <td>7.296859</td>
    </tr>
    <tr>
      <th>US</th>
      <td>25.061818</td>
      <td>27.701818</td>
      <td>32.265455</td>
      <td>5.356364</td>
      <td>3.277454</td>
      <td>1960.545455</td>
      <td>17.214545</td>
      <td>6.301818</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">2017</th>
      <th>Other</th>
      <td>22.423795</td>
      <td>24.910521</td>
      <td>29.208456</td>
      <td>5.431662</td>
      <td>2.919041</td>
      <td>2114.110128</td>
      <td>1.243854</td>
      <td>7.474926</td>
    </tr>
    <tr>
      <th>US</th>
      <td>24.003623</td>
      <td>26.496377</td>
      <td>30.829710</td>
      <td>5.532609</td>
      <td>3.420272</td>
      <td>2031.884058</td>
      <td>15.731884</td>
      <td>6.304348</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">2018</th>
      <th>Other</th>
      <td>22.310442</td>
      <td>24.779868</td>
      <td>29.042333</td>
      <td>5.396990</td>
      <td>2.886801</td>
      <td>2121.448730</td>
      <td>1.135466</td>
      <td>7.391345</td>
    </tr>
    <tr>
      <th>US</th>
      <td>23.526690</td>
      <td>25.925267</td>
      <td>30.145907</td>
      <td>5.597865</td>
      <td>3.391101</td>
      <td>2037.900356</td>
      <td>12.537367</td>
      <td>5.601423</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">2019</th>
      <th>Other</th>
      <td>23.084221</td>
      <td>25.456922</td>
      <td>29.560503</td>
      <td>5.315586</td>
      <td>2.839671</td>
      <td>2093.659245</td>
      <td>2.581801</td>
      <td>7.545983</td>
    </tr>
    <tr>
      <th>US</th>
      <td>24.169014</td>
      <td>26.250000</td>
      <td>30.042254</td>
      <td>5.559859</td>
      <td>3.419375</td>
      <td>2093.133803</td>
      <td>16.419014</td>
      <td>5.647887</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">2020</th>
      <th>Other</th>
      <td>22.579487</td>
      <td>25.174359</td>
      <td>29.543590</td>
      <td>5.148718</td>
      <td>2.692823</td>
      <td>2050.256410</td>
      <td>2.446154</td>
      <td>7.743590</td>
    </tr>
    <tr>
      <th>US</th>
      <td>24.071429</td>
      <td>26.571429</td>
      <td>30.642857</td>
      <td>4.000000</td>
      <td>1.978795</td>
      <td>1650.000000</td>
      <td>0.000000</td>
      <td>7.785714</td>
    </tr>
  </tbody>
</table>
<p>74 rows × 8 columns</p>
</div>
</div>
</div>
<div class="cell" data-execution_count="58">
<div class="sourceCode cell-code" id="cb95" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb95-1"><span class="co" style="color: #5E5E5E;"># we can go deeper and apply multiple aggregates</span></span>
<span id="cb95-2"><span class="co" style="color: #5E5E5E;"># this is loosely equivalent to the sort of thing that a pivot table in Excel might provide</span></span>
<span id="cb95-3"></span>
<span id="cb95-4"><span class="co" style="color: #5E5E5E;"># penultimate row</span></span>
<span id="cb95-5"><span class="kw" style="color: #003B4F;">def</span> second_to_last(ser):</span>
<span id="cb95-6">    <span class="cf" style="color: #003B4F;">return</span> ser.iloc[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">2</span>]</span>
<span id="cb95-7"></span>
<span id="cb95-8">(autos2</span>
<span id="cb95-9"> .assign(country<span class="op" style="color: #5E5E5E;">=</span>autos2.make.<span class="bu" style="color: null;">apply</span>(country))</span>
<span id="cb95-10"> .groupby([<span class="st" style="color: #20794D;">'year'</span>, <span class="st" style="color: #20794D;">'country'</span>])</span>
<span id="cb95-11"><span class="co" style="color: #5E5E5E;"># we can use .agg to include a list of different aggregation types - we can even call a function</span></span>
<span id="cb95-12"> .agg([<span class="st" style="color: #20794D;">'min'</span>, <span class="st" style="color: #20794D;">'mean'</span>, second_to_last])</span>
<span id="cb95-13">)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/tmp/ipykernel_2753/2706922386.py:12: FutureWarning: ['drive', 'make', 'model', 'createdOn'] did not aggregate successfully. If any error is raised this will raise in a future version of pandas. Drop these columns/ops to avoid this warning.
  .agg(['min', 'mean', second_to_last])</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="58">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th></th>
      <th colspan="3" halign="left">city08</th>
      <th colspan="3" halign="left">comb08</th>
      <th colspan="3" halign="left">highway08</th>
      <th>cylinders</th>
      <th>...</th>
      <th>range</th>
      <th colspan="3" halign="left">automatic</th>
      <th colspan="3" halign="left">speeds</th>
      <th colspan="3" halign="left">ffs</th>
    </tr>
    <tr>
      <th></th>
      <th></th>
      <th>min</th>
      <th>mean</th>
      <th>second_to_last</th>
      <th>min</th>
      <th>mean</th>
      <th>second_to_last</th>
      <th>min</th>
      <th>mean</th>
      <th>second_to_last</th>
      <th>min</th>
      <th>...</th>
      <th>second_to_last</th>
      <th>min</th>
      <th>mean</th>
      <th>second_to_last</th>
      <th>min</th>
      <th>mean</th>
      <th>second_to_last</th>
      <th>min</th>
      <th>mean</th>
      <th>second_to_last</th>
    </tr>
    <tr>
      <th>year</th>
      <th>country</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th rowspan="2" valign="top">1984</th>
      <th>Other</th>
      <td>7</td>
      <td>19.384615</td>
      <td>14</td>
      <td>8</td>
      <td>21.417330</td>
      <td>14</td>
      <td>9</td>
      <td>24.847038</td>
      <td>15</td>
      <td>2</td>
      <td>...</td>
      <td>0</td>
      <td>False</td>
      <td>0.550840</td>
      <td>False</td>
      <td>3</td>
      <td>3.969054</td>
      <td>5</td>
      <td>False</td>
      <td>0.714554</td>
      <td>True</td>
    </tr>
    <tr>
      <th>US</th>
      <td>8</td>
      <td>16.079232</td>
      <td>15</td>
      <td>9</td>
      <td>17.797119</td>
      <td>17</td>
      <td>10</td>
      <td>20.669868</td>
      <td>19</td>
      <td>4</td>
      <td>...</td>
      <td>0</td>
      <td>False</td>
      <td>0.521059</td>
      <td>False</td>
      <td>3</td>
      <td>3.872749</td>
      <td>4</td>
      <td>False</td>
      <td>0.638801</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">1985</th>
      <th>Other</th>
      <td>7</td>
      <td>19.284768</td>
      <td>19</td>
      <td>8</td>
      <td>21.373068</td>
      <td>20</td>
      <td>9</td>
      <td>24.816777</td>
      <td>22</td>
      <td>0</td>
      <td>...</td>
      <td>0</td>
      <td>False</td>
      <td>0.554084</td>
      <td>True</td>
      <td>3</td>
      <td>3.958057</td>
      <td>4</td>
      <td>False</td>
      <td>0.889160</td>
      <td>True</td>
    </tr>
    <tr>
      <th>US</th>
      <td>8</td>
      <td>16.275472</td>
      <td>14</td>
      <td>10</td>
      <td>18.025157</td>
      <td>15</td>
      <td>10</td>
      <td>21.020126</td>
      <td>17</td>
      <td>3</td>
      <td>...</td>
      <td>0</td>
      <td>False</td>
      <td>0.520755</td>
      <td>False</td>
      <td>3</td>
      <td>3.886792</td>
      <td>4</td>
      <td>False</td>
      <td>0.851351</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">1986</th>
      <th>Other</th>
      <td>6</td>
      <td>19.167183</td>
      <td>10</td>
      <td>7</td>
      <td>21.213622</td>
      <td>11</td>
      <td>9</td>
      <td>24.650155</td>
      <td>12</td>
      <td>0</td>
      <td>...</td>
      <td>0</td>
      <td>False</td>
      <td>0.520124</td>
      <td>False</td>
      <td>3</td>
      <td>4.069659</td>
      <td>4</td>
      <td>False</td>
      <td>0.934211</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>US</th>
      <td>9</td>
      <td>15.945035</td>
      <td>16</td>
      <td>10</td>
      <td>17.645390</td>
      <td>17</td>
      <td>11</td>
      <td>20.464539</td>
      <td>19</td>
      <td>3</td>
      <td>...</td>
      <td>0</td>
      <td>False</td>
      <td>0.533688</td>
      <td>False</td>
      <td>3</td>
      <td>3.886525</td>
      <td>4</td>
      <td>False</td>
      <td>0.795699</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">1987</th>
      <th>Other</th>
      <td>6</td>
      <td>18.633381</td>
      <td>12</td>
      <td>7</td>
      <td>20.710414</td>
      <td>12</td>
      <td>9</td>
      <td>24.186876</td>
      <td>12</td>
      <td>2</td>
      <td>...</td>
      <td>0</td>
      <td>False</td>
      <td>0.516405</td>
      <td>True</td>
      <td>3</td>
      <td>4.142653</td>
      <td>4</td>
      <td>False</td>
      <td>0.949778</td>
      <td>True</td>
    </tr>
    <tr>
      <th>US</th>
      <td>8</td>
      <td>15.611722</td>
      <td>12</td>
      <td>9</td>
      <td>17.326007</td>
      <td>13</td>
      <td>10</td>
      <td>20.208791</td>
      <td>14</td>
      <td>3</td>
      <td>...</td>
      <td>0</td>
      <td>False</td>
      <td>0.549451</td>
      <td>True</td>
      <td>3</td>
      <td>3.902930</td>
      <td>4</td>
      <td>False</td>
      <td>0.909457</td>
      <td>True</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">1988</th>
      <th>Other</th>
      <td>6</td>
      <td>18.668224</td>
      <td>12</td>
      <td>7</td>
      <td>20.814642</td>
      <td>12</td>
      <td>10</td>
      <td>24.437695</td>
      <td>12</td>
      <td>2</td>
      <td>...</td>
      <td>0</td>
      <td>False</td>
      <td>0.521807</td>
      <td>True</td>
      <td>3</td>
      <td>4.205607</td>
      <td>4</td>
      <td>False</td>
      <td>0.993681</td>
      <td>True</td>
    </tr>
    <tr>
      <th>US</th>
      <td>8</td>
      <td>15.577869</td>
      <td>14</td>
      <td>9</td>
      <td>17.372951</td>
      <td>14</td>
      <td>10</td>
      <td>20.420082</td>
      <td>15</td>
      <td>3</td>
      <td>...</td>
      <td>0</td>
      <td>False</td>
      <td>0.569672</td>
      <td>True</td>
      <td>3</td>
      <td>4.028689</td>
      <td>4</td>
      <td>False</td>
      <td>0.936306</td>
      <td>True</td>
    </tr>
    <tr>
      <th>...</th>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">2016</th>
      <th>Other</th>
      <td>10</td>
      <td>21.903749</td>
      <td>28</td>
      <td>12</td>
      <td>24.439716</td>
      <td>30</td>
      <td>13</td>
      <td>28.866261</td>
      <td>32</td>
      <td>0</td>
      <td>...</td>
      <td>0</td>
      <td>False</td>
      <td>0.837893</td>
      <td>True</td>
      <td>1</td>
      <td>7.296859</td>
      <td>7</td>
      <td>False</td>
      <td>0.000000</td>
      <td>False</td>
    </tr>
    <tr>
      <th>US</th>
      <td>11</td>
      <td>25.061818</td>
      <td>91</td>
      <td>12</td>
      <td>27.701818</td>
      <td>93</td>
      <td>16</td>
      <td>32.265455</td>
      <td>94</td>
      <td>0</td>
      <td>...</td>
      <td>200</td>
      <td>False</td>
      <td>0.850909</td>
      <td>True</td>
      <td>1</td>
      <td>6.301818</td>
      <td>1</td>
      <td>False</td>
      <td>0.000000</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">2017</th>
      <th>Other</th>
      <td>10</td>
      <td>22.423795</td>
      <td>21</td>
      <td>11</td>
      <td>24.910521</td>
      <td>24</td>
      <td>11</td>
      <td>29.208456</td>
      <td>28</td>
      <td>0</td>
      <td>...</td>
      <td>0</td>
      <td>False</td>
      <td>0.848574</td>
      <td>True</td>
      <td>1</td>
      <td>7.474926</td>
      <td>7</td>
      <td>False</td>
      <td>0.000000</td>
      <td>False</td>
    </tr>
    <tr>
      <th>US</th>
      <td>11</td>
      <td>24.003623</td>
      <td>131</td>
      <td>12</td>
      <td>26.496377</td>
      <td>126</td>
      <td>15</td>
      <td>30.829710</td>
      <td>120</td>
      <td>0</td>
      <td>...</td>
      <td>310</td>
      <td>False</td>
      <td>0.858696</td>
      <td>True</td>
      <td>0</td>
      <td>6.304348</td>
      <td>1</td>
      <td>False</td>
      <td>0.000000</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">2018</th>
      <th>Other</th>
      <td>9</td>
      <td>22.310442</td>
      <td>11</td>
      <td>11</td>
      <td>24.779868</td>
      <td>12</td>
      <td>11</td>
      <td>29.042333</td>
      <td>15</td>
      <td>0</td>
      <td>...</td>
      <td>0</td>
      <td>False</td>
      <td>0.863594</td>
      <td>True</td>
      <td>0</td>
      <td>7.391345</td>
      <td>0</td>
      <td>False</td>
      <td>0.000000</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>US</th>
      <td>11</td>
      <td>23.526690</td>
      <td>120</td>
      <td>14</td>
      <td>25.925267</td>
      <td>116</td>
      <td>15</td>
      <td>30.145907</td>
      <td>112</td>
      <td>0</td>
      <td>...</td>
      <td>310</td>
      <td>False</td>
      <td>0.882562</td>
      <td>True</td>
      <td>0</td>
      <td>5.601423</td>
      <td>1</td>
      <td>False</td>
      <td>0.000000</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">2019</th>
      <th>Other</th>
      <td>9</td>
      <td>23.084221</td>
      <td>19</td>
      <td>11</td>
      <td>25.456922</td>
      <td>22</td>
      <td>14</td>
      <td>29.560503</td>
      <td>27</td>
      <td>0</td>
      <td>...</td>
      <td>0</td>
      <td>False</td>
      <td>0.879961</td>
      <td>True</td>
      <td>0</td>
      <td>7.545983</td>
      <td>8</td>
      <td>False</td>
      <td>0.000000</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>US</th>
      <td>11</td>
      <td>24.169014</td>
      <td>104</td>
      <td>14</td>
      <td>26.250000</td>
      <td>104</td>
      <td>15</td>
      <td>30.042254</td>
      <td>104</td>
      <td>0</td>
      <td>...</td>
      <td>345</td>
      <td>False</td>
      <td>0.915493</td>
      <td>True</td>
      <td>0</td>
      <td>5.647887</td>
      <td>1</td>
      <td>False</td>
      <td>0.000000</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th rowspan="2" valign="top">2020</th>
      <th>Other</th>
      <td>13</td>
      <td>22.579487</td>
      <td>17</td>
      <td>15</td>
      <td>25.174359</td>
      <td>20</td>
      <td>18</td>
      <td>29.543590</td>
      <td>24</td>
      <td>0</td>
      <td>...</td>
      <td>0</td>
      <td>False</td>
      <td>0.871795</td>
      <td>True</td>
      <td>0</td>
      <td>7.743590</td>
      <td>0</td>
      <td>False</td>
      <td>0.000000</td>
      <td>False</td>
    </tr>
    <tr>
      <th>US</th>
      <td>20</td>
      <td>24.071429</td>
      <td>21</td>
      <td>22</td>
      <td>26.571429</td>
      <td>24</td>
      <td>26</td>
      <td>30.642857</td>
      <td>28</td>
      <td>4</td>
      <td>...</td>
      <td>0</td>
      <td>False</td>
      <td>0.857143</td>
      <td>True</td>
      <td>0</td>
      <td>7.785714</td>
      <td>0</td>
      <td>False</td>
      <td>0.000000</td>
      <td>False</td>
    </tr>
  </tbody>
</table>
<p>74 rows × 30 columns</p>
</div>
</div>
</div>
<div class="cell" data-execution_count="59">
<div class="sourceCode cell-code" id="cb97" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb97-1"><span class="co" style="color: #5E5E5E;"># back to simpler example, adding plots</span></span>
<span id="cb97-2">(autos2</span>
<span id="cb97-3"> .assign(country<span class="op" style="color: #5E5E5E;">=</span>autos2.make.<span class="bu" style="color: null;">apply</span>(country))</span>
<span id="cb97-4"> <span class="co" style="color: #5E5E5E;"># can group by more than one column</span></span>
<span id="cb97-5"> .groupby([<span class="st" style="color: #20794D;">'year'</span>,<span class="st" style="color: #20794D;">'country'</span>])</span>
<span id="cb97-6"> .mean()</span>
<span id="cb97-7"> .plot()</span>
<span id="cb97-8">)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/tmp/ipykernel_2753/1855101905.py:6: FutureWarning: The default value of numeric_only in DataFrameGroupBy.mean is deprecated. In a future version, numeric_only will default to False. Either specify numeric_only or select only columns which should be valid for the function.
  .mean()</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="59">
<pre><code>&lt;AxesSubplot: xlabel='year,country'&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Pandas/Effective_Pandas_files/figure-html/cell-60-output-3.png" class="img-fluid"></p>
</div>
</div>
<p>This doesn’t really work as we can see. Let’s see if we can resolve this:</p>
<div class="cell" data-execution_count="60">
<div class="sourceCode cell-code" id="cb100" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb100-1"><span class="co" style="color: #5E5E5E;"># back to simpler example, adding plots</span></span>
<span id="cb100-2">(autos2</span>
<span id="cb100-3"> .assign(country<span class="op" style="color: #5E5E5E;">=</span>autos2.make.<span class="bu" style="color: null;">apply</span>(country))</span>
<span id="cb100-4"> <span class="co" style="color: #5E5E5E;"># can group by more than one column</span></span>
<span id="cb100-5"> .groupby([<span class="st" style="color: #20794D;">'year'</span>,<span class="st" style="color: #20794D;">'country'</span>])</span>
<span id="cb100-6"> .mean()</span>
<span id="cb100-7"> <span class="co" style="color: #5E5E5E;"># rotates or unstacks the innermost index, country</span></span>
<span id="cb100-8"> .unstack()</span>
<span id="cb100-9">)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/tmp/ipykernel_2753/1937283994.py:6: FutureWarning: The default value of numeric_only in DataFrameGroupBy.mean is deprecated. In a future version, numeric_only will default to False. Either specify numeric_only or select only columns which should be valid for the function.
  .mean()</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="60">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th colspan="2" halign="left">city08</th>
      <th colspan="2" halign="left">comb08</th>
      <th colspan="2" halign="left">highway08</th>
      <th colspan="2" halign="left">cylinders</th>
      <th colspan="2" halign="left">displ</th>
      <th colspan="2" halign="left">fuelCost08</th>
      <th colspan="2" halign="left">range</th>
      <th colspan="2" halign="left">speeds</th>
    </tr>
    <tr>
      <th>country</th>
      <th>Other</th>
      <th>US</th>
      <th>Other</th>
      <th>US</th>
      <th>Other</th>
      <th>US</th>
      <th>Other</th>
      <th>US</th>
      <th>Other</th>
      <th>US</th>
      <th>Other</th>
      <th>US</th>
      <th>Other</th>
      <th>US</th>
      <th>Other</th>
      <th>US</th>
    </tr>
    <tr>
      <th>year</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1984</th>
      <td>19.384615</td>
      <td>16.079232</td>
      <td>21.417330</td>
      <td>17.797119</td>
      <td>24.847038</td>
      <td>20.669868</td>
      <td>4.908046</td>
      <td>6.033613</td>
      <td>2.690516</td>
      <td>3.809268</td>
      <td>2118.125553</td>
      <td>2578.871549</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>3.969054</td>
      <td>3.872749</td>
    </tr>
    <tr>
      <th>1985</th>
      <td>19.284768</td>
      <td>16.275472</td>
      <td>21.373068</td>
      <td>18.025157</td>
      <td>24.816777</td>
      <td>21.020126</td>
      <td>4.871965</td>
      <td>5.949686</td>
      <td>2.636070</td>
      <td>3.765813</td>
      <td>2141.997792</td>
      <td>2553.899371</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>3.958057</td>
      <td>3.886792</td>
    </tr>
    <tr>
      <th>1986</th>
      <td>19.167183</td>
      <td>15.945035</td>
      <td>21.213622</td>
      <td>17.645390</td>
      <td>24.650155</td>
      <td>20.464539</td>
      <td>4.804954</td>
      <td>6.136525</td>
      <td>2.536234</td>
      <td>3.925433</td>
      <td>2149.148607</td>
      <td>2588.741135</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>4.069659</td>
      <td>3.886525</td>
    </tr>
    <tr>
      <th>1987</th>
      <td>18.633381</td>
      <td>15.611722</td>
      <td>20.710414</td>
      <td>17.326007</td>
      <td>24.186876</td>
      <td>20.208791</td>
      <td>4.825963</td>
      <td>6.164835</td>
      <td>2.583168</td>
      <td>3.932442</td>
      <td>2227.318117</td>
      <td>2630.036630</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>4.142653</td>
      <td>3.902930</td>
    </tr>
    <tr>
      <th>1988</th>
      <td>18.668224</td>
      <td>15.577869</td>
      <td>20.814642</td>
      <td>17.372951</td>
      <td>24.437695</td>
      <td>20.420082</td>
      <td>4.819315</td>
      <td>6.307377</td>
      <td>2.531434</td>
      <td>4.067735</td>
      <td>2207.476636</td>
      <td>2623.258197</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>4.205607</td>
      <td>4.028689</td>
    </tr>
    <tr>
      <th>1989</th>
      <td>18.533040</td>
      <td>15.139831</td>
      <td>20.662261</td>
      <td>16.908898</td>
      <td>24.252570</td>
      <td>19.887712</td>
      <td>4.879589</td>
      <td>6.366525</td>
      <td>2.542154</td>
      <td>4.173385</td>
      <td>2250.000000</td>
      <td>2698.093220</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>4.264317</td>
      <td>4.025424</td>
    </tr>
    <tr>
      <th>1990</th>
      <td>18.510109</td>
      <td>14.850575</td>
      <td>20.640747</td>
      <td>16.577011</td>
      <td>24.267496</td>
      <td>19.485057</td>
      <td>4.839813</td>
      <td>6.466667</td>
      <td>2.508090</td>
      <td>4.265798</td>
      <td>2238.258165</td>
      <td>2728.735632</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>4.328149</td>
      <td>4.105747</td>
    </tr>
    <tr>
      <th>1991</th>
      <td>18.087943</td>
      <td>14.803279</td>
      <td>20.174468</td>
      <td>16.599532</td>
      <td>23.809929</td>
      <td>19.683841</td>
      <td>5.029787</td>
      <td>6.538642</td>
      <td>2.610219</td>
      <td>4.350876</td>
      <td>2348.581560</td>
      <td>2725.761124</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>4.341844</td>
      <td>4.234192</td>
    </tr>
    <tr>
      <th>1992</th>
      <td>17.915374</td>
      <td>14.895631</td>
      <td>20.098731</td>
      <td>16.735437</td>
      <td>23.820874</td>
      <td>20.063107</td>
      <td>5.145275</td>
      <td>6.446602</td>
      <td>2.709618</td>
      <td>4.251104</td>
      <td>2373.272214</td>
      <td>2703.762136</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>4.356841</td>
      <td>4.252427</td>
    </tr>
    <tr>
      <th>1993</th>
      <td>18.084866</td>
      <td>15.007772</td>
      <td>20.309760</td>
      <td>16.896373</td>
      <td>24.172560</td>
      <td>20.230570</td>
      <td>5.114569</td>
      <td>6.497409</td>
      <td>2.683870</td>
      <td>4.282793</td>
      <td>2333.097595</td>
      <td>2677.202073</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>4.371994</td>
      <td>4.279793</td>
    </tr>
    <tr>
      <th>1994</th>
      <td>18.046474</td>
      <td>14.952514</td>
      <td>20.264423</td>
      <td>16.829609</td>
      <td>24.173077</td>
      <td>20.201117</td>
      <td>5.185897</td>
      <td>6.608939</td>
      <td>2.713631</td>
      <td>4.413091</td>
      <td>2326.041667</td>
      <td>2697.625698</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>4.355769</td>
      <td>4.293296</td>
    </tr>
    <tr>
      <th>1995</th>
      <td>17.678914</td>
      <td>14.533724</td>
      <td>20.091054</td>
      <td>16.422287</td>
      <td>24.263578</td>
      <td>19.747801</td>
      <td>5.444089</td>
      <td>6.715543</td>
      <td>2.908022</td>
      <td>4.506701</td>
      <td>2355.191693</td>
      <td>2759.677419</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>4.380192</td>
      <td>4.313783</td>
    </tr>
    <tr>
      <th>1996</th>
      <td>18.480545</td>
      <td>14.926641</td>
      <td>20.906615</td>
      <td>16.961390</td>
      <td>25.093385</td>
      <td>20.544402</td>
      <td>5.147860</td>
      <td>6.579151</td>
      <td>2.708768</td>
      <td>4.278708</td>
      <td>2250.291829</td>
      <td>2622.586873</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>4.416342</td>
      <td>4.262548</td>
    </tr>
    <tr>
      <th>1997</th>
      <td>18.090909</td>
      <td>14.978632</td>
      <td>20.509470</td>
      <td>16.991453</td>
      <td>24.678030</td>
      <td>20.683761</td>
      <td>5.261364</td>
      <td>6.581197</td>
      <td>2.786582</td>
      <td>4.220544</td>
      <td>2319.128788</td>
      <td>2600.427350</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>4.452652</td>
      <td>4.290598</td>
    </tr>
    <tr>
      <th>1998</th>
      <td>17.925267</td>
      <td>15.288000</td>
      <td>20.457295</td>
      <td>17.408000</td>
      <td>24.704626</td>
      <td>20.944000</td>
      <td>5.275801</td>
      <td>6.436000</td>
      <td>2.800378</td>
      <td>4.104777</td>
      <td>2295.373665</td>
      <td>2578.800000</td>
      <td>0.144128</td>
      <td>0.420000</td>
      <td>4.485765</td>
      <td>4.272000</td>
    </tr>
    <tr>
      <th>1999</th>
      <td>17.925125</td>
      <td>15.709163</td>
      <td>20.386023</td>
      <td>17.756972</td>
      <td>24.577371</td>
      <td>21.099602</td>
      <td>5.377704</td>
      <td>6.362550</td>
      <td>2.832181</td>
      <td>4.042677</td>
      <td>2312.728785</td>
      <td>2582.470120</td>
      <td>0.251248</td>
      <td>1.334661</td>
      <td>4.507488</td>
      <td>4.215139</td>
    </tr>
    <tr>
      <th>2000</th>
      <td>17.881849</td>
      <td>15.714844</td>
      <td>20.301370</td>
      <td>17.757812</td>
      <td>24.416096</td>
      <td>21.128906</td>
      <td>5.441781</td>
      <td>6.332031</td>
      <td>2.859111</td>
      <td>3.979351</td>
      <td>2385.958904</td>
      <td>2529.492188</td>
      <td>0.304795</td>
      <td>0.449219</td>
      <td>4.619863</td>
      <td>4.253906</td>
    </tr>
    <tr>
      <th>2001</th>
      <td>17.941267</td>
      <td>15.643939</td>
      <td>20.289026</td>
      <td>17.496212</td>
      <td>24.372488</td>
      <td>20.768939</td>
      <td>5.479134</td>
      <td>6.310606</td>
      <td>2.872808</td>
      <td>3.975823</td>
      <td>2399.536321</td>
      <td>2568.371212</td>
      <td>0.187017</td>
      <td>0.443182</td>
      <td>4.761978</td>
      <td>4.412879</td>
    </tr>
    <tr>
      <th>2002</th>
      <td>17.644412</td>
      <td>15.083916</td>
      <td>20.076923</td>
      <td>16.979021</td>
      <td>24.207547</td>
      <td>20.195804</td>
      <td>5.576197</td>
      <td>6.433566</td>
      <td>2.935398</td>
      <td>4.057423</td>
      <td>2425.689405</td>
      <td>2610.139860</td>
      <td>0.137881</td>
      <td>0.132867</td>
      <td>4.920174</td>
      <td>4.367133</td>
    </tr>
    <tr>
      <th>2003</th>
      <td>17.565101</td>
      <td>14.826087</td>
      <td>19.953020</td>
      <td>16.628763</td>
      <td>24.052349</td>
      <td>19.806020</td>
      <td>5.683221</td>
      <td>6.588629</td>
      <td>3.032161</td>
      <td>4.170778</td>
      <td>2480.604027</td>
      <td>2637.625418</td>
      <td>0.127517</td>
      <td>0.000000</td>
      <td>5.154362</td>
      <td>4.307692</td>
    </tr>
    <tr>
      <th>2004</th>
      <td>17.426290</td>
      <td>14.928571</td>
      <td>19.923833</td>
      <td>16.805195</td>
      <td>24.160934</td>
      <td>20.165584</td>
      <td>5.729730</td>
      <td>6.558442</td>
      <td>3.088666</td>
      <td>4.199593</td>
      <td>2476.719902</td>
      <td>2607.305195</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>5.229730</td>
      <td>4.308442</td>
    </tr>
    <tr>
      <th>2005</th>
      <td>17.412170</td>
      <td>15.196610</td>
      <td>19.892078</td>
      <td>17.132203</td>
      <td>24.189437</td>
      <td>20.664407</td>
      <td>5.773823</td>
      <td>6.447458</td>
      <td>3.151592</td>
      <td>4.131402</td>
      <td>2493.455798</td>
      <td>2592.881356</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>5.362801</td>
      <td>4.688136</td>
    </tr>
    <tr>
      <th>2006</th>
      <td>17.062575</td>
      <td>15.300366</td>
      <td>19.509025</td>
      <td>17.285714</td>
      <td>23.762936</td>
      <td>20.875458</td>
      <td>5.977136</td>
      <td>6.476190</td>
      <td>3.345220</td>
      <td>4.170487</td>
      <td>2527.496992</td>
      <td>2574.725275</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>5.492178</td>
      <td>4.776557</td>
    </tr>
    <tr>
      <th>2007</th>
      <td>16.996403</td>
      <td>15.489726</td>
      <td>19.452038</td>
      <td>17.626712</td>
      <td>23.742206</td>
      <td>21.202055</td>
      <td>6.044365</td>
      <td>6.513699</td>
      <td>3.423963</td>
      <td>4.212841</td>
      <td>2544.664269</td>
      <td>2510.958904</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>5.864508</td>
      <td>4.883562</td>
    </tr>
    <tr>
      <th>2008</th>
      <td>17.239869</td>
      <td>15.770073</td>
      <td>19.677985</td>
      <td>17.937956</td>
      <td>23.983571</td>
      <td>21.697080</td>
      <td>6.095290</td>
      <td>6.518248</td>
      <td>3.462049</td>
      <td>4.223408</td>
      <td>2551.369113</td>
      <td>2486.678832</td>
      <td>0.109529</td>
      <td>0.000000</td>
      <td>5.969332</td>
      <td>5.120438</td>
    </tr>
    <tr>
      <th>2009</th>
      <td>17.696803</td>
      <td>16.148014</td>
      <td>20.186329</td>
      <td>18.259928</td>
      <td>24.590959</td>
      <td>22.140794</td>
      <td>5.970232</td>
      <td>6.620939</td>
      <td>3.402613</td>
      <td>4.352489</td>
      <td>2433.076075</td>
      <td>2407.220217</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>6.189636</td>
      <td>5.563177</td>
    </tr>
    <tr>
      <th>2010</th>
      <td>18.325342</td>
      <td>17.278970</td>
      <td>20.851598</td>
      <td>19.600858</td>
      <td>25.256849</td>
      <td>23.785408</td>
      <td>5.897260</td>
      <td>6.223176</td>
      <td>3.357208</td>
      <td>4.048979</td>
      <td>2374.429224</td>
      <td>2263.304721</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>6.378995</td>
      <td>5.866953</td>
    </tr>
    <tr>
      <th>2011</th>
      <td>19.247387</td>
      <td>16.817844</td>
      <td>21.635308</td>
      <td>19.014870</td>
      <td>25.855981</td>
      <td>22.973978</td>
      <td>5.851336</td>
      <td>6.394052</td>
      <td>3.319702</td>
      <td>4.169094</td>
      <td>2326.248548</td>
      <td>2358.736059</td>
      <td>0.340302</td>
      <td>0.000000</td>
      <td>6.714286</td>
      <td>6.066914</td>
    </tr>
    <tr>
      <th>2012</th>
      <td>19.838052</td>
      <td>17.802974</td>
      <td>22.339751</td>
      <td>20.111524</td>
      <td>26.695357</td>
      <td>24.167286</td>
      <td>5.792752</td>
      <td>6.297398</td>
      <td>3.268908</td>
      <td>4.087332</td>
      <td>2282.502831</td>
      <td>2314.498141</td>
      <td>0.634202</td>
      <td>1.267658</td>
      <td>6.834655</td>
      <td>6.286245</td>
    </tr>
    <tr>
      <th>2013</th>
      <td>20.982888</td>
      <td>19.453815</td>
      <td>23.471658</td>
      <td>21.823293</td>
      <td>27.860963</td>
      <td>26.164659</td>
      <td>5.658824</td>
      <td>6.152610</td>
      <td>3.179253</td>
      <td>3.884311</td>
      <td>2208.288770</td>
      <td>2220.080321</td>
      <td>0.853476</td>
      <td>2.763052</td>
      <td>7.033155</td>
      <td>6.385542</td>
    </tr>
    <tr>
      <th>2014</th>
      <td>21.159919</td>
      <td>20.506329</td>
      <td>23.655870</td>
      <td>23.012658</td>
      <td>28.088057</td>
      <td>27.523207</td>
      <td>5.719636</td>
      <td>5.852321</td>
      <td>3.211738</td>
      <td>3.614723</td>
      <td>2212.196356</td>
      <td>2139.029536</td>
      <td>0.859312</td>
      <td>3.683544</td>
      <td>7.210526</td>
      <td>6.046414</td>
    </tr>
    <tr>
      <th>2015</th>
      <td>21.350000</td>
      <td>21.817490</td>
      <td>23.935294</td>
      <td>24.441065</td>
      <td>28.481373</td>
      <td>28.996198</td>
      <td>5.604902</td>
      <td>5.752852</td>
      <td>3.101696</td>
      <td>3.606063</td>
      <td>2164.215686</td>
      <td>2089.353612</td>
      <td>0.638235</td>
      <td>8.296578</td>
      <td>7.211765</td>
      <td>6.353612</td>
    </tr>
    <tr>
      <th>2016</th>
      <td>21.903749</td>
      <td>25.061818</td>
      <td>24.439716</td>
      <td>27.701818</td>
      <td>28.866261</td>
      <td>32.265455</td>
      <td>5.493414</td>
      <td>5.356364</td>
      <td>2.992272</td>
      <td>3.277454</td>
      <td>2127.608916</td>
      <td>1960.545455</td>
      <td>1.017224</td>
      <td>17.214545</td>
      <td>7.296859</td>
      <td>6.301818</td>
    </tr>
    <tr>
      <th>2017</th>
      <td>22.423795</td>
      <td>24.003623</td>
      <td>24.910521</td>
      <td>26.496377</td>
      <td>29.208456</td>
      <td>30.829710</td>
      <td>5.431662</td>
      <td>5.532609</td>
      <td>2.919041</td>
      <td>3.420272</td>
      <td>2114.110128</td>
      <td>2031.884058</td>
      <td>1.243854</td>
      <td>15.731884</td>
      <td>7.474926</td>
      <td>6.304348</td>
    </tr>
    <tr>
      <th>2018</th>
      <td>22.310442</td>
      <td>23.526690</td>
      <td>24.779868</td>
      <td>25.925267</td>
      <td>29.042333</td>
      <td>30.145907</td>
      <td>5.396990</td>
      <td>5.597865</td>
      <td>2.886801</td>
      <td>3.391101</td>
      <td>2121.448730</td>
      <td>2037.900356</td>
      <td>1.135466</td>
      <td>12.537367</td>
      <td>7.391345</td>
      <td>5.601423</td>
    </tr>
    <tr>
      <th>2019</th>
      <td>23.084221</td>
      <td>24.169014</td>
      <td>25.456922</td>
      <td>26.250000</td>
      <td>29.560503</td>
      <td>30.042254</td>
      <td>5.315586</td>
      <td>5.559859</td>
      <td>2.839671</td>
      <td>3.419375</td>
      <td>2093.659245</td>
      <td>2093.133803</td>
      <td>2.581801</td>
      <td>16.419014</td>
      <td>7.545983</td>
      <td>5.647887</td>
    </tr>
    <tr>
      <th>2020</th>
      <td>22.579487</td>
      <td>24.071429</td>
      <td>25.174359</td>
      <td>26.571429</td>
      <td>29.543590</td>
      <td>30.642857</td>
      <td>5.148718</td>
      <td>4.000000</td>
      <td>2.692823</td>
      <td>1.978795</td>
      <td>2050.256410</td>
      <td>1650.000000</td>
      <td>2.446154</td>
      <td>0.000000</td>
      <td>7.743590</td>
      <td>7.785714</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<div class="cell" data-execution_count="61">
<div class="sourceCode cell-code" id="cb102" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb102-1"><span class="co" style="color: #5E5E5E;"># back to simpler example, adding plots</span></span>
<span id="cb102-2">(autos2</span>
<span id="cb102-3"> .assign(country<span class="op" style="color: #5E5E5E;">=</span>autos2.make.<span class="bu" style="color: null;">apply</span>(country))</span>
<span id="cb102-4"> <span class="co" style="color: #5E5E5E;"># can group by more than one column</span></span>
<span id="cb102-5"> .groupby([<span class="st" style="color: #20794D;">'year'</span>,<span class="st" style="color: #20794D;">'country'</span>])</span>
<span id="cb102-6"> .mean()</span>
<span id="cb102-7"> <span class="co" style="color: #5E5E5E;"># .std()</span></span>
<span id="cb102-8"> <span class="co" style="color: #5E5E5E;"># rotates or unstacks the innermost index, country</span></span>
<span id="cb102-9"> .unstack()</span>
<span id="cb102-10"> <span class="co" style="color: #5E5E5E;"># focus on city08 column</span></span>
<span id="cb102-11"> .city08</span>
<span id="cb102-12"> .plot()</span>
<span id="cb102-13"> .legend(bbox_to_anchor<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">1</span>))</span>
<span id="cb102-14">)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/tmp/ipykernel_2753/2308684326.py:6: FutureWarning: The default value of numeric_only in DataFrameGroupBy.mean is deprecated. In a future version, numeric_only will default to False. Either specify numeric_only or select only columns which should be valid for the function.
  .mean()</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="61">
<pre><code>&lt;matplotlib.legend.Legend at 0x7f2091b75e10&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Pandas/Effective_Pandas_files/figure-html/cell-62-output-3.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="62">
<div class="sourceCode cell-code" id="cb105" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb105-1"><span class="co" style="color: #5E5E5E;"># time series smoothing - rolling average(2)</span></span>
<span id="cb105-2">(autos2</span>
<span id="cb105-3"> .assign(country<span class="op" style="color: #5E5E5E;">=</span>autos2.make.<span class="bu" style="color: null;">apply</span>(country))</span>
<span id="cb105-4"> <span class="co" style="color: #5E5E5E;"># can group by more than one column</span></span>
<span id="cb105-5"> .groupby([<span class="st" style="color: #20794D;">'year'</span>,<span class="st" style="color: #20794D;">'country'</span>])</span>
<span id="cb105-6"> .mean()</span>
<span id="cb105-7"> <span class="co" style="color: #5E5E5E;"># .std()</span></span>
<span id="cb105-8"> <span class="co" style="color: #5E5E5E;"># rotates or unstacks the innermost index, country</span></span>
<span id="cb105-9"> .unstack()</span>
<span id="cb105-10"> <span class="co" style="color: #5E5E5E;"># focus on city08 column</span></span>
<span id="cb105-11"> .city08</span>
<span id="cb105-12"> <span class="co" style="color: #5E5E5E;"># rolling average to smooth time series</span></span>
<span id="cb105-13"> .rolling(<span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb105-14"> .mean()</span>
<span id="cb105-15"> .plot()</span>
<span id="cb105-16"> .legend(bbox_to_anchor<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">1</span>))</span>
<span id="cb105-17">)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/tmp/ipykernel_2753/2271732648.py:6: FutureWarning: The default value of numeric_only in DataFrameGroupBy.mean is deprecated. In a future version, numeric_only will default to False. Either specify numeric_only or select only columns which should be valid for the function.
  .mean()</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="62">
<pre><code>&lt;matplotlib.legend.Legend at 0x7f2091a62ad0&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Pandas/Effective_Pandas_files/figure-html/cell-63-output-3.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="63">
<div class="sourceCode cell-code" id="cb108" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb108-1"><span class="co" style="color: #5E5E5E;"># can we emulate a SQL GROUP BY - HAVING query?</span></span>
<span id="cb108-2"><span class="co" style="color: #5E5E5E;"># let's only show grouped values over say 750</span></span>
<span id="cb108-3"><span class="kw" style="color: #003B4F;">def</span> vals_gt(df_, num):</span>
<span id="cb108-4">    <span class="cf" style="color: #003B4F;">return</span> df_[df_.gt(num)].dropna()</span>
<span id="cb108-5"></span>
<span id="cb108-6">(autos2</span>
<span id="cb108-7"> .assign(country<span class="op" style="color: #5E5E5E;">=</span>autos2.make.<span class="bu" style="color: null;">apply</span>(country))</span>
<span id="cb108-8"> <span class="co" style="color: #5E5E5E;"># can group by more than one column</span></span>
<span id="cb108-9"> .groupby([<span class="st" style="color: #20794D;">'year'</span>,<span class="st" style="color: #20794D;">'country'</span>])</span>
<span id="cb108-10"> .count()</span>
<span id="cb108-11"> .pipe(vals_gt, <span class="dv" style="color: #AD0000;">750</span>)</span>
<span id="cb108-12">)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="63">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th></th>
      <th>city08</th>
      <th>comb08</th>
      <th>highway08</th>
      <th>cylinders</th>
      <th>displ</th>
      <th>drive</th>
      <th>fuelCost08</th>
      <th>make</th>
      <th>model</th>
      <th>range</th>
      <th>createdOn</th>
      <th>automatic</th>
      <th>speeds</th>
      <th>ffs</th>
    </tr>
    <tr>
      <th>year</th>
      <th>country</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1984</th>
      <th>Other</th>
      <td>1131.0</td>
      <td>1131.0</td>
      <td>1131.0</td>
      <td>1131.0</td>
      <td>1131.0</td>
      <td>1131.0</td>
      <td>1131.0</td>
      <td>1131.0</td>
      <td>1131.0</td>
      <td>1131.0</td>
      <td>1131.0</td>
      <td>1131.0</td>
      <td>1131.0</td>
      <td>1065.0</td>
    </tr>
    <tr>
      <th>1985</th>
      <th>Other</th>
      <td>906.0</td>
      <td>906.0</td>
      <td>906.0</td>
      <td>906.0</td>
      <td>906.0</td>
      <td>906.0</td>
      <td>906.0</td>
      <td>906.0</td>
      <td>906.0</td>
      <td>906.0</td>
      <td>906.0</td>
      <td>906.0</td>
      <td>906.0</td>
      <td>821.0</td>
    </tr>
    <tr>
      <th>2017</th>
      <th>Other</th>
      <td>1017.0</td>
      <td>1017.0</td>
      <td>1017.0</td>
      <td>1017.0</td>
      <td>1017.0</td>
      <td>1017.0</td>
      <td>1017.0</td>
      <td>1017.0</td>
      <td>1017.0</td>
      <td>1017.0</td>
      <td>1017.0</td>
      <td>1017.0</td>
      <td>1017.0</td>
      <td>766.0</td>
    </tr>
    <tr>
      <th>2018</th>
      <th>Other</th>
      <td>1063.0</td>
      <td>1063.0</td>
      <td>1063.0</td>
      <td>1063.0</td>
      <td>1063.0</td>
      <td>1063.0</td>
      <td>1063.0</td>
      <td>1063.0</td>
      <td>1063.0</td>
      <td>1063.0</td>
      <td>1063.0</td>
      <td>1063.0</td>
      <td>1063.0</td>
      <td>844.0</td>
    </tr>
    <tr>
      <th>2019</th>
      <th>Other</th>
      <td>1033.0</td>
      <td>1033.0</td>
      <td>1033.0</td>
      <td>1033.0</td>
      <td>1033.0</td>
      <td>1033.0</td>
      <td>1033.0</td>
      <td>1033.0</td>
      <td>1033.0</td>
      <td>1033.0</td>
      <td>1033.0</td>
      <td>1033.0</td>
      <td>1033.0</td>
      <td>855.0</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
</section>
<section id="key-takeaways" class="level2">
<h2 class="anchored" data-anchor-id="key-takeaways">Key takeaways</h2>
<p>Having code that is clean, readable and has a logical flow is invaluable. Structured Query Language (SQL), as the name suggests, already pushes you down this road. Python, although often referred to as the swiss army knife of programming languages, can quickly beocme scattered and difficult to follow particulary during the exploratory data analysis (EDA) phase. However by adopting the <strong>chaining</strong> method covered in this blog, your code should ensure that others (as well as yourself!) can follow exactly what is going on.</p>
<p>Although computer memory continues to get cheaper, I think it is good practice to keep track of how much data is being used, and there are some interesting ways covered in this blog as to how we might go about achieving this. e.g.&nbsp;<a href="https://numpy.org/doc/stable/reference/generated/numpy.iinfo.html">numpy.iinfo</a>. In the same breath, <em>speed</em> is also of the essence, and the handy Python cell magic <em>%%timeit</em> provides an easy way to quantify this. With pandas there is generally a variety of different ways to arrive at the same outcome, but as this blog covers there can be substantial time savings if you know which method to use and when, and which to avoid if possible, in particular the use of <em>.apply</em>.</p>
<p>This blog has been produced in response to the <strong>Effective Pandas</strong> video presented by <strong><a href="https://twitter.com/__mharrison__">Matt Harrison</a></strong> which you can view below. Thanks also to <strong><a href="https://twitter.com/svpino">Santiago</a></strong> for the heads up on Twitter.</p>
<div class="cell" data-execution_count="64">
<div class="sourceCode cell-code" id="cb109" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb109-1"><span class="op" style="color: #5E5E5E;">%%</span>HTML</span>
<span id="cb109-2"><span class="op" style="color: #5E5E5E;">&lt;</span>iframe width<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"560"</span> height<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"315"</span> src<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"https://www.youtube.com/embed/zgbUk90aQ6A?start=482"</span> title<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"YouTube video player"</span> frameborder<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"0"</span> allow<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"</span> allowfullscreen<span class="op" style="color: #5E5E5E;">&gt;&lt;/</span>iframe<span class="op" style="color: #5E5E5E;">&gt;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<iframe width="560" height="315" src="https://www.youtube.com/embed/zgbUk90aQ6A?start=482" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>
</div>
</div>
<p>If the above <strong><em>%%HTML</em></strong> cell magic is unfamiliar to you, then I recommend you watch the excellent video below posted by <strong><a href="https://twitter.com/coreymschafer">Corey Shafer</a></strong>. An excellent introduction for anyone starting out with Jupyter NoteBooks.</p>
<div class="cell" data-execution_count="65">
<div class="sourceCode cell-code" id="cb110" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb110-1"><span class="op" style="color: #5E5E5E;">%%</span>HTML</span>
<span id="cb110-2"><span class="op" style="color: #5E5E5E;">&lt;</span>iframe width<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"560"</span> height<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"315"</span> src<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"https://www.youtube.com/embed/HW29067qVWk"</span> title<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"YouTube video player"</span> frameborder<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"0"</span> allow<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"</span> allowfullscreen<span class="op" style="color: #5E5E5E;">&gt;&lt;/</span>iframe<span class="op" style="color: #5E5E5E;">&gt;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<iframe width="560" height="315" src="https://www.youtube.com/embed/HW29067qVWk" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>
</div>
</div>


</section>

 ]]></description>
  <category>pandas</category>
  <guid>https://stephen137.github.io/posts/Pandas/Effective_Pandas.html</guid>
  <pubDate>Fri, 30 Dec 2022 23:00:00 GMT</pubDate>
  <media:content url="https://stephen137.github.io/posts/Pandas/pandas.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Image Processing with Python</title>
  <dc:creator>Stephen Barrie</dc:creator>
  <link>https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>As computer systems have become faster and more powerful, and cameras and other imaging systems have become commonplace in many other areas of life, the need has grown for researchers to be able to process and analyse image data. Considering the large volumes of data that can be involved - high-resolution images that take up a lot of disk space/virtual memory, and/or collections of many images that must be processed together - and the time-consuming and error-prone nature of manual processing, it can be advantageous or even necessary for this processing and analysis to be automated as a computer program.</p>
<p>This blog introduces an open source toolkit for processing image data: the Python programming language and the <a href="https://scikit-image.org/">scikit-image (skimage)</a> library. With careful experimental design, Python code can be a powerful instrument in answering many different kinds of questions.</p>
<section id="uses-of-image-processing-in-research" class="level3">
<h3 class="anchored" data-anchor-id="uses-of-image-processing-in-research">Uses of Image Processing in Research</h3>
<p>Automated processing can be used to analyse many different properties of an image, including the distribution and change in colours in the image, the number, size, position, orientation, and shape of objects in the image, and even - when combined with machine learning techniques for object recognition - the type of objects in the image.</p>
<p>Some examples of image processing methods applied in research include:</p>
<ul>
<li><a href="https://iopscience.iop.org/article/10.3847/2041-8213/ab0e85">imaging a Black Hole</a></li>
<li><a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3325796/">estimating the population of Emperor Penguins</a></li>
<li><a href="https://www.cell.com/cell/fulltext/S0092-8674(19)31124-9">the global-scale analysis of marine plankton diversity</a></li>
<li><a href="https://www.sciencedirect.com/science/article/abs/pii/S0169260717303383?via%3Dihub">segmentation of liver and vessels from CT images</a></li>
</ul>
<p>This blog aims to provide a thorough grounding in the fundamental concepts and skills of working with image data in Python. Most of the examples used focus on one particular class of image processing technique, morphometrics, but what we will learn can be used to solve a much wider range of problems.</p>
</section>
<section id="morphometrics" class="level3">
<h3 class="anchored" data-anchor-id="morphometrics">Morphometrics</h3>
<p>Morphometrics involves counting the number of objects in an image, analyzing the size of the objects, or analyzing the shape of the objects. For example, we might be interested in automatically counting the number of bacterial colonies growing in a Petri dish.</p>
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/petri_dish.jpg" width="400" height="400"></p>
<p>We could use image processing to find the colonies, count them, and then highlight their locations on the original image.</p>
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/colony-mask.png" width="400" height="400"></p>
<p>Note that we can easily manually count the number of bacteria colonies shown in the morphometric example above. So, why should we learn how to write a Python program to do a task we could easily perform with our own eyes? There are at least two reasons to learn how to perform tasks like these with Python and skimage:</p>
<ol type="1">
<li><p>What if there are many more bacteria colonies in the Petri dish? For example, suppose the image looked like this: Manually counting the colonies in that image would present more of a challenge. A Python program using skimage could count the number of colonies more accurately, and much more quickly, than a human could.</p></li>
<li><p>What if we have hundreds, or thousands, of images to consider? Imagine having to manually count colonies on several thousand images like those above. A Python program using skimage could move through all of the images in seconds; how long would a graduate student require to do the task? Which process would be more accurate and repeatable?</p></li>
</ol>
<p>As we can see, the simple image processing / computer vision techniques we will learn during this blog can be very valuable tools for scientific research. As we progress, we will learn image analysis methods useful for many different scientific problems. Let’s get started, by learning some basics about how images are represented and stored digitally.</p>
<div class="callout-important callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Key Points:<br>

</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>Simple Python and skimage (scikit-image) techniques can be used to solve genuine image analysis problems<br>
</li>
<li>Morphometric problems involve the number, shape, and / or size of the objects in an image</li>
</ul>
</div>
</div>
</section>
</section>
<section id="image-basics" class="level2">
<h2 class="anchored" data-anchor-id="image-basics">1. Image Basics</h2>
<p>The images we see on hard copy, view with our electronic devices, or process with our programs are represented and stored in the computer as numeric abstractions, approximations of what we see with our eyes in the real world. Before we begin to learn how to process images with Python programs, we need to spend some time understanding how these abstractions work.</p>
<section id="pixels" class="level3">
<h3 class="anchored" data-anchor-id="pixels">Pixels</h3>
<p>It is important to realise that images are stored as rectangular arrays of hundreds, thousands, or millions of discrete “picture elements,” otherwise known as pixels. Each pixel can be thought of as a single square point of coloured light. For example, consider this image of a maize seedling, with a square area designated by a red box:</p>
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/maize-seedling-original.jpg" width="600" height="600"></p>
<p>Now, if we zoomed in close enough to see the pixels in the red box, we would see something like this:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/c959201d-6ffe-4a0e-9c24-6bb5fbe434d0.jpg" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">maize-seedling-enlarged.jpg</figcaption><p></p>
</figure>
</div>
<p>Note that each square in the enlarged image area - each pixel - is all one colour, but that each pixel can have a different colour from its neighbours. Viewed from a distance, these pixels seem to blend together to form the image we see.</p>
</section>
<section id="working-with-pixels" class="level3">
<h3 class="anchored" data-anchor-id="working-with-pixels">Working with Pixels</h3>
<p>As noted, in practice, real world images will typically be made up of a vast number of pixels, and each of these pixels will be one of potentially millions of colours. While we will deal with pictures of such complexity shortly, let’s start our exploration with 15 pixels in a 5 X 3 matrix with 2 colours and work our way up to that complexity.</p>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Matrices, arrays, images and pixels
</div>
</div>
<div class="callout-body-container callout-body">
<p>The matrix is mathematical concept - numbers evenly arranged in a rectangle. This can be a two dimensional rectangle, like the shape of the screen you’re looking at now. Or it could be a three dimensional equivalent, a cuboid, or have even more dimensions, but always keeping the evenly spaced arrangement of numbers. In computing, array refers to a structure in the computer’s memory where data is stored in evenly-spaced elements. This is strongly analogous to a matrix. A numpy array is a type of variable (a simpler example of a type is an integer). For our purposes, the distinction between matrices and arrays is not important, we don’t really care how the computer arranges our data in its memory. The important thing is that the computer stores values describing the pixels in images, as arrays. And the terms matrix and array can be used interchangeably.</p>
</div>
</div>
<p>First, the necessary imports:</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># Python libraries for learning and performing image processing</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb1-4"><span class="im" style="color: #00769E;">import</span> ipympl</span>
<span id="cb1-5"><span class="im" style="color: #00769E;">import</span> imageio.v3 <span class="im" style="color: #00769E;">as</span> iio</span>
<span id="cb1-6"><span class="im" style="color: #00769E;">import</span> skimage</span></code></pre></div>
</div>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Import Statements in Python
</div>
</div>
<div class="callout-body-container callout-body">
<p>In Python, the import statement is used to load additional functionality into a program. This is necessary when we want our code to do something more specialised, which cannot easily be achieved with the limited set of basic tools and data structures available in the default Python environment. Additional functionality can be loaded as a single function or object, a module defining several of these, or a library containing many modules. We will encounter several different forms of import statement.</p>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># form 1, load whole skimage library</span></span>
<span id="cb2-2"><span class="im" style="color: #00769E;">import</span> skimage  </span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;"># form 2, load skimage.draw module only</span></span>
<span id="cb2-5"><span class="im" style="color: #00769E;">import</span> skimage.draw  </span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="co" style="color: #5E5E5E;"># form 3, load only the disk function</span></span>
<span id="cb2-8"><span class="im" style="color: #00769E;">from</span> skimage.draw <span class="im" style="color: #00769E;">import</span> disk</span>
<span id="cb2-9"></span>
<span id="cb2-10"><span class="co" style="color: #5E5E5E;"># form 4, load all of numpy into an object called np</span></span>
<span id="cb2-11"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np           </span></code></pre></div>
</div>
<p>Now that we have our libraries loaded, we will run a Jupyter Magic Command that will ensure our images display in our Jupyter document with pixel information that will help us more efficiently run commands later in the session.</p>
<div class="cell" data-execution_count="105">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="op" style="color: #5E5E5E;">%</span>matplotlib inline</span></code></pre></div>
</div>
<p>With that taken care of, let’s load our image data from disk using the imread function from the imageio.v3 module and display it using the imshow function from the matplotlib.pyplot module. imageio is a Python library for reading and writing image data. imageio.v3 is specifying that we want to use version 3 of imageio. This version has the benefit of supporting nD (multidimensional) image data natively (think of volumes, movies).</p>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Why not use skimage.io.imread()
</div>
</div>
<div class="callout-body-container callout-body">
<p>The skimage library has its own function to read an image, so you might be asking why we don’t use it here. Actually, skimage.io.imread() uses iio.imread() internally when loading an image into Python. It is certainly something you may use as you see fit in your own code. In this lesson, we use the imageio library to read or write (save) images, while skimage is dedicated to performing operations on the images. Using imageio gives us more flexibility, especially when it comes to handling metadata.</p>
</div>
</div>
<div class="cell" data-execution_count="107">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;">from</span> skimage <span class="im" style="color: #00769E;">import</span> data, io</span>
<span id="cb4-2"><span class="im" style="color: #00769E;">from</span> matplotlib <span class="im" style="color: #00769E;">import</span> pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb4-3"></span>
<span id="cb4-4">image <span class="op" style="color: #5E5E5E;">=</span> iio.imread(uri<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Images/eight.tif"</span>)</span>
<span id="cb4-5">plt.imshow(image)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="107">
<pre><code>&lt;matplotlib.image.AxesImage at 0x7f29490f2fe0&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/cell-5-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>You might be thinking, “That does look vaguely like an eight, and I see two colours but how can that be only 15 pixels”. The display of the eight you see does use a lot more screen pixels to display our eight so large, but that does not mean there is information for all those screen pixels in the file. All those extra pixels are a consequence of our viewer creating additional pixels through interpolation. It could have just displayed it as a tiny image using only 15 screen pixels if the viewer was designed differently.</p>
<p>While many image file formats contain descriptive metadata that can be essential, the bulk of a picture file is just arrays of numeric information that, when interpreted according to a certain rule set, become recognizable as an image to us. Our image of an eight is no exception, and imageio.v3 stored that image data in an array of arrays making a 5 x 3 matrix of 15 pixels. We can demonstrate that by calling on the shape property of our image variable and see the matrix by printing our image variable to the screen.</p>
<div class="cell" data-execution_count="108">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="bu" style="color: null;">print</span>(image.shape)</span>
<span id="cb6-2"><span class="bu" style="color: null;">print</span>(image)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>(5, 3)
[[0. 0. 0.]
 [0. 1. 0.]
 [0. 0. 0.]
 [0. 1. 0.]
 [0. 0. 0.]]</code></pre>
</div>
</div>
<p>Thus if we have tools that will allow us to manipulate these arrays of numbers, we can manipulate the image. The numpy library can be particularly useful here, so let’s try that out using numpy array slicing. Notice that the default behavior of the imshow function appended row and column numbers that will be helpful to us as we try to address individual or groups of pixels. First let’s load another copy of our eight, and then make it look like a zero.</p>
<p>To make it look like a zero, we need to change the number underlying the centremost pixel to be 1. With the help of those row and column headers, at this small scale we can determine the centre pixel is in row labeled 2 and column labeled 1. Using array slicing, we can then address and assign a new value to that position.</p>
<p>zero = iio.imread(uri=“Images/eight.tif”) zero[2,1]= 1.0 ““” The following line of code creates a new figure for imshow to use in displaying our output. Without it, plt.imshow() would overwrite our previous image in the cell above ““” fig, ax = plt.subplots() plt.imshow(zero) print(zero)</p>
</section>
<section id="co-ordinate-system" class="level3">
<h3 class="anchored" data-anchor-id="co-ordinate-system">Co-ordinate system</h3>
<p>When we process images, we can access, examine, and / or change the colour of any pixel we wish. To do this, we need some convention on how to access pixels individually; a way to give each one a name, or an address of a sort. The most common manner to do this, and the one we will use in our programs, is to assign a modified Cartesian coordinate system to the image. The coordinate system we usually see in mathematics has a horizontal x-axis and a vertical y-axis, like this:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/7e5dd48d-dc48-4e05-87a0-61bbece9677a.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">cartesian-coordinates.png</figcaption><p></p>
</figure>
</div>
<p>The modified coordinate system used for our images will have only positive coordinates, the origin will be in the upper left corner instead of the centre, and y coordinate values will get larger as they go down instead of up, like this:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/f0c8103e-2890-48c9-86bf-b6b49320de10.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">modified-coordinates.png</figcaption><p></p>
</figure>
</div>
<p>This is called a left-hand coordinate system. If you hold your left hand in front of your face and point your thumb at the floor, your extended index finger will correspond to the x-axis while your thumb represents the y-axis.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/a3dce119-5072-49bb-8008-c07b06a30c75.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">left-hand-coordinates.png</figcaption><p></p>
</figure>
</div>
<div class="callout-warning callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
The most common mistake made with coordinates is to forget that y coordinates get larger as they go down instead of up as in a normal Cartesian coordinate system.
</div>
</div>
<div class="callout-body-container callout-body">
<p>Consequently, it may be helpful to think in terms of counting down rows (r) for the y-axis and across columns (c) for the x-axis. This can be especially helpful in cases where you need to transpose image viewer data provided in x,y format to y,x format. Thus, we will use cx and ry where appropriate to help bridge these two approaches.</p>
</div>
</div>
</section>
<section id="changing-pixel-values" class="level3">
<h3 class="anchored" data-anchor-id="changing-pixel-values">Changing pixel values</h3>
<p>Let’s load another copy of eight named five, and then change the value of pixels so you have what looks like a 5 instead of an 8. There are many possible solutions, but one method would be . . .</p>
<div class="cell" data-execution_count="109">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">five <span class="op" style="color: #5E5E5E;">=</span> iio.imread(uri<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Images/eight.tif"</span>)</span>
<span id="cb8-2">five[<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">2</span>]<span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">1.0</span></span>
<span id="cb8-3">five[<span class="dv" style="color: #AD0000;">3</span>,<span class="dv" style="color: #AD0000;">0</span>]<span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">1.0</span></span>
<span id="cb8-4">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb8-5">plt.imshow(five)</span>
<span id="cb8-6"><span class="bu" style="color: null;">print</span>(five)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[0. 0. 0.]
 [0. 1. 1.]
 [0. 0. 0.]
 [1. 1. 0.]
 [0. 0. 0.]]</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/cell-7-output-2.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="more-colours" class="level3">
<h3 class="anchored" data-anchor-id="more-colours">More colours</h3>
<p>Up to now, we only had a 2 colour matrix, but we can have more if we use other numbers or fractions. One common way is to use the numbers between 0 and 255 to allow for 256 different colours or 256 different levels of grey. Let’s try that out:</p>
<div class="cell" data-execution_count="110">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;"># make a copy of eight</span></span>
<span id="cb10-2">three_colours <span class="op" style="color: #5E5E5E;">=</span> iio.imread(uri<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Images/eight.tif"</span>)</span>
<span id="cb10-3"></span>
<span id="cb10-4"><span class="co" style="color: #5E5E5E;"># multiply the whole matrix by 128</span></span>
<span id="cb10-5">three_colours <span class="op" style="color: #5E5E5E;">=</span> three_colours <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">128</span></span>
<span id="cb10-6"></span>
<span id="cb10-7"><span class="co" style="color: #5E5E5E;"># set the middle row (index 2) to the value of 255.,</span></span>
<span id="cb10-8"><span class="co" style="color: #5E5E5E;"># so you end up with the values 0., 128., and 255.</span></span>
<span id="cb10-9">three_colours[<span class="dv" style="color: #AD0000;">2</span>,:] <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">255.</span></span>
<span id="cb10-10">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb10-11">plt.imshow(three_colours)</span>
<span id="cb10-12"><span class="bu" style="color: null;">print</span>(three_colours)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[  0.   0.   0.]
 [  0. 128.   0.]
 [255. 255. 255.]
 [  0. 128.   0.]
 [  0.   0.   0.]]</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/cell-8-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>We now have 3 colours, but are they the three colours you expected? They all appear to be on a continuum of dark purple on the low end and yellow on the high end. This is a consequence of the default colour map (cmap) in this library. You can think of a colour map as an association or mapping of numbers to a specific colour. However, the goal here is not to have one number for every possible colour, but rather to have a continuum of colours that demonstrate relative intensity. In our specific case here for example, 255 or the highest intensity is mapped to yellow, and 0 or the lowest intensity is mapped to a dark purple. The best colour map for your data will vary and there are many options built in, but this default selection was not arbitrary. A lot of science went into making this the default due to its robustness when it comes to how the human mind interprets relative colour values, grey-scale printability, and colour-blind friendliness (You can read more about this default colour map in a Matplotlib tutorial and an explanatory article by the authors). Thus it is a good place to start, and you should change it only with purpose and forethought. For now, let’s see how you can do that using an alternative map you have likely seen before where it will be even easier to see it as a mapped continuum of intensities: greyscale.</p>
<div class="cell" data-execution_count="111">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb12-2">plt.imshow(three_colours,cmap<span class="op" style="color: #5E5E5E;">=</span>plt.cm.gray)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="111">
<pre><code>&lt;matplotlib.image.AxesImage at 0x7f294bdd79d0&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/cell-9-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>Above we have exactly the same underying data matrix, but in greyscale. Zero maps to black, 255 maps to white, and 128 maps to medium grey. Here we only have a single channel in the data and utilize a grayscale color map to represent the luminance, or intensity of the data and correspondingly this channel is referred to as the luminance channel.</p>
</section>
<section id="even-more-colours" class="level3">
<h3 class="anchored" data-anchor-id="even-more-colours">Even More Colours</h3>
<p>This is all well and good at this scale, but what happens when we instead have a picture of a natural landscape that contains millions of colours. Having a one to one mapping of number to colour like this would be inefficient and make adjustments and building tools to do so very difficult. Rather than larger numbers, the solution is to have more numbers in more dimensions. Storing the numbers in a multi-dimensional matrix where each colour or property like transparency is associated with its own dimension allows for individual contributions to a pixel to be adjusted independently. This ability to manipulate properties of groups of pixels separately will be key to certain techniques explored in later chapters of this lesson.</p>
<p>To get started let’s see an example of how different dimensions of information combine to produce a set of pixels using a 4 X 4 matrix with 3 dimensions for the colours red, green, and blue. Rather than loading it from a file, we will generate this example using NumPy.</p>
<div class="cell" data-execution_count="112">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;"># set the random seed so we all get the same matrix</span></span>
<span id="cb14-2">pseudorandomizer <span class="op" style="color: #5E5E5E;">=</span> np.random.RandomState(<span class="dv" style="color: #AD0000;">2021</span>)</span>
<span id="cb14-3"><span class="co" style="color: #5E5E5E;"># create a 4 × 4 checkerboard of random colours</span></span>
<span id="cb14-4">checkerboard <span class="op" style="color: #5E5E5E;">=</span> pseudorandomizer.randint(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">255</span>, size<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">3</span>))</span>
<span id="cb14-5"><span class="co" style="color: #5E5E5E;"># restore the default map as you show the image</span></span>
<span id="cb14-6">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb14-7">plt.imshow(checkerboard)</span>
<span id="cb14-8"><span class="co" style="color: #5E5E5E;"># display the arrays</span></span>
<span id="cb14-9"><span class="bu" style="color: null;">print</span>(checkerboard)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[[116  85  57]
  [128 109  94]
  [214  44  62]
  [219 157  21]]

 [[ 93 152 140]
  [246 198 102]
  [ 70  33 101]
  [  7   1 110]]

 [[225 124 229]
  [154 194 176]
  [227  63  49]
  [144 178  54]]

 [[123 180  93]
  [120   5  49]
  [166 234 142]
  [ 71  85  70]]]</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/cell-10-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>Previously we had one number being mapped to one colour or intensity. <strong>Now</strong> we are combining the effect of 3 numbers to arrive at a single colour value. Let’s see an example of that using the blue square at the end of the second row, which has the index [row, column][1, 3]. Note that in Python indexing starts at zero.</p>
<div class="cell" data-execution_count="113">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="co" style="color: #5E5E5E;"># extract all the colour information for the blue square</span></span>
<span id="cb16-2">upper_right_square <span class="op" style="color: #5E5E5E;">=</span> checkerboard[<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">3</span>, :]</span>
<span id="cb16-3">upper_right_square</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="113">
<pre><code>array([  7,   1, 110])</code></pre>
</div>
</div>
<p>The integers in order represent</p>
<ul>
<li>Red: 7</li>
<li>Green: 1</li>
<li>Blue: 3</li>
</ul>
<p>Looking at theses three values and knowing how they map, can help us understand why it is blue. If we divide each value by 255, which is the maximum, we can determine how much it is contributing relative to its maximum potential. Effectively, the red is at 7/255 or 2.8 percent of its potential, the green is at 1/255 or 0.4 percent, and blue is 110/255 or 43.1 percent of its potential. So when you mix those three intensities of colour, blue is winning by a wide margin, but the red and green still contribute to make it a slightly different shade of blue than 0,0,110 would be on its own.</p>
<p>These colours mapped to dimensions of the matrix may be referred to as channels. It may be helpful to display each of these channels independently, to help us understand what is happening. We can do that by multiplying our image array representation with a 1d matrix that has a one for the channel we want to keep and zeros for the rest.</p>
<div class="cell" data-execution_count="104">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;"># transform array to focus only on the red channel (green and blue channels effectively removed by multiplying by zero)</span></span>
<span id="cb18-2">red_channel <span class="op" style="color: #5E5E5E;">=</span> checkerboard <span class="op" style="color: #5E5E5E;">*</span> [<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb18-3">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb18-4">plt.imshow(red_channel)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="104">
<pre><code>&lt;matplotlib.image.AxesImage at 0x7f2949357580&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/cell-12-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="105">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="co" style="color: #5E5E5E;"># transform array to focus only on the green channel (red and blue channels effectively removed by multiplying by zero)</span></span>
<span id="cb20-2">green_channel <span class="op" style="color: #5E5E5E;">=</span> checkerboard <span class="op" style="color: #5E5E5E;">*</span> [<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb20-3">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb20-4">plt.imshow(green_channel)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="105">
<pre><code>&lt;matplotlib.image.AxesImage at 0x7f29491dae60&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/cell-13-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="106">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="co" style="color: #5E5E5E;"># transform array to focus only on the blue channel (red and green channels effectively removed by multiplying by zero)</span></span>
<span id="cb22-2">blue_channel <span class="op" style="color: #5E5E5E;">=</span> checkerboard <span class="op" style="color: #5E5E5E;">*</span> [<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb22-3">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb22-4">plt.imshow(blue_channel)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="106">
<pre><code>&lt;matplotlib.image.AxesImage at 0x7f2949248700&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/cell-14-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>If we look at the upper [1, 3] square in all three figures, we can see each of those colour contributions in action. Notice that there are several squares in the blue figure that look even more intensely blue than square [1, 3]. When all three channels are combined though, the blue light of those squares is being diluted by the relative strength of red and green being mixed in with them.</p>
</section>
<section id="bit-rgb-colour" class="level3">
<h3 class="anchored" data-anchor-id="bit-rgb-colour">24-bit RGB Colour</h3>
<p>This last colour model we used, known as the RGB (Red, Green, Blue) model, is the most common. As we saw, the RGB model is an additive colour model, which means that the primary colours are mixed together to form other colours. Most frequently, the amount of the primary colour added is represented as an integer in the closed range [0, 255] as seen in the example. Therefore, there are 256 discrete amounts of each primary colour that can be added to produce another colour. The number of discrete amounts of each colour, 256, corresponds to the number of bits used to hold the colour channel value, which is eight (28=256). Since we have three channels with 8 bits for each (8+8+8=24), this is called 24-bit colour depth.</p>
<p>Any particular colour in the RGB model can be expressed by a triplet of integers in [0, 255], representing the red, green, and blue channels, respectively. A larger number in a channel means that more of that primary colour is present.</p>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-6-contents" aria-controls="callout-6" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Suppose that we represent colours as triples (r, g, b), where each of r, g, and b is an integer in [0, 255]. What colours are represented by each of these triples? 1.(255, 0, 0) &nbsp;2.(0, 255, 0) &nbsp;3.(0, 0, 255) &nbsp;4.(255, 255, 255) &nbsp;5.(0, 0, 0) &nbsp;6.(128, 128, 128)
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-6" class="callout-6-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ol type="1">
<li>(255, 0, 0) represents red, because the red channel is maximised, while the other two channels have the minimum values<br>
</li>
<li>(0, 255, 0) represents green<br>
</li>
<li>(0, 0, 255) represents blue<br>
</li>
<li>(255, 255, 255) is a little harder. When we mix the maximum value of all three colour channels, we see the colour white<br>
</li>
<li>(0, 0, 0) represents the absence of all colour, or black<br>
</li>
<li>(128, 128, 128) represents a medium shade of gray. Note that the 24-bit RGB colour model provides at least 254 shades of gray, rather than only fifty</li>
</ol>
</div>
</div>
</div>
<p>Note that the RGB colour model may run contrary to your experience, especially if you have mixed primary colours of paint to create new colours. In the RGB model, the lack of any colour is black, while the maximum amount of each of the primary colours is white. With physical paint, we might start with a white base, and then add differing amounts of other paints to produce a darker shade.</p>
<p>We can look at some further examples of 24-bit RGB colours, in a visual way. The image below shows some colour names, their 24-bit RGB triplet values, and the colour itself:</p>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-7-contents" aria-controls="callout-7" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
We cannot really provide a complete table. To see why, answer this question: How many possible colours can be represented with the 24-bit RGB model?
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-7" class="callout-7-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>There are 24 total bits in an RGB colour of this type, and each bit can be on or off, and so there are <img src="https://latex.codecogs.com/png.latex?2%5E%7B24%7D"> = 16,777,216 possible colours with our additive, 24-bit RGB colour model.</p>
</div>
</div>
</div>
<p>Although 24-bit colour depth is common, there are other options. We might have 8-bit colour (3 bits for red and green, but only 2 for blue, providing 8 × 8 × 4 = 256 colours) or 16-bit colour (4 bits for red, green, and blue, plus 4 more for transparency, providing 16 × 16 × 16 = 4096 colours), for example. There are colour depths with more than eight bits per channel, but as the human eye can only discern approximately 10 million different colours, these are not often used.</p>
<p>If you are using an older or inexpensive laptop screen or LCD monitor to view images, it may only support 18-bit colour, capable of displaying 64 × 64 × 64 = 262,144 colours. 24-bit colour images will be converted in some manner to 18-bit, and thus the colour quality you see will not match what is actually in the image.</p>
<p>We can combine our coordinate system with the 24-bit RGB colour model to gain a conceptual understanding of the images we will be working with. An image is a rectangular array of pixels, each with its own coordinate. Each pixel in the image is a square point of coloured light, where the colour is specified by a 24-bit RGB triplet. Such an image is an example of <em>raster graphics</em>.</p>
</section>
<section id="image-formats" class="level3">
<h3 class="anchored" data-anchor-id="image-formats">Image formats</h3>
<p>Although the images we will manipulate in our programs are conceptualised as rectangular arrays of RGB triplets, they are not necessarily created, stored, or transmitted in that format. There are several image formats we might encounter, and we should know the basics of at least of few of them. Some formats we might encounter, and their file extensions, are shown in this table:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/6d142f05-4903-4a20-a3f3-70809ed8ba7e.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">image_formats.JPG</figcaption><p></p>
</figure>
</div>
</section>
<section id="device-independent-bitmap-bmp" class="level3">
<h3 class="anchored" data-anchor-id="device-independent-bitmap-bmp">Device-Independent Bitmap (BMP)</h3>
<p>The file format that comes closest to our preceding conceptualisation of images is the Device-Independent Bitmap, or BMP, file format. BMP files store raster graphics images as long sequences of binary-encoded numbers that specify the colour of each pixel in the image. Since computer files are one-dimensional structures, the pixel colours are stored one row at a time. That is, the first row of pixels (those with y-coordinate 0) are stored first, followed by the second row (those with y-coordinate 1), and so on. Depending on how it was created, a BMP image might have 8-bit, 16-bit, or 24-bit colour depth.</p>
<p>24-bit BMP images have a relatively simple file format, can be viewed and loaded across a wide variety of operating systems, and have high quality. However, BMP images are not compressed, resulting in very large file sizes for any useful image resolutions.</p>
<p>The idea of image compression is important to us for two reasons: first, compressed images have smaller file sizes, and are therefore easier to store and transmit; and second, compressed images may not have as much detail as their uncompressed counterparts, and so our programs may not be able to detect some important aspect if we are working with compressed images. Since compression is important to us, we should take a brief detour and discuss the concept.</p>
</section>
<section id="image-compression" class="level3">
<h3 class="anchored" data-anchor-id="image-compression">Image compression</h3>
<p>Before we talk specifically about images, we first need to understand how numbers are stored in a modern digital computer. When we think of a number, we do so using a decimal, or base-10 place-value number system. For example, a number like 659 is 6 × 102 + 5 × 101 + 9 × 100. Each digit in the number is multiplied by a power of 10, based on where it occurs, and there are 10 digits that can occur in each position (0, 1, 2, 3, 4, 5, 6, 7, 8, 9).</p>
<p>In principle, computers could be constructed to represent numbers in exactly the same way. But, the electronic circuits inside a computer are much easier to construct if we restrict the numeric base to only two, instead of 10. (It is easier for circuitry to tell the difference between two voltage levels than it is to differentiate among 10 levels.) So, values in a computer are stored using a binary, or base-2 place-value number system.</p>
<p>In this system, each symbol in a number is called a bit instead of a digit, and there are only two values for each bit (0 and 1). We might imagine a four-bit binary number, 1101. Using the same kind of place-value expansion as we did above for 659, we see that 1101 = 1 × 23 + 1 × 22 + 0 × 21 + 1 × 20, which if we do the math is 8 + 4 + 0 + 1, or 13 in decimal.</p>
<p>Internally, computers have a minimum number of bits that they work with at a given time: eight. A group of eight bits is called a byte. The amount of memory (RAM) and drive space our computers have is quantified by terms like Megabytes (MB), Gigabytes (GB), and Terabytes (TB). The following table provides more formal definitions for these terms:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/38cf3051-95bf-4142-b0e9-0fba19a7f540.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">bits.JPG</figcaption><p></p>
</figure>
</div>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-8-contents" aria-controls="callout-8" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Imagine that we have a fairly large, but very boring image: a 5,000 × 5,000 pixel image composed of nothing but white pixels. If we used an uncompressed image format such as BMP, with the 24-bit RGB colour model, how much storage would be required for the file?
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-8" class="callout-8-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>In such an image, there are 5,000 × 5,000 = 25,000,000 pixels, and 24 bits for each pixel, leading to 25,000,000 × 24 = 600,000,000 bits, or 75,000,000 bytes (71.5MB). That is quite a lot of space for a very uninteresting image!</p>
</div>
</div>
</div>
<p>Since image files can be very large, various compression schemes exist for saving (approximately) the same information while using less space. These compression techniques can be categorised as lossless or lossy.</p>
</section>
<section id="lossless-compression" class="level3">
<h3 class="anchored" data-anchor-id="lossless-compression">Lossless compression</h3>
<p>In lossless image compression, we apply some algorithm (i.e., a computerised procedure) to the image, resulting in a file that is significantly smaller than the uncompressed BMP file equivalent would be. Then, when we wish to load and view or process the image, our program reads the compressed file, and reverses the compression process, resulting in an image that is identical to the original. Nothing is lost in the process – hence the term “lossless.”</p>
<p>The general idea of lossless compression is to somehow detect long patterns of bytes in a file that are repeated over and over, and then assign a smaller bit pattern to represent the longer sample. Then, the compressed file is made up of the smaller patterns, rather than the larger ones, thus reducing the number of bytes required to save the file. The compressed file also contains a table of the substituted patterns and the originals, so when the file is decompressed it can be made identical to the original before compression.</p>
<p>To provide you with a concrete example, consider the 71.5 MB white BMP image discussed above. When put through the zip compression utility on Microsoft Windows, the resulting .zip file is only 72 KB in size! That is, the .zip version of the image is three orders of magnitude smaller than the original, and it can be decompressed into a file that is byte-for-byte the same as the original. Since the original is so repetitious - simply the same colour triplet repeated 25,000,000 times - the compression algorithm can dramatically reduce the size of the file.</p>
<p>If you work with <strong>.zip</strong> or <strong>.gz</strong> archives, you are dealing with lossless compression.</p>
</section>
<section id="lossy-compression" class="level3">
<h3 class="anchored" data-anchor-id="lossy-compression">Lossy compression</h3>
<p>Lossy compression takes the original image and discards some of the detail in it, resulting in a smaller file format. The goal is to only throw away detail that someone viewing the image would not notice. Many lossy compression schemes have adjustable levels of compression, so that the image creator can choose the amount of detail that is lost. The more detail that is sacrificed, the smaller the image files will be - but of course, the detail and richness of the image will be lower as well.</p>
<p>This is probably fine for images that are shown on Web pages or printed off on 4 × 6 photo paper, but may or may not be fine for scientific work. You will have to decide whether the loss of image quality and detail are important to your work, versus the space savings afforded by a lossy compression format.</p>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
It is important to understand that once an image is saved in a lossy compression format, the lost detail is just that - lost.
</div>
</div>
<div class="callout-body-container callout-body">
<p>Unlike lossless formats, given an image saved in a lossy format, there is no way to reconstruct the original image in a byte-by-byte manner.</p>
</div>
</div>
</section>
<section id="jpeg" class="level3">
<h3 class="anchored" data-anchor-id="jpeg">JPEG</h3>
<p>JPEG images are perhaps the most commonly encountered digital images today. JPEG uses lossy compression, and the degree of compression can be tuned to your liking. It supports 24-bit colour depth, and since the format is so widely used, JPEG images can be viewed and manipulated easily on all computing platforms.</p>
<p>Let us see the effects of image compression on image size with actual images. The following script creates a square white image 5000 X 5000 pixels, and then saves it as a BMP and as a JPEG image.</p>
<div class="cell" data-execution_count="97">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="im" style="color: #00769E;">import</span> imageio.v3 <span class="im" style="color: #00769E;">as</span> iio</span>
<span id="cb24-2"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb24-3"></span>
<span id="cb24-4">dim <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">5000</span></span>
<span id="cb24-5"></span>
<span id="cb24-6">img <span class="op" style="color: #5E5E5E;">=</span> np.zeros((dim, dim, <span class="dv" style="color: #AD0000;">3</span>), dtype<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"uint8"</span>)</span>
<span id="cb24-7">img.fill(<span class="dv" style="color: #AD0000;">255</span>)</span>
<span id="cb24-8"></span>
<span id="cb24-9">iio.imwrite(uri<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Images/ws.bmp"</span>, image<span class="op" style="color: #5E5E5E;">=</span>img)</span>
<span id="cb24-10">iio.imwrite(uri<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Images/ws.jpg"</span>, image<span class="op" style="color: #5E5E5E;">=</span>img)</span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/d73d6acd-ab2c-43c0-97be-0a5e3a5fa228.jpg" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">download.jpg</figcaption><p></p>
</figure>
</div>
<p>The BMP file, ws.bmp, is 75,000,054 bytes, which matches our prediction very nicely. The JPEG file, ws.jpg, is 392,503 bytes, two orders of magnitude smaller than the bitmap version.</p>
<p>Let us see a hands-on example of lossless versus lossy compression. Once again, open a terminal and navigate to the data/ directory. The two output images, ws.bmp and ws.jpg, should still be in the directory, along with another image, tree.jpg.</p>
<p>We can apply lossless compression to any file by using the zip command. Recall that the ws.bmp file contains 75,000,054 bytes. Apply lossless compression to this image by executing the following command:</p>
<pre><code>zip ws.zip ws.bmp. </code></pre>
<p>This command tells the computer to create a new compressed file, ws.zip, from the original bitmap image. Execute a similar command on the tree JPEG file:</p>
<pre><code>zip tree.zip tree.jpg.</code></pre>
<p>Having created the compressed file, use the ls -al command to display the contents of the directory.</p>
<ul>
<li>How big are the compressed files?</li>
<li>How do those compare to the size of ws.bmp and tree.jpg?</li>
<li>What can you conclude from the relative sizes?</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/143d18e0-6127-4392-bc6c-8093ac86ca67.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">zipped.JPG</figcaption><p></p>
</figure>
</div>
<p>The tree.jpg has not reduced in size as this was already in a compressed format. However the regularity of the bitmap image (remember, it is a 5,000 x 5,000 pixel image containing only white pixels) allows the lossless compression scheme to compress the ws.bmp file quite effectivelym reducing the size from 7,500,054 bytes (71.52Mb) to 72,998 bytes (71.29kb).</p>
<p>Here is an example showing how JPEG compression might impact image quality. Consider this image of several maize seedlings (scaled down here from 11,339 × 11,336 pixels in order to fit the display):</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/843057c7-37c0-4c0d-83a8-243c46aa260b.jpg" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">quality-original.jpg</figcaption><p></p>
</figure>
</div>
<p>Now, let us zoom in and look at a small section of the label in the original, first in the uncompressed format:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/c5321667-a2bd-4c6a-84c6-5b7e52c03ff2.jpg" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">quality-tif.jpg</figcaption><p></p>
</figure>
</div>
<p>Here is the same area of the image, but in JPEG format. We used a fairly aggressive compression parameter to make the JPEG, in order to illustrate the problems you might encounter with the format.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/40c67fd8-8215-4a8d-a3d4-181155b396b0.jpg" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">quality-jpg.jpg</figcaption><p></p>
</figure>
</div>
<p>The JPEG image is of clearly inferior quality. It has less colour variation and noticeable pixelation. Quality differences become even more marked when one examines the colour histograms for each image. A histogram shows how often each colour value appears in an image. The histograms for the uncompressed (left) and compressed (right) images are shown below:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/5bfc3ea9-ce82-4d7d-99cc-b8f38779a9e9.jpg" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">quality-histogram.jpg</figcaption><p></p>
</figure>
</div>
<p>We learn how to make histograms such as these later on in the workshop. The differences in the colour histograms are even more apparent than in the images themselves; clearly the colours in the JPEG image are different from the uncompressed version.</p>
<p>If the quality settings for your JPEG images are high (and the compression rate therefore relatively low), the images may be of sufficient quality for your work. It all depends on how much quality you need, and what restrictions you have on image storage space. Another consideration may be where the images are stored. For example,if your images are stored in the cloud and therefore must be downloaded to your system before you use them, you may wish to use a compressed image format to speed up file transfer time.</p>
</section>
<section id="png" class="level3">
<h3 class="anchored" data-anchor-id="png">PNG</h3>
<p>PNG images are well suited for storing diagrams. It uses a lossless compression and is hence often used in web applications for non-photographic images. The format is able to store RGB and plain luminance (single channel, without an associated color) data, among others. Image data is stored row-wise and then, per row, a simple filter, like taking the difference of adjacent pixels, can be applied to increase the compressability of the data. The filtered data is then compressed in the next step and written out to the disk.</p>
</section>
<section id="tiff" class="level3">
<h3 class="anchored" data-anchor-id="tiff">TIFF</h3>
<p>TIFF images are popular with publishers, graphics designers, and photographers. TIFF images can be uncompressed, or compressed using either lossless or lossy compression schemes, depending on the settings used, and so TIFF images seem to have the benefits of both the BMP and JPEG formats. The main disadvantage of TIFF images (other than the size of images in the uncompressed version of the format) is that they are not universally readable by image viewing and manipulation software.</p>
</section>
<section id="metadata" class="level3">
<h3 class="anchored" data-anchor-id="metadata">Metadata</h3>
<p>JPEG and TIFF images support the inclusion of metadata in images. Metadata is textual information that is contained within an image file. Metadata holds information about the image itself, such as when the image was captured, where it was captured, what type of camera was used and with what settings, etc. We normally don’t see this metadata when we view an image, but we can view it independently if we wish to (see Accessing Metadata, below). The important thing to be aware of at this stage is that you cannot rely on the metadata of an image being fully preserved when you use software to process that image.</p>
<div class="callout-warning callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
The image reader/writer library that we use throughout this blog, imageio.v3, includes metadata when saving new images but may fail to keep certain metadata fields.
</div>
</div>
<div class="callout-body-container callout-body">
<p>If metadata is important to you, take precautions to always preserve the original files.</p>
</div>
</div>
<p>Metadata is served independently from pixel data. imageio.v3 provides a way to display or explore the metadata associated with an image:</p>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="co" style="color: #5E5E5E;"># read metadata</span></span>
<span id="cb27-2">metadata <span class="op" style="color: #5E5E5E;">=</span> iio.immeta(uri<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Images/eight.tif'</span>)</span>
<span id="cb27-3"></span>
<span id="cb27-4"><span class="co" style="color: #5E5E5E;"># display the format-specific metadata</span></span>
<span id="cb27-5">metadata</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>{'is_fluoview': False,
 'is_nih': False,
 'is_micromanager': False,
 'is_ome': False,
 'is_lsm': False,
 'is_reduced': False,
 'is_shaped': True,
 'is_stk': False,
 'is_tiled': False,
 'is_mdgel': False,
 'compression': &lt;COMPRESSION.NONE: 1&gt;,
 'predictor': 1,
 'is_mediacy': False,
 'description': '{"shape": [5, 3]}',
 'description1': '',
 'is_imagej': False,
 'software': 'tifffile.py',
 'resolution_unit': 1,
 'resolution': (1.0, 1.0, 'NONE')}</code></pre>
</div>
</div>
<p>Other software exists that can help you handle metadata, such as <a href="https://imagej.net/software/fiji/">Fiji</a> and <a href="https://imagemagick.org/index.php">ImageMagick</a>. You may want to explore these options if you need to work with the metadata of your images.</p>
</section>
<section id="summary-of-image-formats-used-in-this-blog" class="level3">
<h3 class="anchored" data-anchor-id="summary-of-image-formats-used-in-this-blog">Summary of image formats used in this blog</h3>
<p>The following table summarises the characteristics of the BMP, JPEG, and TIFF image formats:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/18b688af-fce8-4570-b3b9-5069bd5a2b4e.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">formats.JPG</figcaption><p></p>
</figure>
</div>
<div class="callout-important callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Key Points:
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>digital images are represented as rectangular arrays of square pixels.</li>
<li>digital images use a left-hand coordinate system, with the origin in the upper left corner, the x-axis running to the right, and the y-axis running down. Some learners may prefer to think in terms of counting down rows for the y-axis and across columns for the x-axis. Thus, we will make an effort to allow for both approaches in our lesson presentation.</li>
<li>most frequently, digital images use an additive RGB model, with eight bits for the red, green, and blue channels.</li>
<li>skimage images are stored as multi-dimensional NumPy arrays.</li>
<li>in skimage images, the red channel is specified first, then the green, then the blue, i.e., RGB.</li>
<li>lossless compression retains all the details in an image, but lossy compression results in loss of some of the original image detail.</li>
<li>BMP images are uncompressed, meaning they have high quality but also that their file sizes are large.</li>
<li>JPEG images use lossy compression, meaning that their file sizes are smaller, but image quality may suffer.</li>
<li>TIFF images can be uncompressed or compressed with lossy or lossless compression.</li>
<li>depending on the camera or sensor, various useful pieces of information may be stored in an image file, in the image metadata.</li>
</ul>
</div>
</div>
</section>
</section>
<section id="working-with-skimage" class="level2">
<h2 class="anchored" data-anchor-id="working-with-skimage">2. Working with skimage</h2>
<p>In the previous section we covered much of how images are represented in computer software. In this section we will learn some more methods for accessing and changing digital images.</p>
<section id="reading-displaying-and-saving-images" class="level3">
<h3 class="anchored" data-anchor-id="reading-displaying-and-saving-images">Reading, displaying, and saving images</h3>
<p>Imageio provides intuitive functions for reading and writing (saving) images. All of the popular image formats, such as BMP, PNG, JPEG, and TIFF are supported, along with several more esoteric formats. Check the <a href="https://imageio.readthedocs.io/en/stable/formats/index.html">Supported Formats docs</a> for a list of all formats. Matplotlib provides a large collection of plotting utilities.</p>
<p>Let us examine a simple Python program to load, display, and save an image to a different format. First, we import the v3 module of imageio (imageio.v3) as iio so we can read and write images. Then, we use the iio.imread() function to read a JPEG image entitled chair.jpg. Here are the first few lines:</p>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="co" style="color: #5E5E5E;"># Python program to open, display, and save an image.</span></span>
<span id="cb29-2"><span class="im" style="color: #00769E;">import</span> imageio.v3 <span class="im" style="color: #00769E;">as</span> iio</span>
<span id="cb29-3"></span>
<span id="cb29-4"><span class="co" style="color: #5E5E5E;"># read image</span></span>
<span id="cb29-5">image <span class="op" style="color: #5E5E5E;">=</span> iio.imread(uri<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Images/chair.jpg'</span>)</span></code></pre></div>
</div>
<p>Next, we will do something with the image. Once we have the image in the program, we first call plt.subplots() so that we will have a fresh figure with a set of axis independent from our previous calls. Next we call plt.imshow() in order to display the image:</p>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb30-2"></span>
<span id="cb30-3">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb30-4">plt.imshow(image)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>&lt;matplotlib.image.AxesImage at 0x7f0839e0da80&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/cell-18-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>Now, we will save the image in another format:</p>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="co" style="color: #5E5E5E;"># save a new version in .tif format</span></span>
<span id="cb32-2">iio.imwrite(uri<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Images/chair.tif"</span>, image<span class="op" style="color: #5E5E5E;">=</span>image)</span></code></pre></div>
</div>
<p>The final statement in the program, iio.imwrite(uri=“data/chair.tif”, image=image), writes the image to a file named chair.tif in our Images/ directory. The imwrite() function automatically determines the type of the file, based on the file extension we provide. In this case, the .tif extension causes the image to be saved as a TIFF.</p>
<div class="callout-warning callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
The iio.imwrite() function automatically uses the file type we specify in the file name parameter’s extension.
</div>
</div>
<div class="callout-body-container callout-body">
<p>Note that this is not always the case. For example, if we are editing a document in Microsoft Word, and we save the document as paper.pdf instead of paper.docx, the file is not saved as a PDF document.</p>
</div>
</div>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>When we call functions in Python, there are two ways we can specify the necessary arguments. We can specify the arguments positionally, i.e., in the order the parameters appear in the function definition, or we can use named arguments.</p>
<p>For example, the iio.imwrite() function definition specifies two parameters, the resource to save the image to (e.g., a file name, an http address) and the image to write to disk. So, we could save the chair image in the sample code above using positional arguments like this:</p>
<pre><code>iio.imwrite("data/chair.tif", image)</code></pre>
<p>Since the function expects the first argument to be the file name, there is no confusion about what “data/chair.jpg” means. The same goes for the second argument.</p>
<p>The style we will use in this workshop is to name each argument, like this:</p>
<pre><code>iio.imwrite(uri="data/chair.tif", image=image)</code></pre>
<p>This style will make it easier for you to learn how to use the variety of functions we will cover in this blog.</p>
</div>
</div>
</section>
<section id="resizing-an-image" class="level3">
<h3 class="anchored" data-anchor-id="resizing-an-image">Resizing an image</h3>
<p>Add import skimage.transform and import skimage.util to your list of imports. Using the chair.jpg image located in the data folder, write a Python script to read your image into a variable named image. Then, resize the image to 10 percent of its current size using these lines of code:</p>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1"><span class="im" style="color: #00769E;">import</span> skimage.transform, skimage.util</span>
<span id="cb35-2"></span>
<span id="cb35-3">image <span class="op" style="color: #5E5E5E;">=</span> iio.imread(uri<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'Images/chair.jpg'</span>)</span>
<span id="cb35-4"></span>
<span id="cb35-5"><span class="co" style="color: #5E5E5E;"># resize to 10% of original size</span></span>
<span id="cb35-6">new_shape <span class="op" style="color: #5E5E5E;">=</span> (image.shape[<span class="dv" style="color: #AD0000;">0</span>] <span class="op" style="color: #5E5E5E;">//</span> <span class="dv" style="color: #AD0000;">10</span>, image.shape[<span class="dv" style="color: #AD0000;">1</span>] <span class="op" style="color: #5E5E5E;">//</span> <span class="dv" style="color: #AD0000;">10</span>, image.shape[<span class="dv" style="color: #AD0000;">2</span>])</span>
<span id="cb35-7"></span>
<span id="cb35-8"><span class="co" style="color: #5E5E5E;"># image file stored as whole numbers for space efficiency</span></span>
<span id="cb35-9">small <span class="op" style="color: #5E5E5E;">=</span> skimage.transform.resize(image<span class="op" style="color: #5E5E5E;">=</span>image, output_shape<span class="op" style="color: #5E5E5E;">=</span>new_shape)</span>
<span id="cb35-10"></span>
<span id="cb35-11"><span class="co" style="color: #5E5E5E;"># converts image back to whole numbers before saving to disk</span></span>
<span id="cb35-12">small <span class="op" style="color: #5E5E5E;">=</span> skimage.util.img_as_ubyte(small)</span></code></pre></div>
</div>
<p>As it is used here, the parameters to the <strong><em>skimage.transform.resize()</em></strong> function are the image to transform, image, the dimensions we want the new image to have, new_shape.</p>
<p>Note that the pixel values in the new image are an approximation of the original values and should not be confused with actual, observed data. This is because skimage interpolates the pixel values when reducing or increasing the size of an image. skimage.transform.resize has a number of optional parameters that allow the user to control this interpolation. You can find more details in the <a href="https://scikit-image.org/docs/stable/api/skimage.transform.html#skimage.transform.resize">scikit-image documentation</a>.</p>
<p>Image files on disk are normally stored as whole numbers for space efficiency, but transformations and other math operations often result in conversion to floating point numbers. Using the <strong><em>skimage.util.img_as_ubyte()</em></strong> method converts it back to whole numbers before we save it back to disk. If we don’t convert it before saving, iio.imwrite() may not recognise it as image data.</p>
<p>Next, write the resized image out to a new file named resized.jpg in your data directory. Finally, use plt.imshow() with each of your image variables to display both images in your notebook. Don’t forget to use fig, ax = plt.subplots() so you don’t overwrite the first image with the second. Images may appear the same size in jupyter, but you can see the size difference by comparing the scales for each. You can also see the differnce in file storage size on disk by hovering your mouse cursor over the original and the new file in the jupyter file browser, using ls -l in your shell, or the OS file browser if it is configured to show file sizes.</p>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1"><span class="co" style="color: #5E5E5E;"># write the resized image out to a new file named resized.jpg</span></span>
<span id="cb36-2">iio.imwrite(uri<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Images/resized.jpg"</span>, image<span class="op" style="color: #5E5E5E;">=</span>small)</span>
<span id="cb36-3"></span>
<span id="cb36-4"><span class="co" style="color: #5E5E5E;"># plot original image</span></span>
<span id="cb36-5">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb36-6">plt.imshow(image)</span>
<span id="cb36-7">plt.title(<span class="st" style="color: #20794D;">"Original image"</span>)</span>
<span id="cb36-8"></span>
<span id="cb36-9"><span class="co" style="color: #5E5E5E;"># plot resized image</span></span>
<span id="cb36-10">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb36-11">plt.imshow(small)</span>
<span id="cb36-12">plt.title(<span class="st" style="color: #20794D;">"Reduced to 10</span><span class="sc" style="color: #5E5E5E;">% o</span><span class="st" style="color: #20794D;">f size of original image"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">
<pre><code>Text(0.5, 1.0, 'Reduced to 10% of size of original image')</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/cell-21-output-2.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/cell-21-output-3.png" class="img-fluid"></p>
</div>
</div>
<p>We can see from the above that our reduction to 10% of the original size appears to have been successsful. The axes of the reduced image are 0-300 and 0-400 as against 0-3000 and 0-4000.</p>
<p>The script has: - resized the data/chair.jpg image by a factor of 10 in both dimensions - saved the result to the data/resized.jpg file, and - displays original and resized for comparision</p>
</section>
<section id="manipulating-pixels" class="level3">
<h3 class="anchored" data-anchor-id="manipulating-pixels">Manipulating pixels</h3>
<section id="retaining-only-high-intensity-pixels" class="level4">
<h4 class="anchored" data-anchor-id="retaining-only-high-intensity-pixels">Retaining only high intensity pixels</h4>
<p>In section 1, we individually manipulated the colours of pixels by changing the numbers stored in the image’s NumPy array. Let’s apply the principles learned there along with some new principles to a real world example. Suppose we are interested in this maize root cluster image.</p>
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Images/maize_cluster.jpg" width="600" height="600"></p>
<p>We want to be able to focus our program’s attention on the roots themselves, while ignoring the black background.</p>
<p>Since the image is stored as an array of numbers, we can simply look through the array for pixel colour values that are less than some threshold value. This process is called <strong><em>thresholding</em></strong>, and we will see more powerful methods to perform the thresholding task in the Thresholding section.</p>
<p>Here, though, we will look at a simple and elegant NumPy method for thresholding. Let us develop a program that keeps only the pixel colour values in an image that have value greater than or equal to 128. This will keep the pixels that are brighter than half of “full brightness”, i.e., pixels that do not belong to the black background. We will start by reading the image and displaying it.</p>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1"><span class="im" style="color: #00769E;">import</span> imageio.v3 <span class="im" style="color: #00769E;">as</span> iio</span>
<span id="cb38-2"></span>
<span id="cb38-3"><span class="co" style="color: #5E5E5E;"># read input image</span></span>
<span id="cb38-4">image <span class="op" style="color: #5E5E5E;">=</span> iio.imread(uri<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Images/maize_cluster.jpg"</span>)</span>
<span id="cb38-5"></span>
<span id="cb38-6"><span class="co" style="color: #5E5E5E;"># display original image</span></span>
<span id="cb38-7">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb38-8">plt.imshow(image)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>&lt;matplotlib.image.AxesImage at 0x7f4d204fe320&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/cell-22-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>Now we can threshold the image and display the result:</p>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1"><span class="co" style="color: #5E5E5E;"># keep only high-intensity pixels</span></span>
<span id="cb40-2">image[image <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">128</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb40-3"></span>
<span id="cb40-4"><span class="co" style="color: #5E5E5E;"># display modified image</span></span>
<span id="cb40-5">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb40-6">plt.imshow(image)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>ValueError: assignment destination is read-only</code></pre>
</div>
</div>
<div class="callout-warning callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Check if the array is writeable with <em>image.flags</em><br>

</div>
</div>
<div class="callout-body-container callout-body">
<p>If WRITEABLE is false, change it with <em>img.setflags(write=1)</em><br>
If after doing this you receive ValueError: cannot set WRITEABLE flag to True of this array, then as a workaround create a copy of the image using <em>image_copy = image.copy()</em></p>
</div>
</div>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">image.flags</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>  C_CONTIGUOUS : True
  F_CONTIGUOUS : False
  OWNDATA : False
  WRITEABLE : False
  ALIGNED : True
  WRITEBACKIFCOPY : False</code></pre>
</div>
</div>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1">image.setflags(write<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>ValueError: cannot set WRITEABLE flag to True of this array</code></pre>
</div>
</div>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1"><span class="co" style="color: #5E5E5E;"># workaround to address the read-only issues</span></span>
<span id="cb46-2">image_copy <span class="op" style="color: #5E5E5E;">=</span> image.copy()</span>
<span id="cb46-3"></span>
<span id="cb46-4"><span class="co" style="color: #5E5E5E;"># keep only high-intensity pixels, by setting all low-intensity pixels &lt; 128 to zero</span></span>
<span id="cb46-5">image_copy[image_copy <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">128</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb46-6"></span>
<span id="cb46-7"><span class="co" style="color: #5E5E5E;"># display modified image</span></span>
<span id="cb46-8">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb46-9">plt.imshow(image_copy)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>&lt;matplotlib.image.AxesImage at 0x7f4d11f9c4c0&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/cell-26-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>The result is an image in which the extraneous background detail has been removed.</p>
</section>
</section>
<section id="converting-colour-images-to-grayscale" class="level3">
<h3 class="anchored" data-anchor-id="converting-colour-images-to-grayscale">Converting colour images to grayscale</h3>
<p>It is often easier to work with grayscale images, which have a single channel, instead of colour images, which have three channels. Skimage offers the function <strong><em>skimage.color.rgb2gray()</em></strong> to achieve this. This function adds up the three colour channels in a way that matches human colour perception, see the <a href="https://scikit-image.org/docs/dev/api/skimage.color.html#skimage.color.rgb2gray">skimage documentation</a> for details. It returns a grayscale image with floating point values in the range from 0 to 1. We can use the function <em>skimage.util.img_as_ubyte()</em> in order to convert it back to the original data type and the data range back 0 to 255. Note that it is often better to use image values represented by floating point values, because <strong>using floating point numbers is numerically more stable</strong>.</p>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
skimage contains many modules and functions that include the US English spelling, color.
</div>
</div>
<div class="callout-body-container callout-body">
<p>The exact spelling matters here, e.g.&nbsp;you will encounter an error if you try to run skimage.colour.rgb2gray(). To account for this, we will use the US English spelling, color, in example Python code throughout this blog. We will adopt a similar approach with “centre” and center.</p>
</div>
</div>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1"><span class="im" style="color: #00769E;">import</span> imageio.v3 <span class="im" style="color: #00769E;">as</span> iio</span>
<span id="cb48-2"><span class="im" style="color: #00769E;">import</span> skimage.color</span>
<span id="cb48-3"></span>
<span id="cb48-4"><span class="co" style="color: #5E5E5E;"># read input image</span></span>
<span id="cb48-5">image <span class="op" style="color: #5E5E5E;">=</span> iio.imread(uri<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Images/chair.jpg"</span>)</span>
<span id="cb48-6"></span>
<span id="cb48-7"><span class="co" style="color: #5E5E5E;"># display original image</span></span>
<span id="cb48-8">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb48-9">plt.imshow(image)</span>
<span id="cb48-10">plt.title(<span class="st" style="color: #20794D;">"Original image"</span>)</span>
<span id="cb48-11"></span>
<span id="cb48-12"><span class="co" style="color: #5E5E5E;"># convert to grayscale and display</span></span>
<span id="cb48-13">gray_image <span class="op" style="color: #5E5E5E;">=</span> skimage.color.rgb2gray(image)</span>
<span id="cb48-14">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb48-15">plt.imshow(gray_image, cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"gray"</span>)</span>
<span id="cb48-16">plt.title(<span class="st" style="color: #20794D;">"Grayscale image"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>Text(0.5, 1.0, 'Grayscale image')</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/cell-27-output-2.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/cell-27-output-3.png" class="img-fluid"></p>
</div>
</div>
<p>We also load colour images as grayscale <strong>directly</strong> by passing the argument <strong><em>mode=“L” </em></strong> to iio.imread():</p>
<div class="cell" data-execution_count="34">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1"><span class="im" style="color: #00769E;">import</span> imageio.v3 <span class="im" style="color: #00769E;">as</span> iio</span>
<span id="cb50-2"><span class="im" style="color: #00769E;">import</span> skimage.color</span>
<span id="cb50-3"></span>
<span id="cb50-4"><span class="co" style="color: #5E5E5E;"># read input image, based on filename parameter</span></span>
<span id="cb50-5">image <span class="op" style="color: #5E5E5E;">=</span> iio.imread(uri<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Images/chair.jpg"</span>, mode<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"L"</span>)</span>
<span id="cb50-6"></span>
<span id="cb50-7"><span class="co" style="color: #5E5E5E;"># display grayscale image</span></span>
<span id="cb50-8">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb50-9">plt.imshow(image, cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"gray"</span>)</span>
<span id="cb50-10">plt.title(<span class="st" style="color: #20794D;">"Grayscale image"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="34">
<pre><code>Text(0.5, 1.0, 'Grayscale image')</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/cell-28-output-2.png" class="img-fluid"></p>
</div>
</div>
<section id="retaining-only-low-intensity-pixels" class="level4">
<h4 class="anchored" data-anchor-id="retaining-only-low-intensity-pixels">Retaining only low intensity pixels</h4>
<p>A little earlier, we showed how we could use Python and skimage to turn on only the high intensity pixels from an image, while turning all the low intensity pixels off. Now, let’s practice doing the opposite - keeping all the low intensity pixels while changing the high intensity ones, by turning all of the white pixels in the image to a light gray colour, say with the intensity of each formerly white pixel set to 0.75:</p>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1"><span class="co" style="color: #5E5E5E;"># read input image, based on filename parameter</span></span>
<span id="cb52-2">sudoku <span class="op" style="color: #5E5E5E;">=</span> iio.imread(uri<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Images/sudoku.png"</span>, mode<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"L"</span>)</span>
<span id="cb52-3"></span>
<span id="cb52-4"><span class="co" style="color: #5E5E5E;"># display grayscale image</span></span>
<span id="cb52-5">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb52-6">plt.imshow(sudoku, cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"gray"</span>)</span>
<span id="cb52-7">plt.title(<span class="st" style="color: #20794D;">"Grayscale image"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">
<pre><code>Text(0.5, 1.0, 'Grayscale image')</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/cell-29-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb54-1"><span class="co" style="color: #5E5E5E;"># Clip all high intensity pixels &gt; 0.75 to 0.75</span></span>
<span id="cb54-2">sudoku[sudoku <span class="op" style="color: #5E5E5E;">&gt;</span> <span class="fl" style="color: #AD0000;">0.75</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.75</span></span>
<span id="cb54-3"></span>
<span id="cb54-4"><span class="co" style="color: #5E5E5E;"># display modified image</span></span>
<span id="cb54-5">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb54-6">plt.imshow(sudoku, cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"gray"</span>, vmin<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>, vmax<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)</span></code></pre></div>
</div>
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Images/sudoku-gray.png" width="420" height="420"></p>
</section>
</section>
<section id="plotting-single-channel-images-cmap-vmin-vmax" class="level3">
<h3 class="anchored" data-anchor-id="plotting-single-channel-images-cmap-vmin-vmax">Plotting single channel images (cmap, vmin, vmax)</h3>
<p>Compared to a colour image, a grayscale image contains only a single intensity value per pixel. When we plot such an image with plt.imshow, matplotlib uses a colour map, to assign each intensity value a colour. The default colour map is called “viridis” and maps low values to purple and high values to yellow. We can instruct matplotlib to map low values to black and high values to white instead, by calling plt.imshow with cmap=“gray”. The documentation contains an overview of pre-defined colour maps.</p>
<p>Furthermore, matplotlib determines the minimum and maximum values of the colour map dynamically from the image, by default. That means, that in an image, where the minimum is 0.25 and the maximum is 0.75, those values will be mapped to black and white respectively (and not dark gray and light gray as you might expect). If there are defined minimum and maximum vales, you can specify them via vmin and vmax to get the desired output. If you forget about this, it can lead to unexpected results.</p>
</section>
<section id="access-via-slicing" class="level3">
<h3 class="anchored" data-anchor-id="access-via-slicing">Access via slicing</h3>
<p>As noted in the previous section skimage images are stored as NumPy arrays, so we can use array slicing to select rectangular areas of an image. Then, we can save the selection as a new image, change the pixels in the image, and so on. It is important to remember that coordinates are specified in (ry, cx) order and that colour values are specified in (r, g, b) order when doing these manipulations.</p>
<p>Consider this image of a whiteboard, and suppose that we want to create a sub-image with just the portion that says “odd + even = odd,” along with the red box that is drawn around the words.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/5f191cbd-3949-4350-9e37-8491dfa40847.jpg" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">board.jpg</figcaption><p></p>
</figure>
</div>
<p>Using the same display technique we have used throughout this blog, we can determine the coordinates of the corners of the area we wish to extract by hovering the mouse near the points of interest and noting the coordinates. If we do that, we might settle on a rectangular area with an upper-left coordinate of (135, 60) and a lower-right coordinate of (480, 150), as shown in this version of the whiteboard picture:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/7e67780a-79a6-41d0-a668-737604a32efb.jpg" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">board-coordinates.jpg</figcaption><p></p>
</figure>
</div>
<p>Note that the coordinates in the preceding image are specified in (cx, ry) order. Now if our entire whiteboard image is stored as an skimage image named image, we can create a new image of the selected region with a statement like this:</p>
<pre><code>clip = image[60:151, 135:481, :]</code></pre>
<p>Our array slicing specifies the range of y-coordinates or rows first, 60:151, and then the range of x-coordinates or columns, 135:481. Note we go one beyond the maximum value in each dimension, so that the entire desired area is selected. The third part of the slice, :, indicates that we want all three colour channels in our new image.</p>
<p>A script to create the subimage would start by loading the image:</p>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb56-1"><span class="im" style="color: #00769E;">import</span> imageio.v3 <span class="im" style="color: #00769E;">as</span> iio</span>
<span id="cb56-2"></span>
<span id="cb56-3"><span class="co" style="color: #5E5E5E;"># load and display original image</span></span>
<span id="cb56-4">image <span class="op" style="color: #5E5E5E;">=</span> iio.imread(uri<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Images/board.jpg"</span>)</span>
<span id="cb56-5">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb56-6">plt.imshow(image)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>&lt;matplotlib.image.AxesImage at 0x7f2f93077220&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/cell-31-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>Then we use array slicing to create a new image with our selected area and then display the new image:</p>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb58-1"><span class="co" style="color: #5E5E5E;"># extract, display, and save sub-image</span></span>
<span id="cb58-2">clip <span class="op" style="color: #5E5E5E;">=</span> image[<span class="dv" style="color: #AD0000;">60</span>:<span class="dv" style="color: #AD0000;">151</span>, <span class="dv" style="color: #AD0000;">135</span>:<span class="dv" style="color: #AD0000;">481</span>, :]</span>
<span id="cb58-3">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb58-4">plt.imshow(clip)</span>
<span id="cb58-5">iio.imwrite(uri<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Images/clip.tif"</span>, image<span class="op" style="color: #5E5E5E;">=</span>clip)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/cell-32-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>We can also change the values in an image.</p>
<ol type="1">
<li><p>First, we sample a single pixel’s colour at a particular location of the image, saving it in a variable named color, which creates a 1 × 1 × 3 NumPy array with the blue, green, and red colour values for the pixel located at (ry = 330, cx = 90).</p></li>
<li><p>Then, with the img[60:151, 135:481] = color command, we modify the image in the specified area. From a NumPy perspective, this changes all the pixel values within that range to array saved in the color variable. In this case, the command “erases” that area of the whiteboard, replacing the words with a beige colour, as shown in the final image produced by the program:</p></li>
</ol>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb59-1"><span class="co" style="color: #5E5E5E;"># replace clipped area with sampled color</span></span>
<span id="cb59-2">image_copy <span class="op" style="color: #5E5E5E;">=</span> image.copy()</span>
<span id="cb59-3">color <span class="op" style="color: #5E5E5E;">=</span> image_copy[<span class="dv" style="color: #AD0000;">330</span>, <span class="dv" style="color: #AD0000;">90</span>]</span>
<span id="cb59-4">image_copy[<span class="dv" style="color: #AD0000;">60</span>:<span class="dv" style="color: #AD0000;">151</span>, <span class="dv" style="color: #AD0000;">135</span>:<span class="dv" style="color: #AD0000;">481</span>] <span class="op" style="color: #5E5E5E;">=</span> color</span>
<span id="cb59-5">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb59-6">plt.imshow(image_copy)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>&lt;matplotlib.image.AxesImage at 0x7f2f9102ffd0&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/cell-33-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb61-1">::: {.callout<span class="op" style="color: #5E5E5E;">-</span>important}</span>
<span id="cb61-2"><span class="co" style="color: #5E5E5E;">## Key Points:</span></span>
<span id="cb61-3"><span class="op" style="color: #5E5E5E;">-</span> images are read <span class="im" style="color: #00769E;">from</span> disk <span class="cf" style="color: #003B4F;">with</span> the iio.imread() function</span>
<span id="cb61-4"><span class="op" style="color: #5E5E5E;">-</span> we create a window that automatically scales the displayed image <span class="cf" style="color: #003B4F;">with</span> matplotlib <span class="kw" style="color: #003B4F;">and</span> calling show() on the <span class="kw" style="color: #003B4F;">global</span> figure <span class="bu" style="color: null;">object</span></span>
<span id="cb61-5"><span class="op" style="color: #5E5E5E;">-</span> colour images can be transformed to grayscale using skimage.color.rgb2gray() <span class="kw" style="color: #003B4F;">or</span>, <span class="kw" style="color: #003B4F;">in</span> many cases, be read <span class="im" style="color: #00769E;">as</span> grayscale directly by passing the argument mode<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"L"</span> to iio.imread()</span>
<span id="cb61-6"><span class="op" style="color: #5E5E5E;">-</span> we can resize images <span class="cf" style="color: #003B4F;">with</span> the skimage.transform.resize() function</span>
<span id="cb61-7"><span class="op" style="color: #5E5E5E;">-</span> NumPy array commands, such <span class="im" style="color: #00769E;">as</span> image[image <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">128</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span>, can be used to manipulate the pixels of an image.</span>
<span id="cb61-8"><span class="op" style="color: #5E5E5E;">-</span> array slicing can be used to extract sub<span class="op" style="color: #5E5E5E;">-</span>images <span class="kw" style="color: #003B4F;">or</span> modify areas of images, e.g., clip <span class="op" style="color: #5E5E5E;">=</span> image[<span class="dv" style="color: #AD0000;">60</span>:<span class="dv" style="color: #AD0000;">150</span>, <span class="dv" style="color: #AD0000;">135</span>:<span class="dv" style="color: #AD0000;">480</span>, :]</span>
<span id="cb61-9"><span class="op" style="color: #5E5E5E;">-</span> metadata <span class="kw" style="color: #003B4F;">is</span> <span class="kw" style="color: #003B4F;">not</span> retained when images are loaded <span class="im" style="color: #00769E;">as</span> skimage images</span>
<span id="cb61-10">:::</span></code></pre></div>
</div>
<div class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb62-1"><span class="im" style="color: #00769E;">import</span> imageio.v3 <span class="im" style="color: #00769E;">as</span> iio</span>
<span id="cb62-2"></span>
<span id="cb62-3"><span class="co" style="color: #5E5E5E;"># load and display original image</span></span>
<span id="cb62-4">image <span class="op" style="color: #5E5E5E;">=</span> iio.imread(uri<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Images/maize_cluster.jpg"</span>)</span>
<span id="cb62-5">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb62-6">plt.imshow(image)</span>
<span id="cb62-7">plt.title(<span class="st" style="color: #20794D;">"Original image"</span>)</span>
<span id="cb62-8"></span>
<span id="cb62-9"><span class="co" style="color: #5E5E5E;"># extract, display, and save sub-image</span></span>
<span id="cb62-10"><span class="co" style="color: #5E5E5E;"># WRITE YOUR CODE TO SELECT THE SUBIMAGE NAME clip HERE:</span></span>
<span id="cb62-11">clip <span class="op" style="color: #5E5E5E;">=</span> image[<span class="dv" style="color: #AD0000;">0</span>:<span class="dv" style="color: #AD0000;">1750</span>, <span class="dv" style="color: #AD0000;">1500</span>:<span class="dv" style="color: #AD0000;">2500</span>, :]</span>
<span id="cb62-12">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb62-13">plt.imshow(clip)</span>
<span id="cb62-14">plt.title(<span class="st" style="color: #20794D;">"Clipped image"</span>)</span>
<span id="cb62-15"></span>
<span id="cb62-16"><span class="co" style="color: #5E5E5E;"># WRITE YOUR CODE TO SAVE clip HERE</span></span>
<span id="cb62-17">iio.imwrite(uri<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Images/clip.jpg"</span>, image<span class="op" style="color: #5E5E5E;">=</span>clip)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/cell-35-output-1.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/cell-35-output-2.png" class="img-fluid"></p>
</div>
</div>
</section>
</section>
<section id="drawing-and-bitwise-operations" class="level2">
<h2 class="anchored" data-anchor-id="drawing-and-bitwise-operations">3. Drawing and Bitwise Operations</h2>
<p>The next sections cover a basic toolkit of skimage operators. With these tools, we will be able to create programs to perform simple analyses of images based on changes in colour or shape.</p>
<section id="drawing-on-images" class="level3">
<h3 class="anchored" data-anchor-id="drawing-on-images">Drawing on images</h3>
<p>Often we wish to select only a portion of an image to analyze, and ignore the rest. Creating a rectangular sub-image with slicing, as we did in section 2 is one option for simple cases. Another option is to create another special image, of the same size as the original, with white pixels indicating the region to save and black pixels everywhere else. Such an image is called a <strong><em>mask</em></strong>. In preparing a mask, we sometimes need to be able to draw a shape - a circle or a rectangle, say - on a black image. skimage provides tools to do that.</p>
<p>Consider this image of maize seedlings:</p>
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Images/maize-seedlings.jpg" width="420" height="420"></p>
<p>Now, suppose we want to analyze only the area of the image containing the roots themselves; we do not care to look at the kernels, or anything else about the plants. Further, we wish to exclude the frame of the container holding the seedlings as well. Hovering over the image with our mouse, could tell us that the upper-left coordinate of the sub-area we are interested in is (44, 357), while the lower-right coordinate is (720, 740). These coordinates are shown in (x, y) order.</p>
<p>A Python program to create a <strong>mask</strong> to select only that area of the image would start with a now-familiar section of code to open and display the original image.As before, we first import the v3 submodule of imageio (imageio.v3). We also import the NumPy library, which we need to create the initial mask image. Then, we import the draw submodule of skimage. We load and display the initial image in the same way we have done before.</p>
<div class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb63-1"><span class="im" style="color: #00769E;">import</span> imageio.v3 <span class="im" style="color: #00769E;">as</span> iio</span>
<span id="cb63-2"><span class="im" style="color: #00769E;">import</span> skimage.draw</span>
<span id="cb63-3"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb63-4"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb63-5"></span>
<span id="cb63-6"><span class="co" style="color: #5E5E5E;"># Load and display the original image</span></span>
<span id="cb63-7">image <span class="op" style="color: #5E5E5E;">=</span> iio.imread(uri<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Images/maize-seedlings.tif"</span>)</span>
<span id="cb63-8"></span>
<span id="cb63-9">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb63-10">plt.imshow(image)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="19">
<pre><code>&lt;matplotlib.image.AxesImage at 0x7f2f9073cd30&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/cell-36-output-2.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="masking" class="level3">
<h3 class="anchored" data-anchor-id="masking">Masking</h3>
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Images/mask.jpg" width="500" height="500"></p>
<p>NumPy allows indexing of images/arrays with <strong>“boolean”</strong> arrays of the same size. Indexing with a boolean array is also called <strong>mask indexing</strong>. The “pixels” in such a mask array can only take two values: True or False. When indexing an image with such a mask, only pixel values at positions where the mask is True are accessed. But first, we need to generate a mask array of the same size as the image. Luckily, the NumPy library provides a function to create just such an array. The next section of code shows how:</p>
<div class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb65-1"><span class="co" style="color: #5E5E5E;"># Create the basic mask</span></span>
<span id="cb65-2">mask <span class="op" style="color: #5E5E5E;">=</span> np.ones(shape<span class="op" style="color: #5E5E5E;">=</span>image.shape[<span class="dv" style="color: #AD0000;">0</span>:<span class="dv" style="color: #AD0000;">2</span>], dtype<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"bool"</span>)</span>
<span id="cb65-3">color <span class="op" style="color: #5E5E5E;">=</span> </span></code></pre></div>
</div>
<p>The first argument to the <em><strong>ones()</strong> function is the shape of the original image, so that our mask will be exactly the same size as the original. Notice, that we have only used the first two indices of our shape. We omitted the channel dimension. Indexing with such a mask will change all channel values simultaneously. The second argument, dtype = “bool”, indicates that the elements in the array should be </em>booleans* - i.e., values are either True or False. Thus, even though we use np.ones() to create the mask, its pixel values are in fact not 1 but True. You could check this, e.g., by print(mask[0, 0]).</p>
<p>Next, we draw a filled, rectangle on the mask. The parameters of the rectangle() function (357, 44) and (740, 720), are the coordinates of the upper-left (start) and lower-right (end) corners of a rectangle in (ry, cx) order. The function returns the rectangle as row (rr) and column (cc) coordinate arrays:</p>
<div class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb66" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb66-1"><span class="co" style="color: #5E5E5E;"># Draw filled rectangle on the mask image</span></span>
<span id="cb66-2"><span class="co" style="color: #5E5E5E;"># co-ordinates are (row, column)</span></span>
<span id="cb66-3"><span class="co" style="color: #5E5E5E;"># first co-ord is top-left, second co-ord is bottom-right</span></span>
<span id="cb66-4">rr, cc <span class="op" style="color: #5E5E5E;">=</span> skimage.draw.rectangle(start<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">357</span>, <span class="dv" style="color: #AD0000;">44</span>), end<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">740</span>, <span class="dv" style="color: #AD0000;">720</span>))</span>
<span id="cb66-5">mask[rr, cc] <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">False</span></span>
<span id="cb66-6"></span>
<span id="cb66-7"><span class="co" style="color: #5E5E5E;"># Display mask image</span></span>
<span id="cb66-8">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb66-9">plt.imshow(mask, cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"gray"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="21">
<pre><code>&lt;matplotlib.image.AxesImage at 0x7f2f90de33a0&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/cell-38-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Check the documentation!
</div>
</div>
<div class="callout-body-container callout-body">
<p>When using an skimage function for the first time - or the fifth time - it is wise to check how the function is used, via the <a href="https://scikit-image.org/docs/dev/user_guide">skimage documentation</a> or other usage examples on programming-related sites such as <a href="https://stackoverflow.com/">Stack Overflow</a>. Basic information about skimage functions can be found interactively in Python, via commands like help(skimage) or help(skimage.draw.rectangle). Take notes in your lab notebook. And, it is always wise to run some test code to verify that the functions your program uses are behaving in the manner you intend.</p>
</div>
</div>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Variable naming conventions
</div>
</div>
<div class="callout-body-container callout-body">
<p>You may have wondered why we called the return values of the rectangle function <em>rr</em> and <em>cc</em>?! You may have guessed that <em>r</em> is short for row and <em>c</em> is short for column. However, the rectangle function returns mutiple rows and columns; thus we used a convention of doubling the letter r to <em>rr</em> (and c to <em>cc</em>) to indicate that those are multiple values. In fact it may have even been clearer to name those variables rows and columns; however this would have been also much longer. Whatever you decide to do, try to stick to some already existing conventions, such that it is easier for other people to understand your code.</p>
</div>
</div>
</section>
<section id="other-drawing-operations" class="level3">
<h3 class="anchored" data-anchor-id="other-drawing-operations">Other drawing operations</h3>
<p>There are other functions for drawing on images, in addition to the <strong><em>skimage.draw.rectangle()</em></strong> function. We can draw circles, lines, text, and other shapes as well. These drawing functions may be useful later on, to help annotate images that our programs produce. Practice some of these functions here.</p>
<p>Circles can be drawn with the skimage.draw.disk() function, which takes two parameters: the (ry, cx) point of the centre of the circle, and the radius of the circle. There is an optional shape parameter that can be supplied to this function. It will limit the output coordinates for cases where the circle dimensions exceed the ones of the image.</p>
<p>Lines can be drawn with the skimage.draw.line() function, which takes four parameters: the (ry, cx) coordinate of one end of the line, and the (ry, cx) coordinate of the other end of the line.</p>
<p>Other drawing functions supported by skimage can be found in the <a href="https://scikit-image.org/docs/dev/api/skimage.draw.html#module-skimage.draw">skimage reference pages</a>.</p>
<p>First let’s make an empty, black image with a size of 800x600 pixels:</p>
<div class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb68-1"><span class="co" style="color: #5E5E5E;"># create the black canvas</span></span>
<span id="cb68-2">image <span class="op" style="color: #5E5E5E;">=</span> np.zeros(shape<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">600</span>, <span class="dv" style="color: #AD0000;">800</span>, <span class="dv" style="color: #AD0000;">3</span>), dtype<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"uint8"</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb69-1"><span class="co" style="color: #5E5E5E;"># Draw a blue circle with centre (200, 300) in (ry, cx) coordinates, and radius 100</span></span>
<span id="cb69-2">rr, cc <span class="op" style="color: #5E5E5E;">=</span> skimage.draw.disk(center<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">200</span>, <span class="dv" style="color: #AD0000;">300</span>), radius<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>, shape<span class="op" style="color: #5E5E5E;">=</span>image.shape[<span class="dv" style="color: #AD0000;">0</span>:<span class="dv" style="color: #AD0000;">2</span>])</span>
<span id="cb69-3">image[rr, cc] <span class="op" style="color: #5E5E5E;">=</span> (<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">255</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb70-1"><span class="co" style="color: #5E5E5E;"># Draw a green line from (400, 200) to (500, 700) in (ry, cx) coordinates</span></span>
<span id="cb70-2">rr, cc <span class="op" style="color: #5E5E5E;">=</span> skimage.draw.line(r0<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">400</span>, c0<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">200</span>, r1<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">500</span>, c1<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">700</span>)</span>
<span id="cb70-3">image[rr, cc] <span class="op" style="color: #5E5E5E;">=</span> (<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">255</span>, <span class="dv" style="color: #AD0000;">0</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb71" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb71-1"><span class="co" style="color: #5E5E5E;"># Display the image</span></span>
<span id="cb71-2">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb71-3">plt.imshow(image)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="25">
<pre><code>&lt;matplotlib.image.AxesImage at 0x7f2f9064a6e0&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/cell-42-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>We could expand this solution, if we wanted, to draw rectangles, circles and lines at random positions within our black canvas. To do this, we could use the random python module, and the function random.randrange, which can produce random numbers within a certain range.</p>
<p>Let’s draw 15 randomly placed circles:</p>
<div class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb73" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb73-1"><span class="im" style="color: #00769E;">import</span> random</span>
<span id="cb73-2"></span>
<span id="cb73-3"><span class="co" style="color: #5E5E5E;"># create the black canvas</span></span>
<span id="cb73-4">image <span class="op" style="color: #5E5E5E;">=</span> np.zeros(shape<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">600</span>, <span class="dv" style="color: #AD0000;">800</span>, <span class="dv" style="color: #AD0000;">3</span>), dtype<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"uint8"</span>)</span>
<span id="cb73-5"></span>
<span id="cb73-6"><span class="co" style="color: #5E5E5E;"># draw a blue circle at a random location 15 times</span></span>
<span id="cb73-7"><span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">15</span>):</span>
<span id="cb73-8">    rr, cc <span class="op" style="color: #5E5E5E;">=</span> skimage.draw.disk(center<span class="op" style="color: #5E5E5E;">=</span>(</span>
<span id="cb73-9">         random.randrange(<span class="dv" style="color: #AD0000;">600</span>),</span>
<span id="cb73-10">         random.randrange(<span class="dv" style="color: #AD0000;">800</span>)),</span>
<span id="cb73-11">         radius<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">50</span>,</span>
<span id="cb73-12">         shape<span class="op" style="color: #5E5E5E;">=</span>image.shape[<span class="dv" style="color: #AD0000;">0</span>:<span class="dv" style="color: #AD0000;">2</span>],</span>
<span id="cb73-13">        )</span>
<span id="cb73-14">    image[rr, cc] <span class="op" style="color: #5E5E5E;">=</span> (<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">255</span>)</span>
<span id="cb73-15"></span>
<span id="cb73-16"><span class="co" style="color: #5E5E5E;"># display the results</span></span>
<span id="cb73-17">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb73-18">plt.imshow(image)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="26">
<pre><code>&lt;matplotlib.image.AxesImage at 0x7f2f906bbaf0&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/cell-43-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>We could expand this even further to also randomly choose whether to plot a rectangle, a circle, or a square. Again, we do this with the random module, now using the function <strong>random.random</strong> that returns a random number between 0.0 and 1.0.</p>
<div class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb75" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb75-1"><span class="co" style="color: #5E5E5E;"># Draw 15 random shapes (rectangle, circle or line) at random positions</span></span>
<span id="cb75-2"><span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">15</span>):</span>
<span id="cb75-3">    <span class="co" style="color: #5E5E5E;"># generate a random number between 0.0 and 1.0 and use this to decide if we</span></span>
<span id="cb75-4">    <span class="co" style="color: #5E5E5E;"># want a circle, a line or a sphere</span></span>
<span id="cb75-5">    x <span class="op" style="color: #5E5E5E;">=</span> random.random()</span>
<span id="cb75-6">    <span class="cf" style="color: #003B4F;">if</span> x <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="fl" style="color: #AD0000;">0.33</span>:</span>
<span id="cb75-7">        <span class="co" style="color: #5E5E5E;"># draw a blue circle at a random location</span></span>
<span id="cb75-8">        rr, cc <span class="op" style="color: #5E5E5E;">=</span> skimage.draw.disk(center<span class="op" style="color: #5E5E5E;">=</span>(</span>
<span id="cb75-9">            random.randrange(<span class="dv" style="color: #AD0000;">600</span>),</span>
<span id="cb75-10">            random.randrange(<span class="dv" style="color: #AD0000;">800</span>)),</span>
<span id="cb75-11">            radius<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">50</span>,</span>
<span id="cb75-12">            shape<span class="op" style="color: #5E5E5E;">=</span>image.shape[<span class="dv" style="color: #AD0000;">0</span>:<span class="dv" style="color: #AD0000;">2</span>],</span>
<span id="cb75-13">        )</span>
<span id="cb75-14">        color <span class="op" style="color: #5E5E5E;">=</span> (<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">255</span>)</span>
<span id="cb75-15">    <span class="cf" style="color: #003B4F;">elif</span> x <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="fl" style="color: #AD0000;">0.66</span>:</span>
<span id="cb75-16">        <span class="co" style="color: #5E5E5E;"># draw a green line at a random location</span></span>
<span id="cb75-17">        rr, cc <span class="op" style="color: #5E5E5E;">=</span> skimage.draw.line(</span>
<span id="cb75-18">            r0<span class="op" style="color: #5E5E5E;">=</span>random.randrange(<span class="dv" style="color: #AD0000;">600</span>),</span>
<span id="cb75-19">            c0<span class="op" style="color: #5E5E5E;">=</span>random.randrange(<span class="dv" style="color: #AD0000;">800</span>),</span>
<span id="cb75-20">            r1<span class="op" style="color: #5E5E5E;">=</span>random.randrange(<span class="dv" style="color: #AD0000;">600</span>),</span>
<span id="cb75-21">            c1<span class="op" style="color: #5E5E5E;">=</span>random.randrange(<span class="dv" style="color: #AD0000;">800</span>),</span>
<span id="cb75-22">        )</span>
<span id="cb75-23">        color <span class="op" style="color: #5E5E5E;">=</span> (<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">255</span>, <span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb75-24">    <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb75-25">        <span class="co" style="color: #5E5E5E;"># draw a red rectangle at a random location</span></span>
<span id="cb75-26">        rr, cc <span class="op" style="color: #5E5E5E;">=</span> skimage.draw.rectangle(</span>
<span id="cb75-27">            start<span class="op" style="color: #5E5E5E;">=</span>(random.randrange(<span class="dv" style="color: #AD0000;">600</span>), random.randrange(<span class="dv" style="color: #AD0000;">800</span>)),</span>
<span id="cb75-28">            extent<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">50</span>, <span class="dv" style="color: #AD0000;">50</span>),</span>
<span id="cb75-29">            shape<span class="op" style="color: #5E5E5E;">=</span>image.shape[<span class="dv" style="color: #AD0000;">0</span>:<span class="dv" style="color: #AD0000;">2</span>],</span>
<span id="cb75-30">        )</span>
<span id="cb75-31">        color <span class="op" style="color: #5E5E5E;">=</span> (<span class="dv" style="color: #AD0000;">255</span>, <span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb75-32"></span>
<span id="cb75-33">    image[rr, cc] <span class="op" style="color: #5E5E5E;">=</span> color</span>
<span id="cb75-34"></span>
<span id="cb75-35"><span class="co" style="color: #5E5E5E;"># display the results</span></span>
<span id="cb75-36">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb75-37">plt.imshow(image)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="27">
<pre><code>&lt;matplotlib.image.AxesImage at 0x7f2f906fb5e0&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/cell-44-output-2.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="image-modification" class="level3">
<h3 class="anchored" data-anchor-id="image-modification">Image modification</h3>
<p>All that remains is the task of modifying the image using our mask in such a way that the areas with True pixels in the mask are not shown in the image any more.</p>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-18-contents" aria-controls="callout-18" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Now, consider the mask image we created above. The values of the mask that corresponds to the portion of the image we are interested in are all False, while the values of the mask that corresponds to the portion of the image we want to remove are all True. How do we change the original image using the mask?
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-18" class="callout-18-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>When indexing the image using the mask, we access only those pixels at positions where the mask is True. So, when indexing with the mask, one can set those values to 0, and effectively remove them from the image.</p>
</div>
</div>
</div>
<p>Now we can write a Python program to use a mask to retain only the portions of our maize roots image that actually contains the seedling roots. We load the original image and create the mask in the same way as before:</p>
<div class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb77" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb77-1"><span class="co" style="color: #5E5E5E;"># Load the original image</span></span>
<span id="cb77-2">image <span class="op" style="color: #5E5E5E;">=</span> iio.imread(uri<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Images/maize-seedlings.tif"</span>)</span>
<span id="cb77-3"></span>
<span id="cb77-4"><span class="co" style="color: #5E5E5E;"># Create the basic mask</span></span>
<span id="cb77-5">mask <span class="op" style="color: #5E5E5E;">=</span> np.ones(shape<span class="op" style="color: #5E5E5E;">=</span>image.shape[<span class="dv" style="color: #AD0000;">0</span>:<span class="dv" style="color: #AD0000;">2</span>], dtype<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"bool"</span>)</span>
<span id="cb77-6"></span>
<span id="cb77-7"><span class="co" style="color: #5E5E5E;"># Draw a filled rectangle on the mask image</span></span>
<span id="cb77-8">rr, cc <span class="op" style="color: #5E5E5E;">=</span> skimage.draw.rectangle(start<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">357</span>, <span class="dv" style="color: #AD0000;">44</span>), end<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">740</span>, <span class="dv" style="color: #AD0000;">720</span>))</span>
<span id="cb77-9">mask[rr, cc] <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">False</span></span></code></pre></div>
</div>
<p>Then, we use numpy indexing to remove the portions of the image, where the mask is True:</p>
<div class="cell" data-execution_count="30">
<div class="sourceCode cell-code" id="cb78" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb78-1"><span class="co" style="color: #5E5E5E;"># Apply the mask</span></span>
<span id="cb78-2">image[mask] <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span></code></pre></div>
</div>
<p>Then, we display the masked image.</p>
<div class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb79" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb79-1">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb79-2">plt.imshow(image)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="31">
<pre><code>&lt;matplotlib.image.AxesImage at 0x7f2f90c853f0&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/cell-47-output-2.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="masked-monster-truck" class="level3">
<h3 class="anchored" data-anchor-id="masked-monster-truck">Masked monster truck</h3>
<p>I’ll now try to mask an image of <em>32 Degrees</em> from my son’s monster truck collection!</p>
<div class="cell" data-execution_count="32">
<div class="sourceCode cell-code" id="cb81" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb81-1"><span class="co" style="color: #5E5E5E;"># Load and display the original image</span></span>
<span id="cb81-2">image <span class="op" style="color: #5E5E5E;">=</span> iio.imread(uri<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Images/monster_truck.jpg"</span>)</span>
<span id="cb81-3"></span>
<span id="cb81-4">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb81-5">plt.imshow(image)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="32">
<pre><code>&lt;matplotlib.image.AxesImage at 0x7f2f90c86470&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/cell-48-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="33">
<div class="sourceCode cell-code" id="cb83" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb83-1"><span class="co" style="color: #5E5E5E;"># Create the basic mask</span></span>
<span id="cb83-2">mask <span class="op" style="color: #5E5E5E;">=</span> np.ones(shape<span class="op" style="color: #5E5E5E;">=</span>image.shape[<span class="dv" style="color: #AD0000;">0</span>:<span class="dv" style="color: #AD0000;">2</span>], dtype<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"bool"</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="34">
<div class="sourceCode cell-code" id="cb84" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb84-1"><span class="co" style="color: #5E5E5E;"># Draw filled rectangle on the mask image</span></span>
<span id="cb84-2">rr, cc <span class="op" style="color: #5E5E5E;">=</span> skimage.draw.rectangle(start<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">900</span>, <span class="dv" style="color: #AD0000;">900</span>), end<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">2200</span>, <span class="dv" style="color: #AD0000;">3000</span>))</span>
<span id="cb84-3">mask[rr, cc] <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">False</span></span>
<span id="cb84-4"></span>
<span id="cb84-5"><span class="co" style="color: #5E5E5E;"># Display mask image</span></span>
<span id="cb84-6">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb84-7">plt.imshow(mask, cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"gray"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="34">
<pre><code>&lt;matplotlib.image.AxesImage at 0x7f2f90c85810&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/cell-50-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="41">
<div class="sourceCode cell-code" id="cb86" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb86-1">image_copy <span class="op" style="color: #5E5E5E;">=</span> image.copy()</span>
<span id="cb86-2"></span>
<span id="cb86-3"><span class="co" style="color: #5E5E5E;"># Apply the mask</span></span>
<span id="cb86-4">image_copy[mask] <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="42">
<div class="sourceCode cell-code" id="cb87" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb87-1">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb87-2">plt.imshow(image_copy)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="42">
<pre><code>&lt;matplotlib.image.AxesImage at 0x7f2f910be050&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/cell-52-output-2.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="masking---iterating-through-a-co-ordinates-file" class="level3">
<h3 class="anchored" data-anchor-id="masking---iterating-through-a-co-ordinates-file">Masking - iterating through a co-ordinates file</h3>
<p>Consider this image of a 96-well plate that has been scanned on a flatbed scanner:</p>
<div class="cell" data-execution_count="43">
<div class="sourceCode cell-code" id="cb89" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb89-1"><span class="co" style="color: #5E5E5E;"># Load the image</span></span>
<span id="cb89-2">image <span class="op" style="color: #5E5E5E;">=</span> iio.imread(uri<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Images/wellplate-01.jpg"</span>)</span>
<span id="cb89-3"></span>
<span id="cb89-4"><span class="co" style="color: #5E5E5E;"># Display the image</span></span>
<span id="cb89-5">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb89-6">plt.imshow(image)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="43">
<pre><code>&lt;matplotlib.image.AxesImage at 0x7f2f90fe3d90&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/cell-53-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>Suppose that we are interested in the colours of the solutions in each of the wells. We do not care about the colour of the rest of the image, i.e., the plastic that makes up the well plate itself.</p>
<p>Your task is to write some code that will produce a mask that will mask out everything except for the wells. To help with this, you should use the text file <em>data/centers.txt</em> that contains the (cx, ry) coordinates of the centre of each of the 96 wells in this image. You may assume that each of the wells has a radius of 16 pixels. Your program should produce output that looks like this:</p>
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Images/wellplate_masked.jpg" width="300" height="300"></p>
<div class="cell" data-execution_count="48">
<div class="sourceCode cell-code" id="cb91" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb91-1"><span class="co" style="color: #5E5E5E;"># read in original image</span></span>
<span id="cb91-2">image <span class="op" style="color: #5E5E5E;">=</span> iio.imread(uri<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Images/wellplate-01.jpg"</span>)</span>
<span id="cb91-3"></span>
<span id="cb91-4"><span class="co" style="color: #5E5E5E;"># create the mask image</span></span>
<span id="cb91-5">mask <span class="op" style="color: #5E5E5E;">=</span> np.ones(shape<span class="op" style="color: #5E5E5E;">=</span>image.shape[<span class="dv" style="color: #AD0000;">0</span>:<span class="dv" style="color: #AD0000;">2</span>], dtype<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"bool"</span>)</span>
<span id="cb91-6"></span>
<span id="cb91-7"><span class="co" style="color: #5E5E5E;"># open and iterate through the centers file...</span></span>
<span id="cb91-8"><span class="cf" style="color: #003B4F;">with</span> <span class="bu" style="color: null;">open</span>(<span class="st" style="color: #20794D;">"Images/centers.txt"</span>, <span class="st" style="color: #20794D;">"r"</span>) <span class="im" style="color: #00769E;">as</span> center_file:</span>
<span id="cb91-9">    <span class="cf" style="color: #003B4F;">for</span> line <span class="kw" style="color: #003B4F;">in</span> center_file:</span>
<span id="cb91-10">        <span class="co" style="color: #5E5E5E;"># ... getting the coordinates of each well...</span></span>
<span id="cb91-11">        coordinates <span class="op" style="color: #5E5E5E;">=</span> line.split()</span>
<span id="cb91-12">        cx <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">int</span>(coordinates[<span class="dv" style="color: #AD0000;">0</span>])</span>
<span id="cb91-13">        ry <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">int</span>(coordinates[<span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb91-14"></span>
<span id="cb91-15">        <span class="co" style="color: #5E5E5E;"># ... and drawing a circle on the mask</span></span>
<span id="cb91-16">        rr, cc <span class="op" style="color: #5E5E5E;">=</span> skimage.draw.disk(center<span class="op" style="color: #5E5E5E;">=</span>(ry, cx), radius<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">16</span>, shape<span class="op" style="color: #5E5E5E;">=</span>image.shape[<span class="dv" style="color: #AD0000;">0</span>:<span class="dv" style="color: #AD0000;">2</span>])</span>
<span id="cb91-17">        mask[rr, cc] <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">False</span></span>
<span id="cb91-18"></span>
<span id="cb91-19"><span class="co" style="color: #5E5E5E;"># apply the mask</span></span>
<span id="cb91-20">image_copy <span class="op" style="color: #5E5E5E;">=</span> image.copy()</span>
<span id="cb91-21">image_copy[mask] <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb91-22"></span>
<span id="cb91-23"><span class="co" style="color: #5E5E5E;"># display the result</span></span>
<span id="cb91-24">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb91-25">plt.imshow(image_copy)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="48">
<pre><code>&lt;matplotlib.image.AxesImage at 0x7f2f905eabc0&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/cell-54-output-2.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="masking---using-nested-for-loops" class="level3">
<h3 class="anchored" data-anchor-id="masking---using-nested-for-loops">Masking - using nested for loops</h3>
<div class="cell" data-execution_count="50">
<div class="sourceCode cell-code" id="cb93" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb93-1"><span class="co" style="color: #5E5E5E;"># read in original image</span></span>
<span id="cb93-2">image <span class="op" style="color: #5E5E5E;">=</span> iio.imread(uri<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Images/wellplate-01.jpg"</span>)</span>
<span id="cb93-3"></span>
<span id="cb93-4"><span class="co" style="color: #5E5E5E;"># create the mask image</span></span>
<span id="cb93-5">mask <span class="op" style="color: #5E5E5E;">=</span> np.ones(shape<span class="op" style="color: #5E5E5E;">=</span>image.shape[<span class="dv" style="color: #AD0000;">0</span>:<span class="dv" style="color: #AD0000;">2</span>], dtype<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"bool"</span>)</span>
<span id="cb93-6"></span>
<span id="cb93-7"><span class="co" style="color: #5E5E5E;"># upper left well coordinates</span></span>
<span id="cb93-8">cx0 <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">91</span></span>
<span id="cb93-9">ry0 <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">108</span></span>
<span id="cb93-10"></span>
<span id="cb93-11"><span class="co" style="color: #5E5E5E;"># spaces between wells</span></span>
<span id="cb93-12">deltaCX <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">70</span></span>
<span id="cb93-13">deltaRY <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">72</span></span>
<span id="cb93-14"></span>
<span id="cb93-15">cx <span class="op" style="color: #5E5E5E;">=</span> cx0</span>
<span id="cb93-16">ry <span class="op" style="color: #5E5E5E;">=</span> ry0</span>
<span id="cb93-17"></span>
<span id="cb93-18"><span class="co" style="color: #5E5E5E;"># iterate each row and column</span></span>
<span id="cb93-19"><span class="cf" style="color: #003B4F;">for</span> row <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">12</span>):</span>
<span id="cb93-20">    <span class="co" style="color: #5E5E5E;"># reset cx to leftmost well in the row</span></span>
<span id="cb93-21">    cx <span class="op" style="color: #5E5E5E;">=</span> cx0</span>
<span id="cb93-22">    <span class="cf" style="color: #003B4F;">for</span> col <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">8</span>):</span>
<span id="cb93-23"></span>
<span id="cb93-24">        <span class="co" style="color: #5E5E5E;"># ... and drawing a circle on the mask</span></span>
<span id="cb93-25">        rr, cc <span class="op" style="color: #5E5E5E;">=</span> skimage.draw.disk(center<span class="op" style="color: #5E5E5E;">=</span>(ry, cx), radius<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">16</span>, shape<span class="op" style="color: #5E5E5E;">=</span>image.shape[<span class="dv" style="color: #AD0000;">0</span>:<span class="dv" style="color: #AD0000;">2</span>])</span>
<span id="cb93-26">        mask[rr, cc] <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">False</span></span>
<span id="cb93-27">        cx <span class="op" style="color: #5E5E5E;">+=</span> deltaCX</span>
<span id="cb93-28">    <span class="co" style="color: #5E5E5E;"># after one complete row, move to next row</span></span>
<span id="cb93-29">    ry <span class="op" style="color: #5E5E5E;">+=</span> deltaRY</span>
<span id="cb93-30"></span>
<span id="cb93-31"><span class="co" style="color: #5E5E5E;"># apply the mask</span></span>
<span id="cb93-32">copy_image<span class="op" style="color: #5E5E5E;">=</span>image.copy()</span>
<span id="cb93-33">copy_image[mask] <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb93-34"></span>
<span id="cb93-35"><span class="co" style="color: #5E5E5E;"># display the result</span></span>
<span id="cb93-36">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb93-37">plt.imshow(copy_image)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="50">
<pre><code>&lt;matplotlib.image.AxesImage at 0x7f2f905ea080&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/cell-55-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="callout-important callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Key Points:
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>we can use the NumPy zeros() function to create a blank, black image</li>
<li>we can draw on skimage images with functions such as skimage.draw.rectangle(), skimage.draw.disk(), skimage.draw.line(), and more</li>
<li>the drawing functions return indices to pixels that can be set directly</li>
</ul>
</div>
</div>
</section>
</section>
<section id="creating-histograms" class="level2">
<h2 class="anchored" data-anchor-id="creating-histograms">4. Creating Histograms</h2>
<p>In this section, we will learn how to use skimage functions to create and display histograms for images.</p>
<section id="introduction-to-histograms" class="level3">
<h3 class="anchored" data-anchor-id="introduction-to-histograms">Introduction to Histograms</h3>
<p>As it pertains to images, a histogram is a graphical representation showing how frequently various colour values occur in the image. We saw in section 1 that we could use a histogram to visualise the differences in uncompressed and compressed image formats. If our project involves detecting colour changes between images, histograms will prove to be very useful, and histograms are also quite handy as a preparatory step before performing thresholding.</p>
</section>
<section id="grayscale-histograms" class="level3">
<h3 class="anchored" data-anchor-id="grayscale-histograms">Grayscale Histograms</h3>
<p>We will start with grayscale images, and then move on to colour images. We will use an image of a plant seedling as an example. ere we load the image in grayscale instead of full colour, and display it.</p>
<p>Again, we use the iio.imread() function to load our image. The first argument to iio.imread() is the filename of the image. The second argument mode=“L” defines the type and depth of a pixel in the image (e.g., an 8-bit pixel has a range of 0-255). This argument is forwarded to the pillow backend, for which mode “L” means 8-bit pixels and single-channel (i.e., grayscale). pillow is a Python imaging library; which backend is used by iio.imread() may be specified (to use pillow, you would pass this argument: plugin=“pillow”); if unspecified, iio.imread() determines the backend to use based on the image type.</p>
<p>Then, we convert the grayscale image of integer dtype, with 0-255 range, into a floating-point one with 0-1 range, by calling the function <strong>skimage.util.img_as_float</strong>. We will keep working with images in the value range 0 to 1 in this section.</p>
<div class="cell" data-execution_count="54">
<div class="sourceCode cell-code" id="cb95" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb95-1"><span class="im" style="color: #00769E;">import</span> imageio.v3 <span class="im" style="color: #00769E;">as</span> iio</span>
<span id="cb95-2"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb95-3"><span class="im" style="color: #00769E;">import</span> skimage.color</span>
<span id="cb95-4"><span class="im" style="color: #00769E;">import</span> skimage.util</span>
<span id="cb95-5"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb95-6"><span class="op" style="color: #5E5E5E;">%</span>matplotlib inline</span>
<span id="cb95-7"></span>
<span id="cb95-8"><span class="co" style="color: #5E5E5E;"># read the image of a plant seedling as grayscale from the outset</span></span>
<span id="cb95-9">image <span class="op" style="color: #5E5E5E;">=</span> iio.imread(uri<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Images/plant-seedling.jpg"</span>, mode<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"L"</span>)</span>
<span id="cb95-10"></span>
<span id="cb95-11"><span class="co" style="color: #5E5E5E;"># convert the image to float dtype with a value range from 0 to 1</span></span>
<span id="cb95-12">image <span class="op" style="color: #5E5E5E;">=</span> skimage.util.img_as_float(image)</span>
<span id="cb95-13"></span>
<span id="cb95-14"><span class="co" style="color: #5E5E5E;"># display the image</span></span>
<span id="cb95-15">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb95-16">plt.imshow(image, cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"gray"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="54">
<pre><code>&lt;matplotlib.image.AxesImage at 0x7f2f90393a60&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/cell-56-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>We now use the function <strong>np.histogram</strong> to compute the histogram of our image which, after all, is a NumPy array.</p>
<p>The parameter <strong><em>bins</em></strong> determines the number of “bins” to use for the histogram. We pass in 256 because we want to see the pixel count for each of the 256 possible values in the grayscale image.</p>
<p>The parameter <strong><em>range</em></strong> is the range of values each of the pixels in the image can have. Here, we pass 0 and 1, which is the value range of our input image after transforming it to grayscale.</p>
<p>The first output of the np.histogram function is a one-dimensional NumPy array, with 256 rows and one column, representing the number of pixels with the intensity value corresponding to the index. I.e., the first number in the array is the number of pixels found with intensity value 0, and the final number in the array is the number of pixels found with intensity value 255.</p>
<p>The second output of np.histogram is an array with the bin edges and one column and 257 rows (one more than the histogram itself). There are no gaps between the bins, which means that the end of the first bin, is the start of the second and so on. For the last bin, the array also has to contain the stop, so it has one more element, than the histogram.</p>
<div class="cell" data-execution_count="55">
<div class="sourceCode cell-code" id="cb97" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb97-1"><span class="co" style="color: #5E5E5E;"># create the histogram</span></span>
<span id="cb97-2">histogram, bin_edges <span class="op" style="color: #5E5E5E;">=</span> np.histogram(image, bins<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">256</span>, <span class="bu" style="color: null;">range</span><span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>))</span></code></pre></div>
</div>
<p>Next, we turn our attention to displaying the histogram, by taking advantage of the plotting facilities of the matplotlib library. We create the plot with plt.figure(), then label the figure and the coordinate axes with plt.title(), plt.xlabel(), and plt.ylabel() functions. We then set the limits on the values on the x-axis with the plt.xlim([0.0, 1.0]) function call, before creating the histogram plot itself with plt.plot(bin_edges[0:-1], histogram).</p>
<p>We use the <strong>left</strong> bin edges as x-positions for the histogram values by indexing the bin_edges array to ignore the last value (the <strong>right</strong> edge of the last bin). When we run the program on this image of a plant seedling, it produces this histogram:</p>
<div class="cell" data-execution_count="62">
<div class="sourceCode cell-code" id="cb98" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb98-1"><span class="co" style="color: #5E5E5E;"># configure and draw the histogram figure</span></span>
<span id="cb98-2">plt.figure()</span>
<span id="cb98-3">plt.title(<span class="st" style="color: #20794D;">"Grayscale Histogram"</span>)</span>
<span id="cb98-4">plt.xlabel(<span class="st" style="color: #20794D;">"grayscale value"</span>)</span>
<span id="cb98-5">plt.ylabel(<span class="st" style="color: #20794D;">"pixel count"</span>)</span>
<span id="cb98-6">plt.xlim([<span class="fl" style="color: #AD0000;">0.0</span>, <span class="fl" style="color: #AD0000;">1.0</span>])  <span class="co" style="color: #5E5E5E;"># &lt;- named arguments do not work here</span></span>
<span id="cb98-7"></span>
<span id="cb98-8">plt.plot(bin_edges[<span class="dv" style="color: #AD0000;">0</span>:<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>], histogram)  <span class="co" style="color: #5E5E5E;"># &lt;- or here</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/cell-58-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="callout-caution callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Note that we cannot used named parameters for the plt.xlim() or plt.plot() functions.
</div>
</div>
<div class="callout-body-container callout-body">
<p>This is because these functions are defined to take an arbitrary number of unnamed arguments. The designers wrote the functions this way because they are very versatile, and creating named parameters for all of the possible ways to use them would be complicated.</p>
</div>
</div>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Matplotlib provides a dedicated function to compute and display histograms: <strong>plt.hist()</strong>.
</div>
</div>
<div class="callout-body-container callout-body">
<p>We will not use it in this section in order to understand how to calculate histograms in more detail. In practice, it is a good idea to use this function, because it visualises histograms more appropriately than plt.plot(). Here, we could use it by calling:</p>
<pre><code>**plt.hist(image.flatten(), bins=256, range=(0, 1))** </code></pre>
<p>instead of np.histogram() and plt.plot()</p>
<p><strong>.flatten()</strong> is a numpy function that converts our two-dimensional image into a one-dimensional array.This is because these functions are defined to take an arbitrary number of unnamed arguments. The designers wrote the functions this way because they are very versatile, and creating named parameters for all of the possible ways to use them would be complicated.</p>
</div>
</div>
<p>Looking at the histogram above, you will notice that there is a large number of very dark pixels, as indicated in the chart by the spike around the grayscale value 0.12. That is not so surprising, since the original image is mostly black background. What if we want to focus more closely on the leaf of the seedling? That is where a mask enters the picture!</p>
<p>Let’s hover over the plant seedling image with your mouse to determine the (x, y) coordinates of a bounding box around the leaf of the seedling. Then, using techniques from section 3, we can create a mask with a white rectangle covering that bounding box. After we have created the mask, we can apply it to the input image before passing it to the np.histogram function.</p>
<div class="cell" data-execution_count="82">
<div class="sourceCode cell-code" id="cb100" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb100-1"><span class="co" style="color: #5E5E5E;"># Load and display the original image</span></span>
<span id="cb100-2">image <span class="op" style="color: #5E5E5E;">=</span> iio.imread(uri<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Images/plant-seedling.jpg"</span>, mode <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">"L"</span>)</span>
<span id="cb100-3"></span>
<span id="cb100-4"><span class="co" style="color: #5E5E5E;"># display the image</span></span>
<span id="cb100-5">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb100-6">plt.imshow(image, cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"gray"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="82">
<pre><code>&lt;matplotlib.image.AxesImage at 0x7f2f8ba21de0&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/cell-59-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="85">
<div class="sourceCode cell-code" id="cb102" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb102-1">copy_image <span class="op" style="color: #5E5E5E;">=</span> image.copy()</span>
<span id="cb102-2"></span>
<span id="cb102-3"><span class="co" style="color: #5E5E5E;"># create mask here, using np.zeros() and skimage.draw.rectangle()</span></span>
<span id="cb102-4">mask <span class="op" style="color: #5E5E5E;">=</span> np.zeros(shape<span class="op" style="color: #5E5E5E;">=</span>copy_image.shape, dtype<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"bool"</span>)</span>
<span id="cb102-5"></span>
<span id="cb102-6"><span class="co" style="color: #5E5E5E;"># Draw filled rectangle on the mask image</span></span>
<span id="cb102-7"><span class="co" style="color: #5E5E5E;"># co-ordinates are (row, column)</span></span>
<span id="cb102-8"><span class="co" style="color: #5E5E5E;"># first co-ord is top-left, second co-ord is bottom-right</span></span>
<span id="cb102-9">rr, cc <span class="op" style="color: #5E5E5E;">=</span> skimage.draw.rectangle(start<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">199</span>,<span class="dv" style="color: #AD0000;">410</span>), end<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">384</span>,<span class="dv" style="color: #AD0000;">485</span>))</span>
<span id="cb102-10">mask[rr, cc] <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">True</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="89">
<div class="sourceCode cell-code" id="cb103" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb103-1"><span class="co" style="color: #5E5E5E;"># Display the mask</span></span>
<span id="cb103-2">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb103-3">plt.imshow(mask, cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"gray"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="89">
<pre><code>&lt;matplotlib.image.AxesImage at 0x7f2f8b83b700&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/cell-61-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb105" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb105-1"><span class="co" style="color: #5E5E5E;"># mask the image and create the new histogram</span></span>
<span id="cb105-2">histogram, bin_edges <span class="op" style="color: #5E5E5E;">=</span> np.histogram(copy_image[mask], bins<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">256</span>, <span class="bu" style="color: null;">range</span><span class="op" style="color: #5E5E5E;">=</span>(<span class="fl" style="color: #AD0000;">0.0</span>, <span class="fl" style="color: #AD0000;">1.0</span>))</span>
<span id="cb105-3"></span>
<span id="cb105-4"><span class="co" style="color: #5E5E5E;"># configure and draw the histogram figure</span></span>
<span id="cb105-5">plt.figure()</span>
<span id="cb105-6"></span>
<span id="cb105-7">plt.title(<span class="st" style="color: #20794D;">"Grayscale Histogram"</span>)</span>
<span id="cb105-8">plt.xlabel(<span class="st" style="color: #20794D;">"grayscale value"</span>)</span>
<span id="cb105-9">plt.ylabel(<span class="st" style="color: #20794D;">"pixel count"</span>)</span>
<span id="cb105-10">plt.xlim([<span class="fl" style="color: #AD0000;">0.0</span>, <span class="fl" style="color: #AD0000;">1.0</span>])</span>
<span id="cb105-11">plt.plot(bin_edges[<span class="dv" style="color: #AD0000;">0</span>:<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>], histogram)</span></code></pre></div>
</div>
<p>Your histogram of the masked area should look something like this:</p>
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Images/plant-seedling-grayscale-histogram-mask.png" width="600" height="600"></p>
</section>
<section id="colour-histograms" class="level3">
<h3 class="anchored" data-anchor-id="colour-histograms">Colour Histograms</h3>
<p>We can also create histograms for full colour images, in addition to grayscale histograms. We have seen colour histograms before, in the first section. A program to create colour histograms starts in a familiar way. We read the original image, now in full colour, and display it:</p>
<div class="cell" data-execution_count="93">
<div class="sourceCode cell-code" id="cb106" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb106-1"><span class="co" style="color: #5E5E5E;"># read original image, in full color</span></span>
<span id="cb106-2">image <span class="op" style="color: #5E5E5E;">=</span> iio.imread(uri<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Images/plant-seedling.jpg"</span>)</span>
<span id="cb106-3"></span>
<span id="cb106-4"><span class="co" style="color: #5E5E5E;"># display the image</span></span>
<span id="cb106-5">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb106-6">plt.imshow(image)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="93">
<pre><code>&lt;matplotlib.image.AxesImage at 0x7f2f8b772980&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/cell-63-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>Next, we create the histogram, by calling the np.histogram function three times, once for each of the channels. We obtain the individual channels, by slicing the image along the last axis. For example, we can obtain the red colour channel by calling:</p>
<pre><code>r_chan = image[:, :, 0]</code></pre>
<p>We will draw the histogram line for each channel in a different colour, and so we create a tuple of the colours to use for the three lines with the:</p>
<pre><code>colors = ("red", "green", "blue")</code></pre>
<p>line of code. Then, we limit the range of the x-axis with the <em>plt.xlim()</em> function call.</p>
<p>Next, we use the for control structure to iterate through the three channels, plotting an appropriately-coloured histogram line for each. This may be new Python syntax for you, so we will take a moment to discuss what is happening in the for statement.</p>
<p>The Python built-in <strong><em>enumerate()</em></strong> function takes a list and returns an iterator of tuples, where the first element of the tuple is the <strong>index</strong> and the second element is the <strong>element</strong> of the list.</p>
<div class="cell" data-execution_count="101">
<div class="sourceCode cell-code" id="cb110" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb110-1"><span class="co" style="color: #5E5E5E;"># tuple to select colors of each channel line</span></span>
<span id="cb110-2">colors <span class="op" style="color: #5E5E5E;">=</span> (<span class="st" style="color: #20794D;">"red"</span>, <span class="st" style="color: #20794D;">"green"</span>, <span class="st" style="color: #20794D;">"blue"</span>)</span>
<span id="cb110-3"></span>
<span id="cb110-4"><span class="co" style="color: #5E5E5E;"># create the histogram plot, with three lines, one for</span></span>
<span id="cb110-5"><span class="co" style="color: #5E5E5E;"># each color</span></span>
<span id="cb110-6">plt.figure()</span>
<span id="cb110-7">plt.xlim([<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">256</span>])</span>
<span id="cb110-8"></span>
<span id="cb110-9"><span class="co" style="color: #5E5E5E;"># using a tuple, (channel_id, color), as the for variable</span></span>
<span id="cb110-10"></span>
<span id="cb110-11"><span class="cf" style="color: #003B4F;">for</span> channel_id, color <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(colors):</span>
<span id="cb110-12">    histogram, bin_edges <span class="op" style="color: #5E5E5E;">=</span> np.histogram(</span>
<span id="cb110-13">        image[:, :, channel_id], bins<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">256</span>, <span class="bu" style="color: null;">range</span><span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">256</span>)</span>
<span id="cb110-14">    )</span>
<span id="cb110-15">    plt.plot(bin_edges[<span class="dv" style="color: #AD0000;">0</span>:<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>], histogram, color<span class="op" style="color: #5E5E5E;">=</span>color)</span>
<span id="cb110-16">    </span>
<span id="cb110-17"><span class="co" style="color: #5E5E5E;"># label our axes and display the histogram</span></span>
<span id="cb110-18">plt.title(<span class="st" style="color: #20794D;">"Color Histogram"</span>)</span>
<span id="cb110-19">plt.xlabel(<span class="st" style="color: #20794D;">"Color value"</span>)</span>
<span id="cb110-20">plt.ylabel(<span class="st" style="color: #20794D;">"Pixel count"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="101">
<pre><code>Text(0, 0.5, 'Pixel count')</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/cell-64-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>In our colour histogram program, we are using a tuple, (channel_id, color), as the for variable. The first time through the loop, the channel_id variable takes the value 0, referring to the position of the red colour channel, and the color variable contains the string “red”. The second time through the loop the values are the green channels index 1 and “green”, and the third time they are the blue channel index 2 and “blue”.</p>
<p>Inside the for loop, our code looks much like it did for the grayscale example. We calculate the histogram for the current channel with the:</p>
<pre><code>histogram, bin_edges = np.histogram(image[:, :, channel_id], bins=256, range=(0, 256))</code></pre>
<p>function call, and then add a histogram line of the correct colour to the plot with the:</p>
<pre><code>plt.plot(bin_edges[0:-1], histogram, color=color)</code></pre>
<p>function call.</p>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Iterators, tuples, and enumerate()
</div>
</div>
<div class="callout-body-container callout-body">
<p>In Python, an iterator, or an iterable object, is something that can be iterated over with the for control structure. A <strong>tuple</strong> is a sequence of objects, just like a list. However, a tuple <strong>cannot be changed</strong>, and a tuple is indicated by (parentheses) instead of [square brackets]. The enumerate() function takes an iterable object, and returns an iterator of tuples consisting of the 0-based index and the corresponding object.</p>
</div>
</div>
<p>For example, consider this small Python program:</p>
<div class="cell" data-execution_count="95">
<div class="sourceCode cell-code" id="cb114" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb114-1"><span class="bu" style="color: null;">list</span> <span class="op" style="color: #5E5E5E;">=</span> (<span class="st" style="color: #20794D;">"a"</span>, <span class="st" style="color: #20794D;">"b"</span>, <span class="st" style="color: #20794D;">"c"</span>, <span class="st" style="color: #20794D;">"d"</span>, <span class="st" style="color: #20794D;">"e"</span>)</span>
<span id="cb114-2"></span>
<span id="cb114-3"><span class="cf" style="color: #003B4F;">for</span> x <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(<span class="bu" style="color: null;">list</span>):</span>
<span id="cb114-4">    <span class="bu" style="color: null;">print</span>(x)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>(0, 'a')
(1, 'b')
(2, 'c')
(3, 'd')
(4, 'e')</code></pre>
</div>
</div>
</section>
<section id="colour-histogram-with-a-mask" class="level3">
<h3 class="anchored" data-anchor-id="colour-histogram-with-a-mask">Colour histogram with a mask</h3>
<p>We can also apply a mask to the images we apply the colour histogram process to, in the same way we did for grayscale histograms. Consider this image of a well plate, where various chemical sensors have been applied to water and various concentrations of hydrochloric acid and sodium hydroxide:</p>
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Images/wellplate-02.jpg" width="400" height="400"></p>
<p>Suppose we are interested in the colour histogram of one of the sensors in the well plate image, specifically, the seventh well from the left in the topmost row, which shows Erythrosin B reacting with water.Hover over the image with your mouse to find the centre of that well and the radius (in pixels) of the well. Then create a circular mask to select only the desired well. Then, use that mask to apply the colour histogram operation to that well.</p>
<p>Your masked image should look like this:</p>
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Images/wellplate-02-masked.jpg" width="400" height="400"></p>
<div class="callout-important callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Key Points:
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>in many cases, we can load images in grayscale by passing the mode=“L” argument to the iio.imread() function.</li>
<li>we can create histograms of images with the np.histogram function.</li>
<li>we can separate the RGB channels of an image using slicing operations.</li>
<li>we can display histograms using the matplotlib pyplot <em>figure()</em>, <em>title()</em>, <em>xlabel()</em>, <em>ylabel()</em>, <em>xlim()</em>, <em>plot()</em>, and <em>show()</em> functions.</li>
</ul>
</div>
</div>
</section>
</section>
<section id="blurring-images" class="level2">
<h2 class="anchored" data-anchor-id="blurring-images">5. Blurring Images</h2>
<p>In this section, we will learn how to use skimage functions to blur images.</p>
<p>When processing an image, we are often interested in identifying objects represented within it so that we can perform some further analysis of these objects e.g.&nbsp;by counting them, measuring their sizes, etc. An important concept associated with the identification of objects in an image is that of <strong>edges</strong>: the lines that represent a transition from one group of similar pixels in the image to another different group. One example of an edge is the pixels that represent the boundaries of an object in an image, where the background of the image ends and the object begins.</p>
<p>When we blur an image, we make the colour transition from one side of an edge in the image to another smooth rather than sudden. The effect is to average out rapid changes in pixel intensity. A blur is a very common operation we need to perform before other tasks such as <strong>thresholding</strong>.</p>
<p>There are several different blurring functions in the <strong>skimage.filters</strong> module, so we will focus on just one here, the <em>Gaussian blur</em>.</p>
<section id="filters" class="level3">
<h3 class="anchored" data-anchor-id="filters">Filters</h3>
<p>In the day-to-day, macroscopic world, we have physical filters which separate out objects by size. A filter with small holes allows only small objects through, leaving larger objects behind. This is a good analogy for image filters. A high-pass filter will retain the smaller details in an image, filtering out the larger ones. A low-pass filter retains the larger features, analogous to what’s left behind by a physical filter mesh. High- and low-pass, here, refer to high and low spatial frequencies in the image. Details associated with high spatial frequencies are small, a lot of these features would fit across an image. Features associated with low spatial frequencies are large - maybe a couple of big features per image.</p>
</section>
<section id="blurring" class="level3">
<h3 class="anchored" data-anchor-id="blurring">Blurring</h3>
<p>Blurring is to make something less clear or distinct. This could be interpreted quite broadly in the context of image analysis - anything that reduces or distorts the detail of an image might apply. Applying a low pass filter, which removes detail occurring at high spatial frequencies, is perceived as a blurring effect. A Gaussian blur is a filter that makes use of a Gaussian kernel.</p>
</section>
<section id="kernels" class="level3">
<h3 class="anchored" data-anchor-id="kernels">Kernels</h3>
<p>A kernel can be used to implement a filter on an image. A kernel, in this context, is a small matrix which is combined with the image using a mathematical technique: convolution. Different sizes, shapes and contents of kernel produce different effects. The kernel can be thought of as a little image in itself, and will favour features of a similar size and shape in the main image. On convolution with an image, a big, blobby kernel will retain big, blobby, low spatial frequency features.</p>
</section>
<section id="gaussian-blur" class="level3">
<h3 class="anchored" data-anchor-id="gaussian-blur">Gaussian blur</h3>
<p>Consider this image of a cat, in particular the area of the image outlined by the white square.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/90daf2ae-b8e2-4ebc-bba9-fd142d8421e2.jpg" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">cat.jpg</figcaption><p></p>
</figure>
</div>
<p>Now, zoom in on the area of the cat’s eye, as shown in the left-hand image below. When we apply a filter, we consider each pixel in the image, one at a time. In this example, the pixel we are currently working on is highlighted in red, as shown in the right-hand image.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/020c950f-b7ea-44d7-8a3c-d26e18dd68b1.jpg" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">cat-eye-pixels.jpg</figcaption><p></p>
</figure>
</div>
<p>When we apply a filter, we consider rectangular groups of pixels surrounding each pixel in the image, in turn. The <em>kernel</em> is another group of pixels (a separate matrix / small image), of the same dimensions as the rectangular group of pixels in the image, that moves along with the pixel being worked on by the filter. The width and height of the kernel must be an odd number, so that the pixel being worked on is always in its centre. In the example shown above, the kernel is square, with a dimension of seven pixels.</p>
<p>To apply the kernel to the current pixel, an average of the the colour values of the pixels surrounding it is calculated, weighted by the values in the kernel. In a <strong>Gaussian</strong> blur, the pixels nearest the centre of the kernel are given more weight than those far away from the centre. The rate at which this weight diminishes is determined by a Gaussian function, hence the name Gaussian blur.</p>
<p>A Gaussian function maps random variables into a <strong>normal distribution</strong> or <em>“Bell Curve”</em>.</p>
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Images/Normal_Distribution.svg" width="600" height="600"></p>
<p>https://en.wikipedia.org/wiki/Gaussian_function#/media/File:Normal_Distribution_PDF.svg</p>
<p>The shape of the function is described by a <strong>mean</strong> value <em>μ</em>, and a <strong>variance</strong> value <em>σ²</em>. The mean determines the central point of the bell curve on the x axis, and the variance describes the spread of the curve. In fact, when using Gaussian functions in Gaussian blurring, we use a 2D Gaussian function to account for X and Y dimensions, but the same rules apply. The mean μ is always 0, and represents the middle of the 2D kernel. Increasing values of σ² in either dimension increases the amount of blurring in that dimension.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/4adc2188-fae0-4d39-97c2-2c0c242b13ec.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Gaussian_2D.png</figcaption><p></p>
</figure>
</div>
<p>The averaging is done on a <strong>channel-by-channel</strong> basis, and the average channel values become the new value for the pixel in the filtered image. Larger kernels have more values factored into the average, and this implies that a larger kernel will blur the image more than a smaller kernel. To get an idea of how this works, consider this plot of the two-dimensional Gaussian function:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/2a56c4bb-901f-430a-957b-05615109013c.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">gaussian-kernel.png</figcaption><p></p>
</figure>
</div>
<p>Imagine that plot laid over the kernel for the Gaussian blur filter. The height of the plot corresponds to the weight given to the underlying pixel in the kernel. I.e., the pixels close to the centre become more important to the filtered pixel colour than the pixels close to the outer limits of the kernel. The shape of the Gaussian function is controlled via its standard deviation, or sigma:</p>
<ul>
<li>a large sigma value results in a flatter shape, while</li>
<li>a smaller sigma value results in a more pronounced peak.</li>
</ul>
<p>The mathematics involved in the Gaussian blur filter are not quite that simple, but this explanation gives you the basic idea. To illustrate the blur process, consider the blue channel colour values from the seven-by-seven region of the cat image above:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/63743bf3-cd76-411a-a744-cac637d4a660.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">cat-corner-blue.png</figcaption><p></p>
</figure>
</div>
<p>The filter is going to determine the new blue channel value for the centre pixel – the one that currently has the value 86. The filter calculates a weighted average of all the blue channel values in the kernel giving higher weight to the pixels near the centre of the kernel.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/e409e806-8f4b-4bf7-ad36-cac2cf96946c.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">combination.png</figcaption><p></p>
</figure>
</div>
<p>This weighted average, the sum of the multiplications, becomes the new value for the centre pixel (3, 3). The same process would be used to determine the green and red channel values, and then the kernel would be moved over to apply the filter to the next pixel in the image.</p>
</section>
<section id="image-edges" class="level3">
<h3 class="anchored" data-anchor-id="image-edges">Image edges</h3>
<p>Something different needs to happen for pixels near the outer limits of the image, since the kernel for the filter may be partially off the image. For example, what happens when the filter is applied to the upper-left pixel of the image? Here are the blue channel pixel values for the upper-left pixel of the cat image, again assuming a seven-by-seven kernel:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/3be43e17-88db-4def-af8c-62229f0377eb.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">edges.JPG</figcaption><p></p>
</figure>
</div>
<p>The upper-left pixel is the one with value 4. Since the pixel is at the upper-left corner, there are no pixels underneath much of the kernel; here, this is represented by x’s. So, what does the filter do in that situation? The default mode is to fill in the nearest pixel value from the image. For each of the missing x’s the image value closest to the x is used. If we fill in a few of the missing pixels, you will see how this works:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/2d28eaed-5ba1-47e8-b1be-75c47ea71328.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">edges_2.JPG</figcaption><p></p>
</figure>
</div>
<p>Another strategy to fill those missing values is to <strong><em>reflect</em></strong> the pixels that are in the image to fill in for the pixels that are missing from the kernel.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/78041d9a-a75b-442f-b6e9-866cf1beed58.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">reflect.JPG</figcaption><p></p>
</figure>
</div>
<p>A similar process would be used to fill in all of the other missing pixels from the kernel. Other <strong><em>border modes</em></strong> are available; you can learn more about them in the <a href="https://scikit-image.org/docs/dev/user_guide">skimage documentation</a>. This animation shows how the blur kernel moves along in the original image in order to calculate the colour channel values for the blurred image.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/ae8404cc-4024-478f-a356-d6d6a43b9e89.gif" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">blur-demo.gif</figcaption><p></p>
</figure>
</div>
<p>skimage has built-in functions to perform blurring for us, so we do not have to perform all of these mathematical operations ourselves. Let’s work through an example of blurring an image with the skimage Gaussian blur function.</p>
<p>First, we load the image, and display it:</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb116" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb116-1"><span class="im" style="color: #00769E;">import</span> imageio.v3 <span class="im" style="color: #00769E;">as</span> iio</span>
<span id="cb116-2"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb116-3"><span class="im" style="color: #00769E;">import</span> skimage.filters</span>
<span id="cb116-4"></span>
<span id="cb116-5">image <span class="op" style="color: #5E5E5E;">=</span> iio.imread(uri<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Images/gaussian-original.png"</span>)</span>
<span id="cb116-6"></span>
<span id="cb116-7"><span class="co" style="color: #5E5E5E;"># display the image</span></span>
<span id="cb116-8">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb116-9">plt.imshow(image)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="1">
<pre><code>&lt;matplotlib.image.AxesImage at 0x7fa014b526e0&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/cell-66-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>Next, we apply the gaussian blur:</p>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb118" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb118-1">sigma <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">3.0</span></span>
<span id="cb118-2"></span>
<span id="cb118-3"><span class="co" style="color: #5E5E5E;"># apply Gaussian blur, creating a new image</span></span>
<span id="cb118-4">blurred <span class="op" style="color: #5E5E5E;">=</span> skimage.filters.gaussian(</span>
<span id="cb118-5">    image, sigma<span class="op" style="color: #5E5E5E;">=</span>(sigma, sigma), truncate<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">3.5</span>, channel_axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>)</span></code></pre></div>
</div>
<p>The first two parameters to <strong>skimage.filters.gaussian()</strong> are the image to blur, <em>image</em>, and a <em>tuple defining the sigma to use in ry- and cx-direction</em>, (sigma, sigma). The third parameter <em>truncate</em> gives the radius of the kernel in terms of sigmas. A Gaussian function is defined from -infinity to +infinity, but our kernel (which must have a finite, smaller size) can only approximate the real function. Therefore, we must choose a certain distance from the centre of the function where we stop this approximation, and set the final size of our kernel. In the above example, we set truncate to 3.5, which means the kernel size will be 2 * sigma * 3.5. For example, for a sigma of 1.0 the resulting kernel size would be 7, while for a sigma of 2.0 the kernel size would be 14. <strong>The default value for truncate in scikit-image is 4.0.</strong></p>
<p>The last parameter to skimage.filters.gaussian() tells skimage to interpret our image, that has three dimensions, as a multichannel colour image.</p>
<p>Finally, we display the blurred image:</p>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb119" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb119-1"><span class="co" style="color: #5E5E5E;"># display blurred image</span></span>
<span id="cb119-2">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb119-3">plt.imshow(blurred)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>&lt;matplotlib.image.AxesImage at 0x7f9fdadf2500&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/cell-68-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>The size and shape of the kernel used to blur an image can have a significant effect on the result of the blurring and any downstream analysis carried out on the blurred image. Let’s now experiment with the sigma values of the kernel, as this is a good way to develop our understanding of how the choice of kernel can influence the result of blurring.</p>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-24-contents" aria-controls="callout-24" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Generally speaking, what effect does the sigma value have on the blurred image?
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-24" class="callout-24-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Generally speaking, the larger the sigma value, the more blurry the result. A larger sigma will tend to get rid of more noise in the image, which will help for other operations we will cover soon, such as thresholding. However, a larger sigma also tends to eliminate some of the detail from the image. So, we must strike a balance with the sigma value used for blur filters.</p>
</div>
</div>
</div>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb121" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb121-1">sigma <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">1.0</span></span>
<span id="cb121-2"></span>
<span id="cb121-3"><span class="co" style="color: #5E5E5E;"># apply Gaussian blur, creating a new image</span></span>
<span id="cb121-4">blurred <span class="op" style="color: #5E5E5E;">=</span> skimage.filters.gaussian(</span>
<span id="cb121-5">    image, sigma<span class="op" style="color: #5E5E5E;">=</span>(sigma, sigma), truncate<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">3.5</span>, channel_axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb121-6"></span>
<span id="cb121-7"><span class="co" style="color: #5E5E5E;"># display blurred image</span></span>
<span id="cb121-8">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb121-9">plt.imshow(blurred)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>&lt;matplotlib.image.AxesImage at 0x7f9fda93f7f0&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/cell-69-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb123" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb123-1">sigma <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">5.0</span></span>
<span id="cb123-2"></span>
<span id="cb123-3"><span class="co" style="color: #5E5E5E;"># apply Gaussian blur, creating a new image</span></span>
<span id="cb123-4">blurred <span class="op" style="color: #5E5E5E;">=</span> skimage.filters.gaussian(</span>
<span id="cb123-5">    image, sigma<span class="op" style="color: #5E5E5E;">=</span>(sigma, sigma), truncate<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">3.5</span>, channel_axis<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb123-6"></span>
<span id="cb123-7"><span class="co" style="color: #5E5E5E;"># display blurred image</span></span>
<span id="cb123-8">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb123-9">plt.imshow(blurred)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Clipping input data to the valid range for imshow with RGB data ([0..1] for floats or [0..255] for integers).</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>&lt;matplotlib.image.AxesImage at 0x7f9fda9b6470&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/cell-70-output-3.png" class="img-fluid"></p>
</div>
</div>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-25-contents" aria-controls="callout-25" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Kernel shape - what is the effect of applying an asymmetric kernel to blurring an image?
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-25" class="callout-25-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>These unequal sigma values produce a kernel that is rectangular instead of square. The result is an image that is much more blurred in the x direction than the y direction or vice versa. For most use cases, a uniform blurring effect is desirable and this kind of asymmetric blurring should be avoided. However, it can be helpful in specific circumstances e.g.&nbsp;when noise is present in your image in a particular pattern or orientation, such as vertical lines, or when you want to <a href="https://www.researchgate.net/publication/228567435_An_edge_detection_algorithm_based_on_rectangular_Gaussian_kernels_for_machine_vision_applications">remove uniform noise without blurring edges present in the image in a particular orientation</a>.</p>
</div>
</div>
</div>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb126" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb126-1"><span class="co" style="color: #5E5E5E;"># apply Gaussian blur, with a sigma of 1.0 in the ry direction, and 6.0 in the cx direction</span></span>
<span id="cb126-2">blurred <span class="op" style="color: #5E5E5E;">=</span> skimage.filters.gaussian(</span>
<span id="cb126-3">    image, sigma<span class="op" style="color: #5E5E5E;">=</span>(<span class="fl" style="color: #AD0000;">1.0</span>, <span class="fl" style="color: #AD0000;">6.0</span>), truncate<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">3.5</span>, multichannel<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span></span>
<span id="cb126-4">)</span>
<span id="cb126-5"></span>
<span id="cb126-6"><span class="co" style="color: #5E5E5E;"># display blurred image</span></span>
<span id="cb126-7">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb126-8">plt.imshow(blurred)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/tmp/ipykernel_2635/3991388852.py:2: FutureWarning: `multichannel` is a deprecated argument name for `gaussian`. It will be removed in version 1.0. Please use `channel_axis` instead.
  blurred = skimage.filters.gaussian(</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>&lt;matplotlib.image.AxesImage at 0x7f9fda82f160&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/cell-71-output-3.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb129" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb129-1"><span class="co" style="color: #5E5E5E;"># apply Gaussian blur, with a sigma of 6.0 in the ry direction, and 1.0 in the cx direction</span></span>
<span id="cb129-2">blurred <span class="op" style="color: #5E5E5E;">=</span> skimage.filters.gaussian(</span>
<span id="cb129-3">    image, sigma<span class="op" style="color: #5E5E5E;">=</span>(<span class="fl" style="color: #AD0000;">6.0</span>, <span class="fl" style="color: #AD0000;">1.0</span>), truncate<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">3.5</span>, multichannel<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span></span>
<span id="cb129-4">)</span>
<span id="cb129-5"></span>
<span id="cb129-6"><span class="co" style="color: #5E5E5E;"># display blurred image</span></span>
<span id="cb129-7">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb129-8">plt.imshow(blurred)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/tmp/ipykernel_2635/1775552283.py:2: FutureWarning: `multichannel` is a deprecated argument name for `gaussian`. It will be removed in version 1.0. Please use `channel_axis` instead.
  blurred = skimage.filters.gaussian(</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>&lt;matplotlib.image.AxesImage at 0x7f9fda8a3ca0&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/cell-72-output-3.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="other-methods-of-blurring" class="level3">
<h3 class="anchored" data-anchor-id="other-methods-of-blurring">Other methods of blurring</h3>
<p>The Gaussian blur is a way to apply a low-pass filter in skimage. It is often used to remove Gaussian (i. e., random) noise from the image. For other kinds of noise, e.g.&nbsp;“salt and pepper” or “static” noise, a median filter is typically used. See the <a href="https://scikit-image.org/docs/dev/api/skimage.filters.html#module-skimage.filters">skimage.filters documentation</a> for a list of available filters.</p>
<div class="callout-important callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Key Points:
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>applying a low-pass blurring filter smooths edges and removes noise from an image</li>
<li>blurring is often used as a first step before we perform thresholding or edge detection</li>
<li>the Gaussian blur can be applied to an image with the skimage.filters.gaussian() function</li>
<li>larger sigma values may remove more noise, but they will also remove detail from an image</li>
</ul>
</div>
</div>
</section>
</section>
<section id="thresholding" class="level2">
<h2 class="anchored" data-anchor-id="thresholding">6. Thresholding</h2>
<p>In this section, we will learn how to use skimage functions to apply thresholding to an image. Thresholding is a type of image segmentation, where we change the pixels of an image to make the image easier to analyze. In thresholding, we convert an image from colour or grayscale into a binary image, i.e., one that is simply black and white. Most frequently, we use thresholding as a way to select areas of interest of an image, while ignoring the parts we are not concerned with. We have already done some simple thresholding, in section 2 <em>Working with skimage</em>. In that case, we used a simple NumPy array manipulation to separate the pixels belonging to the root system of a plant from the black background. In this section, we will learn how to use skimage functions to perform thresholding. Then, we will use the masks returned by these functions to select the parts of an image we are interested in.</p>
<section id="simple-thresholding" class="level3">
<h3 class="anchored" data-anchor-id="simple-thresholding">Simple thresholding</h3>
<p>Consider the image Images/shapes-01.jpg with a series of crudely cut shapes set against a white background.</p>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb132" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb132-1"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb132-2"><span class="im" style="color: #00769E;">import</span> glob</span>
<span id="cb132-3"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb132-4"><span class="im" style="color: #00769E;">import</span> imageio.v3 <span class="im" style="color: #00769E;">as</span> iio</span>
<span id="cb132-5"><span class="im" style="color: #00769E;">import</span> skimage.color</span>
<span id="cb132-6"><span class="im" style="color: #00769E;">import</span> skimage.filters</span>
<span id="cb132-7"></span>
<span id="cb132-8"><span class="op" style="color: #5E5E5E;">%</span>matplotlib inline</span>
<span id="cb132-9"></span>
<span id="cb132-10"><span class="co" style="color: #5E5E5E;"># load the image</span></span>
<span id="cb132-11">image <span class="op" style="color: #5E5E5E;">=</span> iio.imread(uri<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Images/shapes-01.jpg"</span>)</span>
<span id="cb132-12"></span>
<span id="cb132-13">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb132-14">plt.imshow(image)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>&lt;matplotlib.image.AxesImage at 0x7f9fdae61720&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/cell-73-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>Now suppose we want to select only the shapes from the image. In other words, we want to leave the pixels belonging to the shapes “on,” while turning the rest of the pixels “off,” by setting their colour channel values to zeros. The skimage library has several different methods of thresholding. We will start with the simplest version, which involves an important step of human input. Specifically, in this simple, <strong><em>fixed-level thresholding</em></strong>, we have to provide a threshold value t.</p>
<p>The process works like this. First, we will load the original image, convert it to grayscale, and de-noise it as in the <em>Blurring Images</em> section:</p>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb134" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb134-1"><span class="co" style="color: #5E5E5E;"># convert the image to grayscale</span></span>
<span id="cb134-2">gray_image <span class="op" style="color: #5E5E5E;">=</span> skimage.color.rgb2gray(image)</span>
<span id="cb134-3"></span>
<span id="cb134-4"><span class="co" style="color: #5E5E5E;"># blur the image to denoise</span></span>
<span id="cb134-5">blurred_image <span class="op" style="color: #5E5E5E;">=</span> skimage.filters.gaussian(gray_image, sigma<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">1.0</span>)</span>
<span id="cb134-6"></span>
<span id="cb134-7">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb134-8">plt.imshow(blurred_image, cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"gray"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>&lt;matplotlib.image.AxesImage at 0x7f9fd9c5f850&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/cell-74-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>Next, we would like to apply the threshold t such that pixels with grayscale values on one side of t will be turned “on”, while pixels with grayscale values on the other side will be turned “off”. How might we do that? Remember that grayscale images contain pixel values in the range from 0 to 1, so we are looking for a threshold t in the closed range [0.0, 1.0]. We see in the image that the geometric shapes are “darker” than the white background but there is also some light gray noise on the background. One way to determine a “good” value for t is to look at the grayscale histogram of the image and try to identify what grayscale ranges correspond to the shapes in the image or the background.</p>
<p>The histogram for the shapes image shown above can be produced as in the Creating Histograms section.</p>
<div class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb136" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb136-1"><span class="co" style="color: #5E5E5E;"># create a histogram of the blurred grayscale image</span></span>
<span id="cb136-2">histogram, bin_edges <span class="op" style="color: #5E5E5E;">=</span> np.histogram(blurred_image, bins<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">256</span>, <span class="bu" style="color: null;">range</span><span class="op" style="color: #5E5E5E;">=</span>(<span class="fl" style="color: #AD0000;">0.0</span>, <span class="fl" style="color: #AD0000;">1.0</span>))</span>
<span id="cb136-3"></span>
<span id="cb136-4">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb136-5">plt.plot(bin_edges[<span class="dv" style="color: #AD0000;">0</span>:<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>], histogram)</span>
<span id="cb136-6">plt.title(<span class="st" style="color: #20794D;">"Grayscale Histogram"</span>)</span>
<span id="cb136-7">plt.xlabel(<span class="st" style="color: #20794D;">"grayscale value"</span>)</span>
<span id="cb136-8">plt.ylabel(<span class="st" style="color: #20794D;">"pixels"</span>)</span>
<span id="cb136-9">plt.xlim(<span class="dv" style="color: #AD0000;">0</span>, <span class="fl" style="color: #AD0000;">1.0</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>(0.0, 1.0)</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/cell-75-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>Since the image has a white background, most of the pixels in the image are white. This corresponds nicely to what we see in the histogram: there is a peak near the value of 1.0. If we want to select the shapes and not the background, we want to turn off the white background pixels, while leaving the pixels for the shapes turned on. So, we should choose a value of t somewhere before the large peak and turn pixels above that value “off”. Let us choose t=0.8.</p>
<p>To apply the threshold t, we can use the numpy comparison operators to create a mask. Here, we want to turn “on” all pixels which have values smaller than the threshold, so we use the less operator &lt; to compare the blurred_image to the threshold t. The operator returns a mask, that we capture in the variable binary_mask. It has only one channel, and each of its values is either 0 or 1. The binary mask created by the thresholding operation can be shown with plt.imshow, where the False entries are shown as black pixels (0-valued) and the True entries are shown as white pixels (1-valued).</p>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb138" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb138-1"><span class="co" style="color: #5E5E5E;"># create a mask based on the threshold</span></span>
<span id="cb138-2">t <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.8</span></span>
<span id="cb138-3">binary_mask <span class="op" style="color: #5E5E5E;">=</span> blurred_image <span class="op" style="color: #5E5E5E;">&lt;</span> t</span>
<span id="cb138-4"></span>
<span id="cb138-5">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb138-6">plt.imshow(binary_mask, cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"gray"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">
<pre><code>&lt;matplotlib.image.AxesImage at 0x7f9fda7add20&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/cell-76-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>You can see that the areas where the shapes were in the original area are now white, while the rest of the mask image is black.</p>
</section>
<section id="what-makes-a-good-threshold" class="level3">
<h3 class="anchored" data-anchor-id="what-makes-a-good-threshold">What makes a good threshold?</h3>
<p>As is often the case, the answer to this question is “it depends”. In the example above, we could have just switched off all the white background pixels by choosing <em>t=1.0</em>, but this would leave us with some background noise in the mask image. On the other hand, if we choose too low a value for the threshold, we could lose some of the shapes that are too bright. We can experiment with the threshold by re-running the above code lines with different values for t.</p>
<p>In practice, it is a matter of domain knowledge and experience to interpret the peaks in the histogram so to determine an appropriate threshold. The process often involves trial and error, which is a drawback of the simple thresholding method. Below we will introduce <strong><em>automatic thresholding</em></strong>, which uses a quantitative, mathematical definition for a good threshold that allows us to determine the value of t automatically. It is worth noting that the principle for simple and automatic thresholding can also be used for images with pixel ranges other than [0.0, 1.0]. For example, we could perform thresholding on pixel intensity values in the range [0, 255] as we have already seen in the Image Representation in skimage section.</p>
<p>We can now apply the binary_mask to the original coloured image as we learned in the Drawing and Bitwise Operations section. What we are left with is only the coloured shapes from the original.</p>
<div class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb140" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb140-1"><span class="co" style="color: #5E5E5E;"># use the binary_mask to select the "interesting" part of the image</span></span>
<span id="cb140-2">selection <span class="op" style="color: #5E5E5E;">=</span> image.copy()</span>
<span id="cb140-3">selection[<span class="op" style="color: #5E5E5E;">~</span>binary_mask] <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb140-4"></span>
<span id="cb140-5">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb140-6">plt.imshow(selection)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<pre><code>&lt;matplotlib.image.AxesImage at 0x7f9fd99cffa0&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/cell-77-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>Suppose we want to use simple thresholding to select only the coloured shapes (in this particular case we consider grayish to be a colour, too) from the image data/shapes-02.jpg:</p>
<div class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb142" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb142-1"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb142-2"><span class="im" style="color: #00769E;">import</span> glob</span>
<span id="cb142-3"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb142-4"><span class="im" style="color: #00769E;">import</span> imageio.v3 <span class="im" style="color: #00769E;">as</span> iio</span>
<span id="cb142-5"><span class="im" style="color: #00769E;">import</span> skimage.color</span>
<span id="cb142-6"><span class="im" style="color: #00769E;">import</span> skimage.filters</span>
<span id="cb142-7"></span>
<span id="cb142-8"><span class="op" style="color: #5E5E5E;">%</span>matplotlib inline</span>
<span id="cb142-9"></span>
<span id="cb142-10"><span class="co" style="color: #5E5E5E;"># load the image</span></span>
<span id="cb142-11">image <span class="op" style="color: #5E5E5E;">=</span> iio.imread(uri<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Images/shapes-02.jpg"</span>)</span>
<span id="cb142-12"></span>
<span id="cb142-13">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb142-14">plt.imshow(image)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="17">
<pre><code>&lt;matplotlib.image.AxesImage at 0x7f9fd9a56770&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/cell-78-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb144" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb144-1"><span class="co" style="color: #5E5E5E;"># convert the image to grayscale</span></span>
<span id="cb144-2">gray_image <span class="op" style="color: #5E5E5E;">=</span> skimage.color.rgb2gray(image)</span>
<span id="cb144-3"></span>
<span id="cb144-4"><span class="co" style="color: #5E5E5E;"># blur the image to denoise</span></span>
<span id="cb144-5">blurred_image <span class="op" style="color: #5E5E5E;">=</span> skimage.filters.gaussian(gray_image, sigma<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">1.0</span>)</span>
<span id="cb144-6"></span>
<span id="cb144-7">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb144-8">plt.imshow(blurred_image, cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"gray"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">
<pre><code>&lt;matplotlib.image.AxesImage at 0x7f9fd9b598a0&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/cell-79-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb146" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb146-1"><span class="co" style="color: #5E5E5E;"># create a histogram of the blurred grayscale image</span></span>
<span id="cb146-2">histogram, bin_edges <span class="op" style="color: #5E5E5E;">=</span> np.histogram(blurred_image, bins<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">256</span>, <span class="bu" style="color: null;">range</span><span class="op" style="color: #5E5E5E;">=</span>(<span class="fl" style="color: #AD0000;">0.0</span>, <span class="fl" style="color: #AD0000;">1.0</span>))</span>
<span id="cb146-3"></span>
<span id="cb146-4">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb146-5">plt.plot(bin_edges[<span class="dv" style="color: #AD0000;">0</span>:<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>], histogram)</span>
<span id="cb146-6">plt.title(<span class="st" style="color: #20794D;">"Grayscale Histogram"</span>)</span>
<span id="cb146-7">plt.xlabel(<span class="st" style="color: #20794D;">"grayscale value"</span>)</span>
<span id="cb146-8">plt.ylabel(<span class="st" style="color: #20794D;">"pixels"</span>)</span>
<span id="cb146-9">plt.xlim(<span class="dv" style="color: #AD0000;">0</span>, <span class="fl" style="color: #AD0000;">1.0</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="19">
<pre><code>(0.0, 1.0)</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/cell-80-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>We can see a large spike around 0.3, and a smaller spike around 0.7. The spike near 0.3 represents the darker background, so it seems like a value close to t=0.5 would be a good choice.</p>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Note that unlike the image with a white background we used above, here the peak for the background colour is at a lower gray level than the shapes. Therefore, change the comparison operator less &lt; to greater &gt; to create the appropriate mask. Then apply the mask to the image and view the thresholded image. If everything works as it should, our output should show only the coloured shapes on a black background.
</div>
</div>
<div class="callout-body-container callout-body">

</div>
</div>
<div class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb148" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb148-1"><span class="co" style="color: #5E5E5E;"># create a mask based on the threshold</span></span>
<span id="cb148-2">t <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.5</span></span>
<span id="cb148-3">binary_mask <span class="op" style="color: #5E5E5E;">=</span> blurred_image <span class="op" style="color: #5E5E5E;">&gt;</span> t</span>
<span id="cb148-4"></span>
<span id="cb148-5">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb148-6">plt.imshow(binary_mask, cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"gray"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="22">
<pre><code>&lt;matplotlib.image.AxesImage at 0x7f9fd9845300&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/cell-81-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>And here are the commands to apply the mask and view the thresholded image:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb150" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb150-1">image <span class="op" style="color: #5E5E5E;">=</span> iio.imread(uri<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Images/shapes-02.jpg"</span>)</span>
<span id="cb150-2">selection <span class="op" style="color: #5E5E5E;">=</span> image.copy()</span>
<span id="cb150-3">selection[<span class="op" style="color: #5E5E5E;">~</span>binary_mask] <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb150-4"></span>
<span id="cb150-5">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb150-6">plt.imshow(selection)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="23">
<pre><code>&lt;matplotlib.image.AxesImage at 0x7f9fd971ad40&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/cell-82-output-2.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="automatic-thresholding" class="level3">
<h3 class="anchored" data-anchor-id="automatic-thresholding">Automatic thresholding</h3>
<p>The downside of the simple thresholding technique is that we have to make an educated guess about the threshold t by inspecting the histogram. There are also <em>automatic thresholding</em> methods that can determine the threshold automatically for us. One such method is **<a href="https://en.wikipedia.org/wiki/Otsu%27s_method">Otsu’s method</a>. It is particularly useful for situations where the grayscale histogram of an image has two peaks that correspond to background and objects of interest.</p>
</section>
<section id="denoising-an-image-before-thresholding" class="level3">
<h3 class="anchored" data-anchor-id="denoising-an-image-before-thresholding">Denoising an image before thresholding</h3>
<p>In practice, it is often necessary to denoise the image before thresholding, which can be done with one of the methods from the <em>Blurring Images</em> section. Consider the image <em>data/maize-root-cluster.jpg</em> of a maize root system which we saw before in the <em>Image Representation in skimage</em> section:</p>
<div class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb152" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb152-1">image <span class="op" style="color: #5E5E5E;">=</span> iio.imread(uri<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Images/maize_cluster.jpg"</span>)</span>
<span id="cb152-2"></span>
<span id="cb152-3">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb152-4">plt.imshow(image)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="24">
<pre><code>&lt;matplotlib.image.AxesImage at 0x7f9fda4de470&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/cell-83-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>We use Gaussian blur with a sigma of 1.0 to denoise the root image. Let us look at the grayscale histogram of the denoised image:</p>
<div class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb154" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb154-1"><span class="co" style="color: #5E5E5E;"># convert the image to grayscale</span></span>
<span id="cb154-2">gray_image <span class="op" style="color: #5E5E5E;">=</span> skimage.color.rgb2gray(image)</span>
<span id="cb154-3"></span>
<span id="cb154-4"><span class="co" style="color: #5E5E5E;"># blur the image to denoise</span></span>
<span id="cb154-5">blurred_image <span class="op" style="color: #5E5E5E;">=</span> skimage.filters.gaussian(gray_image, sigma<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">1.0</span>)</span>
<span id="cb154-6"></span>
<span id="cb154-7"><span class="co" style="color: #5E5E5E;"># show the histogram of the blurred image</span></span>
<span id="cb154-8">histogram, bin_edges <span class="op" style="color: #5E5E5E;">=</span> np.histogram(blurred_image, bins<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">256</span>, <span class="bu" style="color: null;">range</span><span class="op" style="color: #5E5E5E;">=</span>(<span class="fl" style="color: #AD0000;">0.0</span>, <span class="fl" style="color: #AD0000;">1.0</span>))</span>
<span id="cb154-9">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb154-10">plt.plot(bin_edges[<span class="dv" style="color: #AD0000;">0</span>:<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>], histogram)</span>
<span id="cb154-11">plt.title(<span class="st" style="color: #20794D;">"Graylevel histogram"</span>)</span>
<span id="cb154-12">plt.xlabel(<span class="st" style="color: #20794D;">"gray value"</span>)</span>
<span id="cb154-13">plt.ylabel(<span class="st" style="color: #20794D;">"pixel count"</span>)</span>
<span id="cb154-14">plt.xlim(<span class="dv" style="color: #AD0000;">0</span>, <span class="fl" style="color: #AD0000;">1.0</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="25">
<pre><code>(0.0, 1.0)</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/cell-84-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>The histogram has a significant peak around 0.2, and a second, smaller peak very near 1.0. Thus, this image is a good candidate for thresholding with Otsu’s method. The mathematical details of how this works are complicated (see the <a href="https://scikit-image.org/docs/dev/api/skimage.filters.html#threshold-otsu">skimage documentation</a> if you are interested), but the outcome is that Otsu’s method finds a threshold value <strong>between</strong> the two peaks of a grayscale histogram.</p>
<p>The <strong>skimage.filters.threshold_otsu()</strong> function can be used to determine the threshold automatically via Otsu’s method. Then numpy comparison operators can be used to apply it as before. Here are the Python commands to determine the threshold t with Otsu’s method:</p>
<div class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb156" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb156-1"><span class="co" style="color: #5E5E5E;"># perform automatic thresholding</span></span>
<span id="cb156-2">t <span class="op" style="color: #5E5E5E;">=</span> skimage.filters.threshold_otsu(blurred_image)</span>
<span id="cb156-3"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Found automatic threshold t = </span><span class="sc" style="color: #5E5E5E;">{}</span><span class="st" style="color: #20794D;">."</span>.<span class="bu" style="color: null;">format</span>(t))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Found automatic threshold t = 0.43393258215217667.</code></pre>
</div>
</div>
<p>For this root image and a Gaussian blur with the chosen sigma of 1.0, the computed threshold value is 0.43. No we can create a binary mask with the comparison operator &gt;. As we have seen before, pixels above the threshold value will be turned on, those below the threshold will be turned off.</p>
<div class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb158" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb158-1"><span class="co" style="color: #5E5E5E;"># create a binary mask with the threshold found by Otsu's method</span></span>
<span id="cb158-2">binary_mask <span class="op" style="color: #5E5E5E;">=</span> blurred_image <span class="op" style="color: #5E5E5E;">&gt;</span> t</span>
<span id="cb158-3"></span>
<span id="cb158-4">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb158-5">plt.imshow(binary_mask, cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"gray"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="27">
<pre><code>&lt;matplotlib.image.AxesImage at 0x7f9fd9b58cd0&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/cell-86-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>Finally, we use the mask to select the foreground:</p>
<div class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb160" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb160-1"><span class="co" style="color: #5E5E5E;"># apply the binary mask to select the foreground</span></span>
<span id="cb160-2">selection <span class="op" style="color: #5E5E5E;">=</span> image.copy()</span>
<span id="cb160-3">selection[<span class="op" style="color: #5E5E5E;">~</span>binary_mask] <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb160-4"></span>
<span id="cb160-5">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb160-6">plt.imshow(selection)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="28">
<pre><code>&lt;matplotlib.image.AxesImage at 0x7f9fcfa9b550&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/cell-87-output-2.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="application-measuring-root-mass" class="level3">
<h3 class="anchored" data-anchor-id="application-measuring-root-mass">Application: measuring root mass</h3>
<p>Let us now turn to an application where we can apply thresholding and other techniques we have learned to this point. Consider these four maize root system images, which we can find in the files <em>data/trial-016.jpg</em>, <em>data/trial-020.jpg</em>, <em>data/trial-216.jpg</em>, and <em>data/trial-293.jpg</em>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/33ad2d8f-4377-4945-85b8-d072ba9e812b.jpg" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">four-maize-roots.jpg</figcaption><p></p>
</figure>
</div>
<p>Suppose we are interested in the amount of plant material in each image, and in particular how that amount changes from image to image. Perhaps the images represent the growth of the plant over time, or perhaps the images show four different maize varieties at the same phase of their growth. The question we would like to answer is, “how much root mass is in each image?”</p>
<p>We will first construct a Python program to measure this value for a single image. Our strategy will be this:</p>
<ol type="1">
<li>Read the image, converting it to grayscale as it is read. For this application we do not need the colour image.</li>
<li>Blur the image.</li>
<li>Use Otsu’s method of thresholding to create a binary image, where the pixels that were part of the maize plant are white, and everything else is black.</li>
<li>Save the binary image so it can be examined later.</li>
<li>Count the white pixels in the binary image, and divide by the number of pixels in the image. This ratio will be a measure of the root mass of the plant in the image.</li>
<li>Output the name of the image processed and the root mass ratio.</li>
</ol>
<p>Our intent is to perform these steps and produce the numeric result - a measure of the root mass in the image - without human intervention. Implementing the steps within a Python function will enable us to call this function for different images.</p>
<p>Here is a Python function that implements this root-mass-measuring strategy. Since the function is intended to produce numeric output without human interaction, it does not display any of the images. Almost all of the commands should be familiar, and in fact, it may seem simpler than the code we have worked on thus far, because we are not displaying any of the images.</p>
<div class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb162" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb162-1"><span class="kw" style="color: #003B4F;">def</span> measure_root_mass(filename, sigma<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">1.0</span>):</span>
<span id="cb162-2"></span>
<span id="cb162-3">    <span class="co" style="color: #5E5E5E;"># read the original image, converting to grayscale on the fly</span></span>
<span id="cb162-4">    image <span class="op" style="color: #5E5E5E;">=</span> iio.imread(uri<span class="op" style="color: #5E5E5E;">=</span>filename, mode<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"L"</span>)</span>
<span id="cb162-5"></span>
<span id="cb162-6">    <span class="co" style="color: #5E5E5E;"># blur before thresholding</span></span>
<span id="cb162-7">    blurred_image <span class="op" style="color: #5E5E5E;">=</span> skimage.filters.gaussian(image, sigma<span class="op" style="color: #5E5E5E;">=</span>sigma)</span>
<span id="cb162-8"></span>
<span id="cb162-9">    <span class="co" style="color: #5E5E5E;"># perform automatic thresholding to produce a binary image</span></span>
<span id="cb162-10">    t <span class="op" style="color: #5E5E5E;">=</span> skimage.filters.threshold_otsu(blurred_image)</span>
<span id="cb162-11">    binary_mask <span class="op" style="color: #5E5E5E;">=</span> blurred_image <span class="op" style="color: #5E5E5E;">&gt;</span> t</span>
<span id="cb162-12"></span>
<span id="cb162-13">    <span class="co" style="color: #5E5E5E;"># determine root mass ratio</span></span>
<span id="cb162-14">    rootPixels <span class="op" style="color: #5E5E5E;">=</span> np.count_nonzero(binary_mask)</span>
<span id="cb162-15">    w <span class="op" style="color: #5E5E5E;">=</span> binary_mask.shape[<span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb162-16">    h <span class="op" style="color: #5E5E5E;">=</span> binary_mask.shape[<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb162-17">    density <span class="op" style="color: #5E5E5E;">=</span> rootPixels <span class="op" style="color: #5E5E5E;">/</span> (w <span class="op" style="color: #5E5E5E;">*</span> h)</span>
<span id="cb162-18"></span>
<span id="cb162-19">    <span class="cf" style="color: #003B4F;">return</span> density</span></code></pre></div>
</div>
<p>The function begins with reading the original image from the file filename. We use <strong>iio.imread()</strong> with the optional argument <strong>mode=“L”</strong> to automatically convert it to grayscale. Next, the grayscale image is blurred with a Gaussian filter with the value of sigma that is passed to the function. Then we determine the threshold t with Otsu’s method and create a binary mask just as we did in the previous section. Up to this point, everything should be familiar.</p>
<p>The final part of the function determines the root mass ratio in the image. Recall that in the <strong>binary_mask</strong>, every pixel has either a value of zero (black/background) or one (white/foreground). We want to count the number of white pixels, which can be accomplished with a call to the numpy function <strong><em>np.count_nonzero</em></strong>. Then we determine the width and height of the image by using the elements of <strong><em>binary_mask.shape</em></strong> (that is, the dimensions of the numpy array that stores the image). Finally, the density ratio is calculated by dividing the number of white pixels by the total number of pixels <em>w</em>h* in the image. The function returns then root density of the image.</p>
<p>We can call this function with any filename and provide a sigma value for the blurring. If no sigma value is provided, the default value 1.0 will be used. For example, for the file <em>data/trial-016.jpg</em> and a sigma value of 1.5, we would call the function like this:</p>
<div class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb163" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb163-1">measure_root_mass(filename<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Images/trial-016.jpg"</span>, sigma<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">1.5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="31">
<pre><code>0.04907413563829787</code></pre>
</div>
</div>
<p>Now we can use the function to process the series of four images shown above. In a real-world scientific situation, there might be dozens, hundreds, or even thousands of images to process. To save us the tedium of calling the function for each image by hand, we can write a loop that processes all files automatically. The following code block assumes that the files are located in the same directory and the filenames all start with the <strong>trial-</strong> prefix and end with the <strong>.jpg</strong> suffix.</p>
<div class="cell" data-execution_count="32">
<div class="sourceCode cell-code" id="cb165" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb165-1">all_files <span class="op" style="color: #5E5E5E;">=</span> glob.glob(<span class="st" style="color: #20794D;">"Images/trial-*.jpg"</span>)</span>
<span id="cb165-2"><span class="cf" style="color: #003B4F;">for</span> filename <span class="kw" style="color: #003B4F;">in</span> all_files:</span>
<span id="cb165-3">    density <span class="op" style="color: #5E5E5E;">=</span> measure_root_mass(filename<span class="op" style="color: #5E5E5E;">=</span>filename, sigma<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">1.5</span>)</span>
<span id="cb165-4">    <span class="co" style="color: #5E5E5E;"># output in format suitable for .csv</span></span>
<span id="cb165-5">    <span class="bu" style="color: null;">print</span>(filename, density, sep<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">","</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Images/trial-216.jpg,0.1420516954787234
Images/trial-016.jpg,0.04907413563829787
Images/trial-293.jpg,0.13665458776595746
Images/trial-020.jpg,0.06381349734042553</code></pre>
</div>
</div>
</section>
<section id="ignoring-more-of-the-images" class="level3">
<h3 class="anchored" data-anchor-id="ignoring-more-of-the-images">Ignoring more of the images</h3>
<p>Let us take a closer look at the binary masks produced by the measure_root_mass function:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/24d355e4-2c1d-478f-849f-b7b0e0fbecd6.jpg" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">four-maize-roots-binary.jpg</figcaption><p></p>
</figure>
</div>
<p>You may have noticed in the section on automatic thresholding that the thresholded image does include regions of the image aside of the plant root: the numbered labels and the white circles in each image are preserved during the thresholding, because their grayscale values are above the threshold. Therefore, our calculated root mass ratios include the white pixels of the label and white circle that are not part of the plant root. Those extra pixels affect how accurate the root mass calculation is!</p>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-28-contents" aria-controls="callout-28" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
How might we remove the labels and circles before calculating the ratio, so that our results are more accurate? Think about some options given what we have learned so far.
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-28" class="callout-28-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>One approach we might take is to try to <strong>completely</strong> mask out a region from each image, particularly, the area containing the white circle and the numbered label. If we had coordinates for a rectangular area on the image that contained the circle and the label, we could mask the area out easily by using techniques we learned in the <em>Drawing and Bitwise Operations</em> section.</p>
<p>However, a closer inspection of the binary images raises some issues with that approach. Since the roots are not always constrained to a certain area in the image, and since the circles and labels are in different locations each time, we would have difficulties coming up with a single rectangle that would work for every image. We could create a different masking rectangle for each image, but that is not a practicable approach if we have hundreds or thousands of images to process.</p>
<p>Another approach we could take is to apply two thresholding steps to the image. Look at the graylevel histogram of the file <em>data/trial-016.jpg</em> shown above again. Notice the peak near 1.0? Recall that a grayscale value of 1.0 corresponds to white pixels: the peak corresponds to the white label and circle. So, we could use simple binary thresholding to mask the white circle and label from the image, and then we could use Otsu’s method to select the pixels in the plant portion of the image.</p>
<p>Note that most of this extra work in processing the image could have been avoided during the experimental design stage, with some careful consideration of how the resulting images would be used. For example, all of the following measures could have made the images easier to process, by helping us predict and/or detect where the label is in the image and subsequently mask it from further processing:</p>
<ul>
<li>using labels with a consistent size and shape</li>
<li>placing all the labels in the same position, relative to the sample</li>
<li>using a non-white label, with non-black writing</li>
</ul>
</div>
</div>
</div>
<p>Let’s now Implement an enhanced version of the function <strong>measure_root_mass</strong> that applies simple binary thresholding to remove the white circle and label from the image before applying Otsu’s method. We can apply a simple binary thresholding with a threshold t=0.95 to remove the label and circle from the image. We use the binary mask to set the pixels in the blurred image to zero (black):</p>
<div class="cell" data-execution_count="35">
<div class="sourceCode cell-code" id="cb167" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb167-1"><span class="kw" style="color: #003B4F;">def</span> enhanced_root_mass(filename, sigma):</span>
<span id="cb167-2"></span>
<span id="cb167-3">    <span class="co" style="color: #5E5E5E;"># read the original image, converting to grayscale on the fly</span></span>
<span id="cb167-4">    image <span class="op" style="color: #5E5E5E;">=</span> iio.imread(uri<span class="op" style="color: #5E5E5E;">=</span>filename, mode<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"L"</span>)</span>
<span id="cb167-5"></span>
<span id="cb167-6">    <span class="co" style="color: #5E5E5E;"># blur before thresholding</span></span>
<span id="cb167-7">    blurred_image <span class="op" style="color: #5E5E5E;">=</span> skimage.filters.gaussian(image, sigma<span class="op" style="color: #5E5E5E;">=</span>sigma)</span>
<span id="cb167-8"></span>
<span id="cb167-9">    <span class="co" style="color: #5E5E5E;"># perform binary thresholding to mask the white label and circle</span></span>
<span id="cb167-10">    binary_mask <span class="op" style="color: #5E5E5E;">=</span> blurred_image <span class="op" style="color: #5E5E5E;">&lt;</span> <span class="fl" style="color: #AD0000;">0.95</span></span>
<span id="cb167-11">    <span class="co" style="color: #5E5E5E;"># use the mask to remove the circle and label from the blurred image</span></span>
<span id="cb167-12">    blurred_image[<span class="op" style="color: #5E5E5E;">~</span>binary_mask] <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb167-13"></span>
<span id="cb167-14">    <span class="co" style="color: #5E5E5E;"># perform automatic thresholding to produce a binary image</span></span>
<span id="cb167-15">    t <span class="op" style="color: #5E5E5E;">=</span> skimage.filters.threshold_otsu(blurred_image)</span>
<span id="cb167-16">    binary_mask <span class="op" style="color: #5E5E5E;">=</span> blurred_image <span class="op" style="color: #5E5E5E;">&gt;</span> t</span>
<span id="cb167-17"></span>
<span id="cb167-18">    <span class="co" style="color: #5E5E5E;"># determine root mass ratio</span></span>
<span id="cb167-19">    rootPixels <span class="op" style="color: #5E5E5E;">=</span> np.count_nonzero(binary_mask)</span>
<span id="cb167-20">    w <span class="op" style="color: #5E5E5E;">=</span> binary_mask.shape[<span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb167-21">    h <span class="op" style="color: #5E5E5E;">=</span> binary_mask.shape[<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb167-22">    density <span class="op" style="color: #5E5E5E;">=</span> rootPixels <span class="op" style="color: #5E5E5E;">/</span> (w <span class="op" style="color: #5E5E5E;">*</span> h)</span>
<span id="cb167-23"></span>
<span id="cb167-24">    <span class="cf" style="color: #003B4F;">return</span> density</span>
<span id="cb167-25"></span>
<span id="cb167-26">all_files <span class="op" style="color: #5E5E5E;">=</span> glob.glob(<span class="st" style="color: #20794D;">"Images/trial-*.jpg"</span>)</span>
<span id="cb167-27"><span class="cf" style="color: #003B4F;">for</span> filename <span class="kw" style="color: #003B4F;">in</span> all_files:</span>
<span id="cb167-28">    density <span class="op" style="color: #5E5E5E;">=</span> enhanced_root_mass(filename<span class="op" style="color: #5E5E5E;">=</span>filename, sigma<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">1.5</span>)</span>
<span id="cb167-29">    <span class="co" style="color: #5E5E5E;"># output in format suitable for .csv</span></span>
<span id="cb167-30">    <span class="bu" style="color: null;">print</span>(filename, density, sep<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">","</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Images/trial-216.jpg,0.13761419547872342
Images/trial-016.jpg,0.04632878989361702
Images/trial-293.jpg,0.1323479055851064
Images/trial-020.jpg,0.05924468085106383</code></pre>
</div>
</div>
<p>The output of the improved program does illustrate that the white circles and labels were skewing our root mass ratios. The values generated by the enhanced function are lower.</p>
<p>Here are the binary images produced by the additional thresholding. Note that we have not completely removed the offending white pixels. Outlines still remain. However, we have reduced the number of extraneous pixels, which should make the output more accurate.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/9ab4f8fe-7011-4806-9c7a-d5768f2fbf8d.jpg" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">four-maize-roots-binary-improved.jpg</figcaption><p></p>
</figure>
</div>
</section>
<section id="thresholding-a-bacteria-colony-image" class="level3">
<h3 class="anchored" data-anchor-id="thresholding-a-bacteria-colony-image">Thresholding a bacteria colony image</h3>
<p>In the images directory Images/, you will find an image named colonies-01.tif:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/9febf3ed-8dee-4fbc-bce5-22dc5e8b9e7c.jpg" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">colonies-01.jpg</figcaption><p></p>
</figure>
</div>
<p>This is one of the images we will be working with in the morphometric challenge at the end of this blog. Let’s first plot and inspect the grayscale histogram of the image to determine a good threshold value for the image:</p>
<div class="cell" data-execution_count="36">
<div class="sourceCode cell-code" id="cb169" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb169-1">image <span class="op" style="color: #5E5E5E;">=</span> iio.imread(uri<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Images/colonies-01.tif"</span>)</span>
<span id="cb169-2">gray_image <span class="op" style="color: #5E5E5E;">=</span> skimage.color.rgb2gray(image)</span>
<span id="cb169-3">blurred_image <span class="op" style="color: #5E5E5E;">=</span> skimage.filters.gaussian(gray_image, sigma<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">1.0</span>)</span>
<span id="cb169-4">histogram, bin_edges <span class="op" style="color: #5E5E5E;">=</span> np.histogram(blurred_image, bins<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">256</span>, <span class="bu" style="color: null;">range</span><span class="op" style="color: #5E5E5E;">=</span>(<span class="fl" style="color: #AD0000;">0.0</span>, <span class="fl" style="color: #AD0000;">1.0</span>))</span>
<span id="cb169-5">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb169-6">plt.plot(bin_edges[<span class="dv" style="color: #AD0000;">0</span>:<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>], histogram)</span>
<span id="cb169-7">plt.title(<span class="st" style="color: #20794D;">"Graylevel histogram"</span>)</span>
<span id="cb169-8">plt.xlabel(<span class="st" style="color: #20794D;">"gray value"</span>)</span>
<span id="cb169-9">plt.ylabel(<span class="st" style="color: #20794D;">"pixel count"</span>)</span>
<span id="cb169-10">plt.xlim(<span class="dv" style="color: #AD0000;">0</span>, <span class="fl" style="color: #AD0000;">1.0</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="36">
<pre><code>(0.0, 1.0)</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/cell-92-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>The peak near one corresponds to the white image background, and the broader peak around 0.5 corresponds to the yellow/brown culture medium in the dish. The small peak near zero is what we are after: the dark bacteria colonies. A reasonable choice thus might be to leave pixels below t=0.2 on.</p>
<p>Now let’s create the binary mask that leaves the pixels in the bacteria colonies “on” while turning the rest of the pixels in the image “off”. Here is the code to create and show the binarized image using the &lt; operator with a threshold t=0.2:</p>
<div class="cell" data-execution_count="37">
<div class="sourceCode cell-code" id="cb171" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb171-1">t <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.2</span></span>
<span id="cb171-2">binary_mask <span class="op" style="color: #5E5E5E;">=</span> blurred_image <span class="op" style="color: #5E5E5E;">&lt;</span> t</span>
<span id="cb171-3"></span>
<span id="cb171-4">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb171-5">plt.imshow(binary_mask, cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"gray"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="37">
<pre><code>&lt;matplotlib.image.AxesImage at 0x7f9fd2f0dae0&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/cell-93-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="callout-important callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Key Points:
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>thresholding produces a binary image, where all pixels with intensities above (or below) a threshold value are turned on, while all other pixels are turned off</li>
<li>the binary images produced by thresholding are held in two-dimensional NumPy arrays, since they have only one colour value channel. They are boolean, hence they contain the values 0 (off) and 1 (on)</li>
<li>thresholding can be used to create masks that select only the interesting parts of an image, or as the first step before edge detection or finding contours</li>
</ul>
</div>
</div>
</section>
</section>
<section id="connected-component-analysis" class="level2">
<h2 class="anchored" data-anchor-id="connected-component-analysis">7. Connected Component Analysis</h2>
<p>In the <em>Thresholding</em> section we covered dividing an image into foreground and background pixels. In the shapes example image, we considered the coloured shapes as foreground objects on a white background:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/d92647d5-374d-46d8-ba93-a5568f4f1b38.jpg" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">shapes-01.jpg</figcaption><p></p>
</figure>
</div>
<p>In thresholding we went from the original image to this version:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/75d1743d-5bbc-4d9e-9ecc-80d63eef406e.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">shapes-01-mask.png</figcaption><p></p>
</figure>
</div>
<p>Here, we created a mask that only highlights the parts of the image that we find interesting, the objects. All objects have pixel value of True while the background pixels are False.</p>
<p>By looking at the mask image, we can count the objects that are present in the image (7). But how did we actually do that, how did we decide which lump of pixels constitutes a single object?</p>
<section id="pixel-neighborhoods" class="level3">
<h3 class="anchored" data-anchor-id="pixel-neighborhoods">Pixel Neighborhoods</h3>
<p>In order to decide which pixels belong to the same object, one can exploit their neighborhood: pixels that are directly next to each other and belong to the foreground class can be considered to belong to the same object.</p>
<p>Let’s discuss the concept of pixel neighborhoods in more detail. Consider the following mask “image” with 8 rows, and 8 columns. For the purpose of illustration, the digit 0 is used to represent background pixels, and the letter X is used to represent object pixels foreground).</p>
<pre><code>0 0 0 0 0 0 0 0
0 X X 0 0 0 0 0
0 X X 0 0 0 0 0
0 0 0 X X X 0 0
0 0 0 X X X X 0
0 0 0 0 0 0 0 0</code></pre>
<p>The pixels are organised in a rectangular grid. In order to understand pixel neighborhoods we will introduce the concept of “jumps” between pixels. The jumps follow two rules:</p>
<ol type="1">
<li>Only one jump is allowed along the column, or the row. Diagonal jumps are not allowed. So, from a centre pixel, denoted with o, only the pixels indicated with a 1 are reachable</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/75bd5dcb-784f-452c-9aed-c86696a80230.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">one_jump.JPG</figcaption><p></p>
</figure>
</div>
<p>The pixels on the diagonal (from o) are not reachable with a single jump, which is denoted by the -. The pixels reachable with a single jump form the <strong>1-jump</strong> neighborhood.</p>
<ol start="2" type="1">
<li>In a sequence of jumps, one may only jump in row and column direction once -&gt; they have to be orthogonal. An example of a sequence of orthogonal jumps is shown below. Starting from o the first jump goes along the row to the right. The second jump then goes along the column direction up. After this, the sequence cannot be continued as a jump has already been made in both row and column direction:</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/c54127bf-655e-4ffd-9f9d-32ca72060c80.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">two_jump.JPG</figcaption><p></p>
</figure>
</div>
<p>All pixels reachable with one, or two jumps form the <strong>2-jump</strong> neighborhood. The grid below illustrates the pixels reachable from the centre pixel o with a single jump, highlighted with a 1, and the pixels reachable with 2 jumps with a 2.</p>
<pre><code>2 1 2
1 o 1
2 1 2</code></pre>
<p>In the 1-jump version, only pixels that have direct neighbors along rows or columns are considered connected. Diagonal connections are not included in the 1-jump neighborhood. With two jumps, however, we only get a single object A because pixels are also considered connected along the diagonals.</p>
<pre><code>0 0 0 0 0 0 0 0
0 A A 0 0 0 0 0
0 A A 0 0 0 0 0
0 0 0 A A A 0 0
0 0 0 A A A A 0
0 0 0 0 0 0 0 0</code></pre>
</section>
<section id="object-counting" class="level3">
<h3 class="anchored" data-anchor-id="object-counting">Object counting</h3>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-30-contents" aria-controls="callout-30" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Consider the mask below. How many objects with 1 orthogonal jump?
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-30" class="callout-30-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Five.</p>
</div>
</div>
</div>
<pre><code>0 0 0 0 0 0 0 0
0 X 0 0 0 X X 0
0 0 X 0 0 0 0 0
0 X 0 X X X 0 0
0 X 0 X X 0 0 0
0 0 0 0 0 0 0 0</code></pre>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-31-contents" aria-controls="callout-31" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Consider the mask above. How many objects with 2 orthogonal jump?
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-31" class="callout-31-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Two.</p>
</div>
</div>
</div>
</section>
<section id="jumps-and-neighborhoods" class="level3">
<h3 class="anchored" data-anchor-id="jumps-and-neighborhoods">Jumps and neighborhoods</h3>
<p>We have just introduced how you can reach different neighboring pixels by performing one or more orthogonal jumps. We have used the terms <strong><em>1-jump</em></strong> and <strong><em>2-jump</em></strong> neighborhood. There is also a different way of referring to these neighborhoods: <strong>the 4- and 8-neighborhood</strong>.</p>
<p>With a single jump you can reach <strong>four</strong> pixels from a given starting pixel. Hence, the <em>1-jump</em> neighborhood corresponds to the <em>4-neighborhood</em>. When two orthogonal jumps are allowed, eight pixels can be reached, so the <em>2-jump neighborhood</em> corresponds to the <em>8-neighborhood</em>.</p>
</section>
<section id="connected-component-analysis-1" class="level3">
<h3 class="anchored" data-anchor-id="connected-component-analysis-1">Connected Component Analysis</h3>
<p>In order to find the objects in an image, we want to employ an operation that is called <strong>Connected Component Analysis (CCA)</strong>. This operation takes a binary image as an input. Usually, the False value in this image is associated with background pixels, and the True value indicates foreground, or object pixels. Such an image can be produced, e.g., with thresholding. Given a thresholded image, the connected component analysis produces a new labeled image with integer pixel values. Pixels with the same value, belong to the same object. Skimage provides connected component analysis in the function skimage.measure.label(). Let us add this function to the already familiar steps of thresholding an image. Here we define a reusable Python function connected_components:</p>
<div class="cell" data-execution_count="38">
<div class="sourceCode cell-code" id="cb177" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb177-1"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb177-2"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb177-3"><span class="im" style="color: #00769E;">import</span> imageio.v3 <span class="im" style="color: #00769E;">as</span> iio</span>
<span id="cb177-4"><span class="im" style="color: #00769E;">import</span> skimage.color</span>
<span id="cb177-5"><span class="im" style="color: #00769E;">import</span> skimage.filters</span>
<span id="cb177-6"><span class="im" style="color: #00769E;">import</span> skimage.measure</span>
<span id="cb177-7"></span>
<span id="cb177-8"><span class="kw" style="color: #003B4F;">def</span> connected_components(filename, sigma<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">1.0</span>, t<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.5</span>, connectivity<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>):</span>
<span id="cb177-9">    <span class="co" style="color: #5E5E5E;"># load the image</span></span>
<span id="cb177-10">    image <span class="op" style="color: #5E5E5E;">=</span> iio.imread(filename)</span>
<span id="cb177-11">    <span class="co" style="color: #5E5E5E;"># convert the image to grayscale</span></span>
<span id="cb177-12">    gray_image <span class="op" style="color: #5E5E5E;">=</span> skimage.color.rgb2gray(image)</span>
<span id="cb177-13">    <span class="co" style="color: #5E5E5E;"># denoise the image with a Gaussian filter</span></span>
<span id="cb177-14">    blurred_image <span class="op" style="color: #5E5E5E;">=</span> skimage.filters.gaussian(gray_image, sigma<span class="op" style="color: #5E5E5E;">=</span>sigma)</span>
<span id="cb177-15">    <span class="co" style="color: #5E5E5E;"># mask the image according to threshold</span></span>
<span id="cb177-16">    binary_mask <span class="op" style="color: #5E5E5E;">=</span> blurred_image <span class="op" style="color: #5E5E5E;">&lt;</span> t</span>
<span id="cb177-17">    <span class="co" style="color: #5E5E5E;"># perform connected component analysis</span></span>
<span id="cb177-18">    labeled_image, count <span class="op" style="color: #5E5E5E;">=</span> skimage.measure.label(binary_mask,</span>
<span id="cb177-19">                                                 connectivity<span class="op" style="color: #5E5E5E;">=</span>connectivity, return_num<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb177-20">    <span class="cf" style="color: #003B4F;">return</span> labeled_image, count</span></code></pre></div>
</div>
<p>Note the new import of skimage.measure in order to use the skimage.measure.label function that performs the CCA. The first four lines of code are familiar from the <em>Thresholding</em> section.</p>
<p>Then we call the <strong>skimage.measure.label function</strong>. This function has one positional argument where we pass the <em>binary_mask</em>, i.e., the binary image to work on. With the optional argument connectivity, we specify the neighborhood in units of orthogonal jumps. For example, by setting <em>connectivity=2</em> we will consider the 2-jump neighborhood introduced above. The function returns a <em>labeled_image</em> where each pixel has a unique value corresponding to the object it belongs to. In addition, we pass the optional parameter <em>return_num=True</em> to return the maximum label index as count.</p>
</section>
<section id="optional-parameters-and-return-values" class="level3">
<h3 class="anchored" data-anchor-id="optional-parameters-and-return-values">Optional parameters and return values</h3>
<p>The optional parameter return_num changes the data type that is returned by the function skimage.measure.label. The number of labels is only returned if return_num is True. Otherwise, the function only returns the labeled image. This means that we have to pay attention when assigning the return value to a variable. If we omit the optional parameter return_num or pass return_num=False, we can call the function as:</p>
<div class="cell" data-execution_count="39">
<div class="sourceCode cell-code" id="cb178" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb178-1">labeled_image <span class="op" style="color: #5E5E5E;">=</span> skimage.measure.label(binary_mask)</span></code></pre></div>
</div>
<p>If we pass return_num=True, the function returns a tuple and we can assign it as:</p>
<div class="cell" data-execution_count="40">
<div class="sourceCode cell-code" id="cb179" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb179-1">labeled_image, count <span class="op" style="color: #5E5E5E;">=</span> skimage.measure.label(binary_mask, return_num<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
</div>
<p>If we used the same assignment as in the first case, the variable labeled_image would become a tuple, in which labeled_image[0] is the image and labeled_image[1] is the number of labels. This could cause confusion if we assume that labeled_image only contains the image and pass it to other functions. If you get an AttributeError: ‘tuple’ object has no attribute ‘shape’ or similar, check if you have assigned the return values consistently with the optional parameters.</p>
<p>We can call the above function connected_components and display the labeled image like so:</p>
<div class="cell" data-execution_count="41">
<div class="sourceCode cell-code" id="cb180" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb180-1">labeled_image, count <span class="op" style="color: #5E5E5E;">=</span> connected_components(filename<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Images/shapes-01.jpg"</span>, sigma<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">2.0</span>, t<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.9</span>, connectivity<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb180-2"></span>
<span id="cb180-3">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb180-4">plt.imshow(labeled_image)</span>
<span id="cb180-5">plt.axis(<span class="st" style="color: #20794D;">"off"</span>)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/cell-97-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="callout-warning callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Color mappings
</div>
</div>
<div class="callout-body-container callout-body">
<p>Here you might get a warning UserWarning: Low image data range; displaying image with stretched contrast. or just see an all black image (Note: this behavior might change in future versions or not occur with a different image viewer).</p>
<p>What went wrong? When we hover over the black image, the pixel values are shown as numbers in the lower corner of the viewer. We an see that some pixels have values different from 0, so they are not actually pure black.</p>
</div>
</div>
<p>Let’s find out more by examining labeled_image. Properties that might be interesting in this context are dtype, the minimum and maximum value. We can print them with the following lines:</p>
<div class="cell" data-execution_count="43">
<div class="sourceCode cell-code" id="cb181" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb181-1"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"dtype:"</span>, labeled_image.dtype)</span>
<span id="cb181-2"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"min:"</span>, np.<span class="bu" style="color: null;">min</span>(labeled_image))</span>
<span id="cb181-3"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"max:"</span>, np.<span class="bu" style="color: null;">max</span>(labeled_image))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>dtype: int32
min: 0
max: 11</code></pre>
</div>
</div>
<div class="callout-warning callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
int64
</div>
</div>
<div class="callout-body-container callout-body">
<p>If the dtype of labeled_image is int64, this means that values in this image range from -2 ** 63 to 2 ** 63 - 1. Those are really big numbers. From this available space we only use the range from 0 to 11. When showing this image in the viewer, it squeezes the complete range into 256 gray values. Therefore, the range of our numbers will not produce any visible change.</p>
</div>
</div>
<p>Fortunately, the skimage library has tools to cope with this situation.</p>
<p>We can use the function <strong>skimage.color.label2rgb()</strong> to convert the colours in the image (recall that we already used the <em>skimage.color.rgb2gray()</em> function to convert to grayscale). With skimage.color.label2rgb(), all objects are coloured according to a list of colours that can be customised. We can use the following commands to convert and show the image:</p>
<div class="cell" data-execution_count="44">
<div class="sourceCode cell-code" id="cb183" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb183-1"><span class="co" style="color: #5E5E5E;"># convert the label image to color image</span></span>
<span id="cb183-2">colored_label_image <span class="op" style="color: #5E5E5E;">=</span> skimage.color.label2rgb(labeled_image, bg_label<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb183-3"></span>
<span id="cb183-4">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb183-5">plt.imshow(colored_label_image)</span>
<span id="cb183-6">plt.axis(<span class="st" style="color: #20794D;">"off"</span>)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/cell-99-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="how-many-objects-are-in-that-image" class="level3">
<h3 class="anchored" data-anchor-id="how-many-objects-are-in-that-image">How many objects are in that image?</h3>
<p>It looks fairly obvious right? Seven. But, let’s practice. Using the function <strong>connected_components</strong>, we can find two ways of printing out the number of objects found in the image. As you might have guessed, the return value count already contains the number of found images. So it can simply be printed with:</p>
<div class="cell" data-execution_count="45">
<div class="sourceCode cell-code" id="cb184" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb184-1"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Found"</span>, count, <span class="st" style="color: #20794D;">"objects in the image."</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Found 11 objects in the image.</code></pre>
</div>
</div>
<p>But there is also a way to obtain the number of found objects from the labeled image itself. Recall that all pixels that belong to a single object are assigned the same integer value. The connected component algorithm produces consecutive numbers. The background gets the value 0, the first object gets the value 1, the second object the value 2, and so on. This means that by finding the object with the maximum value, we also know how many objects there are in the image. We can thus use the np.max function from Numpy to find the maximum value that equals the number of found objects:</p>
<div class="cell" data-execution_count="46">
<div class="sourceCode cell-code" id="cb186" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb186-1">num_objects <span class="op" style="color: #5E5E5E;">=</span> np.<span class="bu" style="color: null;">max</span>(labeled_image)</span>
<span id="cb186-2"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Found"</span>, num_objects, <span class="st" style="color: #20794D;">"objects in the image."</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Found 11 objects in the image.</code></pre>
</div>
</div>
<p>Invoking the function with sigma=2.0, and threshold=0.9, both methods will print <em>Found 11 objects in the image</em>.</p>
<p>You might wonder why the connected component analysis with sigma=2.0, and threshold=0.9 finds 11 objects, whereas we would expect only 7 objects. Where are the four additional objects? With a bit of detective work, we can spot some small objects in the image, for example, near the left border:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/26696ac3-ad51-4411-845d-e7efdeb7fbb4.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">shapes-01-cca-detail.png</figcaption><p></p>
</figure>
</div>
<p>For us it is clear that these small spots are artifacts and not objects we are interested in. But how can we tell the computer? One way to calibrate the algorithm is to adjust the parameters for blurring (sigma) and thresholding (t), but you may have noticed during the above exercise that it is quite hard to find a combination that produces the right output number. In some cases, background noise gets picked up as an object. And with other parameters, some of the foreground objects get broken up or disappear completely. Therefore, we need other criteria to describe desired properties of the objects that are found.</p>
</section>
<section id="morphometrics---describe-object-features-with-numbers" class="level3">
<h3 class="anchored" data-anchor-id="morphometrics---describe-object-features-with-numbers">Morphometrics - Describe object features with numbers</h3>
<p>Morphometrics is concerned with the quantitative analysis of objects and considers properties such as size and shape. For the example of the images with the shapes, our intuition tells us that the objects should be of a certain size or area. So we could use a minimum area as a criterion for when an object should be detected. To apply such a criterion, we need a way to calculate the area of objects found by connected components. Recall how we determined the root mass in the <em>Thresholding</em> section by counting the pixels in the binary mask. But here we want to calculate the area of several objects in the labeled image. The skimage library provides the function <strong>skimage.measure.regionprops</strong> to measure the properties of labeled regions. It returns a list of RegionProperties that describe each connected region in the images. The properties can be accessed using the attributes of the <strong>RegionProperties</strong> data type. Here we will use the properties “area” and “label”. You can explore the skimage documentation to learn about other properties available.</p>
<p>We can get a list of areas of the labeled objects as follows:</p>
<div class="cell" data-execution_count="47">
<div class="sourceCode cell-code" id="cb188" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb188-1"><span class="co" style="color: #5E5E5E;"># compute object features and extract object areas</span></span>
<span id="cb188-2">object_features <span class="op" style="color: #5E5E5E;">=</span> skimage.measure.regionprops(labeled_image)</span>
<span id="cb188-3">object_areas <span class="op" style="color: #5E5E5E;">=</span> [objf[<span class="st" style="color: #20794D;">"area"</span>] <span class="cf" style="color: #003B4F;">for</span> objf <span class="kw" style="color: #003B4F;">in</span> object_features]</span>
<span id="cb188-4">object_areas</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="47">
<pre><code>[318542, 1, 523204, 496613, 517331, 143, 256215, 1, 68, 338784, 265755]</code></pre>
</div>
</div>
</section>
<section id="plot-a-histogram-of-the-object-area-distribution" class="level3">
<h3 class="anchored" data-anchor-id="plot-a-histogram-of-the-object-area-distribution">Plot a histogram of the object area distribution</h3>
<p>it is often helpful to inspect the histogram of an object property. For example, we want to look at the distribution of the object areas.</p>
<ol type="1">
<li>Create and examine a histogram of the object areas obtained with skimage.measure.regionprops</li>
<li>What does the histogram tell us about the objects?</li>
</ol>
<div class="cell" data-execution_count="48">
<div class="sourceCode cell-code" id="cb190" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb190-1"><span class="co" style="color: #5E5E5E;"># plot the histogram</span></span>
<span id="cb190-2">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb190-3">plt.hist(object_areas)</span>
<span id="cb190-4">plt.xlabel(<span class="st" style="color: #20794D;">"Area (pixels)"</span>)</span>
<span id="cb190-5">plt.ylabel(<span class="st" style="color: #20794D;">"Number of objects"</span>)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/cell-103-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>The histogram shows the number of objects (vertical axis) whose area is within a certain range (horizontal axis). The height of the bars in the histogram indicates the prevalence of objects with a certain area. The whole histogram tells us about the distribution of object sizes in the image. It is often possible to identify gaps between groups of bars (or peaks if we draw the histogram as a continuous curve) that tell us about certain groups in the image.</p>
<p>In this example, we can see that there are four small objects that contain less than 50000 pixels. Then there is a group of four (1+1+2) objects in the range between 200000 and 400000, and three objects with a size around 500000. For our object count, we might want to disregard the small objects as artifacts, i.e, we want to ignore the leftmost bar of the histogram. We could use a threshold of 50000 as the minimum area to count. In fact, the <strong><em>object_areas</em></strong> list already tells us that there are fewer than 200 pixels in these objects. Therefore, it is reasonable to require a minimum area of at least 200 pixels for a detected object. In practice, finding the “right” threshold can be tricky and usually involves an educated guess based on domain knowledge.</p>
</section>
<section id="filter-objects-by-area" class="level3">
<h3 class="anchored" data-anchor-id="filter-objects-by-area">Filter objects by area</h3>
<p>Now we would like to use a minimum area criterion to obtain a more accurate count of the objects in the image.</p>
<ol type="1">
<li>One way to count only objects above a certain area is to first create a list of those objects, and then take the length of that list as the object count. This can be done as follows:</li>
</ol>
<div class="cell" data-execution_count="49">
<div class="sourceCode cell-code" id="cb191" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb191-1">min_area <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">200</span></span>
<span id="cb191-2">large_objects <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb191-3"><span class="cf" style="color: #003B4F;">for</span> objf <span class="kw" style="color: #003B4F;">in</span> object_features:</span>
<span id="cb191-4">    <span class="cf" style="color: #003B4F;">if</span> objf[<span class="st" style="color: #20794D;">"area"</span>] <span class="op" style="color: #5E5E5E;">&gt;</span> min_area:</span>
<span id="cb191-5">        large_objects.append(objf[<span class="st" style="color: #20794D;">"label"</span>])</span>
<span id="cb191-6"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Found"</span>, <span class="bu" style="color: null;">len</span>(large_objects), <span class="st" style="color: #20794D;">"objects!"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Found 7 objects!</code></pre>
</div>
</div>
<ol start="2" type="1">
<li>Another option is to use Numpy arrays to create the list of large objects. We first create an array object_areas containing the object areas, and an array object_labels containing the object labels. The labels of the objects are also returned by skimage.measure.regionprops. We have already seen that we can create boolean arrays using comparison operators. Here we can use object_areas &gt; min_area to produce an array that has the same dimension as object_labels. It can then used to select the labels of objects whose area is greater than min_area by indexing:</li>
</ol>
<div class="cell" data-execution_count="50">
<div class="sourceCode cell-code" id="cb193" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb193-1">object_areas <span class="op" style="color: #5E5E5E;">=</span> np.array([objf[<span class="st" style="color: #20794D;">"area"</span>] <span class="cf" style="color: #003B4F;">for</span> objf <span class="kw" style="color: #003B4F;">in</span> object_features])</span>
<span id="cb193-2">object_labels <span class="op" style="color: #5E5E5E;">=</span> np.array([objf[<span class="st" style="color: #20794D;">"label"</span>] <span class="cf" style="color: #003B4F;">for</span> objf <span class="kw" style="color: #003B4F;">in</span> object_features])</span>
<span id="cb193-3">large_objects <span class="op" style="color: #5E5E5E;">=</span> object_labels[object_areas <span class="op" style="color: #5E5E5E;">&gt;</span> min_area]</span>
<span id="cb193-4"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Found"</span>, <span class="bu" style="color: null;">len</span>(large_objects), <span class="st" style="color: #20794D;">"objects!"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Found 7 objects!</code></pre>
</div>
</div>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
NumPy vs for loops and if statements
</div>
</div>
<div class="callout-body-container callout-body">
<p>The advantage of using Numpy arrays is that for loops and if statements in Python can be slow, and in practice the first approach may not be feasible if the image contains a large number of objects. In that case, Numpy array functions turn out to be very useful because they are much faster.</p>
</div>
</div>
<ol start="3" type="1">
<li>In this example, we can also use the <strong>np.count_nonzero</strong> function that we saw earlier together with the &gt; operator to count the objects whose area is above min_area:</li>
</ol>
<div class="cell" data-execution_count="51">
<div class="sourceCode cell-code" id="cb195" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb195-1">n <span class="op" style="color: #5E5E5E;">=</span> np.count_nonzero(object_areas <span class="op" style="color: #5E5E5E;">&gt;</span> min_area)</span>
<span id="cb195-2"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Found"</span>, n, <span class="st" style="color: #20794D;">"objects!"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Found 7 objects!</code></pre>
</div>
</div>
<p>For all three alternatives, the output is the same and gives the expected count of 7 objects.</p>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Using functions from Numpy and other Python packages
</div>
</div>
<div class="callout-body-container callout-body">
<p>Functions from Python packages such as Numpy are often more efficient and require less code to write. It is a good idea to browse the reference pages of <a href="https://numpy.org/doc/stable/reference/">NumPy</a> and <a href="https://scikit-image.org/docs/stable/api/api.html">skimage</a> to look for an availabe function that can solve a given task.</p>
</div>
</div>
</section>
<section id="remove-small-objects" class="level3">
<h3 class="anchored" data-anchor-id="remove-small-objects">Remove small objects</h3>
<p>We might also want to exclude (mask) the small objects when plotting the labeled image. Enhance the <strong>connected_components</strong> function such that it automatically removes objects that are below a certain area that is passed to the function as an optional parameter.</p>
<ol type="1">
<li>To remove the small objects from the labeled image, we change the value of all pixels that belong to the small objects to the background label 0. One way to do this is to loop over all objects and set the pixels that match the label of the object to :</li>
</ol>
<div class="cell" data-execution_count="52">
<div class="sourceCode cell-code" id="cb197" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb197-1"><span class="cf" style="color: #003B4F;">for</span> object_id, objf <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(object_features, start<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>):</span>
<span id="cb197-2">    <span class="cf" style="color: #003B4F;">if</span> objf[<span class="st" style="color: #20794D;">"area"</span>] <span class="op" style="color: #5E5E5E;">&lt;</span> min_area:</span>
<span id="cb197-3">        labeled_image[labeled_image <span class="op" style="color: #5E5E5E;">==</span> objf[<span class="st" style="color: #20794D;">"label"</span>]] <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span></code></pre></div>
</div>
<ol start="2" type="1">
<li>Here NumPy functions can also be used to eliminate for loops and if statements. Like above, we can create an array of the small object labels with the comparison object_areas &lt; min_area. We can use another Numpy function, np.isin, to set the pixels of all small objects to 0. np.isin takes two arrays and returns a boolean array with values True if the entry of the first array is found in the second array, and False otherwise. This array can then be used to index the labeled_image and set the entries that belong to small objects to 0 :</li>
</ol>
<div class="cell" data-execution_count="53">
<div class="sourceCode cell-code" id="cb198" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb198-1">object_areas <span class="op" style="color: #5E5E5E;">=</span> np.array([objf[<span class="st" style="color: #20794D;">"area"</span>] <span class="cf" style="color: #003B4F;">for</span> objf <span class="kw" style="color: #003B4F;">in</span> object_features])</span>
<span id="cb198-2">object_labels <span class="op" style="color: #5E5E5E;">=</span> np.array([objf[<span class="st" style="color: #20794D;">"label"</span>] <span class="cf" style="color: #003B4F;">for</span> objf <span class="kw" style="color: #003B4F;">in</span> object_features])</span>
<span id="cb198-3">small_objects <span class="op" style="color: #5E5E5E;">=</span> object_labels[object_areas <span class="op" style="color: #5E5E5E;">&lt;</span> min_area]</span>
<span id="cb198-4">labeled_image[np.isin(labeled_image,small_objects)] <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span></code></pre></div>
</div>
<ol start="3" type="1">
<li>An even more elegant way to remove small objects from the image is to leverage the <strong><a href="https://scikit-image.org/docs/stable/api/skimage.morphology.html">skimage.morphology</a></strong> module. It provides a function <strong>skimage.morphology.remove_small_objects</strong> that does exactly what we are looking for. It can be applied to a binary image and returns a mask in which all objects smaller than <em>min_area</em> are excluded, i.e, their pixel values are set to False. We can then apply <strong>skimage.measure.label</strong> to the masked image:</li>
</ol>
<div class="cell" data-execution_count="58">
<div class="sourceCode cell-code" id="cb199" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb199-1">object_mask <span class="op" style="color: #5E5E5E;">=</span> skimage.morphology.remove_small_objects(binary_mask,min_area)</span>
<span id="cb199-2">labeled_image, n <span class="op" style="color: #5E5E5E;">=</span> skimage.measure.label(object_mask,</span>
<span id="cb199-3">                                         connectivity<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>, return_num<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
</div>
<p>Using the skimage features, we can implement the enhanced_connected_component as follows:</p>
<div class="cell" data-execution_count="55">
<div class="sourceCode cell-code" id="cb200" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb200-1"><span class="kw" style="color: #003B4F;">def</span> enhanced_connected_components(filename, sigma<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">1.0</span>, t<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.5</span>, connectivity<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>, min_area<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>):</span>
<span id="cb200-2">    image <span class="op" style="color: #5E5E5E;">=</span> iio.imread(filename)</span>
<span id="cb200-3">    gray_image <span class="op" style="color: #5E5E5E;">=</span> skimage.color.rgb2gray(image)</span>
<span id="cb200-4">    blurred_image <span class="op" style="color: #5E5E5E;">=</span> skimage.filters.gaussian(gray_image, sigma<span class="op" style="color: #5E5E5E;">=</span>sigma)</span>
<span id="cb200-5">    binary_mask <span class="op" style="color: #5E5E5E;">=</span> blurred_image <span class="op" style="color: #5E5E5E;">&lt;</span> t</span>
<span id="cb200-6">    object_mask <span class="op" style="color: #5E5E5E;">=</span> skimage.morphology.remove_small_objects(binary_mask,min_area)</span>
<span id="cb200-7">    labeled_image, count <span class="op" style="color: #5E5E5E;">=</span> skimage.measure.label(object_mask,</span>
<span id="cb200-8">                                                 connectivity<span class="op" style="color: #5E5E5E;">=</span>connectivity, return_num<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb200-9">    <span class="cf" style="color: #003B4F;">return</span> labeled_image, count</span></code></pre></div>
</div>
<p>We can now call the function with a chosen min_area and display the resulting labeled image:</p>
<div class="cell" data-execution_count="57">
<div class="sourceCode cell-code" id="cb201" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb201-1">labeled_image, count <span class="op" style="color: #5E5E5E;">=</span> enhanced_connected_components(filename<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Images/shapes-01.jpg"</span>, sigma<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">2.0</span>, t<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.9</span>,</span>
<span id="cb201-2">                                                     connectivity<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>, min_area<span class="op" style="color: #5E5E5E;">=</span>min_area)</span>
<span id="cb201-3">colored_label_image <span class="op" style="color: #5E5E5E;">=</span> skimage.color.label2rgb(labeled_image, bg_label<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb201-4"></span>
<span id="cb201-5">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb201-6">plt.imshow(colored_label_image)</span>
<span id="cb201-7">plt.axis(<span class="st" style="color: #20794D;">"off"</span>)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb201-8"></span>
<span id="cb201-9"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Found"</span>, count, <span class="st" style="color: #20794D;">"objects in the image."</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Found 7 objects in the image.</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/cell-111-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>Note that the small objects are “gone” and we obtain the correct number of 7 objects in the image.</p>
</section>
<section id="colour-objects-by-area" class="level3">
<h3 class="anchored" data-anchor-id="colour-objects-by-area">Colour objects by area</h3>
<p>Finally, we would like to display the image with the objects coloured according to the magnitude of their area. In practice, this can be used with other properties to give visual cues of the object properties.</p>
<p>We already know how to get the areas of the objects from the regionprops. We just need to insert a zero area value for the background (to colour it like a zero size object). The background is also labeled 0 in the labeled_image, so we insert the zero area value in front of the first element of object_areas with np.insert. Then we can create a colored_area_image where we assign each pixel value the area by indexing the object_areas with the label values in labeled_image.</p>
<div class="cell" data-execution_count="61">
<div class="sourceCode cell-code" id="cb203" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb203-1">object_areas <span class="op" style="color: #5E5E5E;">=</span> np.array([objf[<span class="st" style="color: #20794D;">"area"</span>] <span class="cf" style="color: #003B4F;">for</span> objf <span class="kw" style="color: #003B4F;">in</span> skimage.measure.regionprops(labeled_image)])</span>
<span id="cb203-2">object_areas <span class="op" style="color: #5E5E5E;">=</span> np.insert(<span class="dv" style="color: #AD0000;">0</span>,<span class="dv" style="color: #AD0000;">1</span>,object_areas)</span>
<span id="cb203-3">colored_area_image <span class="op" style="color: #5E5E5E;">=</span> object_areas[labeled_image]</span>
<span id="cb203-4"></span>
<span id="cb203-5">fig, ax <span class="op" style="color: #5E5E5E;">=</span> plt.subplots()</span>
<span id="cb203-6">im <span class="op" style="color: #5E5E5E;">=</span> plt.imshow(colored_area_image)</span>
<span id="cb203-7">cbar <span class="op" style="color: #5E5E5E;">=</span> fig.colorbar(im, ax<span class="op" style="color: #5E5E5E;">=</span>ax, shrink<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.85</span>)</span>
<span id="cb203-8">cbar.ax.set_title(<span class="st" style="color: #20794D;">"Area"</span>)</span>
<span id="cb203-9">plt.axis(<span class="st" style="color: #20794D;">"off"</span>)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing_files/figure-html/cell-112-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>You may have noticed that in the solution, we have used the labeled_image to index the array object_areas. This is an example of <a href="https://numpy.org/doc/stable/user/basics.indexing.html#advanced-indexing">advanced indexing in NumPy</a>. The result is an array of the same shape as the labeled_image whose pixel values are selected from object_areas according to the object label. Hence the objects will be colored by area when the result is displayed. Note that advanced indexing with an integer array works slightly different than the indexing with a Boolean array that we have used for masking. While Boolean array indexing returns only the entries corresponding to the True values of the index, integer array indexing returns an array with the same shape as the index.</p>
<div class="callout-important callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Key Points:
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>we can use skimage.measure.label to find and label connected objects in an image</li>
<li>we can use skimage.measure.regionprops to measure properties of labeled objects</li>
<li>we can use skimage.morphology.remove_small_objects to mask small objects and remove artifacts from an image</li>
<li>we can display the labeled image to view the objects coloured by label</li>
</ul>
</div>
</div>


</section>
</section>

 ]]></description>
  <category>TIL</category>
  <category>Image</category>
  <category>Data Carpentry</category>
  <guid>https://stephen137.github.io/posts/Image_Processing_with_Python/Image_Processing.html</guid>
  <pubDate>Mon, 19 Dec 2022 23:00:00 GMT</pubDate>
  <media:content url="https://stephen137.github.io/posts/Image_Processing_with_Python/image.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
